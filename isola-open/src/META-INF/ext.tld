<?xml version="1.0" encoding="UTF-8"?>
<taglib xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd"
	version="2.0">
	<description>Isola Extjs Library</description>
	<display-name>Isola ExtJS</display-name>
	<tlib-version>1.1</tlib-version>
	<short-name>ext</short-name>
	<uri>http://www.turkcell.com.tr/taglibs/jsp/extjs</uri>
	<tag>
		<description>All pages must begin with this tag</description>
		<name>init</name>
		<tag-class> isola.tags.ext.helpers.InitTag </tag-class>
		<body-content>empty</body-content>
		<attribute>
			<description> Extjs theme to use. Defaults to gray </description>
			<name>theme</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
		</attribute>
		<attribute>
			<description> The CSS Path to use for the whole layout. Defaults to
				/static/ui/css </description>
			<name>cssPath</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
		</attribute>
		<attribute>
			<description> The Js Path to use for the whole layout. Defaults to
				/static/ui/js </description>
			<name>jsPath</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
		</attribute>
		<attribute>
			<description> The language Isola should be using. Defaults to "tr".
				Other possible values: en, en_UK, de, es, fr, it etc... 
			</description>
			<name>lang</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
		</attribute>
	</tag>
	<tag>
		<description> Used to start a new Extjs script. Do not use this for a
			replacement of a Html script tag. &lt;strong&gt;BECAUSE IT ISN'T&lt;/strong&gt;
		</description>
		<name>body</name>
		<tag-class>isola.tags.ext.helpers.ScriptTag</tag-class>
		<body-content>JSP</body-content>
        <attribute>
			<description>
				Boolean value to set if states be stored in a cookie or not. 
			</description>
            <name>storeSession</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
        </attribute>
        <attribute>
        	<description>
        		If set to true this script will be placed inside an Ext.onReady function
        		and run at page load. 
        	</description>
        	<name>runOnLoad</name>
        	<required>true</required>
            <rtexprvalue>true</rtexprvalue>
        </attribute>
	</tag>


	<tag>
		<description>
			&lt;p&gt;&lt;strong&gt;This tag is extended by other classes and should not be used directly.
			&lt;/strong&gt;&lt;/p&gt;
			&lt;p&gt;Base class for all Ext components. All subclasses of Component can automatically 
			participate in the standard Ext component lifecycle of creation, rendering and destruction. 
			They also have automatic support for basic hide/show and enable/disable behavior. 
			Component allows any subclass to be lazy-rendered into any Ext.Container and to be 
			automatically registered with the Ext.ComponentMgr so that it can be referenced 
			at any time via Ext.getCmp. All visual widgets that require rendering into a layout 
			should subclass Component (or Ext.BoxComponent if managed box model handling is 
			required).&lt;/p&gt;
			
			&lt;p&gt;Every component has a specific xtype, which is its Ext-specific type name, 
			along with methods for checking the xtype like getXType and isXType. This is the 
			list of all valid xtypes:&lt;/p&gt;

 

 &lt;pre&gt;

 xtype            Class

 -------------    ------------------

 box              Ext.BoxComponent

 button           Ext.Button

 colorpalette     Ext.ColorPalette

 component        Ext.Component

 container        Ext.Container

 cycle            Ext.CycleButton

 dataview         Ext.DataView

 datepicker       Ext.DatePicker

 editor           Ext.Editor

 editorgrid       Ext.grid.EditorGridPanel

 grid             Ext.grid.GridPanel

 paging           Ext.PagingToolbar

 panel            Ext.Panel

 progress         Ext.ProgressBar

 splitbutton      Ext.SplitButton

 tabpanel         Ext.TabPanel

 treepanel        Ext.tree.TreePanel

 viewport         Ext.ViewPort

 window           Ext.Window

 

 Toolbar components

 ---------------------------------------

 toolbar          Ext.Toolbar

 tbbutton         Ext.Toolbar.Button

 tbfill           Ext.Toolbar.Fill

 tbitem           Ext.Toolbar.Item

 tbseparator      Ext.Toolbar.Separator

 tbspacer         Ext.Toolbar.Spacer

 tbsplit          Ext.Toolbar.SplitButton

 tbtext           Ext.Toolbar.TextItem

 

 Form components

 ---------------------------------------

 form             Ext.FormPanel

 checkbox         Ext.form.Checkbox

 combo            Ext.form.ComboBox

 datefield        Ext.form.DateField

 field            Ext.form.Field

 fieldset         Ext.form.FieldSet

 hidden           Ext.form.Hidden

 htmleditor       Ext.form.HtmlEditor

 numberfield      Ext.form.NumberField

 radio            Ext.form.Radio

 textarea         Ext.form.TextArea

 textfield        Ext.form.TextField

 timefield        Ext.form.TimeField

 trigger          Ext.form.TriggerField

 lovfield         Ext.ux.form.LovField

 &lt;/pre&gt;</description>

		<name>component</name>

		<tag-class>isola.tags.ext.base.ComponentTag</tag-class>

		<body-content>empty</body-content>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Whether the component can move the Dom node when rendering (defaults to true).</description>

            <name>allowDomMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element corresponding 

 to a DIV that is already present in the document that specifies some 

 structural markup for this component. When applyTo is used, constituent 

 parts of the component can also be specified by id or CSS class name 

 within the main element, and the component being created may attempt to 

 create its subcomponents from that markup if applicable. Using this 

 config, a call to render() is not required. If applyTo is specified, 

 any value passed for renderTo will be ignored and the target element's 

 parent node will automatically be used as the component's container.</description>

            <name>applyTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the component should check for hidden classes (e.g. 'x-hidden' 

 or 'x-hide-display') and remove them on render (defaults to false).</description>

            <name>autoShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 Element (defaults to ''). This can be useful for adding customized styles 

 to the component or any of its children using standard CSS rules.</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 container (defaults to ''). This can be useful for adding customized 

 styles to the container or any of its children using standard CSS rules.</description>

            <name>ctCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class added to the component when it is disabled (defaults to 

 "x-item-disabled").</description>

            <name>disabledClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide and show the component's container when hide/show is 

 called on the component, false to hide and show the component itself 

 (defaults to false). For example, this can be used as a shortcut 

 for a hide button on a window by setting hide:true on the button when 

 adding it to its parent container.</description>

            <name>hideParent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id of this component (defaults to an auto-assigned id).</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element that will be the 

 container to render this component into. Using this config, a call to 

 render() is not required.</description>

            <name>renderTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id for this component to use for state management purposes 

 (defaults to the component id). See stateful for an explanation of saving 

 and restoring Component state.</description>

            <name>stateId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;A flag which causes the Component to attempt to restore the state of 

 internal properties from a saved state on startup.&lt;/p&gt;

 

 &lt;p&gt;For state saving to work, the state manager's provider must have been 

 set to an implementation of Ext.state.Provider which overrides the set 

 and get methods to save and recall name/value pairs. A built-in 

 implementation, Ext.state.CookieProvider is available.&lt;/p&gt;

 

 &lt;p&gt;To set the state provider for the current page:&lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;Components attempt to save state when one of the events listed in the stateEvents 

 configuration fires.&lt;/p&gt;

 

 &lt;p&gt;You can perform extra processing on state save and restore by attaching 

 handlers to the beforestaterestore, staterestore, beforestatesave and statesave 

 events.&lt;/p&gt;</description>

            <name>stateful</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom style specification to be applied to this component's Element. Should 

 be a valid argument to Ext.Element.applyStyles.</description>

            <name>style</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Where to place this component. Valid values are south, north, west, east, center</description>

            <name>region</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>How this component should hidden. Supported values are "visibility" 

 (css visibility), "offsets" (negative offset position) and "display" 

 (css display) - defaults to "display".</description>

            <name>hideMode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is destroyed. Return false to stop the destroy.&lt;p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is hidden. Return false to stop the hide.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is rendered. Return false to stop the render. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is shown. Return false to stop the show. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is restored. Return false to stop the restore.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is saved to the 

 configured state provider. Return false to stop the save. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is destroyed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is disabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is enabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEnable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is hidden. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is rendered.  &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is shown.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is restored. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is saved to the configured state provider. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>Base class for any visual Ext.Component that uses a box container. 

 BoxComponent provides automatic box model adjustments for sizing and 

 positioning and will work correctly withnin the Component rendering model. 

 All container classes should subclass BoxComponent so that they will work 

 consistently when nested within other Ext layout containers.</description>

		<name>boxComponent</name>

		<tag-class>isola.tags.ext.container.BoxComponentTag</tag-class>

		<body-content>empty</body-content>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Whether the component can move the Dom node when rendering (defaults to true).</description>

            <name>allowDomMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element corresponding 

 to a DIV that is already present in the document that specifies some 

 structural markup for this component. When applyTo is used, constituent 

 parts of the component can also be specified by id or CSS class name 

 within the main element, and the component being created may attempt to 

 create its subcomponents from that markup if applicable. Using this 

 config, a call to render() is not required. If applyTo is specified, 

 any value passed for renderTo will be ignored and the target element's 

 parent node will automatically be used as the component's container.</description>

            <name>applyTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the component should check for hidden classes (e.g. 'x-hidden' 

 or 'x-hide-display') and remove them on render (defaults to false).</description>

            <name>autoShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 Element (defaults to ''). This can be useful for adding customized styles 

 to the component or any of its children using standard CSS rules.</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 container (defaults to ''). This can be useful for adding customized 

 styles to the container or any of its children using standard CSS rules.</description>

            <name>ctCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class added to the component when it is disabled (defaults to 

 "x-item-disabled").</description>

            <name>disabledClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide and show the component's container when hide/show is 

 called on the component, false to hide and show the component itself 

 (defaults to false). For example, this can be used as a shortcut 

 for a hide button on a window by setting hide:true on the button when 

 adding it to its parent container.</description>

            <name>hideParent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id of this component (defaults to an auto-assigned id).</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element that will be the 

 container to render this component into. Using this config, a call to 

 render() is not required.</description>

            <name>renderTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id for this component to use for state management purposes 

 (defaults to the component id). See stateful for an explanation of saving 

 and restoring Component state.</description>

            <name>stateId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;A flag which causes the Component to attempt to restore the state of 

 internal properties from a saved state on startup.&lt;/p&gt;

 

 &lt;p&gt;For state saving to work, the state manager's provider must have been 

 set to an implementation of Ext.state.Provider which overrides the set 

 and get methods to save and recall name/value pairs. A built-in 

 implementation, Ext.state.CookieProvider is available.&lt;/p&gt;

 

 &lt;p&gt;To set the state provider for the current page:&lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;Components attempt to save state when one of the events listed in the stateEvents 

 configuration fires.&lt;/p&gt;

 

 &lt;p&gt;You can perform extra processing on state save and restore by attaching 

 handlers to the beforestaterestore, staterestore, beforestatesave and statesave 

 events.&lt;/p&gt;</description>

            <name>stateful</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom style specification to be applied to this component's Element. Should 

 be a valid argument to Ext.Element.applyStyles.</description>

            <name>style</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Where to place this component. Valid values are south, north, west, east, center</description>

            <name>region</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>How this component should hidden. Supported values are "visibility" 

 (css visibility), "offsets" (negative offset position) and "display" 

 (css display) - defaults to "display".</description>

            <name>hideMode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use height:'auto', false to use fixed height (defaults to false).</description>

            <name>autoHeight</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use width:'auto', false to use fixed width (defaults to false).</description>

            <name>autoWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The height of this component in pixels (defaults to auto).</description>

            <name>height</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width of this component in pixels (defaults to auto).</description>

            <name>width</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>HTML Element this object is parsed on.</description>

            <name>el</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is destroyed. Return false to stop the destroy.&lt;p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is hidden. Return false to stop the hide.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is rendered. Return false to stop the render. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is shown. Return false to stop the show. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is restored. Return false to stop the restore.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is saved to the 

 configured state provider. Return false to stop the save. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is destroyed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is disabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is enabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEnable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is hidden. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is rendered.  &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is shown.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is restored. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is saved to the configured state provider. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is moved. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;x&lt;/strong&gt;: (Number)The new x position&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;y&lt;/strong&gt;: (Number)The new y position&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is resized.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjWidth&lt;/strong&gt;:(Number) The box-adjusted width that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjHeight&lt;/strong&gt;:(Number) The box-adjusted height that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawWidth&lt;/strong&gt;:(Number) The width that was originally specified&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawHeight&lt;/strong&gt;:(Number) The height that was originally specified&lt;/li&gt; 		

 &lt;/ul&gt;</description>

            <name>onResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>Base class for any Ext.BoxComponent that can contain other components. Containers 

 handle the basic behavior of containing items, namely adding, inserting and 

 removing them. The specific layout logic required to visually render contained 

 items is delegated to any one of the different layout classes available. 

 This class is intended to be extended and should generally not need to be 

 created directly via the new keyword.</description>

		<name>container</name>

		<tag-class>isola.tags.ext.base.ContainerTag</tag-class>

		<body-content>JSP</body-content>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Whether the component can move the Dom node when rendering (defaults to true).</description>

            <name>allowDomMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element corresponding 

 to a DIV that is already present in the document that specifies some 

 structural markup for this component. When applyTo is used, constituent 

 parts of the component can also be specified by id or CSS class name 

 within the main element, and the component being created may attempt to 

 create its subcomponents from that markup if applicable. Using this 

 config, a call to render() is not required. If applyTo is specified, 

 any value passed for renderTo will be ignored and the target element's 

 parent node will automatically be used as the component's container.</description>

            <name>applyTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the component should check for hidden classes (e.g. 'x-hidden' 

 or 'x-hide-display') and remove them on render (defaults to false).</description>

            <name>autoShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 Element (defaults to ''). This can be useful for adding customized styles 

 to the component or any of its children using standard CSS rules.</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 container (defaults to ''). This can be useful for adding customized 

 styles to the container or any of its children using standard CSS rules.</description>

            <name>ctCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class added to the component when it is disabled (defaults to 

 "x-item-disabled").</description>

            <name>disabledClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide and show the component's container when hide/show is 

 called on the component, false to hide and show the component itself 

 (defaults to false). For example, this can be used as a shortcut 

 for a hide button on a window by setting hide:true on the button when 

 adding it to its parent container.</description>

            <name>hideParent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id of this component (defaults to an auto-assigned id).</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element that will be the 

 container to render this component into. Using this config, a call to 

 render() is not required.</description>

            <name>renderTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id for this component to use for state management purposes 

 (defaults to the component id). See stateful for an explanation of saving 

 and restoring Component state.</description>

            <name>stateId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;A flag which causes the Component to attempt to restore the state of 

 internal properties from a saved state on startup.&lt;/p&gt;

 

 &lt;p&gt;For state saving to work, the state manager's provider must have been 

 set to an implementation of Ext.state.Provider which overrides the set 

 and get methods to save and recall name/value pairs. A built-in 

 implementation, Ext.state.CookieProvider is available.&lt;/p&gt;

 

 &lt;p&gt;To set the state provider for the current page:&lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;Components attempt to save state when one of the events listed in the stateEvents 

 configuration fires.&lt;/p&gt;

 

 &lt;p&gt;You can perform extra processing on state save and restore by attaching 

 handlers to the beforestaterestore, staterestore, beforestatesave and statesave 

 events.&lt;/p&gt;</description>

            <name>stateful</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom style specification to be applied to this component's Element. Should 

 be a valid argument to Ext.Element.applyStyles.</description>

            <name>style</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Where to place this component. Valid values are south, north, west, east, center</description>

            <name>region</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>How this component should hidden. Supported values are "visibility" 

 (css visibility), "offsets" (negative offset position) and "display" 

 (css display) - defaults to "display".</description>

            <name>hideMode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use height:'auto', false to use fixed height (defaults to false).</description>

            <name>autoHeight</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use width:'auto', false to use fixed width (defaults to false).</description>

            <name>autoWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The height of this component in pixels (defaults to auto).</description>

            <name>height</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width of this component in pixels (defaults to auto).</description>

            <name>width</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>HTML Element this object is parsed on.</description>

            <name>el</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A string component id or the numeric index of the component that should be 

 initially activated within the container's layout on render. For example, 

 activeItem: 'item-1' or activeItem: 0 (index 0 = the first item in the 

 container's collection). activeItem only applies to layout styles that can 

 display items one at a time (like Ext.layout.Accordion, 

 Ext.layout.CardLayout and Ext.layout.FitLayout). 

 Related to Ext.layout.ContainerLayout.activeItem.</description>

            <name>activeItem</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If true the container will automatically destroy any contained component 

 that is removed from it, else destruction must be handled manually 

 (defaults to true).</description>

            <name>autoDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>When set to true (100 milliseconds) or a number of milliseconds, the 

 layout assigned for this container will buffer the frequency it calculates 

 and does a re-layout of components. This is useful for heavy containers 

 or containers with a large amount of sub components that frequent calls 

 to layout are expensive.</description>

            <name>bufferResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default type of container represented by this object as registered 

  in Ext.ComponentMgr (defaults to 'panel').</description>

            <name>defaultType</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the borders of each contained component, false to defer to the 

 component's existing border settings (defaults to false).</description>

            <name>hideBorders</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;The layout type to be used in this container. If not specified, a default 

 Ext.layout.ContainerLayout will be created and used. 

 

 &lt;p&gt;Valid values are:&lt;/p&gt;

 &lt;ul&gt;

 &lt;li&gt;accordion, &lt;/li&gt;

 &lt;li&gt;anchor, &lt;/li&gt; 

 &lt;li&gt;border,&lt;/li&gt; 

 &lt;li&gt;card,&lt;/li&gt; 

 &lt;li&gt;column,&lt;/li&gt; 

 &lt;li&gt;fit,&lt;/li&gt; 

 &lt;li&gt;form&lt;/li&gt;

 &lt;li&gt;table.&lt;/li&gt; 

 &lt;/ul&gt;

 &lt;p&gt;Specific config values for the chosen layout type can be specified using 

 layoutConfig.&lt;/p&gt;</description>

            <name>layout</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to automatically monitor window resize events to handle anything that is 

 sensitive to the current size of the viewport. This value is typically managed 

 by the chosen layout and should not need to be set manually.</description>

            <name>monitorResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is destroyed. Return false to stop the destroy.&lt;p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is hidden. Return false to stop the hide.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is rendered. Return false to stop the render. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is shown. Return false to stop the show. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is restored. Return false to stop the restore.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is saved to the 

 configured state provider. Return false to stop the save. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is destroyed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is disabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is enabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEnable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is hidden. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is rendered.  &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is shown.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is restored. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is saved to the configured state provider. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is moved. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;x&lt;/strong&gt;: (Number)The new x position&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;y&lt;/strong&gt;: (Number)The new y position&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is resized.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjWidth&lt;/strong&gt;:(Number) The box-adjusted width that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjHeight&lt;/strong&gt;:(Number) The box-adjusted height that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawWidth&lt;/strong&gt;:(Number) The width that was originally specified&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawHeight&lt;/strong&gt;:(Number) The height that was originally specified&lt;/li&gt; 		

 &lt;/ul&gt;</description>

            <name>onResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after any Ext.Component is added or inserted into the container.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;:(Ext.Component) The component that was added&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the component was added to the container's items collection&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAdd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the components in this container are arranged by the associated layout manager. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;layout&lt;/strong&gt;:(ContainerLayout) The ContainerLayout implementation for this container&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAfterLayout</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before any Ext.Component is added or inserted into the container. A handler can return false to cancel the add.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;:(Ext.Component) The component being added&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the component will be added to the container's items collection&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeAdd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before any Ext.Component is removed from the container. A handler can return false to cancel the remove. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: (Ext.Component) The component being removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after any Ext.Component is removed from the container&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: (Ext.Component) The component that was removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>&lt;p&gt;A specialized container representing the viewable application area (the browser viewport).&lt;/p&gt;

 

 &lt;p&gt;The Viewport renders itself to the document body, and automatically sizes itself to the 

 size of the browser viewport and manages window resizing. There may only be one Viewport 

 created in a page. Inner layouts are available by virtue of the fact that all Panels 

 added to the Viewport, either through its items, or through the items, or the add method 

 of any of its child Panels may themselves have a layout.&lt;/p&gt;

 

 &lt;p&gt;The Viewport does not provide scrolling, so child Panels within the Viewport should 

 provide for scrolling if needed using the autoScroll config.&lt;/p&gt;

 

 &lt;p&gt;Example showing a classic application border layout :&lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 new Ext.Viewport({

     layout: 'border',

     defaults: {

         activeItem: 0

     },

     items: [{

         region: 'north',

         html: '&amp;lt;h1 class="x-panel-header"&amp;gt;Page Title&amp;lt;/h1&amp;gt;',

         autoHeight: true,

         border: false,

         margins: '0 0 5 0'

     }, {

         region: 'west',

         collapsible: true,

         title: 'Navigation',

         xtype: 'treepanel',

         width: 200,

         autoScroll: true,

         split: true,

         loader: new Ext.tree.TreeLoader(),

         root: new Ext.tree.AsyncTreeNode({

             expanded: true,

             children: [{

                 text: 'Menu Option 1',

                 leaf: true

             }, {

                 text: 'Menu Option 2',

                 leaf: true

             }, {

                 text: 'Menu Option 3',

                 leaf: true

             }]

         }),

         rootVisible: false,

         listeners: {

             click: function(n) {

                 Ext.Msg.alert('Navigation Tree Click', 'You clicked: "' + n.attributes.text + '"');

             }

         }

     }, {

         region: 'center',

         xtype: 'tabpanel',

         items: {

             title: 'Default Tab',

             html: 'The first tab\'s content. Others may be added dynamically'

         }

     }, {

         region: 'south',

         title: 'Information',

         collapsible: true,

         html: 'Information goes here',

         split: true,

         height: 100,

         minHeight: 100

     }]

 });

 &lt;/code&gt;&lt;/pre&gt;</description>

		<name>viewPort</name>

		<tag-class>isola.tags.ext.container.ViewPortTag</tag-class>

		<body-content>JSP</body-content>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Whether the component can move the Dom node when rendering (defaults to true).</description>

            <name>allowDomMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element corresponding 

 to a DIV that is already present in the document that specifies some 

 structural markup for this component. When applyTo is used, constituent 

 parts of the component can also be specified by id or CSS class name 

 within the main element, and the component being created may attempt to 

 create its subcomponents from that markup if applicable. Using this 

 config, a call to render() is not required. If applyTo is specified, 

 any value passed for renderTo will be ignored and the target element's 

 parent node will automatically be used as the component's container.</description>

            <name>applyTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the component should check for hidden classes (e.g. 'x-hidden' 

 or 'x-hide-display') and remove them on render (defaults to false).</description>

            <name>autoShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 Element (defaults to ''). This can be useful for adding customized styles 

 to the component or any of its children using standard CSS rules.</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 container (defaults to ''). This can be useful for adding customized 

 styles to the container or any of its children using standard CSS rules.</description>

            <name>ctCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class added to the component when it is disabled (defaults to 

 "x-item-disabled").</description>

            <name>disabledClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide and show the component's container when hide/show is 

 called on the component, false to hide and show the component itself 

 (defaults to false). For example, this can be used as a shortcut 

 for a hide button on a window by setting hide:true on the button when 

 adding it to its parent container.</description>

            <name>hideParent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id of this component (defaults to an auto-assigned id).</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element that will be the 

 container to render this component into. Using this config, a call to 

 render() is not required.</description>

            <name>renderTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id for this component to use for state management purposes 

 (defaults to the component id). See stateful for an explanation of saving 

 and restoring Component state.</description>

            <name>stateId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;A flag which causes the Component to attempt to restore the state of 

 internal properties from a saved state on startup.&lt;/p&gt;

 

 &lt;p&gt;For state saving to work, the state manager's provider must have been 

 set to an implementation of Ext.state.Provider which overrides the set 

 and get methods to save and recall name/value pairs. A built-in 

 implementation, Ext.state.CookieProvider is available.&lt;/p&gt;

 

 &lt;p&gt;To set the state provider for the current page:&lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;Components attempt to save state when one of the events listed in the stateEvents 

 configuration fires.&lt;/p&gt;

 

 &lt;p&gt;You can perform extra processing on state save and restore by attaching 

 handlers to the beforestaterestore, staterestore, beforestatesave and statesave 

 events.&lt;/p&gt;</description>

            <name>stateful</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom style specification to be applied to this component's Element. Should 

 be a valid argument to Ext.Element.applyStyles.</description>

            <name>style</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Where to place this component. Valid values are south, north, west, east, center</description>

            <name>region</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>How this component should hidden. Supported values are "visibility" 

 (css visibility), "offsets" (negative offset position) and "display" 

 (css display) - defaults to "display".</description>

            <name>hideMode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use height:'auto', false to use fixed height (defaults to false).</description>

            <name>autoHeight</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use width:'auto', false to use fixed width (defaults to false).</description>

            <name>autoWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The height of this component in pixels (defaults to auto).</description>

            <name>height</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width of this component in pixels (defaults to auto).</description>

            <name>width</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>HTML Element this object is parsed on.</description>

            <name>el</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A string component id or the numeric index of the component that should be 

 initially activated within the container's layout on render. For example, 

 activeItem: 'item-1' or activeItem: 0 (index 0 = the first item in the 

 container's collection). activeItem only applies to layout styles that can 

 display items one at a time (like Ext.layout.Accordion, 

 Ext.layout.CardLayout and Ext.layout.FitLayout). 

 Related to Ext.layout.ContainerLayout.activeItem.</description>

            <name>activeItem</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If true the container will automatically destroy any contained component 

 that is removed from it, else destruction must be handled manually 

 (defaults to true).</description>

            <name>autoDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>When set to true (100 milliseconds) or a number of milliseconds, the 

 layout assigned for this container will buffer the frequency it calculates 

 and does a re-layout of components. This is useful for heavy containers 

 or containers with a large amount of sub components that frequent calls 

 to layout are expensive.</description>

            <name>bufferResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default type of container represented by this object as registered 

  in Ext.ComponentMgr (defaults to 'panel').</description>

            <name>defaultType</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the borders of each contained component, false to defer to the 

 component's existing border settings (defaults to false).</description>

            <name>hideBorders</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;The layout type to be used in this container. If not specified, a default 

 Ext.layout.ContainerLayout will be created and used. 

 

 &lt;p&gt;Valid values are:&lt;/p&gt;

 &lt;ul&gt;

 &lt;li&gt;accordion, &lt;/li&gt;

 &lt;li&gt;anchor, &lt;/li&gt; 

 &lt;li&gt;border,&lt;/li&gt; 

 &lt;li&gt;card,&lt;/li&gt; 

 &lt;li&gt;column,&lt;/li&gt; 

 &lt;li&gt;fit,&lt;/li&gt; 

 &lt;li&gt;form&lt;/li&gt;

 &lt;li&gt;table.&lt;/li&gt; 

 &lt;/ul&gt;

 &lt;p&gt;Specific config values for the chosen layout type can be specified using 

 layoutConfig.&lt;/p&gt;</description>

            <name>layout</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to automatically monitor window resize events to handle anything that is 

 sensitive to the current size of the viewport. This value is typically managed 

 by the chosen layout and should not need to be set manually.</description>

            <name>monitorResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is destroyed. Return false to stop the destroy.&lt;p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is hidden. Return false to stop the hide.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is rendered. Return false to stop the render. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is shown. Return false to stop the show. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is restored. Return false to stop the restore.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is saved to the 

 configured state provider. Return false to stop the save. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is destroyed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is disabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is enabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEnable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is hidden. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is rendered.  &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is shown.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is restored. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is saved to the configured state provider. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is moved. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;x&lt;/strong&gt;: (Number)The new x position&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;y&lt;/strong&gt;: (Number)The new y position&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is resized.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjWidth&lt;/strong&gt;:(Number) The box-adjusted width that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjHeight&lt;/strong&gt;:(Number) The box-adjusted height that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawWidth&lt;/strong&gt;:(Number) The width that was originally specified&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawHeight&lt;/strong&gt;:(Number) The height that was originally specified&lt;/li&gt; 		

 &lt;/ul&gt;</description>

            <name>onResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after any Ext.Component is added or inserted into the container.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;:(Ext.Component) The component that was added&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the component was added to the container's items collection&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAdd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the components in this container are arranged by the associated layout manager. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;layout&lt;/strong&gt;:(ContainerLayout) The ContainerLayout implementation for this container&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAfterLayout</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before any Ext.Component is added or inserted into the container. A handler can return false to cancel the add.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;:(Ext.Component) The component being added&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the component will be added to the container's items collection&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeAdd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before any Ext.Component is removed from the container. A handler can return false to cancel the remove. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: (Ext.Component) The component being removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after any Ext.Component is removed from the container&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: (Ext.Component) The component that was removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>Panel is a container that has specific functionality and structural components 

 that make it the perfect building block for application-oriented user interfaces. 

 The Panel contains bottom and top toolbars, along with separate header, footer 

 and body sections. It also provides built-in expandable and collapsible 

 behavior, along with a variety of prebuilt tool buttons that can be wired up to 

 provide other customized behavior. Panels can be easily dropped into any 

 Container or layout, and the layout and rendering pipeline is completely managed 

 by the framework.</description>

		<name>panel</name>

		<tag-class>isola.tags.ext.container.PanelTag</tag-class>

		<body-content>JSP</body-content>

		<attribute>

            <name>columns</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Whether the component can move the Dom node when rendering (defaults to true).</description>

            <name>allowDomMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element corresponding 

 to a DIV that is already present in the document that specifies some 

 structural markup for this component. When applyTo is used, constituent 

 parts of the component can also be specified by id or CSS class name 

 within the main element, and the component being created may attempt to 

 create its subcomponents from that markup if applicable. Using this 

 config, a call to render() is not required. If applyTo is specified, 

 any value passed for renderTo will be ignored and the target element's 

 parent node will automatically be used as the component's container.</description>

            <name>applyTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the component should check for hidden classes (e.g. 'x-hidden' 

 or 'x-hide-display') and remove them on render (defaults to false).</description>

            <name>autoShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 Element (defaults to ''). This can be useful for adding customized styles 

 to the component or any of its children using standard CSS rules.</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 container (defaults to ''). This can be useful for adding customized 

 styles to the container or any of its children using standard CSS rules.</description>

            <name>ctCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class added to the component when it is disabled (defaults to 

 "x-item-disabled").</description>

            <name>disabledClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide and show the component's container when hide/show is 

 called on the component, false to hide and show the component itself 

 (defaults to false). For example, this can be used as a shortcut 

 for a hide button on a window by setting hide:true on the button when 

 adding it to its parent container.</description>

            <name>hideParent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id of this component (defaults to an auto-assigned id).</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element that will be the 

 container to render this component into. Using this config, a call to 

 render() is not required.</description>

            <name>renderTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id for this component to use for state management purposes 

 (defaults to the component id). See stateful for an explanation of saving 

 and restoring Component state.</description>

            <name>stateId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;A flag which causes the Component to attempt to restore the state of 

 internal properties from a saved state on startup.&lt;/p&gt;

 

 &lt;p&gt;For state saving to work, the state manager's provider must have been 

 set to an implementation of Ext.state.Provider which overrides the set 

 and get methods to save and recall name/value pairs. A built-in 

 implementation, Ext.state.CookieProvider is available.&lt;/p&gt;

 

 &lt;p&gt;To set the state provider for the current page:&lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;Components attempt to save state when one of the events listed in the stateEvents 

 configuration fires.&lt;/p&gt;

 

 &lt;p&gt;You can perform extra processing on state save and restore by attaching 

 handlers to the beforestaterestore, staterestore, beforestatesave and statesave 

 events.&lt;/p&gt;</description>

            <name>stateful</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom style specification to be applied to this component's Element. Should 

 be a valid argument to Ext.Element.applyStyles.</description>

            <name>style</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Where to place this component. Valid values are south, north, west, east, center</description>

            <name>region</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>How this component should hidden. Supported values are "visibility" 

 (css visibility), "offsets" (negative offset position) and "display" 

 (css display) - defaults to "display".</description>

            <name>hideMode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use height:'auto', false to use fixed height (defaults to false).</description>

            <name>autoHeight</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use width:'auto', false to use fixed width (defaults to false).</description>

            <name>autoWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The height of this component in pixels (defaults to auto).</description>

            <name>height</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width of this component in pixels (defaults to auto).</description>

            <name>width</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>HTML Element this object is parsed on.</description>

            <name>el</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A string component id or the numeric index of the component that should be 

 initially activated within the container's layout on render. For example, 

 activeItem: 'item-1' or activeItem: 0 (index 0 = the first item in the 

 container's collection). activeItem only applies to layout styles that can 

 display items one at a time (like Ext.layout.Accordion, 

 Ext.layout.CardLayout and Ext.layout.FitLayout). 

 Related to Ext.layout.ContainerLayout.activeItem.</description>

            <name>activeItem</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If true the container will automatically destroy any contained component 

 that is removed from it, else destruction must be handled manually 

 (defaults to true).</description>

            <name>autoDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>When set to true (100 milliseconds) or a number of milliseconds, the 

 layout assigned for this container will buffer the frequency it calculates 

 and does a re-layout of components. This is useful for heavy containers 

 or containers with a large amount of sub components that frequent calls 

 to layout are expensive.</description>

            <name>bufferResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default type of container represented by this object as registered 

  in Ext.ComponentMgr (defaults to 'panel').</description>

            <name>defaultType</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the borders of each contained component, false to defer to the 

 component's existing border settings (defaults to false).</description>

            <name>hideBorders</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;The layout type to be used in this container. If not specified, a default 

 Ext.layout.ContainerLayout will be created and used. 

 

 &lt;p&gt;Valid values are:&lt;/p&gt;

 &lt;ul&gt;

 &lt;li&gt;accordion, &lt;/li&gt;

 &lt;li&gt;anchor, &lt;/li&gt; 

 &lt;li&gt;border,&lt;/li&gt; 

 &lt;li&gt;card,&lt;/li&gt; 

 &lt;li&gt;column,&lt;/li&gt; 

 &lt;li&gt;fit,&lt;/li&gt; 

 &lt;li&gt;form&lt;/li&gt;

 &lt;li&gt;table.&lt;/li&gt; 

 &lt;/ul&gt;

 &lt;p&gt;Specific config values for the chosen layout type can be specified using 

 layoutConfig.&lt;/p&gt;</description>

            <name>layout</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to automatically monitor window resize events to handle anything that is 

 sensitive to the current size of the viewport. This value is typically managed 

 by the chosen layout and should not need to be set manually.</description>

            <name>monitorResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to animate the transition when the panel is collapsed, false to skip 

 the animation (defaults to true if the Ext.Fx class is available, otherwise 

 false).</description>

            <name>animCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use overflow:'auto' on the panel's body element and show scroll bars 

 automatically when necessary, false to clip any overflowing content 

 (defaults to false).</description>

            <name>autoScroll</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The base CSS class to apply to this panel's element (defaults to 'x-panel').</description>

            <name>baseCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display an interior border on the body element of the panel, false 

 to hide it (defaults to true). This only applies when border == true. If 

 border == true and bodyBorder == false, the border will display as a 1px 

 wide inset border, giving the entire body element an inset appearance.</description>

            <name>bodyBorder</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Custom CSS styles to be applied to the body element in the format expected 

 by Ext.Element.applyStyles (defaults to null).</description>

            <name>bodyStyle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display the borders of the panel's body element, false to hide them 

 (defaults to true). By default, the border is a 2px wide inset border, but 

 this can be further altered by setting bodyBorder to false.</description>

            <name>border</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>When set to true (100 milliseconds) or a number of milliseconds, the 

 layout assigned for this container will buffer the frequency it calculates 

 and does a re-layout of components. This is useful for heavy containers 

 or containers with a large amount of sub components that frequent calls 

 to layout are expensive.</description>

            <name>bufferResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The alignment of any buttons added to this panel. Valid values are 'right,' 

 'left' and 'center' (defaults to 'right').</description>

            <name>buttonAlign</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to make sure the collapse/expand toggle button always renders first (to 

 the left of) any other tools in the panel's title bar, false to render it 

 last (defaults to true).</description>

            <name>collapseFirst</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to render the panel collapsed, false to render it expanded (defaults to false).</description>

            <name>collapsed</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS class to add to the panel's element after it has been collapsed (defaults 

 to 'x-panel-collapsed').</description>

            <name>collapsedCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to make the panel collapsible and have the expand/collapse toggle button 

 automatically rendered into the header tool button area, false to keep the 

 panel statically sized with no button (defaults to false).</description>

            <name>collapsible</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of an existing HTML node to use as the panel's body content (defaults to '').</description>

            <name>contentEl</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to enable dragging of this Panel (defaults to false). For custom drag/drop 

 implementations, an Ext.Panel.DD config could also be passed in this config 

 instead of true, although Ext.Panel.DD is an internal, undocumented class.</description>

            <name>draggable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A comma-delimited list of panel elements to initialize when the panel is 

 rendered. Normally, this list will be generated automatically based on the items 

 added to the panel at config time, but sometimes it might be useful to make 

 sure a structural element is rendered even if not specified at config time 

 (for example, you may want to add a button or toolbar dynamically after the 

 panel has been rendered). Adding those elements to this list will allocate 

 the required placeholders in the panel when it is rendered. 

 Valid values are

 &lt;ul&gt;

 &lt;li&gt;header&lt;/li&gt;

 &lt;li&gt;tbar (top bar)&lt;/li&gt;

 &lt;li&gt;body&lt;/li&gt;

 &lt;li&gt;bbar (bottom bar)&lt;/li&gt;

 &lt;li&gt;footer&lt;/li&gt;

 &lt;/ul&gt;

 Defaults to 'body'.</description>

            <name>elements</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to float the panel (absolute position it with automatic shimming and shadow), 

 false to display it inline where it is rendered (defaults to false). Note that 

 by default, setting floating to true will cause the panel to display at negative 

 offsets so that it is hidden -- because the panel is absolute positioned, the 

 position must be set explicitly after render (e.g., myPanel.setPosition(100,100);). 

 Also, when floating a panel you should always assign a fixed width, otherwise it 

 will be auto width and will expand to fill to the right edge of the viewport.</description>

            <name>floating</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to create the footer element explicitly, false to skip creating it. By 

 default, when footer is not specified, if one or more buttons have been added 

 to the panel the footer will be created automatically, otherwise it will not.</description>

            <name>footer</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Shows a nice rounded corner with a thick border around the panel.</description>

            <name>frame</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to create the header element explicitly, false to skip creating it. By 

 default, when header is not specified, if a title is set the header will be 

 created automatically, otherwise it will not. If a title is set but header is 

 explicitly set to false, the header will not be rendered.</description>

            <name>header</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display the panel title in the header, false to hide it (defaults to true).</description>

            <name>headerAsText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the expand/collapse toggle button when collapsible = true, false 

 to display it (defaults to false).</description>

            <name>hideCollapseTool</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An HTML fragment, or a DomHelper specification to use as the panel's body 

 content (defaults to '').</description>

            <name>html</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS class that will provide a background image to be used as the panel header 

 icon (defaults to '').</description>

            <name>iconCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to mask the panel when it is disabled, false to not mask it (defaults 

 to true). Either way, the panel will always tell its contained elements to 

 disable themselves when it is disabled, but masking the panel can provide an 

 additional visual cue that the panel is disabled.</description>

            <name>maskDisabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Minimum width in pixels of all buttons in this panel (defaults to 75)</description>

            <name>minButtonWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True (or a valid Ext.Shadow Ext.Shadow.mode value) to display a shadow behind 

 the panel, false to display no shadow (defaults to 'sides'). Note that this 

 option only applies when floating = true.</description>

            <name>shadow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The number of pixels to offset the shadow if displayed (defaults to 4). Note 

 that this option only applies when floating = true.</description>

            <name>shadowOffset</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>False to disable the iframe shim in browsers which need one (defaults to true). 

 Note that this option only applies when floating = true.</description>

            <name>shim</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Adds a tooltip when mousing over the tab of a Ext.Panel which is an item of a 

 Ext.TabPanel. Ext.QuickTips.init() must be called in order for the tips to render.</description>

            <name>tabTip</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The title text to display in the panel header (defaults to ''). When a title 

 is specified the header element will automatically be created and displayed 

 unless header is explicitly set to false. If you don't want to specify a title 

 at config time, but you may want one later, you must either specify a non-empty 

 title (a blank space ' ' will do) or header:true so that the container element 

 will get created.</description>

            <name>title</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to allow expanding and collapsing the panel (when collapsible = true) 

 by clicking anywhere in the header bar, false to allow it only by clicking to 

 tool button (defaults to false).</description>

            <name>titleCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If border layout is used then you can set this option to true to place a splitbar 

 between the panels.</description>

            <name>split</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>xtype</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If anchor layout is used you can set an anchor value here.</description>

            <name>anchor</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If absolute layout is used you can set an absolute X position in pixels to place the component in

 the layout.</description>

            <name>x</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If absolute layout is used you can set an absolute Y position in pixels to place the component in

 the layout.</description>

            <name>y</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If column layout is used you can give a float column width from 0 to 1. Valid example: .5</description>

            <name>columnWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If table layout is used you can set rowspan as in an ordinary table.</description>

            <name>rowSpan</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If table layout is used you can set colspan as in an ordinary table.</description>

            <name>colSpan</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is destroyed. Return false to stop the destroy.&lt;p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is hidden. Return false to stop the hide.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is rendered. Return false to stop the render. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is shown. Return false to stop the show. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is restored. Return false to stop the restore.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is saved to the 

 configured state provider. Return false to stop the save. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is destroyed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is disabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is enabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEnable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is hidden. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is rendered.  &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is shown.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is restored. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is saved to the configured state provider. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is moved. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;x&lt;/strong&gt;: (Number)The new x position&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;y&lt;/strong&gt;: (Number)The new y position&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is resized.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjWidth&lt;/strong&gt;:(Number) The box-adjusted width that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjHeight&lt;/strong&gt;:(Number) The box-adjusted height that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawWidth&lt;/strong&gt;:(Number) The width that was originally specified&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawHeight&lt;/strong&gt;:(Number) The height that was originally specified&lt;/li&gt; 		

 &lt;/ul&gt;</description>

            <name>onResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after any Ext.Component is added or inserted into the container.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;:(Ext.Component) The component that was added&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the component was added to the container's items collection&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAdd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the components in this container are arranged by the associated layout manager. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;layout&lt;/strong&gt;:(ContainerLayout) The ContainerLayout implementation for this container&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAfterLayout</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before any Ext.Component is added or inserted into the container. A handler can return false to cancel the add.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;:(Ext.Component) The component being added&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the component will be added to the container's items collection&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeAdd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before any Ext.Component is removed from the container. A handler can return false to cancel the remove. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: (Ext.Component) The component being removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after any Ext.Component is removed from the container&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: (Ext.Component) The component that was removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been visually activated. Note that Panels do not directly support 

 being activated, but some Panel subclasses do (like Ext.Window). Panels which are child Components 

 of a TabPanel fire the activate and deactivate events under the control of the TabPanel. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been activated.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onActivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is closed. Note that Panels do not directly support being closed, but some

  Panel subclasses do (like Ext.Window). This event only applies to such subclasses. A handler can 

  return false to cancel the close. &lt;/p&gt;

  Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel being closed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeClose</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is collapsed. A handler can return false to cancel the collapse. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel being collapsed.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;animate&lt;/strong&gt;:(Boolean) True if the collapse is animated, else false.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is expanded. A handler can return false to cancel the expand. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel being expanded.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;animate&lt;/strong&gt;:(Boolean) True if the expand is animated, else false.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been resized. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel which has been resized.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;width&lt;/strong&gt;:(Number) The Panel's new width.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;height &lt;/strong&gt;:(Number) The Panel's new height.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBodyResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel is closed. Note that Panels do not directly support being closed, but 

 some Panel subclasses do (like Ext.Window). &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been closed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onClose</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been collapsed. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel that has been collapsed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been visually deactivated. Note that Panels do not directly support 

 being deactivated, but some Panel subclasses do (like Ext.Window). Panels which are child Components

 of a TabPanel fire the activate and deactivate events under the control of the TabPanel. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been deactivated.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDeactivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been expanded. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been expanded.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel title has been set or changed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel which has had its title changed.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;The&lt;/strong&gt;:(String) new title.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onTitleChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>

	 

	<tag><description>&lt;p&gt;A mechanism for displaying data using custom layout templates and formatting. 

 DataView uses an Ext.XTemplate as its internal templating mechanisma, and is 

 bound to an Ext.data.Store so that as the data in the store changes the view is 

 automatically updated to reflect the changes. The view also provides built-in 

 behavior for many common events that can occur for its contained items including 

 click, doubleclick, mouseover, mouseout, etc. as well as a built-in selection 

 model. In order to use these features, an itemSelector config must be provided 

 for the DataView to determine what nodes it will be working with.&lt;/p&gt;

 

 &lt;p&gt;The example below binds a DataView to a Ext.data.Store and renders it into 

 an Ext.Panel.&lt;/p&gt;

 

 &lt;pre&gt;&lt;code&gt;

 var store = new Ext.data.JsonStore({

     url: 'get-images.php',

     root: 'images',

     fields: [

         'name', 'url',

         {name:'size', type: 'float'},

         {name:'lastmod', type:'date', dateFormat:'timestamp'}

     ]

 });

 store.load();

 

 var tpl = new Ext.XTemplate(

     '&amp;lt;tpl for="."&amp;gt;',

         '&amp;lt;div class="thumb-wrap" id="{name}"&amp;gt;',

         '&amp;lt;div class="thumb"&amp;gt;&amp;lt;img src="{url}" title="{name}"&amp;gt;&amp;lt;/div&amp;gt;',

         '&amp;lt;span class="x-editable"&amp;gt;{shortName}&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;',

     '&amp;lt;/tpl&amp;gt;',

     '&amp;lt;div class="x-clear"&amp;gt;&amp;lt;/div&amp;gt;'

 );

 

 var panel = new Ext.Panel({

     id:'images-view',

     frame:true,

     width:535,

     autoHeight:true,

     collapsible:true,

     layout:'fit',

     title:'Simple DataView',

 

     items: new Ext.DataView({

         store: store,

         tpl: tpl,

         autoHeight:true,

         multiSelect: true,

         overClass:'x-view-over',

         itemSelector:'div.thumb-wrap',

         emptyText: 'No images to display'

     })

 });

 panel.render(document.body);

 &lt;/code&gt;&lt;/pre&gt;</description>

		<name>dataView</name>

		<tag-class>isola.tags.ext.container.DataViewTag</tag-class>

		<body-content>JSP</body-content>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Assigns a store variable to storeId</description>

            <name>storeId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Whether the component can move the Dom node when rendering (defaults to true).</description>

            <name>allowDomMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element corresponding 

 to a DIV that is already present in the document that specifies some 

 structural markup for this component. When applyTo is used, constituent 

 parts of the component can also be specified by id or CSS class name 

 within the main element, and the component being created may attempt to 

 create its subcomponents from that markup if applicable. Using this 

 config, a call to render() is not required. If applyTo is specified, 

 any value passed for renderTo will be ignored and the target element's 

 parent node will automatically be used as the component's container.</description>

            <name>applyTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the component should check for hidden classes (e.g. 'x-hidden' 

 or 'x-hide-display') and remove them on render (defaults to false).</description>

            <name>autoShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 Element (defaults to ''). This can be useful for adding customized styles 

 to the component or any of its children using standard CSS rules.</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 container (defaults to ''). This can be useful for adding customized 

 styles to the container or any of its children using standard CSS rules.</description>

            <name>ctCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class added to the component when it is disabled (defaults to 

 "x-item-disabled").</description>

            <name>disabledClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide and show the component's container when hide/show is 

 called on the component, false to hide and show the component itself 

 (defaults to false). For example, this can be used as a shortcut 

 for a hide button on a window by setting hide:true on the button when 

 adding it to its parent container.</description>

            <name>hideParent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id of this component (defaults to an auto-assigned id).</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element that will be the 

 container to render this component into. Using this config, a call to 

 render() is not required.</description>

            <name>renderTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id for this component to use for state management purposes 

 (defaults to the component id). See stateful for an explanation of saving 

 and restoring Component state.</description>

            <name>stateId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;A flag which causes the Component to attempt to restore the state of 

 internal properties from a saved state on startup.&lt;/p&gt;

 

 &lt;p&gt;For state saving to work, the state manager's provider must have been 

 set to an implementation of Ext.state.Provider which overrides the set 

 and get methods to save and recall name/value pairs. A built-in 

 implementation, Ext.state.CookieProvider is available.&lt;/p&gt;

 

 &lt;p&gt;To set the state provider for the current page:&lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;Components attempt to save state when one of the events listed in the stateEvents 

 configuration fires.&lt;/p&gt;

 

 &lt;p&gt;You can perform extra processing on state save and restore by attaching 

 handlers to the beforestaterestore, staterestore, beforestatesave and statesave 

 events.&lt;/p&gt;</description>

            <name>stateful</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom style specification to be applied to this component's Element. Should 

 be a valid argument to Ext.Element.applyStyles.</description>

            <name>style</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Where to place this component. Valid values are south, north, west, east, center</description>

            <name>region</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>How this component should hidden. Supported values are "visibility" 

 (css visibility), "offsets" (negative offset position) and "display" 

 (css display) - defaults to "display".</description>

            <name>hideMode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use height:'auto', false to use fixed height (defaults to false).</description>

            <name>autoHeight</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use width:'auto', false to use fixed width (defaults to false).</description>

            <name>autoWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The height of this component in pixels (defaults to auto).</description>

            <name>height</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width of this component in pixels (defaults to auto).</description>

            <name>width</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>HTML Element this object is parsed on.</description>

            <name>el</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The text to display in the view when there is no data to display (defaults to '').</description>

            <name>emptyText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;strong&gt;This is a required setting.&lt;/strong&gt; A simple CSS selector (e.g. 

 div.some-class or span:first-child) that will be used to determine 

 what nodes this DataView will be working with.</description>

            <name>itemSelector</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A string to display during data load operations (defaults to undefined). 

 If specified, this text will be displayed in a loading div and the 

 view's contents will be cleared while loading, otherwise the view's 

 contents will continue to display normally until the new data is 

 loaded and the contents are replaced.</description>

            <name>loadingText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to allow selection of more than one item at a time, false to 

 allow selection of only a single item at a time or no selection at all, 

 depending on the value of singleSelect (defaults to false).</description>

            <name>multiSelect</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS class to apply to each item in the view on mouseover (defaults to undefined).</description>

            <name>overClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS class to apply to each selected item in the view (defaults to 'x-view-selected').</description>

            <name>selectedClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to enable multiselection by clicking on multiple items without requiring the 

 user to hold Shift or Ctrl, false to force the user to hold Ctrl or Shift to 

 select more than on item (defaults to false).</description>

            <name>simpleSelect</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to allow selection of exactly one item at a time, false to allow no selection 

 at all (defaults to false). Note that if multiSelect = true, this value will be ignored.</description>

            <name>singleSelect</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is destroyed. Return false to stop the destroy.&lt;p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is hidden. Return false to stop the hide.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is rendered. Return false to stop the render. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is shown. Return false to stop the show. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is restored. Return false to stop the restore.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is saved to the 

 configured state provider. Return false to stop the save. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is destroyed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is disabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is enabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEnable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is hidden. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is rendered.  &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is shown.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is restored. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is saved to the configured state provider. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is moved. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;x&lt;/strong&gt;: (Number)The new x position&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;y&lt;/strong&gt;: (Number)The new y position&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is resized.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjWidth&lt;/strong&gt;:(Number) The box-adjusted width that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjHeight&lt;/strong&gt;:(Number) The box-adjusted height that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawWidth&lt;/strong&gt;:(Number) The width that was originally specified&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawHeight&lt;/strong&gt;:(Number) The height that was originally specified&lt;/li&gt; 		

 &lt;/ul&gt;</description>

            <name>onResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before a click is processed. Returns false to cancel the default action. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.DataView&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index of the target node &lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt;:(HTMLElement) The target node &lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt;:(Ext.EventObject) The raw event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before a selection is made. If any handlers return false, the selection is cancelled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.DataView&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt;:(HTMLElement) The node to be selected &lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;selections &lt;/strong&gt;:(Array) Array of currently selected nodes &lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeSelect</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a template node is clicked. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.DataView&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index of the target node &lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt;:(HTMLElement) The target node &lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt;:(Ext.EventObject) The raw event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a click occurs and it is not on a template node. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.DataView&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt;:(Ext.EventObject) The raw event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onContainerClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a template node is right clicked. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.DataView&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index of the target node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt;:(HTMLElement) The target node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt;:(Ext.EventObject) The raw event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onContextMenu</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a template node is double clicked. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.DataView&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index of the target node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt;:(HTMLElement) The target node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt;:(Ext.EventObject) The raw event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDblClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the selected nodes change. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.DataView&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;selections&lt;/strong&gt;:(Array) Array of the selected nodes&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onSelectionChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>&lt;p&gt;A basic tab container. Tab panels can be used exactly like a standard Ext.Panel for layout purposes, 

 but also have special support for containing child Panels that get automatically converted into tabs.&lt;/p&gt;

 

 &lt;p&gt;There is no actual tab class - each tab is simply an Ext.Panel. However, when rendered in a TabPanel, 

 each child Panel can fire additional events that only exist for tabs and are not available to other 

 Panels. These are:&lt;/p&gt;

 

 &lt;ul&gt;

 	&lt;li&gt;&lt;strong&gt;activate&lt;/strong&gt;Fires when this Panel becomes the active tab. Listeners will be called 

 		with the (tab : Panel) attribute.

	&lt;/li&gt;

 	&lt;li&gt;&lt;strong&gt;deactivate&lt;/strong&gt;Fires when this Panel that was the active tab becomes deactivated. 

 		Listeners will be called with the (tab : Panel) attribute.

 	&lt;/li&gt;

 &lt;/ul&gt;

 

 &lt;p&gt;There are several methods available for creating TabPanels. The output of the following examples 

 should be exactly the same. The tabs can be created and rendered completely in code, as in this 

 example:&lt;/p&gt;

 

 &lt;pre&gt;&lt;code&gt;

 var tabs = new Ext.TabPanel({

     renderTo: Ext.getBody(),

     activeTab: 0,

     items: [{

         title: 'Tab 1',

         html: 'A simple tab'

     },{

         title: 'Tab 2',

         html: 'Another one'

     }]

 });

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;TabPanels can also be rendered from markup in a couple of ways. See the autoTabs example for 

 rendering entirely from markup that is already structured correctly as a TabPanel (a container div 

 with one or more nested tab divs with class 'x-tab'). You can also render from markup that is not 

 strictly structured by simply specifying by id which elements should be the container and the tabs. 

 Using this method, tab content can be pulled from different elements within the page by id 

 regardless of page structure. Note that the tab divs in this example contain the class 

 'x-hide-display' so that they can be rendered deferred without displaying outside the tabs. 

 You could alternately set deferredRender to false to render all content tabs on page load. 

 For example:&lt;/p&gt;

 

 &lt;pre&gt;&lt;code&gt;

 var tabs = new Ext.TabPanel({

     renderTo: 'my-tabs',

     activeTab: 0,

     items:[

         {contentEl:'tab1', title:'Tab 1'},

         {contentEl:'tab2', title:'Tab 2'}

     ]

 });

 // Note that the tabs do not have to be nested within the container (although they can be)

 &amp;lt;div id="my-tabs"&amp;gt;&amp;lt;/div&amp;gt;

 &amp;lt;div id="tab1" class="x-hide-display"&amp;gt;A simple tab&amp;lt;/div&amp;gt;

 &amp;lt;div id="tab2" class="x-hide-display"&amp;gt;Another one&amp;lt;/div&amp;gt;

 &lt;/code&gt;&lt;/pre&gt;</description>

		<name>tabPanel</name>

		<tag-class>isola.tags.ext.container.TabPanelTag</tag-class>

		<body-content>JSP</body-content>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If anchor layout is used you can set an anchor value here.</description>

            <name>anchor</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If absolute layout is used you can set an absolute X position in pixels to place the component in

 the layout.</description>

            <name>x</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If absolute layout is used you can set an absolute Y position in pixels to place the component in

 the layout.</description>

            <name>y</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If column layout is used you can give a float column width from 0 to 1. Valid example: .5</description>

            <name>columnWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If table layout is used you can set rowspan as in an ordinary table.</description>

            <name>rowSpan</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If table layout is used you can set colspan as in an ordinary table.</description>

            <name>colSpan</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Whether the component can move the Dom node when rendering (defaults to true).</description>

            <name>allowDomMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element corresponding 

 to a DIV that is already present in the document that specifies some 

 structural markup for this component. When applyTo is used, constituent 

 parts of the component can also be specified by id or CSS class name 

 within the main element, and the component being created may attempt to 

 create its subcomponents from that markup if applicable. Using this 

 config, a call to render() is not required. If applyTo is specified, 

 any value passed for renderTo will be ignored and the target element's 

 parent node will automatically be used as the component's container.</description>

            <name>applyTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the component should check for hidden classes (e.g. 'x-hidden' 

 or 'x-hide-display') and remove them on render (defaults to false).</description>

            <name>autoShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 Element (defaults to ''). This can be useful for adding customized styles 

 to the component or any of its children using standard CSS rules.</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 container (defaults to ''). This can be useful for adding customized 

 styles to the container or any of its children using standard CSS rules.</description>

            <name>ctCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class added to the component when it is disabled (defaults to 

 "x-item-disabled").</description>

            <name>disabledClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide and show the component's container when hide/show is 

 called on the component, false to hide and show the component itself 

 (defaults to false). For example, this can be used as a shortcut 

 for a hide button on a window by setting hide:true on the button when 

 adding it to its parent container.</description>

            <name>hideParent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id of this component (defaults to an auto-assigned id).</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element that will be the 

 container to render this component into. Using this config, a call to 

 render() is not required.</description>

            <name>renderTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id for this component to use for state management purposes 

 (defaults to the component id). See stateful for an explanation of saving 

 and restoring Component state.</description>

            <name>stateId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;A flag which causes the Component to attempt to restore the state of 

 internal properties from a saved state on startup.&lt;/p&gt;

 

 &lt;p&gt;For state saving to work, the state manager's provider must have been 

 set to an implementation of Ext.state.Provider which overrides the set 

 and get methods to save and recall name/value pairs. A built-in 

 implementation, Ext.state.CookieProvider is available.&lt;/p&gt;

 

 &lt;p&gt;To set the state provider for the current page:&lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;Components attempt to save state when one of the events listed in the stateEvents 

 configuration fires.&lt;/p&gt;

 

 &lt;p&gt;You can perform extra processing on state save and restore by attaching 

 handlers to the beforestaterestore, staterestore, beforestatesave and statesave 

 events.&lt;/p&gt;</description>

            <name>stateful</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom style specification to be applied to this component's Element. Should 

 be a valid argument to Ext.Element.applyStyles.</description>

            <name>style</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Where to place this component. Valid values are south, north, west, east, center</description>

            <name>region</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>How this component should hidden. Supported values are "visibility" 

 (css visibility), "offsets" (negative offset position) and "display" 

 (css display) - defaults to "display".</description>

            <name>hideMode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use height:'auto', false to use fixed height (defaults to false).</description>

            <name>autoHeight</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use width:'auto', false to use fixed width (defaults to false).</description>

            <name>autoWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The height of this component in pixels (defaults to auto).</description>

            <name>height</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width of this component in pixels (defaults to auto).</description>

            <name>width</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>HTML Element this object is parsed on.</description>

            <name>el</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A string component id or the numeric index of the component that should be 

 initially activated within the container's layout on render. For example, 

 activeItem: 'item-1' or activeItem: 0 (index 0 = the first item in the 

 container's collection). activeItem only applies to layout styles that can 

 display items one at a time (like Ext.layout.Accordion, 

 Ext.layout.CardLayout and Ext.layout.FitLayout). 

 Related to Ext.layout.ContainerLayout.activeItem.</description>

            <name>activeItem</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If true the container will automatically destroy any contained component 

 that is removed from it, else destruction must be handled manually 

 (defaults to true).</description>

            <name>autoDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>When set to true (100 milliseconds) or a number of milliseconds, the 

 layout assigned for this container will buffer the frequency it calculates 

 and does a re-layout of components. This is useful for heavy containers 

 or containers with a large amount of sub components that frequent calls 

 to layout are expensive.</description>

            <name>bufferResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default type of container represented by this object as registered 

  in Ext.ComponentMgr (defaults to 'panel').</description>

            <name>defaultType</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the borders of each contained component, false to defer to the 

 component's existing border settings (defaults to false).</description>

            <name>hideBorders</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;The layout type to be used in this container. If not specified, a default 

 Ext.layout.ContainerLayout will be created and used. 

 

 &lt;p&gt;Valid values are:&lt;/p&gt;

 &lt;ul&gt;

 &lt;li&gt;accordion, &lt;/li&gt;

 &lt;li&gt;anchor, &lt;/li&gt; 

 &lt;li&gt;border,&lt;/li&gt; 

 &lt;li&gt;card,&lt;/li&gt; 

 &lt;li&gt;column,&lt;/li&gt; 

 &lt;li&gt;fit,&lt;/li&gt; 

 &lt;li&gt;form&lt;/li&gt;

 &lt;li&gt;table.&lt;/li&gt; 

 &lt;/ul&gt;

 &lt;p&gt;Specific config values for the chosen layout type can be specified using 

 layoutConfig.&lt;/p&gt;</description>

            <name>layout</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to automatically monitor window resize events to handle anything that is 

 sensitive to the current size of the viewport. This value is typically managed 

 by the chosen layout and should not need to be set manually.</description>

            <name>monitorResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to animate the transition when the panel is collapsed, false to skip 

 the animation (defaults to true if the Ext.Fx class is available, otherwise 

 false).</description>

            <name>animCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use overflow:'auto' on the panel's body element and show scroll bars 

 automatically when necessary, false to clip any overflowing content 

 (defaults to false).</description>

            <name>autoScroll</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The base CSS class to apply to this panel's element (defaults to 'x-panel').</description>

            <name>baseCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display an interior border on the body element of the panel, false 

 to hide it (defaults to true). This only applies when border == true. If 

 border == true and bodyBorder == false, the border will display as a 1px 

 wide inset border, giving the entire body element an inset appearance.</description>

            <name>bodyBorder</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Custom CSS styles to be applied to the body element in the format expected 

 by Ext.Element.applyStyles (defaults to null).</description>

            <name>bodyStyle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display the borders of the panel's body element, false to hide them 

 (defaults to true). By default, the border is a 2px wide inset border, but 

 this can be further altered by setting bodyBorder to false.</description>

            <name>border</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>When set to true (100 milliseconds) or a number of milliseconds, the 

 layout assigned for this container will buffer the frequency it calculates 

 and does a re-layout of components. This is useful for heavy containers 

 or containers with a large amount of sub components that frequent calls 

 to layout are expensive.</description>

            <name>bufferResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The alignment of any buttons added to this panel. Valid values are 'right,' 

 'left' and 'center' (defaults to 'right').</description>

            <name>buttonAlign</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to make sure the collapse/expand toggle button always renders first (to 

 the left of) any other tools in the panel's title bar, false to render it 

 last (defaults to true).</description>

            <name>collapseFirst</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to render the panel collapsed, false to render it expanded (defaults to false).</description>

            <name>collapsed</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS class to add to the panel's element after it has been collapsed (defaults 

 to 'x-panel-collapsed').</description>

            <name>collapsedCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to make the panel collapsible and have the expand/collapse toggle button 

 automatically rendered into the header tool button area, false to keep the 

 panel statically sized with no button (defaults to false).</description>

            <name>collapsible</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of an existing HTML node to use as the panel's body content (defaults to '').</description>

            <name>contentEl</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to enable dragging of this Panel (defaults to false). For custom drag/drop 

 implementations, an Ext.Panel.DD config could also be passed in this config 

 instead of true, although Ext.Panel.DD is an internal, undocumented class.</description>

            <name>draggable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A comma-delimited list of panel elements to initialize when the panel is 

 rendered. Normally, this list will be generated automatically based on the items 

 added to the panel at config time, but sometimes it might be useful to make 

 sure a structural element is rendered even if not specified at config time 

 (for example, you may want to add a button or toolbar dynamically after the 

 panel has been rendered). Adding those elements to this list will allocate 

 the required placeholders in the panel when it is rendered. 

 Valid values are

 &lt;ul&gt;

 &lt;li&gt;header&lt;/li&gt;

 &lt;li&gt;tbar (top bar)&lt;/li&gt;

 &lt;li&gt;body&lt;/li&gt;

 &lt;li&gt;bbar (bottom bar)&lt;/li&gt;

 &lt;li&gt;footer&lt;/li&gt;

 &lt;/ul&gt;

 Defaults to 'body'.</description>

            <name>elements</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to float the panel (absolute position it with automatic shimming and shadow), 

 false to display it inline where it is rendered (defaults to false). Note that 

 by default, setting floating to true will cause the panel to display at negative 

 offsets so that it is hidden -- because the panel is absolute positioned, the 

 position must be set explicitly after render (e.g., myPanel.setPosition(100,100);). 

 Also, when floating a panel you should always assign a fixed width, otherwise it 

 will be auto width and will expand to fill to the right edge of the viewport.</description>

            <name>floating</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to create the footer element explicitly, false to skip creating it. By 

 default, when footer is not specified, if one or more buttons have been added 

 to the panel the footer will be created automatically, otherwise it will not.</description>

            <name>footer</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Shows a nice rounded corner with a thick border around the panel.</description>

            <name>frame</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to create the header element explicitly, false to skip creating it. By 

 default, when header is not specified, if a title is set the header will be 

 created automatically, otherwise it will not. If a title is set but header is 

 explicitly set to false, the header will not be rendered.</description>

            <name>header</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display the panel title in the header, false to hide it (defaults to true).</description>

            <name>headerAsText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the expand/collapse toggle button when collapsible = true, false 

 to display it (defaults to false).</description>

            <name>hideCollapseTool</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An HTML fragment, or a DomHelper specification to use as the panel's body 

 content (defaults to '').</description>

            <name>html</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS class that will provide a background image to be used as the panel header 

 icon (defaults to '').</description>

            <name>iconCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to mask the panel when it is disabled, false to not mask it (defaults 

 to true). Either way, the panel will always tell its contained elements to 

 disable themselves when it is disabled, but masking the panel can provide an 

 additional visual cue that the panel is disabled.</description>

            <name>maskDisabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Minimum width in pixels of all buttons in this panel (defaults to 75)</description>

            <name>minButtonWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True (or a valid Ext.Shadow Ext.Shadow.mode value) to display a shadow behind 

 the panel, false to display no shadow (defaults to 'sides'). Note that this 

 option only applies when floating = true.</description>

            <name>shadow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The number of pixels to offset the shadow if displayed (defaults to 4). Note 

 that this option only applies when floating = true.</description>

            <name>shadowOffset</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>False to disable the iframe shim in browsers which need one (defaults to true). 

 Note that this option only applies when floating = true.</description>

            <name>shim</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Adds a tooltip when mousing over the tab of a Ext.Panel which is an item of a 

 Ext.TabPanel. Ext.QuickTips.init() must be called in order for the tips to render.</description>

            <name>tabTip</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The title text to display in the panel header (defaults to ''). When a title 

 is specified the header element will automatically be created and displayed 

 unless header is explicitly set to false. If you don't want to specify a title 

 at config time, but you may want one later, you must either specify a non-empty 

 title (a blank space ' ' will do) or header:true so that the container element 

 will get created.</description>

            <name>title</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to allow expanding and collapsing the panel (when collapsible = true) 

 by clicking anywhere in the header bar, false to allow it only by clicking to 

 tool button (defaults to false).</description>

            <name>titleCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If border layout is used then you can set this option to true to place a splitbar 

 between the panels.</description>

            <name>split</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Numeric index(0 based) of the tab that should be initially activated on render 

 (defaults to none).</description>

            <name>activeTab</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to animate tab scrolling so that hidden tabs slide smoothly into view 

 (defaults to true). Only applies when enableTabScroll = true.</description>

            <name>animScroll</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS selector used to search for tabs in existing markup when autoTabs = true 

 (defaults to 'div.x-tab'). This can be any valid selector supported by 

 Ext.DomQuery.select. Note that the query will be executed within the scope of this tab 

 panel only (so that multiple tab panels from markup can be supported on a page).</description>

            <name>autoTabSelector</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;True to query the DOM for any divs with a class of 'x-tab' to be automatically 

 converted to tabs and added to this panel (defaults to false). Note that the query 

 will be executed within the scope of the container element only (so that multiple 

 tab panels from markup can be supported via this method).&lt;/p&gt;

 

 &lt;p&gt;This method is only possible when the markup is structured correctly as a 

 container with nested divs containing the class 'x-tab'. To create TabPanels without 

 these limitations, or to pull tab content from other elements on the page, see the 

 example at the top of the class for generating tabs from markup.&lt;/p&gt;

 

 &lt;p&gt;There are a couple of things to note when using this method:&lt;/p&gt;

 

 &lt;p&gt;When using the autoTabs config (as opposed to passing individual tab configs in the 

 TabPanel's items collection), you must use applyTo to correctly use the specified id 

 as the tab container. The autoTabs method replaces existing content with the TabPanel 

 components.&lt;/p&gt;

 

 &lt;p&gt;Make sure that you set deferredRender to false so that the content elements for 

 each tab will be rendered into the TabPanel immediately upon page load, otherwise they 

 will not be transformed until each tab is activated and will be visible outside the 

 TabPanel.&lt;/p&gt;

 

 &lt;p&gt;Example usage:&lt;/p&gt;

 

 &lt;pre&gt;&lt;code&gt;

 var tabs = new Ext.TabPanel({

     applyTo: 'my-tabs',

     activeTab: 0,

     deferredRender: false,

     autoTabs: true

 });

 

 // This markup will be converted to a TabPanel from the code above

 &amp;lt;div id="my-tabs"&amp;gt;

     &amp;lt;div class="x-tab" title="Tab 1"&amp;gt;A simple tab&amp;lt;/div&amp;gt;

     &amp;lt;div class="x-tab" title="Tab 2"&amp;gt;Another one&amp;lt;/div&amp;gt;

 &amp;lt;/div&amp;gt;

 &lt;/code&gt;&lt;/pre&gt;</description>

            <name>autoTabs</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The base CSS class to apply to this panel's element (defaults to 'x-panel').</description>

            <name>baseCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Internally, the TabPanel uses a Ext.layout.CardLayout to manage its tabs. This property will 

 be passed on to the layout as its Ext.layout.CardLayout.deferredRender config value, 

 determining whether or not each tab is rendered only when first accessed (defaults to true).</description>

            <name>deferredRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Set to true to do a layout of tab items as tabs are changed.</description>

            <name>layoutOnTabChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The minimum width in pixels for each tab when resizeTabs = true (defaults to 30).</description>

            <name>minTabWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to render the tab strip without a background container image (defaults to false).</description>

            <name>plain</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to automatically resize each tab so that the tabs will completely fill the tab 

 strip (defaults to false). Setting this to true may cause specific widths that might 

 be set per tab to be overridden in order to fit them all into view (although minTabWidth 

 will always be honored).</description>

            <name>resizeTabs</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The number of milliseconds that each scroll animation should last (defaults to .35). Only 

 applies when animScroll = true.</description>

            <name>scrollDuration</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The number of pixels to scroll each time a tab scroll button is pressed (defaults to 

 100, or if resizeTabs = true, the calculated tab width). Only applies when 

 enableTabScroll = true.</description>

            <name>scrollIncrement</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Number of milliseconds between each scroll while a tab scroll button is continuously pressed 

 (defaults to 400).</description>

            <name>scrollRepeatInterval</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The number of pixels of space to calculate into the sizing and scrolling of tabs. If you 

 change the margin in CSS, you will need to update this value so calculations are correct with 

 either resizeTabs or scrolling tabs. (defaults to 2)</description>

            <name>tabMargin</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The position where the tab strip should be rendered (defaults to 'top'). The only other supported 

 value is 'bottom'. Note that tab scrolling is only supported for position 'top'.</description>

            <name>tabPosition</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The initial width in pixels of each new tab (defaults to 120).</description>

            <name>tabWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>For scrolling tabs, the number of pixels to increment on mouse wheel scrolling (defaults to 20).</description>

            <name>wheelIncrement</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is destroyed. Return false to stop the destroy.&lt;p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is hidden. Return false to stop the hide.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is rendered. Return false to stop the render. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is shown. Return false to stop the show. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is restored. Return false to stop the restore.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is saved to the 

 configured state provider. Return false to stop the save. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is destroyed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is disabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is enabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEnable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is hidden. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is rendered.  &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is shown.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is restored. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is saved to the configured state provider. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is moved. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;x&lt;/strong&gt;: (Number)The new x position&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;y&lt;/strong&gt;: (Number)The new y position&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is resized.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjWidth&lt;/strong&gt;:(Number) The box-adjusted width that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjHeight&lt;/strong&gt;:(Number) The box-adjusted height that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawWidth&lt;/strong&gt;:(Number) The width that was originally specified&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawHeight&lt;/strong&gt;:(Number) The height that was originally specified&lt;/li&gt; 		

 &lt;/ul&gt;</description>

            <name>onResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after any Ext.Component is added or inserted into the container.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;:(Ext.Component) The component that was added&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the component was added to the container's items collection&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAdd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the components in this container are arranged by the associated layout manager. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;layout&lt;/strong&gt;:(ContainerLayout) The ContainerLayout implementation for this container&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAfterLayout</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before any Ext.Component is added or inserted into the container. A handler can return false to cancel the add.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;:(Ext.Component) The component being added&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the component will be added to the container's items collection&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeAdd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before any Ext.Component is removed from the container. A handler can return false to cancel the remove. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: (Ext.Component) The component being removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after any Ext.Component is removed from the container&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: (Ext.Component) The component that was removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been visually activated. Note that Panels do not directly support 

 being activated, but some Panel subclasses do (like Ext.Window). Panels which are child Components 

 of a TabPanel fire the activate and deactivate events under the control of the TabPanel. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been activated.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onActivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is closed. Note that Panels do not directly support being closed, but some

  Panel subclasses do (like Ext.Window). This event only applies to such subclasses. A handler can 

  return false to cancel the close. &lt;/p&gt;

  Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel being closed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeClose</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is collapsed. A handler can return false to cancel the collapse. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel being collapsed.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;animate&lt;/strong&gt;:(Boolean) True if the collapse is animated, else false.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is expanded. A handler can return false to cancel the expand. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel being expanded.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;animate&lt;/strong&gt;:(Boolean) True if the expand is animated, else false.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been resized. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel which has been resized.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;width&lt;/strong&gt;:(Number) The Panel's new width.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;height &lt;/strong&gt;:(Number) The Panel's new height.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBodyResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel is closed. Note that Panels do not directly support being closed, but 

 some Panel subclasses do (like Ext.Window). &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been closed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onClose</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been collapsed. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel that has been collapsed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been visually deactivated. Note that Panels do not directly support 

 being deactivated, but some Panel subclasses do (like Ext.Window). Panels which are child Components

 of a TabPanel fire the activate and deactivate events under the control of the TabPanel. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been deactivated.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDeactivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been expanded. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been expanded.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel title has been set or changed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel which has had its title changed.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;The&lt;/strong&gt;:(String) new title.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onTitleChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the active tab changes. Handlers can return false to cancel the tab change. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: TabPanel&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;newTab&lt;/strong&gt;:(Panel) The tab being activated&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;currentTab&lt;/strong&gt;:(Panel) The current active tab&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeTabChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the original browser contextmenu event originated from a tab element.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: TabPanel&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;tab&lt;/strong&gt;:(Panel) The target tab&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt;: EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onContextMenu</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the active tab has changed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: TabPanel&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;tab&lt;/strong&gt;:(Panel) The new active tab&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onTabChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag>

		<name>tab</name>

		<tag-class>isola.tags.ext.container.TabTag</tag-class>

		<body-content>JSP</body-content>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Whether the component can move the Dom node when rendering (defaults to true).</description>

            <name>allowDomMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element corresponding 

 to a DIV that is already present in the document that specifies some 

 structural markup for this component. When applyTo is used, constituent 

 parts of the component can also be specified by id or CSS class name 

 within the main element, and the component being created may attempt to 

 create its subcomponents from that markup if applicable. Using this 

 config, a call to render() is not required. If applyTo is specified, 

 any value passed for renderTo will be ignored and the target element's 

 parent node will automatically be used as the component's container.</description>

            <name>applyTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the component should check for hidden classes (e.g. 'x-hidden' 

 or 'x-hide-display') and remove them on render (defaults to false).</description>

            <name>autoShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 Element (defaults to ''). This can be useful for adding customized styles 

 to the component or any of its children using standard CSS rules.</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 container (defaults to ''). This can be useful for adding customized 

 styles to the container or any of its children using standard CSS rules.</description>

            <name>ctCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class added to the component when it is disabled (defaults to 

 "x-item-disabled").</description>

            <name>disabledClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide and show the component's container when hide/show is 

 called on the component, false to hide and show the component itself 

 (defaults to false). For example, this can be used as a shortcut 

 for a hide button on a window by setting hide:true on the button when 

 adding it to its parent container.</description>

            <name>hideParent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id of this component (defaults to an auto-assigned id).</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element that will be the 

 container to render this component into. Using this config, a call to 

 render() is not required.</description>

            <name>renderTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id for this component to use for state management purposes 

 (defaults to the component id). See stateful for an explanation of saving 

 and restoring Component state.</description>

            <name>stateId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;A flag which causes the Component to attempt to restore the state of 

 internal properties from a saved state on startup.&lt;/p&gt;

 

 &lt;p&gt;For state saving to work, the state manager's provider must have been 

 set to an implementation of Ext.state.Provider which overrides the set 

 and get methods to save and recall name/value pairs. A built-in 

 implementation, Ext.state.CookieProvider is available.&lt;/p&gt;

 

 &lt;p&gt;To set the state provider for the current page:&lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;Components attempt to save state when one of the events listed in the stateEvents 

 configuration fires.&lt;/p&gt;

 

 &lt;p&gt;You can perform extra processing on state save and restore by attaching 

 handlers to the beforestaterestore, staterestore, beforestatesave and statesave 

 events.&lt;/p&gt;</description>

            <name>stateful</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom style specification to be applied to this component's Element. Should 

 be a valid argument to Ext.Element.applyStyles.</description>

            <name>style</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Where to place this component. Valid values are south, north, west, east, center</description>

            <name>region</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>How this component should hidden. Supported values are "visibility" 

 (css visibility), "offsets" (negative offset position) and "display" 

 (css display) - defaults to "display".</description>

            <name>hideMode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use height:'auto', false to use fixed height (defaults to false).</description>

            <name>autoHeight</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use width:'auto', false to use fixed width (defaults to false).</description>

            <name>autoWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The height of this component in pixels (defaults to auto).</description>

            <name>height</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width of this component in pixels (defaults to auto).</description>

            <name>width</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>HTML Element this object is parsed on.</description>

            <name>el</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A string component id or the numeric index of the component that should be 

 initially activated within the container's layout on render. For example, 

 activeItem: 'item-1' or activeItem: 0 (index 0 = the first item in the 

 container's collection). activeItem only applies to layout styles that can 

 display items one at a time (like Ext.layout.Accordion, 

 Ext.layout.CardLayout and Ext.layout.FitLayout). 

 Related to Ext.layout.ContainerLayout.activeItem.</description>

            <name>activeItem</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If true the container will automatically destroy any contained component 

 that is removed from it, else destruction must be handled manually 

 (defaults to true).</description>

            <name>autoDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>When set to true (100 milliseconds) or a number of milliseconds, the 

 layout assigned for this container will buffer the frequency it calculates 

 and does a re-layout of components. This is useful for heavy containers 

 or containers with a large amount of sub components that frequent calls 

 to layout are expensive.</description>

            <name>bufferResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default type of container represented by this object as registered 

  in Ext.ComponentMgr (defaults to 'panel').</description>

            <name>defaultType</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the borders of each contained component, false to defer to the 

 component's existing border settings (defaults to false).</description>

            <name>hideBorders</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;The layout type to be used in this container. If not specified, a default 

 Ext.layout.ContainerLayout will be created and used. 

 

 &lt;p&gt;Valid values are:&lt;/p&gt;

 &lt;ul&gt;

 &lt;li&gt;accordion, &lt;/li&gt;

 &lt;li&gt;anchor, &lt;/li&gt; 

 &lt;li&gt;border,&lt;/li&gt; 

 &lt;li&gt;card,&lt;/li&gt; 

 &lt;li&gt;column,&lt;/li&gt; 

 &lt;li&gt;fit,&lt;/li&gt; 

 &lt;li&gt;form&lt;/li&gt;

 &lt;li&gt;table.&lt;/li&gt; 

 &lt;/ul&gt;

 &lt;p&gt;Specific config values for the chosen layout type can be specified using 

 layoutConfig.&lt;/p&gt;</description>

            <name>layout</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to automatically monitor window resize events to handle anything that is 

 sensitive to the current size of the viewport. This value is typically managed 

 by the chosen layout and should not need to be set manually.</description>

            <name>monitorResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to animate the transition when the panel is collapsed, false to skip 

 the animation (defaults to true if the Ext.Fx class is available, otherwise 

 false).</description>

            <name>animCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use overflow:'auto' on the panel's body element and show scroll bars 

 automatically when necessary, false to clip any overflowing content 

 (defaults to false).</description>

            <name>autoScroll</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The base CSS class to apply to this panel's element (defaults to 'x-panel').</description>

            <name>baseCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display an interior border on the body element of the panel, false 

 to hide it (defaults to true). This only applies when border == true. If 

 border == true and bodyBorder == false, the border will display as a 1px 

 wide inset border, giving the entire body element an inset appearance.</description>

            <name>bodyBorder</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Custom CSS styles to be applied to the body element in the format expected 

 by Ext.Element.applyStyles (defaults to null).</description>

            <name>bodyStyle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display the borders of the panel's body element, false to hide them 

 (defaults to true). By default, the border is a 2px wide inset border, but 

 this can be further altered by setting bodyBorder to false.</description>

            <name>border</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>When set to true (100 milliseconds) or a number of milliseconds, the 

 layout assigned for this container will buffer the frequency it calculates 

 and does a re-layout of components. This is useful for heavy containers 

 or containers with a large amount of sub components that frequent calls 

 to layout are expensive.</description>

            <name>bufferResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The alignment of any buttons added to this panel. Valid values are 'right,' 

 'left' and 'center' (defaults to 'right').</description>

            <name>buttonAlign</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to make sure the collapse/expand toggle button always renders first (to 

 the left of) any other tools in the panel's title bar, false to render it 

 last (defaults to true).</description>

            <name>collapseFirst</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to render the panel collapsed, false to render it expanded (defaults to false).</description>

            <name>collapsed</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS class to add to the panel's element after it has been collapsed (defaults 

 to 'x-panel-collapsed').</description>

            <name>collapsedCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to make the panel collapsible and have the expand/collapse toggle button 

 automatically rendered into the header tool button area, false to keep the 

 panel statically sized with no button (defaults to false).</description>

            <name>collapsible</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of an existing HTML node to use as the panel's body content (defaults to '').</description>

            <name>contentEl</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to enable dragging of this Panel (defaults to false). For custom drag/drop 

 implementations, an Ext.Panel.DD config could also be passed in this config 

 instead of true, although Ext.Panel.DD is an internal, undocumented class.</description>

            <name>draggable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A comma-delimited list of panel elements to initialize when the panel is 

 rendered. Normally, this list will be generated automatically based on the items 

 added to the panel at config time, but sometimes it might be useful to make 

 sure a structural element is rendered even if not specified at config time 

 (for example, you may want to add a button or toolbar dynamically after the 

 panel has been rendered). Adding those elements to this list will allocate 

 the required placeholders in the panel when it is rendered. 

 Valid values are

 &lt;ul&gt;

 &lt;li&gt;header&lt;/li&gt;

 &lt;li&gt;tbar (top bar)&lt;/li&gt;

 &lt;li&gt;body&lt;/li&gt;

 &lt;li&gt;bbar (bottom bar)&lt;/li&gt;

 &lt;li&gt;footer&lt;/li&gt;

 &lt;/ul&gt;

 Defaults to 'body'.</description>

            <name>elements</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to float the panel (absolute position it with automatic shimming and shadow), 

 false to display it inline where it is rendered (defaults to false). Note that 

 by default, setting floating to true will cause the panel to display at negative 

 offsets so that it is hidden -- because the panel is absolute positioned, the 

 position must be set explicitly after render (e.g., myPanel.setPosition(100,100);). 

 Also, when floating a panel you should always assign a fixed width, otherwise it 

 will be auto width and will expand to fill to the right edge of the viewport.</description>

            <name>floating</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to create the footer element explicitly, false to skip creating it. By 

 default, when footer is not specified, if one or more buttons have been added 

 to the panel the footer will be created automatically, otherwise it will not.</description>

            <name>footer</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Shows a nice rounded corner with a thick border around the panel.</description>

            <name>frame</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to create the header element explicitly, false to skip creating it. By 

 default, when header is not specified, if a title is set the header will be 

 created automatically, otherwise it will not. If a title is set but header is 

 explicitly set to false, the header will not be rendered.</description>

            <name>header</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display the panel title in the header, false to hide it (defaults to true).</description>

            <name>headerAsText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the expand/collapse toggle button when collapsible = true, false 

 to display it (defaults to false).</description>

            <name>hideCollapseTool</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An HTML fragment, or a DomHelper specification to use as the panel's body 

 content (defaults to '').</description>

            <name>html</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS class that will provide a background image to be used as the panel header 

 icon (defaults to '').</description>

            <name>iconCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to mask the panel when it is disabled, false to not mask it (defaults 

 to true). Either way, the panel will always tell its contained elements to 

 disable themselves when it is disabled, but masking the panel can provide an 

 additional visual cue that the panel is disabled.</description>

            <name>maskDisabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Minimum width in pixels of all buttons in this panel (defaults to 75)</description>

            <name>minButtonWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True (or a valid Ext.Shadow Ext.Shadow.mode value) to display a shadow behind 

 the panel, false to display no shadow (defaults to 'sides'). Note that this 

 option only applies when floating = true.</description>

            <name>shadow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The number of pixels to offset the shadow if displayed (defaults to 4). Note 

 that this option only applies when floating = true.</description>

            <name>shadowOffset</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>False to disable the iframe shim in browsers which need one (defaults to true). 

 Note that this option only applies when floating = true.</description>

            <name>shim</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Adds a tooltip when mousing over the tab of a Ext.Panel which is an item of a 

 Ext.TabPanel. Ext.QuickTips.init() must be called in order for the tips to render.</description>

            <name>tabTip</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The title text to display in the panel header (defaults to ''). When a title 

 is specified the header element will automatically be created and displayed 

 unless header is explicitly set to false. If you don't want to specify a title 

 at config time, but you may want one later, you must either specify a non-empty 

 title (a blank space ' ' will do) or header:true so that the container element 

 will get created.</description>

            <name>title</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to allow expanding and collapsing the panel (when collapsible = true) 

 by clicking anywhere in the header bar, false to allow it only by clicking to 

 tool button (defaults to false).</description>

            <name>titleCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If border layout is used then you can set this option to true to place a splitbar 

 between the panels.</description>

            <name>split</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>closable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is destroyed. Return false to stop the destroy.&lt;p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is hidden. Return false to stop the hide.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is rendered. Return false to stop the render. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is shown. Return false to stop the show. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is restored. Return false to stop the restore.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is saved to the 

 configured state provider. Return false to stop the save. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is destroyed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is disabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is enabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEnable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is hidden. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is rendered.  &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is shown.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is restored. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is saved to the configured state provider. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is moved. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;x&lt;/strong&gt;: (Number)The new x position&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;y&lt;/strong&gt;: (Number)The new y position&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is resized.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjWidth&lt;/strong&gt;:(Number) The box-adjusted width that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjHeight&lt;/strong&gt;:(Number) The box-adjusted height that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawWidth&lt;/strong&gt;:(Number) The width that was originally specified&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawHeight&lt;/strong&gt;:(Number) The height that was originally specified&lt;/li&gt; 		

 &lt;/ul&gt;</description>

            <name>onResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after any Ext.Component is added or inserted into the container.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;:(Ext.Component) The component that was added&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the component was added to the container's items collection&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAdd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the components in this container are arranged by the associated layout manager. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;layout&lt;/strong&gt;:(ContainerLayout) The ContainerLayout implementation for this container&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAfterLayout</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before any Ext.Component is added or inserted into the container. A handler can return false to cancel the add.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;:(Ext.Component) The component being added&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the component will be added to the container's items collection&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeAdd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before any Ext.Component is removed from the container. A handler can return false to cancel the remove. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: (Ext.Component) The component being removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after any Ext.Component is removed from the container&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: (Ext.Component) The component that was removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been visually activated. Note that Panels do not directly support 

 being activated, but some Panel subclasses do (like Ext.Window). Panels which are child Components 

 of a TabPanel fire the activate and deactivate events under the control of the TabPanel. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been activated.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onActivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is closed. Note that Panels do not directly support being closed, but some

  Panel subclasses do (like Ext.Window). This event only applies to such subclasses. A handler can 

  return false to cancel the close. &lt;/p&gt;

  Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel being closed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeClose</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is collapsed. A handler can return false to cancel the collapse. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel being collapsed.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;animate&lt;/strong&gt;:(Boolean) True if the collapse is animated, else false.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is expanded. A handler can return false to cancel the expand. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel being expanded.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;animate&lt;/strong&gt;:(Boolean) True if the expand is animated, else false.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been resized. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel which has been resized.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;width&lt;/strong&gt;:(Number) The Panel's new width.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;height &lt;/strong&gt;:(Number) The Panel's new height.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBodyResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel is closed. Note that Panels do not directly support being closed, but 

 some Panel subclasses do (like Ext.Window). &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been closed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onClose</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been collapsed. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel that has been collapsed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been visually deactivated. Note that Panels do not directly support 

 being deactivated, but some Panel subclasses do (like Ext.Window). Panels which are child Components

 of a TabPanel fire the activate and deactivate events under the control of the TabPanel. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been deactivated.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDeactivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been expanded. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been expanded.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel title has been set or changed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel which has had its title changed.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;The&lt;/strong&gt;:(String) new title.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onTitleChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>Used for parameterazing the data in a data store and assigning keys to the mappings.</description>

		<name>storeMapping</name>

		<tag-class>isola.tags.ext.data.StoreMappingTag</tag-class>

		<body-content>empty</body-content>

		<attribute>

            <name>name</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>type</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>mapping</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>sortType</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>sortDir</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>convert</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>dateFormat</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>Data Store to read from a Javascript array. A valid sample Javascript array:

 

 &lt;code&gt;&lt;pre&gt;

 		var dummyData = [

 		['3m Co',71.72,0.02,0.03,'9/1 12:00am', 'Manufacturing'],

 		['Alcoa Inc',29.01,0.42,1.47,'9/1 12:00am', 'Manufacturing'],

 		['Altria Group Inc',83.81,0.28,0.34,'9/1 12:00am', 'Manufacturing'],

 		['American Express Company',52.55,0.01,0.02,'9/1 12:00am', 'Finance'],

 		['American International Group, Inc.',64.13,0.31,0.49,'9/1 12:00am', 'Services'],

 		['AT&amp;T Inc.',31.61,-0.48,-1.54,'9/1 12:00am', 'Services'],

 		['Boeing Co.',75.43,0.53,0.71,'9/1 12:00am', 'Manufacturing'],

 		['Caterpillar Inc.',67.27,0.92,1.39,'9/1 12:00am', 'Services'],

 		['Citigroup, Inc.',49.37,0.02,0.04,'9/1 12:00am', 'Finance'],

 		['E.I. du Pont de Nemours and Company',40.48,0.51,1.28,'9/1 12:00am', 'Manufacturing'],

 		['Exxon Mobil Corp',68.1,-0.43,-0.64,'9/1 12:00am', 'Manufacturing'],

 		['General Electric Company',34.14,-0.08,-0.23,'9/1 12:00am', 'Manufacturing'],

 		['General Motors Corporation',30.27,1.09,3.74,'9/1 12:00am', 'Automotive'],

 		['Hewlett-Packard Co.',36.53,-0.03,-0.08,'9/1 12:00am', 'Computer'],

 		['Honeywell Intl Inc',38.77,0.05,0.13,'9/1 12:00am', 'Manufacturing'],

 		['Intel Corporation',19.88,0.31,1.58,'9/1 12:00am', 'Computer'],

 		['International Business Machines',81.41,0.44,0.54,'9/1 12:00am', 'Computer'],

 		['Johnson &amp; Johnson',64.72,0.06,0.09,'9/1 12:00am', 'Medical'],

 		['JP Morgan &amp; Chase &amp; Co',45.73,0.07,0.15,'9/1 12:00am', 'Finance'],

 		['McDonald\'s Corporation',36.76,0.86,2.40,'9/1 12:00am', 'Food'],

 		['Merck &amp; Co., Inc.',40.96,0.41,1.01,'9/1 12:00am', 'Medical'],

 		['Microsoft Corporation',25.84,0.14,0.54,'9/1 12:00am', 'Computer'],

 		['Pfizer Inc',27.96,0.4,1.45,'9/1 12:00am', 'Services', 'Medical'],

 		['The Coca-Cola Company',45.07,0.26,0.58,'9/1 12:00am', 'Food'],

 		['The Home Depot, Inc.',34.64,0.35,1.02,'9/1 12:00am', 'Retail'],

 		['The Procter &amp; Gamble Company',61.91,0.01,0.02,'9/1 12:00am', 'Manufacturing'],

 		['United Technologies Corporation',63.26,0.55,0.88,'9/1 12:00am', 'Computer'],

 		['Verizon Communications',35.57,0.39,1.11,'9/1 12:00am', 'Services'],

 		['Wal-Mart Stores, Inc.',45.45,0.73,1.63,'9/1 12:00am', 'Retail'],

 		['Walt Disney Company (The) (Holding Company)',29.89,0.24,0.81,'9/1 12:00am', 'Services']

 		];

 

 		// this is array data is consumed by an example grid like this.

 

		&amp;lt;ext:gridPanel id="myGrid" width="400" height="200" forceFit="true" renderTo="pbar" border="true"&amp;gt;

 			&amp;lt;ext:arrayStore data="dummyData" autoLoad="true"&amp;gt;

 				 &amp;lt;ext:storeMapping name="company" mapping="0" /&amp;gt;

 				 &amp;lt;ext:storeMapping name="price" mapping="1" /&amp;gt;

 				 &amp;lt;ext:storeMapping name="change" mapping="2" /&amp;gt;

 				 &amp;lt;ext:storeMapping name="pctChange" mapping="3" /&amp;gt;

 				 &amp;lt;ext:storeMapping name="lastChange" mapping="4" /&amp;gt;

 				 &amp;lt;ext:storeMapping name="industry" mapping="5" /&amp;gt;

 			&amp;lt;/ext:arrayStore&amp;gt;

 			&amp;lt;ext:columnModel&amp;gt;

 				 &amp;lt;ext:gridColumn dataIndex="company" header="Company" /&amp;gt;

 				 &amp;lt;ext:gridColumn dataIndex="price" header="Price" /&amp;gt;

 				 &amp;lt;ext:gridColumn dataIndex="change" header="Change" /&amp;gt;

 				 &amp;lt;ext:gridColumn dataIndex="pctChange" header="PctChange" /&amp;gt;

 				 &amp;lt;ext:gridColumn dataIndex="lastChange" header="Last Change" /&amp;gt;

 				 &amp;lt;ext:gridColumn dataIndex="industry" header="Industry" /&amp;gt;

 			&amp;lt;/ext:columnModel&amp;gt;

 		&amp;lt;/ext:gridPanel&amp;gt;



 &lt;/pre&gt;&lt;/code&gt;</description>

		<name>arrayStore</name>

		<tag-class>isola.tags.ext.data.ArrayStoreTag</tag-class>

		<body-content>JSP</body-content>

		<attribute><description>Disables the MemoryProxy which enables advanced operations on the data. Do not disable this, if there is no reason. Boolean value. Default is false.</description>

            <name>disableProxy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If passed, this store's load method is automatically called after creation with the autoLoad 

 object</description>

            <name>autoLoad</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Inline data to be loaded when the store is initialized.</description>

            <name>data</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to clear all modified record information each time the store is loaded or when a record 

 is removed. (defaults to false).</description>

            <name>pruneModifiedRecords</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;True if sorting is to be handled by requesting the Proxy to provide a refreshed version 

 of the data object in sorted order, as opposed to sorting the Record cache in place 

 (defaults to false).&lt;/p&gt;

 

 &lt;p&gt;If remote sorting is specified, then clicking on a column header causes the current 

 page to be requested from the server with the addition of the following two parameters:&lt;/p&gt;

 &lt;ul&gt;

 	&lt;li&gt;

 		&lt;strong&gt;sort(String):&lt;/strong&gt;The name (as specified in the Record's Field definition) 

 		of the field to sort on. 

 	&lt;/li&gt;

	&lt;li&gt;

 		&lt;strong&gt;dir(String):&lt;/strong&gt;The direction of the sort, "ASC" or "DESC" (case-sensitive).

	&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>remoteSort</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If passed, the id to use to register with the StoreMgr</description>

            <name>storeId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If passed, an HttpProxy is created for the passed URL</description>

            <name>url</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when Records have been added to the Store &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Store&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;records&lt;/strong&gt;:(Ext.data.Record[]) The array of Records added&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the record(s) were added&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAdd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before a request is made for a new data object. If the beforeload handler returns false

 the load action will be canceled.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Store&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;options&lt;/strong&gt;:(Object) The loading options that were specified (see load for details)&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeLoad</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the data cache has been cleared.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Store&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onClear</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the data cache has changed, and a widget which is using this Store as a Record 

 cache should refresh its view. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Store&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDataChanged</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after a new set of Records has been loaded. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Store&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;records&lt;/strong&gt;:(Ext.data.Record[]) The Records that were loaded&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;options&lt;/strong&gt;:(Object) The loading options that were specified (see load for details)&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onLoad</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires if an exception occurs in the Proxy during loading. Called with the signature of the 

 Proxy's "loadexception" event.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;None&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onLoadException</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this store's reader provides new metadata (fields). This is currently only supported

  for JsonReaders. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Store&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;meta&lt;/strong&gt;:(Object) The JSON metadata&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMetaChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a Record has been removed from the Store &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Store&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;record&lt;/strong&gt;:(Ext.data.Record) The Record that was removed&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the record was removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a Record has been updated &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Store&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;record&lt;/strong&gt;:(Ext.data.Record) The Record that was updated&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;operation&lt;/strong&gt;:(String) The update operation being performed. Value may be one of: &lt;/li&gt;

 &lt;code&gt;

 Ext.data.Record.EDIT

 Ext.data.Record.REJECT

 Ext.data.Record.COMMIT

 &lt;/code&gt;

 &lt;/ul&gt;</description>

            <name>onUpdate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>&lt;p&gt;A template class that supports advanced functionality like autofilling arrays, conditional 

 processing with basic comparison operators, sub-templates, basic math function support, 

 special built-in template variables, inline code execution and more. XTemplate also provides 

 the templating mechanism built into Ext.DataView.&lt;/p&gt;</description>

		<name>xTemplate</name>

		<tag-class>isola.tags.ext.data.XTemplateTag</tag-class>

		<body-content>JSP</body-content>

		<attribute>

            <name>id</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>

	

	<tag><description>A Datastore which fetches its data from a HTTP request and the response is a valid JSON String

 

 &lt;pre&gt;&lt;code&gt;

	&amp;lt;ext:gridPanel id="myGrid" width="400" height="200" forceFit="true" renderTo="pbar" border="true"&amp;gt;

		&amp;lt;ext:jsonStore url="jsonServlet.html" root="result"&amp;gt;

			&amp;lt;ext:httpParam name="id" value="111"/&amp;gt;

			&amp;lt;ext:httpParam name="user" value="dummy"/&amp;gt;

			&amp;lt;ext:storeMapping name="name" /&amp;gt;

			&amp;lt;ext:storeMapping name="value"/&amp;gt;

		&amp;lt;/ext:jsonStore&amp;gt;

		&amp;lt;ext:columnModel&amp;gt;

			 &amp;lt;ext:gridColumn dataIndex="name" header="Name" /&amp;gt;

			 &amp;lt;ext:gridColumn dataIndex="value" header="Value" /&amp;gt;

		&amp;lt;/ext:columnModel&amp;gt;

	&amp;lt;/ext:gridPanel&amp;gt;

 &amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;

 

 &amp;lt;p&amp;gt;This will consume a JSON string like: &amp;lt;/p&amp;gt;

 &amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;

 

 {"result":[

	{"name":"java.runtime.name","value":"Java(TM) SE Runtime Environment"},

	{"name":"com.atomikos.icatch.file","value":"D:\\dev\\java\\jetty-6.1.7/contexts/test-jndi.d/WEB-INF/classes/jta.properties"},

	{"name":"sun.boot.library.path","value":"D:\\dev\\java\\jdk1.6.0_03\\jre\\bin"}

 ]}

 &lt;/code&gt;&lt;/pre&gt;</description>

		<name>jsonStore</name>

		<tag-class>isola.tags.ext.data.JsonStoreTag</tag-class>

		<body-content>JSP</body-content>

		<attribute>
			<description>Disables proxy for easy reloading. Warning: If this is set to true, paging will not work!</description>
			<name>disableProxy</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
		</attribute>

		<attribute><description>If passed, this store's load method is automatically called after creation with the autoLoad 

 object</description>

            <name>autoLoad</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Inline data to be loaded when the store is initialized.</description>

            <name>data</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>
		<attribute><description>(Integer)Timeout in milliseconds for this JSON store for load. Defaults to: 30000 (which is 30 seconds)</description>
            <name>timeout</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
		</attribute>
		<attribute><description>True to clear all modified record information each time the store is loaded or when a record 

 is removed. (defaults to false).</description>

            <name>pruneModifiedRecords</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;True if sorting is to be handled by requesting the Proxy to provide a refreshed version 

 of the data object in sorted order, as opposed to sorting the Record cache in place 

 (defaults to false).&lt;/p&gt;

 

 &lt;p&gt;If remote sorting is specified, then clicking on a column header causes the current 

 page to be requested from the server with the addition of the following two parameters:&lt;/p&gt;

 &lt;ul&gt;

 	&lt;li&gt;

 		&lt;strong&gt;sort(String):&lt;/strong&gt;The name (as specified in the Record's Field definition) 

 		of the field to sort on. 

 	&lt;/li&gt;

	&lt;li&gt;

 		&lt;strong&gt;dir(String):&lt;/strong&gt;The direction of the sort, "ASC" or "DESC" (case-sensitive).

	&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>remoteSort</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If passed, the id to use to register with the StoreMgr</description>

            <name>storeId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If passed, an HttpProxy is created for the passed URL</description>

            <name>url</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Name of the property within a row object that contains a record identifier value.</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>name of the property which contains the Array of row objects.</description>

            <name>root</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Name of the property from which to retrieve the success attribute used by forms.</description>

            <name>successProperty</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Name of the property from which to retrieve the total number of records in the 

 dataset. This is only needed if the whole dataset is not passed in one go, but 

 is being paged from the remote server.</description>

            <name>totalProperty</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>HTTP Method to use. post or get</description>

            <name>method</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when Records have been added to the Store &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Store&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;records&lt;/strong&gt;:(Ext.data.Record[]) The array of Records added&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the record(s) were added&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAdd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before a request is made for a new data object. If the beforeload handler returns false

 the load action will be canceled.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Store&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;options&lt;/strong&gt;:(Object) The loading options that were specified (see load for details)&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeLoad</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the data cache has been cleared.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Store&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onClear</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the data cache has changed, and a widget which is using this Store as a Record 

 cache should refresh its view. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Store&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDataChanged</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after a new set of Records has been loaded. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Store&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;records&lt;/strong&gt;:(Ext.data.Record[]) The Records that were loaded&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;options&lt;/strong&gt;:(Object) The loading options that were specified (see load for details)&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onLoad</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires if an exception occurs in the Proxy during loading. Called with the signature of the 

 Proxy's "loadexception" event.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;None&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onLoadException</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this store's reader provides new metadata (fields). This is currently only supported

  for JsonReaders. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Store&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;meta&lt;/strong&gt;:(Object) The JSON metadata&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMetaChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a Record has been removed from the Store &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Store&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;record&lt;/strong&gt;:(Ext.data.Record) The Record that was removed&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the record was removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a Record has been updated &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Store&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;record&lt;/strong&gt;:(Ext.data.Record) The Record that was updated&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;operation&lt;/strong&gt;:(String) The update operation being performed. Value may be one of: &lt;/li&gt;

 &lt;code&gt;

 Ext.data.Record.EDIT

 Ext.data.Record.REJECT

 Ext.data.Record.COMMIT

 &lt;/code&gt;

 &lt;/ul&gt;</description>

            <name>onUpdate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>This Tag is a helper tag for any of the Tag which communicate over HTTP to an URL. Whilst opening

 a post or get connection for the url this tag will let you set an http parameter and assign a value 

 to it. 

 &lt;pre&gt;&lt;code&gt;

 	&amp;lt;ext:jsonStore url="fetchData.json" root="result" method="post"&amp;gt;

		&amp;lt;ext:httpParam name="user" value="umut"/&amp;gt;

		&amp;lt;ext:httpParam name="paramId" value="1"/&amp;gt;

		...

	&amp;lt;/ext:jsonStore&amp;gt;

 &lt;/code&gt;&lt;/pre&gt;

 

 There are many places this tag is used. In general anywhere you need to send HTTP params this tag is used. 

 &lt;ul&gt;

 	&lt;li&gt;JsonStoreTag&lt;/li&gt;

 	&lt;li&gt;FormPanelTag&lt;/li&gt;

 	&lt;li&gt;TreeLoaderTag&lt;/li&gt;

 	&lt;li&gt;XmlStoreTag&lt;/li&gt;

 &lt;/ul&gt;</description>

		<name>httpParam</name>

		<tag-class>isola.tags.ext.data.HttpParamTag</tag-class>

		<body-content>empty</body-content>

		<attribute><description>Name of the parameter</description>

            <name>name</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Value for the parameter</description>

            <name>value</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>A Datastore which fetches its data from a HTTP request and the response is a valid XML String

 

 &lt;pre&gt;&lt;code&gt;

	&amp;lt;ext:gridPanel id="myGrid" width="400" height="200" forceFit="true" renderTo="pbar" border="true"&amp;gt;

		&amp;lt;ext:xmlStore url="servlet/XmlSampleServlet" record="property"&amp;gt;

			&amp;lt;ext:httpParam name="id" value="111"/&amp;gt;

			&amp;lt;ext:httpParam name="user" value="umut"/&amp;gt;

			&amp;lt;ext:storeMapping name="name" /&amp;gt;

			&amp;lt;ext:storeMapping name="value"/&amp;gt;

		&amp;lt;/ext:xmlStore&amp;gt;

		&amp;lt;ext:columnModel&amp;gt;

			 &amp;lt;ext:gridColumn dataIndex="name" header="Name" sortable="false"/&amp;gt;

			 &amp;lt;ext:gridColumn dataIndex="value" header="Value" sortable="true"/&amp;gt;

		&amp;lt;/ext:columnModel&amp;gt;

	&amp;lt;/ext:gridPanel&amp;gt;

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;This will consume a XML string like: &lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 

 &amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;

 &amp;lt;data&amp;gt;

	&amp;lt;environment&amp;gt;

		&amp;lt;property&amp;gt;

			&amp;lt;name&amp;gt;java.runtime.name&amp;lt;/name&amp;gt;

			&amp;lt;value&amp;gt;Java(TM) SE Runtime Environment&amp;lt;/value&amp;gt;

		&amp;lt;/property&amp;gt;

		&amp;lt;property&amp;gt;

			&amp;lt;name&amp;gt;com.atomikos.icatch.file&amp;lt;/name&amp;gt;

			&amp;lt;value&amp;gt;D:\dev\java\jetty-6.1.7/contexts/test-jndi.d/WEB-INF/classes/jta.properties&amp;lt;/value&amp;gt;

		&amp;lt;/property&amp;gt;

	&amp;lt;/environment&amp;gt;

 &amp;lt;/data&amp;gt;

 

 &lt;/code&gt;&lt;/pre&gt;</description>

		<name>xmlStore</name>

		<tag-class>isola.tags.ext.data.XmlStoreTag</tag-class>

		<body-content>JSP</body-content>

		<attribute><description>If passed, this store's load method is automatically called after creation with the autoLoad 

 object</description>

            <name>autoLoad</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Inline data to be loaded when the store is initialized.</description>

            <name>data</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to clear all modified record information each time the store is loaded or when a record 

 is removed. (defaults to false).</description>

            <name>pruneModifiedRecords</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;True if sorting is to be handled by requesting the Proxy to provide a refreshed version 

 of the data object in sorted order, as opposed to sorting the Record cache in place 

 (defaults to false).&lt;/p&gt;

 

 &lt;p&gt;If remote sorting is specified, then clicking on a column header causes the current 

 page to be requested from the server with the addition of the following two parameters:&lt;/p&gt;

 &lt;ul&gt;

 	&lt;li&gt;

 		&lt;strong&gt;sort(String):&lt;/strong&gt;The name (as specified in the Record's Field definition) 

 		of the field to sort on. 

 	&lt;/li&gt;

	&lt;li&gt;

 		&lt;strong&gt;dir(String):&lt;/strong&gt;The direction of the sort, "ASC" or "DESC" (case-sensitive).

	&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>remoteSort</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If passed, the id to use to register with the StoreMgr</description>

            <name>storeId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If passed, an HttpProxy is created for the passed URL</description>

            <name>url</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>record</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>success</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>totalRecords</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>method</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when Records have been added to the Store &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Store&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;records&lt;/strong&gt;:(Ext.data.Record[]) The array of Records added&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the record(s) were added&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAdd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before a request is made for a new data object. If the beforeload handler returns false

 the load action will be canceled.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Store&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;options&lt;/strong&gt;:(Object) The loading options that were specified (see load for details)&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeLoad</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the data cache has been cleared.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Store&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onClear</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the data cache has changed, and a widget which is using this Store as a Record 

 cache should refresh its view. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Store&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDataChanged</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after a new set of Records has been loaded. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Store&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;records&lt;/strong&gt;:(Ext.data.Record[]) The Records that were loaded&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;options&lt;/strong&gt;:(Object) The loading options that were specified (see load for details)&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onLoad</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires if an exception occurs in the Proxy during loading. Called with the signature of the 

 Proxy's "loadexception" event.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;None&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onLoadException</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this store's reader provides new metadata (fields). This is currently only supported

  for JsonReaders. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Store&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;meta&lt;/strong&gt;:(Object) The JSON metadata&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMetaChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a Record has been removed from the Store &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Store&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;record&lt;/strong&gt;:(Ext.data.Record) The Record that was removed&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the record was removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a Record has been updated &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Store&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;record&lt;/strong&gt;:(Ext.data.Record) The Record that was updated&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;operation&lt;/strong&gt;:(String) The update operation being performed. Value may be one of: &lt;/li&gt;

 &lt;code&gt;

 Ext.data.Record.EDIT

 Ext.data.Record.REJECT

 Ext.data.Record.COMMIT

 &lt;/code&gt;

 &lt;/ul&gt;</description>

            <name>onUpdate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>&lt;p&gt;This class represents the primary interface of a component based grid control.&lt;/p&gt;

 &lt;p&gt;Usage:&lt;/p&gt;

 &lt;code&gt;&lt;pre&gt;

 

 &amp;lt;ext:body runOnLoad="true"&amp;gt;

 	&amp;lt;ext:gridPanel renderTo="form-ct" border="true" width="770" height="480" forceFit="true"&amp;gt;

 		&amp;lt;ext:jsonStore url="servlet/JsonSampleServlet" root="result"&amp;gt;

 			&amp;lt;ext:httpParam name="action" value="env"/&amp;gt;

 			&amp;lt;ext:storeMapping name="name"/&amp;gt;

 			&amp;lt;ext:storeMapping name="value"/&amp;gt;

 		&amp;lt;/ext:jsonStore&amp;gt;

 		&amp;lt;ext:columnModel&amp;gt;

 			&amp;lt;ext:gridColumn dataIndex="name" header="Name" /&amp;gt;

 			&amp;lt;ext:gridColumn dataIndex="value" header="Value" /&amp;gt;

 		&amp;lt;/ext:columnModel&amp;gt;

 	&amp;lt;/ext:gridPanel&amp;gt;

 &amp;lt;/ext:body&amp;gt;

 	

 &amp;lt;div style="width:800px;margin:50px;"&amp;gt;

     &amp;lt;div class="x-box-tl"&amp;gt;&amp;lt;div class="x-box-tr"&amp;gt;&amp;lt;div class="x-box-tc"&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;

     &amp;lt;div class="x-box-ml"&amp;gt;&amp;lt;div class="x-box-mr"&amp;gt;&amp;lt;div class="x-box-mc"&amp;gt;

         &amp;lt;h3 style="margin-bottom:5px;"&amp;gt;Simple Form&amp;lt;/h3&amp;gt;

         &amp;lt;div id="form-ct"&amp;gt;&amp;lt;/div&amp;gt;

     &amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;

     &amp;lt;div class="x-box-bl"&amp;gt;&amp;lt;div class="x-box-br"&amp;gt;&amp;lt;div class="x-box-bc"&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;

 &amp;lt;/div&amp;gt;

 

 &lt;/pre&gt;&lt;/code&gt;

 

 &lt;p&gt;Note: Although this class inherits many configuration options from base classes, some 

 of them (such as autoScroll, layout, items, etc) won't function as they do with the base 

 Panel class.&lt;/p&gt;

 

 &lt;p&gt;To access the data in a Grid, it is necessary to use the data model encapsulated by 

 the Store. See the cellclick event.&lt;/p&gt;</description>

		<name>gridPanel</name>

		<tag-class>isola.tags.ext.grid.GridPanelTag</tag-class>

		<body-content>JSP</body-content>

		<attribute>

            <name>split</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>storeId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If anchor layout is used you can set an anchor value here.</description>

            <name>anchor</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If absolute layout is used you can set an absolute X position in pixels to place the component in

 the layout.</description>

            <name>x</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If absolute layout is used you can set an absolute Y position in pixels to place the component in

 the layout.</description>

            <name>y</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If column layout is used you can give a float column width from 0 to 1. Valid example: .5</description>

            <name>columnWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If table layout is used you can set rowspan as in an ordinary table.</description>

            <name>rowSpan</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If table layout is used you can set colspan as in an ordinary table.</description>

            <name>colSpan</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Whether the component can move the Dom node when rendering (defaults to true).</description>

            <name>allowDomMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element corresponding 

 to a DIV that is already present in the document that specifies some 

 structural markup for this component. When applyTo is used, constituent 

 parts of the component can also be specified by id or CSS class name 

 within the main element, and the component being created may attempt to 

 create its subcomponents from that markup if applicable. Using this 

 config, a call to render() is not required. If applyTo is specified, 

 any value passed for renderTo will be ignored and the target element's 

 parent node will automatically be used as the component's container.</description>

            <name>applyTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the component should check for hidden classes (e.g. 'x-hidden' 

 or 'x-hide-display') and remove them on render (defaults to false).</description>

            <name>autoShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 Element (defaults to ''). This can be useful for adding customized styles 

 to the component or any of its children using standard CSS rules.</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 container (defaults to ''). This can be useful for adding customized 

 styles to the container or any of its children using standard CSS rules.</description>

            <name>ctCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class added to the component when it is disabled (defaults to 

 "x-item-disabled").</description>

            <name>disabledClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide and show the component's container when hide/show is 

 called on the component, false to hide and show the component itself 

 (defaults to false). For example, this can be used as a shortcut 

 for a hide button on a window by setting hide:true on the button when 

 adding it to its parent container.</description>

            <name>hideParent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id of this component (defaults to an auto-assigned id).</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element that will be the 

 container to render this component into. Using this config, a call to 

 render() is not required.</description>

            <name>renderTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id for this component to use for state management purposes 

 (defaults to the component id). See stateful for an explanation of saving 

 and restoring Component state.</description>

            <name>stateId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;A flag which causes the Component to attempt to restore the state of 

 internal properties from a saved state on startup.&lt;/p&gt;

 

 &lt;p&gt;For state saving to work, the state manager's provider must have been 

 set to an implementation of Ext.state.Provider which overrides the set 

 and get methods to save and recall name/value pairs. A built-in 

 implementation, Ext.state.CookieProvider is available.&lt;/p&gt;

 

 &lt;p&gt;To set the state provider for the current page:&lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;Components attempt to save state when one of the events listed in the stateEvents 

 configuration fires.&lt;/p&gt;

 

 &lt;p&gt;You can perform extra processing on state save and restore by attaching 

 handlers to the beforestaterestore, staterestore, beforestatesave and statesave 

 events.&lt;/p&gt;</description>

            <name>stateful</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom style specification to be applied to this component's Element. Should 

 be a valid argument to Ext.Element.applyStyles.</description>

            <name>style</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Where to place this component. Valid values are south, north, west, east, center</description>

            <name>region</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>How this component should hidden. Supported values are "visibility" 

 (css visibility), "offsets" (negative offset position) and "display" 

 (css display) - defaults to "display".</description>

            <name>hideMode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use height:'auto', false to use fixed height (defaults to false).</description>

            <name>autoHeight</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use width:'auto', false to use fixed width (defaults to false).</description>

            <name>autoWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The height of this component in pixels (defaults to auto).</description>

            <name>height</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width of this component in pixels (defaults to auto).</description>

            <name>width</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>HTML Element this object is parsed on.</description>

            <name>el</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A string component id or the numeric index of the component that should be 

 initially activated within the container's layout on render. For example, 

 activeItem: 'item-1' or activeItem: 0 (index 0 = the first item in the 

 container's collection). activeItem only applies to layout styles that can 

 display items one at a time (like Ext.layout.Accordion, 

 Ext.layout.CardLayout and Ext.layout.FitLayout). 

 Related to Ext.layout.ContainerLayout.activeItem.</description>

            <name>activeItem</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If true the container will automatically destroy any contained component 

 that is removed from it, else destruction must be handled manually 

 (defaults to true).</description>

            <name>autoDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>When set to true (100 milliseconds) or a number of milliseconds, the 

 layout assigned for this container will buffer the frequency it calculates 

 and does a re-layout of components. This is useful for heavy containers 

 or containers with a large amount of sub components that frequent calls 

 to layout are expensive.</description>

            <name>bufferResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default type of container represented by this object as registered 

  in Ext.ComponentMgr (defaults to 'panel').</description>

            <name>defaultType</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the borders of each contained component, false to defer to the 

 component's existing border settings (defaults to false).</description>

            <name>hideBorders</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;The layout type to be used in this container. If not specified, a default 

 Ext.layout.ContainerLayout will be created and used. 

 

 &lt;p&gt;Valid values are:&lt;/p&gt;

 &lt;ul&gt;

 &lt;li&gt;accordion, &lt;/li&gt;

 &lt;li&gt;anchor, &lt;/li&gt; 

 &lt;li&gt;border,&lt;/li&gt; 

 &lt;li&gt;card,&lt;/li&gt; 

 &lt;li&gt;column,&lt;/li&gt; 

 &lt;li&gt;fit,&lt;/li&gt; 

 &lt;li&gt;form&lt;/li&gt;

 &lt;li&gt;table.&lt;/li&gt; 

 &lt;/ul&gt;

 &lt;p&gt;Specific config values for the chosen layout type can be specified using 

 layoutConfig.&lt;/p&gt;</description>

            <name>layout</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to automatically monitor window resize events to handle anything that is 

 sensitive to the current size of the viewport. This value is typically managed 

 by the chosen layout and should not need to be set manually.</description>

            <name>monitorResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to animate the transition when the panel is collapsed, false to skip 

 the animation (defaults to true if the Ext.Fx class is available, otherwise 

 false).</description>

            <name>animCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use overflow:'auto' on the panel's body element and show scroll bars 

 automatically when necessary, false to clip any overflowing content 

 (defaults to false).</description>

            <name>autoScroll</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The base CSS class to apply to this panel's element (defaults to 'x-panel').</description>

            <name>baseCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display an interior border on the body element of the panel, false 

 to hide it (defaults to true). This only applies when border == true. If 

 border == true and bodyBorder == false, the border will display as a 1px 

 wide inset border, giving the entire body element an inset appearance.</description>

            <name>bodyBorder</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Custom CSS styles to be applied to the body element in the format expected 

 by Ext.Element.applyStyles (defaults to null).</description>

            <name>bodyStyle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display the borders of the panel's body element, false to hide them 

 (defaults to true). By default, the border is a 2px wide inset border, but 

 this can be further altered by setting bodyBorder to false.</description>

            <name>border</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>When set to true (100 milliseconds) or a number of milliseconds, the 

 layout assigned for this container will buffer the frequency it calculates 

 and does a re-layout of components. This is useful for heavy containers 

 or containers with a large amount of sub components that frequent calls 

 to layout are expensive.</description>

            <name>bufferResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The alignment of any buttons added to this panel. Valid values are 'right,' 

 'left' and 'center' (defaults to 'right').</description>

            <name>buttonAlign</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to make sure the collapse/expand toggle button always renders first (to 

 the left of) any other tools in the panel's title bar, false to render it 

 last (defaults to true).</description>

            <name>collapseFirst</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to render the panel collapsed, false to render it expanded (defaults to false).</description>

            <name>collapsed</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS class to add to the panel's element after it has been collapsed (defaults 

 to 'x-panel-collapsed').</description>

            <name>collapsedCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to make the panel collapsible and have the expand/collapse toggle button 

 automatically rendered into the header tool button area, false to keep the 

 panel statically sized with no button (defaults to false).</description>

            <name>collapsible</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of an existing HTML node to use as the panel's body content (defaults to '').</description>

            <name>contentEl</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to enable dragging of this Panel (defaults to false). For custom drag/drop 

 implementations, an Ext.Panel.DD config could also be passed in this config 

 instead of true, although Ext.Panel.DD is an internal, undocumented class.</description>

            <name>draggable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A comma-delimited list of panel elements to initialize when the panel is 

 rendered. Normally, this list will be generated automatically based on the items 

 added to the panel at config time, but sometimes it might be useful to make 

 sure a structural element is rendered even if not specified at config time 

 (for example, you may want to add a button or toolbar dynamically after the 

 panel has been rendered). Adding those elements to this list will allocate 

 the required placeholders in the panel when it is rendered. 

 Valid values are

 &lt;ul&gt;

 &lt;li&gt;header&lt;/li&gt;

 &lt;li&gt;tbar (top bar)&lt;/li&gt;

 &lt;li&gt;body&lt;/li&gt;

 &lt;li&gt;bbar (bottom bar)&lt;/li&gt;

 &lt;li&gt;footer&lt;/li&gt;

 &lt;/ul&gt;

 Defaults to 'body'.</description>

            <name>elements</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to float the panel (absolute position it with automatic shimming and shadow), 

 false to display it inline where it is rendered (defaults to false). Note that 

 by default, setting floating to true will cause the panel to display at negative 

 offsets so that it is hidden -- because the panel is absolute positioned, the 

 position must be set explicitly after render (e.g., myPanel.setPosition(100,100);). 

 Also, when floating a panel you should always assign a fixed width, otherwise it 

 will be auto width and will expand to fill to the right edge of the viewport.</description>

            <name>floating</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to create the footer element explicitly, false to skip creating it. By 

 default, when footer is not specified, if one or more buttons have been added 

 to the panel the footer will be created automatically, otherwise it will not.</description>

            <name>footer</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Shows a nice rounded corner with a thick border around the panel.</description>

            <name>frame</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to create the header element explicitly, false to skip creating it. By 

 default, when header is not specified, if a title is set the header will be 

 created automatically, otherwise it will not. If a title is set but header is 

 explicitly set to false, the header will not be rendered.</description>

            <name>header</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display the panel title in the header, false to hide it (defaults to true).</description>

            <name>headerAsText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the expand/collapse toggle button when collapsible = true, false 

 to display it (defaults to false).</description>

            <name>hideCollapseTool</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An HTML fragment, or a DomHelper specification to use as the panel's body 

 content (defaults to '').</description>

            <name>html</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS class that will provide a background image to be used as the panel header 

 icon (defaults to '').</description>

            <name>iconCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to mask the panel when it is disabled, false to not mask it (defaults 

 to true). Either way, the panel will always tell its contained elements to 

 disable themselves when it is disabled, but masking the panel can provide an 

 additional visual cue that the panel is disabled.</description>

            <name>maskDisabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Minimum width in pixels of all buttons in this panel (defaults to 75)</description>

            <name>minButtonWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True (or a valid Ext.Shadow Ext.Shadow.mode value) to display a shadow behind 

 the panel, false to display no shadow (defaults to 'sides'). Note that this 

 option only applies when floating = true.</description>

            <name>shadow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The number of pixels to offset the shadow if displayed (defaults to 4). Note 

 that this option only applies when floating = true.</description>

            <name>shadowOffset</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>False to disable the iframe shim in browsers which need one (defaults to true). 

 Note that this option only applies when floating = true.</description>

            <name>shim</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Adds a tooltip when mousing over the tab of a Ext.Panel which is an item of a 

 Ext.TabPanel. Ext.QuickTips.init() must be called in order for the tips to render.</description>

            <name>tabTip</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The title text to display in the panel header (defaults to ''). When a title 

 is specified the header element will automatically be created and displayed 

 unless header is explicitly set to false. If you don't want to specify a title 

 at config time, but you may want one later, you must either specify a non-empty 

 title (a blank space ' ' will do) or header:true so that the container element 

 will get created.</description>

            <name>title</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to allow expanding and collapsing the panel (when collapsible = true) 

 by clicking anywhere in the header bar, false to allow it only by clicking to 

 tool button (defaults to false).</description>

            <name>titleCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of a column in this grid that should expand to fill unused space. This id can not 

 be 0.</description>

            <name>autoExpandColumn</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The maximum width the autoExpandColumn can have (if enabled). Defaults to 1000.</description>

            <name>autoExpandMax</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The minimum width the autoExpandColumn can have (if enabled). defaults to 50.</description>

            <name>autoExpandMin</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to disable selections in the grid (defaults to false). - ignored a SelectionModel is 

 specified</description>

            <name>disableSelection</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to enable hiding of columns with the header context menu.</description>

            <name>enableColumnHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to enable drag and drop reorder of columns.</description>

            <name>enableColumnMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>False to turn off column resizing for the whole grid (defaults to true).</description>

            <name>enableColumnResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to enable drag and drop of rows.</description>

            <name>enableDragDrop</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to enable the drop down button for menu in the headers.</description>

            <name>enableHdMenu</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An Ext.LoadMask config or true to mask the grid while loading (defaults to false).</description>

            <name>loadMask</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Sets the maximum height of the grid - ignored if autoHeight is not on.</description>

            <name>maxHeight</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The minimum width a column can be resized to. Defaults to 25.</description>

            <name>minColumnWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to autoSize the grid when the window resizes. Defaults to true.</description>

            <name>monitorWindowResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to stripe the rows. Default is false.</description>

            <name>stripeRows</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to highlight rows when the mouse is over. Default is true.</description>

            <name>trackMouseOver</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to auto expand the columns to fit the grid when the grid is created.</description>

            <name>autoFill</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Default text to display in the grid body when no rows are available (defaults to '').</description>

            <name>emptyText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to add a second TR element per row that can be used to provide a row body that spans beneath 

 the data row. Use the getRowClass method's rowParams config to customize the row body.</description>

            <name>enableRowBody</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to auto expand/contract the size of the columns to fit the grid width and prevent horizontal scrolling.</description>

            <name>forceFit</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Boolean. If set to true, the selection model will be CellSelectionModel and the mouse pointer

 will start selecting by cells.</description>

            <name>cellSelect</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Boolean. If set to true, a column containing checkboxes will be automatically added to the 

 leftmost side of columns. You can get which items are selected in grid by getSelected method.</description>

            <name>checkboxEnabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Boolean. If set to true, a column containing auto incrementing numbers will be automatically added 

 to the leftmost side of columns.</description>

            <name>rowNumbererEnabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Boolean. If set to true only one row at a time can be selected.</description>

            <name>singleSelect</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is destroyed. Return false to stop the destroy.&lt;p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is hidden. Return false to stop the hide.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is rendered. Return false to stop the render. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is shown. Return false to stop the show. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is restored. Return false to stop the restore.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is saved to the 

 configured state provider. Return false to stop the save. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is destroyed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is disabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is enabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEnable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is hidden. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is rendered.  &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is shown.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is restored. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is saved to the configured state provider. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is moved. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;x&lt;/strong&gt;: (Number)The new x position&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;y&lt;/strong&gt;: (Number)The new y position&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is resized.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjWidth&lt;/strong&gt;:(Number) The box-adjusted width that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjHeight&lt;/strong&gt;:(Number) The box-adjusted height that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawWidth&lt;/strong&gt;:(Number) The width that was originally specified&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawHeight&lt;/strong&gt;:(Number) The height that was originally specified&lt;/li&gt; 		

 &lt;/ul&gt;</description>

            <name>onResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after any Ext.Component is added or inserted into the container.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;:(Ext.Component) The component that was added&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the component was added to the container's items collection&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAdd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the components in this container are arranged by the associated layout manager. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;layout&lt;/strong&gt;:(ContainerLayout) The ContainerLayout implementation for this container&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAfterLayout</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before any Ext.Component is added or inserted into the container. A handler can return false to cancel the add.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;:(Ext.Component) The component being added&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the component will be added to the container's items collection&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeAdd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before any Ext.Component is removed from the container. A handler can return false to cancel the remove. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: (Ext.Component) The component being removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after any Ext.Component is removed from the container&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: (Ext.Component) The component that was removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been visually activated. Note that Panels do not directly support 

 being activated, but some Panel subclasses do (like Ext.Window). Panels which are child Components 

 of a TabPanel fire the activate and deactivate events under the control of the TabPanel. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been activated.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onActivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is closed. Note that Panels do not directly support being closed, but some

  Panel subclasses do (like Ext.Window). This event only applies to such subclasses. A handler can 

  return false to cancel the close. &lt;/p&gt;

  Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel being closed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeClose</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is collapsed. A handler can return false to cancel the collapse. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel being collapsed.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;animate&lt;/strong&gt;:(Boolean) True if the collapse is animated, else false.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is expanded. A handler can return false to cancel the expand. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel being expanded.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;animate&lt;/strong&gt;:(Boolean) True if the expand is animated, else false.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been resized. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel which has been resized.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;width&lt;/strong&gt;:(Number) The Panel's new width.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;height &lt;/strong&gt;:(Number) The Panel's new height.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBodyResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel is closed. Note that Panels do not directly support being closed, but 

 some Panel subclasses do (like Ext.Window). &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been closed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onClose</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been collapsed. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel that has been collapsed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been visually deactivated. Note that Panels do not directly support 

 being deactivated, but some Panel subclasses do (like Ext.Window). Panels which are child Components

 of a TabPanel fire the activate and deactivate events under the control of the TabPanel. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been deactivated.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDeactivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been expanded. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been expanded.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel title has been set or changed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel which has had its title changed.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;The&lt;/strong&gt;:(String) new title.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onTitleChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a cell is clicked. The data for the cell is drawn from the Record for this row.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Grid&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rowIndex&lt;/strong&gt; : Number&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;columnIndex&lt;/strong&gt; : Number&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onCellClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a cell is right clicked &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Grid&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rowIndex&lt;/strong&gt; : Number&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;cellIndex&lt;/strong&gt; : Number&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onCellContextMenu</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a cell is double clicked &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Grid&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rowIndex&lt;/strong&gt; : Number&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;columnIndex&lt;/strong&gt; : Number&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onCellDblClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before a cell is clicked &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Grid&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rowIndex&lt;/strong&gt; : Number&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;columnIndex&lt;/strong&gt; : Number&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onCellMouseDown</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;The raw click event for the entire grid.&lt;/p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the user moves a column &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;oldIndex&lt;/strong&gt; : Number&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;newIndex&lt;/strong&gt; : Number&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onColumnMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the user resizes a column &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;columnIndex&lt;/strong&gt; : Number&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;newSize&lt;/strong&gt; : Number&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onColumnResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;The raw contextmenu event for the entire grid. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onContextMenu</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;The raw dblclick event for the entire grid. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDblClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a header is clicked &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Grid&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;columnIndex &lt;/strong&gt; : Number&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHeaderClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a header is right clicked &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Grid&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;columnIndex &lt;/strong&gt; : Number&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHeaderContextMenu</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a header cell is double clicked&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Grid&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;columnIndex &lt;/strong&gt; : Number&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHeaderDblClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before a header is clicked &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Grid&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;columnIndex &lt;/strong&gt; : Number&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHeaderMouseDown</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;The raw keydown event for the entire grid.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onKeyDown</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;The raw keypress event for the entire grid. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onKeyPress</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;The raw mousedown event for the entire grid. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMouseDown</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;The raw mouseout event for the entire grid. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMouseOut</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;The raw mouseover event for the entire grid. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMouseOver</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;The raw mouseup event for the entire grid. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMouseUp</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a row is clicked &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Grid&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rowIndex&lt;/strong&gt; : Number&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRowClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a row is right clicked &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Grid&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rowIndex&lt;/strong&gt; : Number&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRowContextMenu</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a row is double clicked &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Grid&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rowIndex&lt;/strong&gt; : Number&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRowDblClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before a row is clicked&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Grid&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rowIndex&lt;/strong&gt; : Number&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRowMouseDown</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the grid's store sort changes &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Grid&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;sortInfo&lt;/strong&gt; : (Object) An object with the keys field and direction&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onSortChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>Tag representing a column for a grid. Grid columns must supply the value dataIndex value which 

 must match a key at the grid's store. Other options than dataIndex are optional. They should be 

 in a columnModel tag, although this is optional. Example: 

 

 &lt;pre&gt;&lt;code&gt;

 	&amp;lt;ext:body runOnLoad="true"&amp;gt;

 		&amp;lt;ext:gridPanel renderTo="form-ct" border="true" width="770" height="480" forceFit="true"&amp;gt;

 			&amp;lt;ext:jsonStore url="servlet/JsonSampleServlet" root="result"&amp;gt;

 				&amp;lt;ext:httpParam name="action" value="env"/&amp;gt;

 				&amp;lt;ext:storeMapping name="name"/&amp;gt;

 				&amp;lt;ext:storeMapping name="value"/&amp;gt;

 			&amp;lt;/ext:jsonStore&amp;gt;

 			&amp;lt;ext:columnModel&amp;gt;

 				&amp;lt;ext:gridColumn dataIndex="name" header="Name" /&amp;gt;

 				&amp;lt;ext:gridColumn dataIndex="value" header="Value" /&amp;gt;

 			&amp;lt;/ext:columnModel&amp;gt;

 		&amp;lt;/ext:gridPanel&amp;gt;

 	&amp;lt;/ext:body&amp;gt;

 &lt;/code&gt;&lt;/pre&gt;</description>

		<name>gridColumn</name>

		<tag-class>isola.tags.ext.grid.GridColumnTag</tag-class>

		<body-content>JSP</body-content>

		<attribute><description>(optional) Defaults to the column's initial ordinal position. A name which identifies 

 this column. The id is used to create a CSS class name which is applied to all table 

 cells (including headers) in that column. The class name takes the form of 

 &lt;code&gt;x-grid3-td-id&lt;/code&gt;. Header cells will also recieve this class name, but will 

 also have the class x-grid3-hd, so to target header cells, use CSS selectors such as:

 &lt;code&gt;.x-grid3-hd.x-grid3-td-id&lt;/code&gt;. The Ext.grid.Grid.autoExpandColumn grid config 

 option references the column via this identifier.</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The header text to display in the Grid view.</description>

            <name>header</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>(optional) The initial width in pixels of the column. Using this instead of 

 Ext.grid.Grid.autoSizeColumns is more efficient.</description>

            <name>width</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>(optional) True if sorting is to be allowed on this column. Defaults to the value of the 

 defaultSortable property. Whether local/remote sorting is used is specified in 

 Ext.data.Store.remoteSort.</description>

            <name>sortable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>(optional) The name of the field in the grid's Ext.data.Store's Ext.data.Record definition 

 from which to draw the column's value. If not specified, the column's index is used as 

 an index into the Record's data Array.</description>

            <name>dataIndex</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>(optional) A function used to generate HTML markup for a cell given the cell's data 

 value. See setRenderer. If not specified, the default renderer uses the raw data value.</description>

            <name>renderer</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>(optional) Set the CSS text-align property of the column. Defaults to undefined.</description>

            <name>align</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>(optional) Set custom CSS for all table cells in the column (excluding headers). Defaults 

 to undefined.</description>

            <name>css</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>(optional) True if the column width cannot be changed. Defaults to false.</description>

            <name>fixed</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>(optional) True to hide the column. Defaults to false.</description>

            <name>hidden</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>(optional) Specify as false to prevent the user from hiding this column. Defaults to 

 true.</description>

            <name>hideable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>(optional) False to disable column resizing. Defaults to true.</description>

            <name>resizable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>(optional) A text string to use as the column header's tooltip. If Quicktips are enabled, 

 this value will be used as the text of the quick tip, otherwise it will be set as the 

 header's HTML title attribute. Defaults to ''.</description>

            <name>tooltip</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>&lt;p&gt;A datastore which automatically consumes Java objects which are in pageContext, Request or 

 Session scopes. Automatically parses it using Java Reflection API and converts them to javascript

 arrays which are consumable by the ArrayStore. This DataStore type uses the array data 

 store type underneath but a more complex method since it converts the Java objects to Javascript 

 arrays. &lt;/p&gt;

 

 &lt;p&gt;This Data Store will need a Java Collection to be set to any of the scopes: pageContext, 

 request and session. If no scope is set, the search order is also the same.&lt;/p&gt;

 

 There are two attributes generally used for this data store type. 

 &lt;ul&gt;

 	&lt;li&gt;&lt;strong&gt;httpAttribute&lt;/strong&gt;: The name of the attribute which is set in the page, request 

 	or session&lt;/li&gt;

 	&lt;li&gt;&lt;strong&gt;httpScope&lt;/strong&gt;: The scope where to search for. For performance reasons it is 

 	better to set it. Valid values are pageContext, request and session.&lt;/li&gt;

 &lt;/ul&gt;</description>

		<name>contextStore</name>

		<tag-class>isola.tags.ext.data.ContextStoreTag</tag-class>

		<body-content>JSP</body-content>

		<attribute><description>True to clear all modified record information each time the store is loaded or when a record 

 is removed. (defaults to false).</description>

            <name>pruneModifiedRecords</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If passed, the id to use to register with the StoreMgr</description>

            <name>storeId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>
		<attribute><description>If a calendar or a date field exists, you can set the formatting pattern here.</description>
            <name>datePattern</name>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
		</attribute>

		<attribute><description>The name of the attribute which is set in the page, request or session</description>

            <name>httpAttribute</name>

            <required>true</required>

            <rtexprvalue>false</rtexprvalue>

		</attribute>

		<attribute><description>The scope where to search for. For performance reasons it is better to set it. Valid values 

 are pageContext, request and session</description>

            <name>httpScope</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when Records have been added to the Store &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Store&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;records&lt;/strong&gt;:(Ext.data.Record[]) The array of Records added&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the record(s) were added&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAdd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before a request is made for a new data object. If the beforeload handler returns false

 the load action will be canceled.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Store&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;options&lt;/strong&gt;:(Object) The loading options that were specified (see load for details)&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeLoad</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the data cache has been cleared.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Store&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onClear</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the data cache has changed, and a widget which is using this Store as a Record 

 cache should refresh its view. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Store&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDataChanged</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after a new set of Records has been loaded. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Store&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;records&lt;/strong&gt;:(Ext.data.Record[]) The Records that were loaded&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;options&lt;/strong&gt;:(Object) The loading options that were specified (see load for details)&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onLoad</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires if an exception occurs in the Proxy during loading. Called with the signature of the 

 Proxy's "loadexception" event.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;None&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onLoadException</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this store's reader provides new metadata (fields). This is currently only supported

  for JsonReaders. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Store&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;meta&lt;/strong&gt;:(Object) The JSON metadata&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMetaChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a Record has been removed from the Store &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Store&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;record&lt;/strong&gt;:(Ext.data.Record) The Record that was removed&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the record was removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a Record has been updated &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Store&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;record&lt;/strong&gt;:(Ext.data.Record) The Record that was updated&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;operation&lt;/strong&gt;:(String) The update operation being performed. Value may be one of: &lt;/li&gt;

 &lt;code&gt;

 Ext.data.Record.EDIT

 Ext.data.Record.REJECT

 Ext.data.Record.COMMIT

 &lt;/code&gt;

 &lt;/ul&gt;</description>

            <name>onUpdate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>&lt;p&gt;This is the default implementation of a ColumnModel used by the Grid. This class is 

 initialized with an Array of column config objects.&lt;/p&gt;</description>

		<name>columnModel</name>

		<tag-class>isola.tags.ext.grid.ColumnModelTag</tag-class>

		<body-content>JSP</body-content>
		<attribute><description>If you have a row expander define its variable here.</description>
            <name>rowExpander</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>Class for creating and editable grid.

 

 &lt;code&gt;&lt;pre&gt;

 	&amp;lt;ext:body runOnLoad="true"&amp;gt;

 		&amp;lt;ext:editorGridPanel renderTo="form-ct" border="true" width="770" height="480" forceFit="true"&amp;gt;

 			&amp;lt;ext:jsonStore url="servlet/JsonSampleServlet" root="result"&amp;gt;

 				&amp;lt;ext:httpParam name="action" value="env"/&amp;gt;

 				&amp;lt;ext:storeMapping name="name"/&amp;gt;

 				&amp;lt;ext:storeMapping name="value"/&amp;gt;

 			&amp;lt;/ext:jsonStore&amp;gt;

 			&amp;lt;ext:columnModel&amp;gt;

 				&amp;lt;ext:gridColumn dataIndex="name" header="Name"&amp;gt;

 					&amp;lt;ext:textField name="txtName" /&amp;gt;

 				&amp;lt;/ext:gridColumn&amp;gt;

 				&amp;lt;ext:gridColumn dataIndex="value" header="Value"&amp;gt;

 					&amp;lt;ext:textField name="txtValue" /&amp;gt;

 				&amp;lt;/ext:gridColumn&amp;gt;

 			&amp;lt;/ext:columnModel&amp;gt;

 		&amp;lt;/ext:editorGridPanel&amp;gt;

 	&amp;lt;/ext:body&amp;gt;

 		

 	&amp;lt;div style="width:800px;margin:50px;"&amp;gt;

 	    &amp;lt;div class="x-box-tl"&amp;gt;&amp;lt;div class="x-box-tr"&amp;gt;&amp;lt;div class="x-box-tc"&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;

 	    &amp;lt;div class="x-box-ml"&amp;gt;&amp;lt;div class="x-box-mr"&amp;gt;&amp;lt;div class="x-box-mc"&amp;gt;

 	        &amp;lt;h3 style="margin-bottom:5px;"&amp;gt;Editor Grid Sample&amp;lt;/h3&amp;gt;

 	        &amp;lt;div id="form-ct"&amp;gt;

 

 	        &amp;lt;/div&amp;gt;

 	    &amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;

 	    &amp;lt;div class="x-box-bl"&amp;gt;&amp;lt;div class="x-box-br"&amp;gt;&amp;lt;div class="x-box-bc"&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;

 	&amp;lt;/div&amp;gt;

 &lt;/pre&gt;&lt;/code&gt;</description>

		<name>editorGridPanel</name>

		<tag-class>isola.tags.ext.grid.EditorGridPanelTag</tag-class>

		<body-content>JSP</body-content>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>storeId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If anchor layout is used you can set an anchor value here.</description>

            <name>anchor</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If absolute layout is used you can set an absolute X position in pixels to place the component in

 the layout.</description>

            <name>x</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If absolute layout is used you can set an absolute Y position in pixels to place the component in

 the layout.</description>

            <name>y</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If column layout is used you can give a float column width from 0 to 1. Valid example: .5</description>

            <name>columnWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If table layout is used you can set rowspan as in an ordinary table.</description>

            <name>rowSpan</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If table layout is used you can set colspan as in an ordinary table.</description>

            <name>colSpan</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Whether the component can move the Dom node when rendering (defaults to true).</description>

            <name>allowDomMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element corresponding 

 to a DIV that is already present in the document that specifies some 

 structural markup for this component. When applyTo is used, constituent 

 parts of the component can also be specified by id or CSS class name 

 within the main element, and the component being created may attempt to 

 create its subcomponents from that markup if applicable. Using this 

 config, a call to render() is not required. If applyTo is specified, 

 any value passed for renderTo will be ignored and the target element's 

 parent node will automatically be used as the component's container.</description>

            <name>applyTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the component should check for hidden classes (e.g. 'x-hidden' 

 or 'x-hide-display') and remove them on render (defaults to false).</description>

            <name>autoShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 Element (defaults to ''). This can be useful for adding customized styles 

 to the component or any of its children using standard CSS rules.</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 container (defaults to ''). This can be useful for adding customized 

 styles to the container or any of its children using standard CSS rules.</description>

            <name>ctCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class added to the component when it is disabled (defaults to 

 "x-item-disabled").</description>

            <name>disabledClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide and show the component's container when hide/show is 

 called on the component, false to hide and show the component itself 

 (defaults to false). For example, this can be used as a shortcut 

 for a hide button on a window by setting hide:true on the button when 

 adding it to its parent container.</description>

            <name>hideParent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id of this component (defaults to an auto-assigned id).</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element that will be the 

 container to render this component into. Using this config, a call to 

 render() is not required.</description>

            <name>renderTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id for this component to use for state management purposes 

 (defaults to the component id). See stateful for an explanation of saving 

 and restoring Component state.</description>

            <name>stateId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;A flag which causes the Component to attempt to restore the state of 

 internal properties from a saved state on startup.&lt;/p&gt;

 

 &lt;p&gt;For state saving to work, the state manager's provider must have been 

 set to an implementation of Ext.state.Provider which overrides the set 

 and get methods to save and recall name/value pairs. A built-in 

 implementation, Ext.state.CookieProvider is available.&lt;/p&gt;

 

 &lt;p&gt;To set the state provider for the current page:&lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;Components attempt to save state when one of the events listed in the stateEvents 

 configuration fires.&lt;/p&gt;

 

 &lt;p&gt;You can perform extra processing on state save and restore by attaching 

 handlers to the beforestaterestore, staterestore, beforestatesave and statesave 

 events.&lt;/p&gt;</description>

            <name>stateful</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom style specification to be applied to this component's Element. Should 

 be a valid argument to Ext.Element.applyStyles.</description>

            <name>style</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Where to place this component. Valid values are south, north, west, east, center</description>

            <name>region</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>How this component should hidden. Supported values are "visibility" 

 (css visibility), "offsets" (negative offset position) and "display" 

 (css display) - defaults to "display".</description>

            <name>hideMode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use height:'auto', false to use fixed height (defaults to false).</description>

            <name>autoHeight</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use width:'auto', false to use fixed width (defaults to false).</description>

            <name>autoWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The height of this component in pixels (defaults to auto).</description>

            <name>height</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width of this component in pixels (defaults to auto).</description>

            <name>width</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>HTML Element this object is parsed on.</description>

            <name>el</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A string component id or the numeric index of the component that should be 

 initially activated within the container's layout on render. For example, 

 activeItem: 'item-1' or activeItem: 0 (index 0 = the first item in the 

 container's collection). activeItem only applies to layout styles that can 

 display items one at a time (like Ext.layout.Accordion, 

 Ext.layout.CardLayout and Ext.layout.FitLayout). 

 Related to Ext.layout.ContainerLayout.activeItem.</description>

            <name>activeItem</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If true the container will automatically destroy any contained component 

 that is removed from it, else destruction must be handled manually 

 (defaults to true).</description>

            <name>autoDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>When set to true (100 milliseconds) or a number of milliseconds, the 

 layout assigned for this container will buffer the frequency it calculates 

 and does a re-layout of components. This is useful for heavy containers 

 or containers with a large amount of sub components that frequent calls 

 to layout are expensive.</description>

            <name>bufferResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default type of container represented by this object as registered 

  in Ext.ComponentMgr (defaults to 'panel').</description>

            <name>defaultType</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the borders of each contained component, false to defer to the 

 component's existing border settings (defaults to false).</description>

            <name>hideBorders</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;The layout type to be used in this container. If not specified, a default 

 Ext.layout.ContainerLayout will be created and used. 

 

 &lt;p&gt;Valid values are:&lt;/p&gt;

 &lt;ul&gt;

 &lt;li&gt;accordion, &lt;/li&gt;

 &lt;li&gt;anchor, &lt;/li&gt; 

 &lt;li&gt;border,&lt;/li&gt; 

 &lt;li&gt;card,&lt;/li&gt; 

 &lt;li&gt;column,&lt;/li&gt; 

 &lt;li&gt;fit,&lt;/li&gt; 

 &lt;li&gt;form&lt;/li&gt;

 &lt;li&gt;table.&lt;/li&gt; 

 &lt;/ul&gt;

 &lt;p&gt;Specific config values for the chosen layout type can be specified using 

 layoutConfig.&lt;/p&gt;</description>

            <name>layout</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to automatically monitor window resize events to handle anything that is 

 sensitive to the current size of the viewport. This value is typically managed 

 by the chosen layout and should not need to be set manually.</description>

            <name>monitorResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to animate the transition when the panel is collapsed, false to skip 

 the animation (defaults to true if the Ext.Fx class is available, otherwise 

 false).</description>

            <name>animCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use overflow:'auto' on the panel's body element and show scroll bars 

 automatically when necessary, false to clip any overflowing content 

 (defaults to false).</description>

            <name>autoScroll</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The base CSS class to apply to this panel's element (defaults to 'x-panel').</description>

            <name>baseCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display an interior border on the body element of the panel, false 

 to hide it (defaults to true). This only applies when border == true. If 

 border == true and bodyBorder == false, the border will display as a 1px 

 wide inset border, giving the entire body element an inset appearance.</description>

            <name>bodyBorder</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Custom CSS styles to be applied to the body element in the format expected 

 by Ext.Element.applyStyles (defaults to null).</description>

            <name>bodyStyle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display the borders of the panel's body element, false to hide them 

 (defaults to true). By default, the border is a 2px wide inset border, but 

 this can be further altered by setting bodyBorder to false.</description>

            <name>border</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>When set to true (100 milliseconds) or a number of milliseconds, the 

 layout assigned for this container will buffer the frequency it calculates 

 and does a re-layout of components. This is useful for heavy containers 

 or containers with a large amount of sub components that frequent calls 

 to layout are expensive.</description>

            <name>bufferResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The alignment of any buttons added to this panel. Valid values are 'right,' 

 'left' and 'center' (defaults to 'right').</description>

            <name>buttonAlign</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to make sure the collapse/expand toggle button always renders first (to 

 the left of) any other tools in the panel's title bar, false to render it 

 last (defaults to true).</description>

            <name>collapseFirst</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to render the panel collapsed, false to render it expanded (defaults to false).</description>

            <name>collapsed</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS class to add to the panel's element after it has been collapsed (defaults 

 to 'x-panel-collapsed').</description>

            <name>collapsedCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to make the panel collapsible and have the expand/collapse toggle button 

 automatically rendered into the header tool button area, false to keep the 

 panel statically sized with no button (defaults to false).</description>

            <name>collapsible</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of an existing HTML node to use as the panel's body content (defaults to '').</description>

            <name>contentEl</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to enable dragging of this Panel (defaults to false). For custom drag/drop 

 implementations, an Ext.Panel.DD config could also be passed in this config 

 instead of true, although Ext.Panel.DD is an internal, undocumented class.</description>

            <name>draggable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A comma-delimited list of panel elements to initialize when the panel is 

 rendered. Normally, this list will be generated automatically based on the items 

 added to the panel at config time, but sometimes it might be useful to make 

 sure a structural element is rendered even if not specified at config time 

 (for example, you may want to add a button or toolbar dynamically after the 

 panel has been rendered). Adding those elements to this list will allocate 

 the required placeholders in the panel when it is rendered. 

 Valid values are

 &lt;ul&gt;

 &lt;li&gt;header&lt;/li&gt;

 &lt;li&gt;tbar (top bar)&lt;/li&gt;

 &lt;li&gt;body&lt;/li&gt;

 &lt;li&gt;bbar (bottom bar)&lt;/li&gt;

 &lt;li&gt;footer&lt;/li&gt;

 &lt;/ul&gt;

 Defaults to 'body'.</description>

            <name>elements</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to float the panel (absolute position it with automatic shimming and shadow), 

 false to display it inline where it is rendered (defaults to false). Note that 

 by default, setting floating to true will cause the panel to display at negative 

 offsets so that it is hidden -- because the panel is absolute positioned, the 

 position must be set explicitly after render (e.g., myPanel.setPosition(100,100);). 

 Also, when floating a panel you should always assign a fixed width, otherwise it 

 will be auto width and will expand to fill to the right edge of the viewport.</description>

            <name>floating</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to create the footer element explicitly, false to skip creating it. By 

 default, when footer is not specified, if one or more buttons have been added 

 to the panel the footer will be created automatically, otherwise it will not.</description>

            <name>footer</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Shows a nice rounded corner with a thick border around the panel.</description>

            <name>frame</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to create the header element explicitly, false to skip creating it. By 

 default, when header is not specified, if a title is set the header will be 

 created automatically, otherwise it will not. If a title is set but header is 

 explicitly set to false, the header will not be rendered.</description>

            <name>header</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display the panel title in the header, false to hide it (defaults to true).</description>

            <name>headerAsText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the expand/collapse toggle button when collapsible = true, false 

 to display it (defaults to false).</description>

            <name>hideCollapseTool</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An HTML fragment, or a DomHelper specification to use as the panel's body 

 content (defaults to '').</description>

            <name>html</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS class that will provide a background image to be used as the panel header 

 icon (defaults to '').</description>

            <name>iconCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to mask the panel when it is disabled, false to not mask it (defaults 

 to true). Either way, the panel will always tell its contained elements to 

 disable themselves when it is disabled, but masking the panel can provide an 

 additional visual cue that the panel is disabled.</description>

            <name>maskDisabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Minimum width in pixels of all buttons in this panel (defaults to 75)</description>

            <name>minButtonWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True (or a valid Ext.Shadow Ext.Shadow.mode value) to display a shadow behind 

 the panel, false to display no shadow (defaults to 'sides'). Note that this 

 option only applies when floating = true.</description>

            <name>shadow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The number of pixels to offset the shadow if displayed (defaults to 4). Note 

 that this option only applies when floating = true.</description>

            <name>shadowOffset</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>False to disable the iframe shim in browsers which need one (defaults to true). 

 Note that this option only applies when floating = true.</description>

            <name>shim</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Adds a tooltip when mousing over the tab of a Ext.Panel which is an item of a 

 Ext.TabPanel. Ext.QuickTips.init() must be called in order for the tips to render.</description>

            <name>tabTip</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The title text to display in the panel header (defaults to ''). When a title 

 is specified the header element will automatically be created and displayed 

 unless header is explicitly set to false. If you don't want to specify a title 

 at config time, but you may want one later, you must either specify a non-empty 

 title (a blank space ' ' will do) or header:true so that the container element 

 will get created.</description>

            <name>title</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to allow expanding and collapsing the panel (when collapsible = true) 

 by clicking anywhere in the header bar, false to allow it only by clicking to 

 tool button (defaults to false).</description>

            <name>titleCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of a column in this grid that should expand to fill unused space. This id can not 

 be 0.</description>

            <name>autoExpandColumn</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The maximum width the autoExpandColumn can have (if enabled). Defaults to 1000.</description>

            <name>autoExpandMax</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The minimum width the autoExpandColumn can have (if enabled). defaults to 50.</description>

            <name>autoExpandMin</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to disable selections in the grid (defaults to false). - ignored a SelectionModel is 

 specified</description>

            <name>disableSelection</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to enable hiding of columns with the header context menu.</description>

            <name>enableColumnHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to enable drag and drop reorder of columns.</description>

            <name>enableColumnMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>False to turn off column resizing for the whole grid (defaults to true).</description>

            <name>enableColumnResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to enable drag and drop of rows.</description>

            <name>enableDragDrop</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to enable the drop down button for menu in the headers.</description>

            <name>enableHdMenu</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An Ext.LoadMask config or true to mask the grid while loading (defaults to false).</description>

            <name>loadMask</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Sets the maximum height of the grid - ignored if autoHeight is not on.</description>

            <name>maxHeight</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The minimum width a column can be resized to. Defaults to 25.</description>

            <name>minColumnWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to autoSize the grid when the window resizes. Defaults to true.</description>

            <name>monitorWindowResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to stripe the rows. Default is false.</description>

            <name>stripeRows</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to highlight rows when the mouse is over. Default is true.</description>

            <name>trackMouseOver</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to auto expand the columns to fit the grid when the grid is created.</description>

            <name>autoFill</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Default text to display in the grid body when no rows are available (defaults to '').</description>

            <name>emptyText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to add a second TR element per row that can be used to provide a row body that spans beneath 

 the data row. Use the getRowClass method's rowParams config to customize the row body.</description>

            <name>enableRowBody</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to auto expand/contract the size of the columns to fit the grid width and prevent horizontal scrolling.</description>

            <name>forceFit</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Boolean. If set to true, the selection model will be CellSelectionModel and the mouse pointer

 will start selecting by cells.</description>

            <name>cellSelect</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Boolean. If set to true, a column containing checkboxes will be automatically added to the 

 leftmost side of columns. You can get which items are selected in grid by getSelected method.</description>

            <name>checkboxEnabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Boolean. If set to true, a column containing auto incrementing numbers will be automatically added 

 to the leftmost side of columns.</description>

            <name>rowNumbererEnabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Boolean. If set to true only one row at a time can be selected.</description>

            <name>singleSelect</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to automatically HTML encode and decode values pre and post edit (defaults to false)</description>

            <name>autoEncode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The number of clicks on a cell required to display the cell's editor (defaults to 2)</description>

            <name>clicksToEdit</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is destroyed. Return false to stop the destroy.&lt;p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is hidden. Return false to stop the hide.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is rendered. Return false to stop the render. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is shown. Return false to stop the show. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is restored. Return false to stop the restore.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is saved to the 

 configured state provider. Return false to stop the save. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is destroyed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is disabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is enabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEnable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is hidden. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is rendered.  &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is shown.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is restored. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is saved to the configured state provider. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is moved. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;x&lt;/strong&gt;: (Number)The new x position&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;y&lt;/strong&gt;: (Number)The new y position&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is resized.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjWidth&lt;/strong&gt;:(Number) The box-adjusted width that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjHeight&lt;/strong&gt;:(Number) The box-adjusted height that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawWidth&lt;/strong&gt;:(Number) The width that was originally specified&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawHeight&lt;/strong&gt;:(Number) The height that was originally specified&lt;/li&gt; 		

 &lt;/ul&gt;</description>

            <name>onResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after any Ext.Component is added or inserted into the container.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;:(Ext.Component) The component that was added&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the component was added to the container's items collection&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAdd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the components in this container are arranged by the associated layout manager. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;layout&lt;/strong&gt;:(ContainerLayout) The ContainerLayout implementation for this container&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAfterLayout</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before any Ext.Component is added or inserted into the container. A handler can return false to cancel the add.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;:(Ext.Component) The component being added&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the component will be added to the container's items collection&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeAdd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before any Ext.Component is removed from the container. A handler can return false to cancel the remove. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: (Ext.Component) The component being removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after any Ext.Component is removed from the container&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: (Ext.Component) The component that was removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been visually activated. Note that Panels do not directly support 

 being activated, but some Panel subclasses do (like Ext.Window). Panels which are child Components 

 of a TabPanel fire the activate and deactivate events under the control of the TabPanel. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been activated.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onActivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is closed. Note that Panels do not directly support being closed, but some

  Panel subclasses do (like Ext.Window). This event only applies to such subclasses. A handler can 

  return false to cancel the close. &lt;/p&gt;

  Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel being closed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeClose</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is collapsed. A handler can return false to cancel the collapse. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel being collapsed.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;animate&lt;/strong&gt;:(Boolean) True if the collapse is animated, else false.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is expanded. A handler can return false to cancel the expand. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel being expanded.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;animate&lt;/strong&gt;:(Boolean) True if the expand is animated, else false.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been resized. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel which has been resized.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;width&lt;/strong&gt;:(Number) The Panel's new width.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;height &lt;/strong&gt;:(Number) The Panel's new height.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBodyResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel is closed. Note that Panels do not directly support being closed, but 

 some Panel subclasses do (like Ext.Window). &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been closed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onClose</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been collapsed. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel that has been collapsed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been visually deactivated. Note that Panels do not directly support 

 being deactivated, but some Panel subclasses do (like Ext.Window). Panels which are child Components

 of a TabPanel fire the activate and deactivate events under the control of the TabPanel. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been deactivated.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDeactivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been expanded. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been expanded.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel title has been set or changed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel which has had its title changed.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;The&lt;/strong&gt;:(String) new title.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onTitleChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a cell is clicked. The data for the cell is drawn from the Record for this row.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Grid&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rowIndex&lt;/strong&gt; : Number&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;columnIndex&lt;/strong&gt; : Number&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onCellClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a cell is right clicked &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Grid&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rowIndex&lt;/strong&gt; : Number&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;cellIndex&lt;/strong&gt; : Number&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onCellContextMenu</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a cell is double clicked &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Grid&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rowIndex&lt;/strong&gt; : Number&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;columnIndex&lt;/strong&gt; : Number&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onCellDblClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before a cell is clicked &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Grid&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rowIndex&lt;/strong&gt; : Number&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;columnIndex&lt;/strong&gt; : Number&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onCellMouseDown</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;The raw click event for the entire grid.&lt;/p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the user moves a column &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;oldIndex&lt;/strong&gt; : Number&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;newIndex&lt;/strong&gt; : Number&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onColumnMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the user resizes a column &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;columnIndex&lt;/strong&gt; : Number&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;newSize&lt;/strong&gt; : Number&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onColumnResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;The raw contextmenu event for the entire grid. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onContextMenu</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;The raw dblclick event for the entire grid. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDblClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a header is clicked &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Grid&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;columnIndex &lt;/strong&gt; : Number&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHeaderClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a header is right clicked &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Grid&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;columnIndex &lt;/strong&gt; : Number&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHeaderContextMenu</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a header cell is double clicked&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Grid&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;columnIndex &lt;/strong&gt; : Number&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHeaderDblClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before a header is clicked &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Grid&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;columnIndex &lt;/strong&gt; : Number&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHeaderMouseDown</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;The raw keydown event for the entire grid.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onKeyDown</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;The raw keypress event for the entire grid. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onKeyPress</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;The raw mousedown event for the entire grid. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMouseDown</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;The raw mouseout event for the entire grid. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMouseOut</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;The raw mouseover event for the entire grid. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMouseOver</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;The raw mouseup event for the entire grid. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMouseUp</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a row is clicked &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Grid&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rowIndex&lt;/strong&gt; : Number&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRowClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a row is right clicked &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Grid&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rowIndex&lt;/strong&gt; : Number&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRowContextMenu</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a row is double clicked &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Grid&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rowIndex&lt;/strong&gt; : Number&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRowDblClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before a row is clicked&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Grid&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rowIndex&lt;/strong&gt; : Number&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRowMouseDown</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the grid's store sort changes &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Grid&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;sortInfo&lt;/strong&gt; : (Object) An object with the keys field and direction&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onSortChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after a cell is edited.&lt;/p&gt;

 &lt;pre&gt;

 grid - This grid

 record - The record being edited

 field - The field name being edited

 value - The value being set

 originalValue - The original value for the field, before the edit.

 row - The grid row index

 column - The grid column index

 &lt;/pre&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (Object) An edit event (see above for description)&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAfterEdit</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before cell editing is triggered. The edit event object has the following properties&lt;/p&gt;

 &lt;pre&gt;

 grid - This grid

 record - The record being edited

 field - The field name being edited

 value - The value for the field being edited.

 row - The grid row index

 column - The grid column index

 cancel - Set this to true to cancel the edit or return false from your handler.

 &lt;/pre&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (Object) An edit event (see above for description)&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeEdit</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after a cell is edited, but before the value is set in the record. Return false to cancel 

 the change. The edit event object has the following properties &lt;/p&gt;

 &lt;pre&gt;

 grid - This grid

 record - The record being edited

 field - The field name being edited

 value - The value being set

 originalValue - The original value for the field, before the edit.

 row - The grid row index

 column - The grid column index

 cancel - Set this to true to cancel the edit or return false from your handler.

 &lt;/pre&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (Object) An edit event (see above for description)&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onValidateEdit</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag>

		<name>button</name>

		<tag-class>isola.tags.ext.form.ButtonTag</tag-class>

		<body-content>JSP</body-content>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Whether the component can move the Dom node when rendering (defaults to true).</description>

            <name>allowDomMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element corresponding 

 to a DIV that is already present in the document that specifies some 

 structural markup for this component. When applyTo is used, constituent 

 parts of the component can also be specified by id or CSS class name 

 within the main element, and the component being created may attempt to 

 create its subcomponents from that markup if applicable. Using this 

 config, a call to render() is not required. If applyTo is specified, 

 any value passed for renderTo will be ignored and the target element's 

 parent node will automatically be used as the component's container.</description>

            <name>applyTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the component should check for hidden classes (e.g. 'x-hidden' 

 or 'x-hide-display') and remove them on render (defaults to false).</description>

            <name>autoShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 Element (defaults to ''). This can be useful for adding customized styles 

 to the component or any of its children using standard CSS rules.</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 container (defaults to ''). This can be useful for adding customized 

 styles to the container or any of its children using standard CSS rules.</description>

            <name>ctCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class added to the component when it is disabled (defaults to 

 "x-item-disabled").</description>

            <name>disabledClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide and show the component's container when hide/show is 

 called on the component, false to hide and show the component itself 

 (defaults to false). For example, this can be used as a shortcut 

 for a hide button on a window by setting hide:true on the button when 

 adding it to its parent container.</description>

            <name>hideParent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id of this component (defaults to an auto-assigned id).</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element that will be the 

 container to render this component into. Using this config, a call to 

 render() is not required.</description>

            <name>renderTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id for this component to use for state management purposes 

 (defaults to the component id). See stateful for an explanation of saving 

 and restoring Component state.</description>

            <name>stateId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;A flag which causes the Component to attempt to restore the state of 

 internal properties from a saved state on startup.&lt;/p&gt;

 

 &lt;p&gt;For state saving to work, the state manager's provider must have been 

 set to an implementation of Ext.state.Provider which overrides the set 

 and get methods to save and recall name/value pairs. A built-in 

 implementation, Ext.state.CookieProvider is available.&lt;/p&gt;

 

 &lt;p&gt;To set the state provider for the current page:&lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;Components attempt to save state when one of the events listed in the stateEvents 

 configuration fires.&lt;/p&gt;

 

 &lt;p&gt;You can perform extra processing on state save and restore by attaching 

 handlers to the beforestaterestore, staterestore, beforestatesave and statesave 

 events.&lt;/p&gt;</description>

            <name>stateful</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom style specification to be applied to this component's Element. Should 

 be a valid argument to Ext.Element.applyStyles.</description>

            <name>style</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Where to place this component. Valid values are south, north, west, east, center</description>

            <name>region</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>How this component should hidden. Supported values are "visibility" 

 (css visibility), "offsets" (negative offset position) and "display" 

 (css display) - defaults to "display".</description>

            <name>hideMode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The type of event to map to the button's event handler (defaults to 'click')</description>

            <name>clickEvent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to start disabled (defaults to false)</description>

            <name>disabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to enable pressed/not pressed toggling (defaults to false)</description>

            <name>enableToggle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>False to disable visual cues on mouseover, mouseout and mousedown (defaults to true)</description>

            <name>handleMouseEvents</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to start hidden (defaults to false)</description>

            <name>hidden</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The path to an image to display in the button (the image will be set as the 

 background-image CSS property of the button by default, so if you want a mixed 

 icon/text button, set cls:"x-btn-text-icon")</description>

            <name>icon</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A css class which sets a background image to be used as the icon for this button</description>

            <name>iconCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The position to align the menu to (see Ext.Element.alignTo for more details, 

 defaults to 'tl-bl?').</description>

            <name>menuAlign</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The minimum width for this button (used to give a set of buttons a common width)</description>

            <name>minWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to start pressed (only if enableToggle = true)</description>

            <name>pressed</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to repeat fire the click event while the mouse is down. This can also be an 

 Ext.util.ClickRepeater config object (defaults to false).</description>

            <name>repeat</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The scope of the handler</description>

            <name>scope</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Set a DOM tabIndex for this button (defaults to undefined)</description>

            <name>tabIndex</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Set a DOM tabIndex for this button (defaults to undefined)</description>

            <name>text</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The group this toggle button is a member of (only 1 per group can be 

 pressed, only applies if enableToggle = true)</description>

            <name>toggleGroup</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The tooltip for the button - can be a string or QuickTips config object</description>

            <name>tooltip</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>submit, reset or button - defaults to 'button'</description>

            <name>type</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A function called when the button is clicked (can be used instead of click event)</description>

            <name>handler</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is destroyed. Return false to stop the destroy.&lt;p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is hidden. Return false to stop the hide.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is rendered. Return false to stop the render. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is shown. Return false to stop the show. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is restored. Return false to stop the restore.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is saved to the 

 configured state provider. Return false to stop the save. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is destroyed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is disabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is enabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEnable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is hidden. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is rendered.  &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is shown.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is restored. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is saved to the configured state provider. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this button is clicked &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Button&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt;:(EventObject) The click event&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;If this button has a menu, this event fires when it is hidden&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Button&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;menu&lt;/strong&gt;: Menu&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMenuHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;If this button has a menu, this event fires when it is shown &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Button&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;menu&lt;/strong&gt;: Menu&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMenuShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;If this button has a menu, this event fires when the mouse leaves the menu triggering element &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Button&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;menu&lt;/strong&gt;: Menu&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt;: EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMenuTriggerOut</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;If this button has a menu, this event fires when the mouse enters the menu triggering element &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Button&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;menu&lt;/strong&gt;: Menu&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt;: EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMenuTriggerOver</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the mouse exits the button &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Button&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt;:(Event) The event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMouseOut</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the mouse hovers over the button&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Button&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt;:(Event) The event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMouseOver</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the "pressed" state of this button changes (only if enableToggle = true) &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Button&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;pressed&lt;/strong&gt;: Boolean&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onToggle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>Base class for form fields that provides default event handling, sizing, value handling 

 and other functionality.</description>

		<name>field</name>

		<tag-class>isola.tags.ext.form.FieldTag</tag-class>

		<body-content>empty</body-content>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class used to provide field clearing (defaults to 'x-form-clear-left')</description>

            <name>clearCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to disable the field (defaults to false).</description>

            <name>disabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default CSS class for the field (defaults to "x-form-field")</description>

            <name>fieldClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The label text to display next to this field (defaults to '')</description>

            <name>fieldLabel</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to use when the field receives focus (defaults to "x-form-focus")</description>

            <name>focusClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to completely hide the label element (defaults to false)</description>

            <name>hideLabel</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The type attribute for input fields -- e.g. radio, text, password (defaults to "text").</description>

            <name>inputType</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to use when marking a field invalid (defaults to "x-form-invalid")</description>

            <name>invalidClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The error text to use when marking a field invalid and no message is provided 

 (defaults to "The value in this field is invalid")</description>

            <name>invalidText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;An additional CSS class to apply to the wrapper element of this field (defaults 

 to the container's itemCls value if set, or ''). Since it is applied to the 

 wrapper, it allows you to write standard CSS rules that can apply to the field, 

 the label (if specified) or any other element within the markup for the field. 

 Example use:&lt;/p&gt;

 

 &lt;pre&gt;&lt;code&gt;

 // Apply a style to the field's label:

 &amp;lt;style&amp;gt;

     .required .x-form-item-label {font-weight:bold;color:red;}

 &amp;lt;/style&amp;gt;

 

 new Ext.FormPanel({

 	height: 100,

 	renderTo: document.body,

 	items: [{

 		xtype: 'textfield',

 		fieldLabel: 'Name',

 		itemCls: 'required' //this label will be styled

 	},{

 		xtype: 'textfield',

 		fieldLabel: 'Favorite Color'

 	}]

 });

 &lt;/code&gt;&lt;/pre&gt;</description>

            <name>itemCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The standard separator to display after the text of each form label (defaults to the 

 value of Ext.layout.FormLayout.labelSeparator, which is a colon ':' by default). 

 To display no separator for this field's label specify empty string ''.</description>

            <name>labelSeparator</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS style specification to apply directly to this field's label (defaults to the 

 container's labelStyle value if set, or ''). For example, labelStyle: 'font-weight:bold;'.</description>

            <name>labelStyle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The effect used when displaying a validation message under the field (defaults to 'normal').</description>

            <name>msgFx</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The location where error text should display. Should be one of the following values 

 (defaults to 'qtip'):

 &lt;pre&gt;

 Value         Description

 -----------   ----------------------------------------------------------------------

 qtip          Display a quick tip when the user hovers over the field

 title         Display a default browser title attribute popup

 under         Add a block div beneath the field containing the error text

 side          Add an error icon to the right of the field with a popup on hover

 [element id]  Add the error text directly to the innerHTML of the specified element

 &lt;/pre&gt;</description>

            <name>msgTarget</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The field's HTML name attribute.</description>

            <name>name</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets 

 the element's readOnly DOM attribute.</description>

            <name>readOnly</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The tabIndex for this field. Note this only applies to fields that are rendered, not those 

 which are built via applyTo (defaults to undefined).</description>

            <name>tabIndex</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>validateOnBlur</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The length of time in milliseconds after user input begins until validation is initiated 

 (defaults to 250)</description>

            <name>validationDelay</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The event that should initiate field validation. Set to false to disable automatic 

 validation (defaults to "keyup").</description>

            <name>validationEvent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A value to initialize this field with.</description>

            <name>value</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width of this component in pixels (defaults to auto).</description>

            <name>width</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The height of this component in pixels (defaults to auto).</description>

            <name>height</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this field loses input focus. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBlur</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires just before the field blurs if the field value has changed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;newValue&lt;/strong&gt; : (Mixed) The new value&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;oldValue&lt;/strong&gt; : (Mixed) The original value&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this field receives input focus. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onFocus</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the field has been marked as invalid. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;msg&lt;/strong&gt; : (String) The validation message&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onInvalid</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed. You can 

 check Ext.EventObject.getKey to determine which key was pressed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (Ext.EventObject) The event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onSpecialKey</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed. You can check 

 Ext.EventObject.getKey to determine which key was pressed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onValid</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag>

		<name>checkBox</name>

		<tag-class>isola.tags.ext.form.CheckBoxTag</tag-class>

		<body-content>empty</body-content>

		<attribute>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class used to provide field clearing (defaults to 'x-form-clear-left')</description>

            <name>clearCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to disable the field (defaults to false).</description>

            <name>disabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default CSS class for the field (defaults to "x-form-field")</description>

            <name>fieldClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The label text to display next to this field (defaults to '')</description>

            <name>fieldLabel</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to use when the field receives focus (defaults to "x-form-focus")</description>

            <name>focusClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to completely hide the label element (defaults to false)</description>

            <name>hideLabel</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The type attribute for input fields -- e.g. radio, text, password (defaults to "text").</description>

            <name>inputType</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to use when marking a field invalid (defaults to "x-form-invalid")</description>

            <name>invalidClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The error text to use when marking a field invalid and no message is provided 

 (defaults to "The value in this field is invalid")</description>

            <name>invalidText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;An additional CSS class to apply to the wrapper element of this field (defaults 

 to the container's itemCls value if set, or ''). Since it is applied to the 

 wrapper, it allows you to write standard CSS rules that can apply to the field, 

 the label (if specified) or any other element within the markup for the field. 

 Example use:&lt;/p&gt;

 

 &lt;pre&gt;&lt;code&gt;

 // Apply a style to the field's label:

 &amp;lt;style&amp;gt;

     .required .x-form-item-label {font-weight:bold;color:red;}

 &amp;lt;/style&amp;gt;

 

 new Ext.FormPanel({

 	height: 100,

 	renderTo: document.body,

 	items: [{

 		xtype: 'textfield',

 		fieldLabel: 'Name',

 		itemCls: 'required' //this label will be styled

 	},{

 		xtype: 'textfield',

 		fieldLabel: 'Favorite Color'

 	}]

 });

 &lt;/code&gt;&lt;/pre&gt;</description>

            <name>itemCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The standard separator to display after the text of each form label (defaults to the 

 value of Ext.layout.FormLayout.labelSeparator, which is a colon ':' by default). 

 To display no separator for this field's label specify empty string ''.</description>

            <name>labelSeparator</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS style specification to apply directly to this field's label (defaults to the 

 container's labelStyle value if set, or ''). For example, labelStyle: 'font-weight:bold;'.</description>

            <name>labelStyle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The effect used when displaying a validation message under the field (defaults to 'normal').</description>

            <name>msgFx</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The location where error text should display. Should be one of the following values 

 (defaults to 'qtip'):

 &lt;pre&gt;

 Value         Description

 -----------   ----------------------------------------------------------------------

 qtip          Display a quick tip when the user hovers over the field

 title         Display a default browser title attribute popup

 under         Add a block div beneath the field containing the error text

 side          Add an error icon to the right of the field with a popup on hover

 [element id]  Add the error text directly to the innerHTML of the specified element

 &lt;/pre&gt;</description>

            <name>msgTarget</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The field's HTML name attribute.</description>

            <name>name</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets 

 the element's readOnly DOM attribute.</description>

            <name>readOnly</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The tabIndex for this field. Note this only applies to fields that are rendered, not those 

 which are built via applyTo (defaults to undefined).</description>

            <name>tabIndex</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>validateOnBlur</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The length of time in milliseconds after user input begins until validation is initiated 

 (defaults to 250)</description>

            <name>validationDelay</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The event that should initiate field validation. Set to false to disable automatic 

 validation (defaults to "keyup").</description>

            <name>validationEvent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A value to initialize this field with.</description>

            <name>value</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The text that appears beside the checkbox</description>

            <name>boxLabel</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the the checkbox should render already checked (defaults to false)</description>

            <name>checked</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default CSS class for the field (defaults to "x-form-field")</description>

            <name>fieldClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to use when the field receives focus (defaults to "x-form-focus")</description>

            <name>focusClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The value that should go into the generated input element's value attribute</description>

            <name>inputValue</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width of this component in pixels (defaults to auto).</description>

            <name>width</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The height of this component in pixels (defaults to auto).</description>

            <name>height</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this field loses input focus. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBlur</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires just before the field blurs if the field value has changed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;newValue&lt;/strong&gt; : (Mixed) The new value&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;oldValue&lt;/strong&gt; : (Mixed) The original value&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this field receives input focus. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onFocus</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the field has been marked as invalid. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;msg&lt;/strong&gt; : (String) The validation message&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onInvalid</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed. You can 

 check Ext.EventObject.getKey to determine which key was pressed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (Ext.EventObject) The event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onSpecialKey</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed. You can check 

 Ext.EventObject.getKey to determine which key was pressed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onValid</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the checkbox is checked or unchecked. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:(Ext.form.Checkbox) This checkbox&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;checked&lt;/strong&gt;:(Boolean) The new checked value&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onCheck</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>Simple color palette class for choosing colors. The palette can be rendered to any container.

 Here's an example of typical usage:

 

 &lt;pre&gt;&lt;code&gt;

 var cp = new Ext.ColorPalette({value:'993300'});  // initial selected color

 cp.render('my-div');

 cp.on('select', function(palette, selColor) {

 		// do something with selColor

 });

 &lt;/code&gt;&lt;/pre&gt;</description>

		<name>colorPalette</name>

		<tag-class>isola.tags.ext.form.ColorPaletteTag</tag-class>

		<body-content>empty</body-content>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Whether the component can move the Dom node when rendering (defaults to true).</description>

            <name>allowDomMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element corresponding 

 to a DIV that is already present in the document that specifies some 

 structural markup for this component. When applyTo is used, constituent 

 parts of the component can also be specified by id or CSS class name 

 within the main element, and the component being created may attempt to 

 create its subcomponents from that markup if applicable. Using this 

 config, a call to render() is not required. If applyTo is specified, 

 any value passed for renderTo will be ignored and the target element's 

 parent node will automatically be used as the component's container.</description>

            <name>applyTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the component should check for hidden classes (e.g. 'x-hidden' 

 or 'x-hide-display') and remove them on render (defaults to false).</description>

            <name>autoShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 Element (defaults to ''). This can be useful for adding customized styles 

 to the component or any of its children using standard CSS rules.</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 container (defaults to ''). This can be useful for adding customized 

 styles to the container or any of its children using standard CSS rules.</description>

            <name>ctCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class added to the component when it is disabled (defaults to 

 "x-item-disabled").</description>

            <name>disabledClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide and show the component's container when hide/show is 

 called on the component, false to hide and show the component itself 

 (defaults to false). For example, this can be used as a shortcut 

 for a hide button on a window by setting hide:true on the button when 

 adding it to its parent container.</description>

            <name>hideParent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id of this component (defaults to an auto-assigned id).</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element that will be the 

 container to render this component into. Using this config, a call to 

 render() is not required.</description>

            <name>renderTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id for this component to use for state management purposes 

 (defaults to the component id). See stateful for an explanation of saving 

 and restoring Component state.</description>

            <name>stateId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;A flag which causes the Component to attempt to restore the state of 

 internal properties from a saved state on startup.&lt;/p&gt;

 

 &lt;p&gt;For state saving to work, the state manager's provider must have been 

 set to an implementation of Ext.state.Provider which overrides the set 

 and get methods to save and recall name/value pairs. A built-in 

 implementation, Ext.state.CookieProvider is available.&lt;/p&gt;

 

 &lt;p&gt;To set the state provider for the current page:&lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;Components attempt to save state when one of the events listed in the stateEvents 

 configuration fires.&lt;/p&gt;

 

 &lt;p&gt;You can perform extra processing on state save and restore by attaching 

 handlers to the beforestaterestore, staterestore, beforestatesave and statesave 

 events.&lt;/p&gt;</description>

            <name>stateful</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom style specification to be applied to this component's Element. Should 

 be a valid argument to Ext.Element.applyStyles.</description>

            <name>style</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Where to place this component. Valid values are south, north, west, east, center</description>

            <name>region</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>How this component should hidden. Supported values are "visibility" 

 (css visibility), "offsets" (negative offset position) and "display" 

 (css display) - defaults to "display".</description>

            <name>hideMode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If set to true then reselecting a color that is already selected fires the 

 selection event</description>

            <name>allowReselect</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to apply to the containing element (defaults to "x-color-palette")</description>

            <name>itemCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The initial color to highlight (should be a valid 6-digit color hex code without the # 

 symbol). Note that the hex codes are case-sensitive.</description>

            <name>value</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is destroyed. Return false to stop the destroy.&lt;p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is hidden. Return false to stop the hide.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is rendered. Return false to stop the render. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is shown. Return false to stop the show. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is restored. Return false to stop the restore.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is saved to the 

 configured state provider. Return false to stop the save. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is destroyed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is disabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is enabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEnable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is hidden. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is rendered.  &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is shown.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is restored. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is saved to the configured state provider. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Selects the specified color in the palette (fires the select event) &lt;/p&gt;

 &lt;strong&gt;Parameters:&lt;/strong&gt;

 &lt;ul&gt;

 &lt;li&gt;color :(String) A valid 6-digit color hex code (# will be stripped if included)&lt;/li&gt;

 &lt;/ul&gt;

 &lt;strong&gt;Returns:&lt;/strong&gt;

 &lt;ul&gt;

 &lt;li&gt;void&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onSelect</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>Basic text field. Can be used as a direct replacement for traditional text inputs, 

 or as the base class for more sophisticated input controls (like Ext.form.TextArea 

 and Ext.form.ComboBox).</description>

		<name>textField</name>

		<tag-class>isola.tags.ext.form.TextFieldTag</tag-class>

		<body-content>empty</body-content>

		<attribute>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class used to provide field clearing (defaults to 'x-form-clear-left')</description>

            <name>clearCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to disable the field (defaults to false).</description>

            <name>disabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default CSS class for the field (defaults to "x-form-field")</description>

            <name>fieldClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The label text to display next to this field (defaults to '')</description>

            <name>fieldLabel</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to use when the field receives focus (defaults to "x-form-focus")</description>

            <name>focusClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to completely hide the label element (defaults to false)</description>

            <name>hideLabel</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The type attribute for input fields -- e.g. radio, text, password (defaults to "text").</description>

            <name>inputType</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to use when marking a field invalid (defaults to "x-form-invalid")</description>

            <name>invalidClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The error text to use when marking a field invalid and no message is provided 

 (defaults to "The value in this field is invalid")</description>

            <name>invalidText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;An additional CSS class to apply to the wrapper element of this field (defaults 

 to the container's itemCls value if set, or ''). Since it is applied to the 

 wrapper, it allows you to write standard CSS rules that can apply to the field, 

 the label (if specified) or any other element within the markup for the field. 

 Example use:&lt;/p&gt;

 

 &lt;pre&gt;&lt;code&gt;

 // Apply a style to the field's label:

 &amp;lt;style&amp;gt;

     .required .x-form-item-label {font-weight:bold;color:red;}

 &amp;lt;/style&amp;gt;

 

 new Ext.FormPanel({

 	height: 100,

 	renderTo: document.body,

 	items: [{

 		xtype: 'textfield',

 		fieldLabel: 'Name',

 		itemCls: 'required' //this label will be styled

 	},{

 		xtype: 'textfield',

 		fieldLabel: 'Favorite Color'

 	}]

 });

 &lt;/code&gt;&lt;/pre&gt;</description>

            <name>itemCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The standard separator to display after the text of each form label (defaults to the 

 value of Ext.layout.FormLayout.labelSeparator, which is a colon ':' by default). 

 To display no separator for this field's label specify empty string ''.</description>

            <name>labelSeparator</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS style specification to apply directly to this field's label (defaults to the 

 container's labelStyle value if set, or ''). For example, labelStyle: 'font-weight:bold;'.</description>

            <name>labelStyle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The effect used when displaying a validation message under the field (defaults to 'normal').</description>

            <name>msgFx</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The location where error text should display. Should be one of the following values 

 (defaults to 'qtip'):

 &lt;pre&gt;

 Value         Description

 -----------   ----------------------------------------------------------------------

 qtip          Display a quick tip when the user hovers over the field

 title         Display a default browser title attribute popup

 under         Add a block div beneath the field containing the error text

 side          Add an error icon to the right of the field with a popup on hover

 [element id]  Add the error text directly to the innerHTML of the specified element

 &lt;/pre&gt;</description>

            <name>msgTarget</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The field's HTML name attribute.</description>

            <name>name</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets 

 the element's readOnly DOM attribute.</description>

            <name>readOnly</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The tabIndex for this field. Note this only applies to fields that are rendered, not those 

 which are built via applyTo (defaults to undefined).</description>

            <name>tabIndex</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>validateOnBlur</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The length of time in milliseconds after user input begins until validation is initiated 

 (defaults to 250)</description>

            <name>validationDelay</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The event that should initiate field validation. Set to false to disable automatic 

 validation (defaults to "keyup").</description>

            <name>validationEvent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A value to initialize this field with.</description>

            <name>value</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>False to validate that the value length &gt; 0 (defaults to true)</description>

            <name>allowBlank</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Error text to display if the allow blank validation fails (defaults to "This field is 

 required")</description>

            <name>blankText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to disable input keystroke filtering (defaults to false)</description>

            <name>disableKeyFilter</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to apply to an empty field to style the emptyText (defaults to 

 'x-form-empty-field'). This class is automatically added and removed as needed depending on 

 the current field value.</description>

            <name>emptyClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default text to display in an empty field (defaults to null).</description>

            <name>emptyText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if this field should automatically grow and shrink to its content</description>

            <name>grow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The maximum width to allow when grow = true (defaults to 800)</description>

            <name>growMax</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The minimum width to allow when grow = true (defaults to 30)</description>

            <name>growMin</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Maximum input field length allowed (defaults to Number.MAX_VALUE)</description>

            <name>maxLength</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Error text to display if the maximum length validation fails (defaults to 

 "The maximum length for this field is {maxLength}")</description>

            <name>maxLengthText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Minimum input field length required (defaults to 0)</description>

            <name>minLength</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Error text to display if the minimum length validation fails (defaults to 

 "The minimum length for this field is {minLength}")</description>

            <name>minLengthText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The error text to display if regex is used and the test fails during validation (defaults to "")</description>

            <name>regexText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to automatically select any existing field text when the field receives input 

 focus (defaults to false)</description>

            <name>selectOnFocus</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A validation type name as defined in Ext.form.VTypes (defaults to null)</description>

            <name>vtype</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom error message to display in place of the default message provided for the 

 vtype currently set for this field (defaults to ''). Only applies if vtype is set, 

 else ignored.</description>

            <name>vtypeText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A JavaScript RegExp object to be tested against the field value during validation 

 (defaults to null). If available, this regex will be evaluated only after the basic 

 validators all return true, and will be passed the current field value. If the test 

 fails, the field will be marked invalid using regexText.</description>

            <name>regex</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom validation function to be called during field validation (defaults to null). 

 If available, this function will be called only after the basic validators all return 

 true, and will be passed the current field value and expected to return boolean true 

 if the value is valid or a string error message if invalid.</description>

            <name>validator</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width of this component in pixels (defaults to auto).</description>

            <name>width</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The height of this component in pixels (defaults to auto).</description>

            <name>height</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this field loses input focus. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBlur</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires just before the field blurs if the field value has changed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;newValue&lt;/strong&gt; : (Mixed) The new value&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;oldValue&lt;/strong&gt; : (Mixed) The original value&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this field receives input focus. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onFocus</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the field has been marked as invalid. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;msg&lt;/strong&gt; : (String) The validation message&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onInvalid</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed. You can 

 check Ext.EventObject.getKey to determine which key was pressed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (Ext.EventObject) The event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onSpecialKey</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed. You can check 

 Ext.EventObject.getKey to determine which key was pressed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onValid</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the autosize function is triggered. The field may or may not have actually

  changed size according to the default logic, but this event provides a hook for the 

  developer to apply additional logic at runtime to resize the field if needed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : (Ext.form.Field) This text field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;width&lt;/strong&gt; : (Number) The new field width&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAutoSize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>&lt;p&gt;Provides a convenient wrapper for TextFields that adds a clickable trigger button 

 (looks like a combobox by default). The trigger has no default action, so you must 

 assign a function to implement the trigger click handler by overriding onTriggerClick. 

 You can create a TriggerField directly, as it renders exactly like a combobox for 

 which you can provide a custom implementation.&lt;/p&gt;</description>

		<name>triggerField</name>

		<tag-class>isola.tags.ext.form.TriggerFieldTag</tag-class>

		<body-content>empty</body-content>

		<attribute>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class used to provide field clearing (defaults to 'x-form-clear-left')</description>

            <name>clearCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to disable the field (defaults to false).</description>

            <name>disabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default CSS class for the field (defaults to "x-form-field")</description>

            <name>fieldClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The label text to display next to this field (defaults to '')</description>

            <name>fieldLabel</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to use when the field receives focus (defaults to "x-form-focus")</description>

            <name>focusClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to completely hide the label element (defaults to false)</description>

            <name>hideLabel</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The type attribute for input fields -- e.g. radio, text, password (defaults to "text").</description>

            <name>inputType</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to use when marking a field invalid (defaults to "x-form-invalid")</description>

            <name>invalidClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The error text to use when marking a field invalid and no message is provided 

 (defaults to "The value in this field is invalid")</description>

            <name>invalidText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;An additional CSS class to apply to the wrapper element of this field (defaults 

 to the container's itemCls value if set, or ''). Since it is applied to the 

 wrapper, it allows you to write standard CSS rules that can apply to the field, 

 the label (if specified) or any other element within the markup for the field. 

 Example use:&lt;/p&gt;

 

 &lt;pre&gt;&lt;code&gt;

 // Apply a style to the field's label:

 &amp;lt;style&amp;gt;

     .required .x-form-item-label {font-weight:bold;color:red;}

 &amp;lt;/style&amp;gt;

 

 new Ext.FormPanel({

 	height: 100,

 	renderTo: document.body,

 	items: [{

 		xtype: 'textfield',

 		fieldLabel: 'Name',

 		itemCls: 'required' //this label will be styled

 	},{

 		xtype: 'textfield',

 		fieldLabel: 'Favorite Color'

 	}]

 });

 &lt;/code&gt;&lt;/pre&gt;</description>

            <name>itemCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The standard separator to display after the text of each form label (defaults to the 

 value of Ext.layout.FormLayout.labelSeparator, which is a colon ':' by default). 

 To display no separator for this field's label specify empty string ''.</description>

            <name>labelSeparator</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS style specification to apply directly to this field's label (defaults to the 

 container's labelStyle value if set, or ''). For example, labelStyle: 'font-weight:bold;'.</description>

            <name>labelStyle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The effect used when displaying a validation message under the field (defaults to 'normal').</description>

            <name>msgFx</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The location where error text should display. Should be one of the following values 

 (defaults to 'qtip'):

 &lt;pre&gt;

 Value         Description

 -----------   ----------------------------------------------------------------------

 qtip          Display a quick tip when the user hovers over the field

 title         Display a default browser title attribute popup

 under         Add a block div beneath the field containing the error text

 side          Add an error icon to the right of the field with a popup on hover

 [element id]  Add the error text directly to the innerHTML of the specified element

 &lt;/pre&gt;</description>

            <name>msgTarget</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The field's HTML name attribute.</description>

            <name>name</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets 

 the element's readOnly DOM attribute.</description>

            <name>readOnly</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The tabIndex for this field. Note this only applies to fields that are rendered, not those 

 which are built via applyTo (defaults to undefined).</description>

            <name>tabIndex</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>validateOnBlur</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The length of time in milliseconds after user input begins until validation is initiated 

 (defaults to 250)</description>

            <name>validationDelay</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The event that should initiate field validation. Set to false to disable automatic 

 validation (defaults to "keyup").</description>

            <name>validationEvent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A value to initialize this field with.</description>

            <name>value</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>False to validate that the value length &gt; 0 (defaults to true)</description>

            <name>allowBlank</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Error text to display if the allow blank validation fails (defaults to "This field is 

 required")</description>

            <name>blankText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>		

		<attribute>

            <name>hideTrigger</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>triggerClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width of this component in pixels (defaults to auto).</description>

            <name>width</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The height of this component in pixels (defaults to auto).</description>

            <name>height</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this field loses input focus. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBlur</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires just before the field blurs if the field value has changed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;newValue&lt;/strong&gt; : (Mixed) The new value&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;oldValue&lt;/strong&gt; : (Mixed) The original value&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this field receives input focus. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onFocus</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the field has been marked as invalid. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;msg&lt;/strong&gt; : (String) The validation message&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onInvalid</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed. You can 

 check Ext.EventObject.getKey to determine which key was pressed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (Ext.EventObject) The event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onSpecialKey</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed. You can check 

 Ext.EventObject.getKey to determine which key was pressed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onValid</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>A combobox control with support for autocomplete, remote-loading, paging and many other 

 features. 

 

 &lt;code&gt;&lt;pre&gt;

 

 &amp;lt;ext:body runOnLoad="true"&amp;gt;

 	var dummyData = [

 	['3m Co',71.72,0.02,0.03,'9/1 12:00am', 'Manufacturing'],

 	['Alcoa Inc',29.01,0.42,1.47,'9/1 12:00am', 'Manufacturing'],

 	['Altria Group Inc',83.81,0.28,0.34,'9/1 12:00am', 'Manufacturing'],

 	['American Express Company',52.55,0.01,0.02,'9/1 12:00am', 'Finance'],

 	['American International Group, Inc.',64.13,0.31,0.49,'9/1 12:00am', 'Services'],

 	['AT&amp;T Inc.',31.61,-0.48,-1.54,'9/1 12:00am', 'Services'],

 	['Boeing Co.',75.43,0.53,0.71,'9/1 12:00am', 'Manufacturing'],

 	['Caterpillar Inc.',67.27,0.92,1.39,'9/1 12:00am', 'Services'],

 	['Citigroup, Inc.',49.37,0.02,0.04,'9/1 12:00am', 'Finance'],

 	['E.I. du Pont de Nemours and Company',40.48,0.51,1.28,'9/1 12:00am', 'Manufacturing'],

 	['Exxon Mobil Corp',68.1,-0.43,-0.64,'9/1 12:00am', 'Manufacturing'],

 	['General Electric Company',34.14,-0.08,-0.23,'9/1 12:00am', 'Manufacturing'],

 	['General Motors Corporation',30.27,1.09,3.74,'9/1 12:00am', 'Automotive'],

 	['Hewlett-Packard Co.',36.53,-0.03,-0.08,'9/1 12:00am', 'Computer'],

 	['Honeywell Intl Inc',38.77,0.05,0.13,'9/1 12:00am', 'Manufacturing'],

 	['Intel Corporation',19.88,0.31,1.58,'9/1 12:00am', 'Computer'],

 	['International Business Machines',81.41,0.44,0.54,'9/1 12:00am', 'Computer'],

 	['Johnson &amp; Johnson',64.72,0.06,0.09,'9/1 12:00am', 'Medical'],

 	['JP Morgan &amp; Chase &amp; Co',45.73,0.07,0.15,'9/1 12:00am', 'Finance'],

 	['McDonald\'s Corporation',36.76,0.86,2.40,'9/1 12:00am', 'Food'],

 	['Merck &amp; Co., Inc.',40.96,0.41,1.01,'9/1 12:00am', 'Medical'],

 	['Microsoft Corporation',25.84,0.14,0.54,'9/1 12:00am', 'Computer'],

 	['Pfizer Inc',27.96,0.4,1.45,'9/1 12:00am', 'Services', 'Medical'],

 	['The Coca-Cola Company',45.07,0.26,0.58,'9/1 12:00am', 'Food'],

 	['The Home Depot, Inc.',34.64,0.35,1.02,'9/1 12:00am', 'Retail'],

 	['The Procter &amp; Gamble Company',61.91,0.01,0.02,'9/1 12:00am', 'Manufacturing'],

 	['United Technologies Corporation',63.26,0.55,0.88,'9/1 12:00am', 'Computer'],

 	['Verizon Communications',35.57,0.39,1.11,'9/1 12:00am', 'Services'],

 	['Wal-Mart Stores, Inc.',45.45,0.73,1.63,'9/1 12:00am', 'Retail'],

 	['Walt Disney Company (The) (Holding Company)',29.89,0.24,0.81,'9/1 12:00am', 'Services']

 	]; 

 

	&amp;lt;ext:formPanel url="deneme.jsp" id="myForm" renderTo="form-ct" width="400" bodyStyle="background-color:#EEEEEE;" border="false"&amp;gt;

		&amp;lt;ext:comboBox fieldLabel="Select City" name="myCombo" displayField="company" emptyText="Please select" valueField="change"&amp;gt;

			&amp;lt;ext:arrayStore data="dummyData" autoLoad="true"&amp;gt;

				&amp;lt;ext:storeMapping name="company" /&amp;gt;

				&amp;lt;ext:storeMapping name="price" /&amp;gt;

				&amp;lt;ext:storeMapping name="change" /&amp;gt;

				&amp;lt;ext:storeMapping name="pctChange" /&amp;gt;

				&amp;lt;ext:storeMapping name="lastChange" /&amp;gt;

				&amp;lt;ext:storeMapping name="industry" /&amp;gt;

			&amp;lt;/ext:arrayStore&amp;gt;

		&amp;lt;/ext:comboBox&amp;gt;

		&amp;lt;ext:button type="submit" text="Go!" /&amp;gt;

	&amp;lt;/ext:formPanel&amp;gt;

 &amp;lt;/ext:body&amp;gt;

 

 &amp;lt;div style="width:800px;margin:50px;"&amp;gt;

	 &amp;lt;div class="x-box-tl"&amp;gt;&amp;lt;div class="x-box-tr"&amp;gt;&amp;lt;div class="x-box-tc"&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;

	 &amp;lt;div class="x-box-ml"&amp;gt;&amp;lt;div class="x-box-mr"&amp;gt;&amp;lt;div class="x-box-mc"&amp;gt;

	   &amp;lt;h3 style="margin-bottom:5px;"&amp;gt;Simple Form&amp;lt;/h3&amp;gt;

	     &amp;lt;div id="form-ct"&amp;gt;

	

	     &amp;lt;/div&amp;gt;

	 &amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;

	 &amp;lt;div class="x-box-bl"&amp;gt;&amp;lt;div class="x-box-br"&amp;gt;&amp;lt;div class="x-box-bc"&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;

 &amp;lt;/div&amp;gt;

 

 &lt;/pre&gt;&lt;/code&gt;</description>

		<name>comboBox</name>

		<tag-class>isola.tags.ext.form.ComboBoxTag</tag-class>

		<body-content>JSP</body-content>

		<attribute>

            <name>regex</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>regexText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>validator</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Lets assigning a pre-defined store to this component using the store's id</description>

            <name>storeId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default text to display in an empty field (defaults to null).</description>

            <name>emptyText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class used to provide field clearing (defaults to 'x-form-clear-left')</description>

            <name>clearCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to disable the field (defaults to false).</description>

            <name>disabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default CSS class for the field (defaults to "x-form-field")</description>

            <name>fieldClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The label text to display next to this field (defaults to '')</description>

            <name>fieldLabel</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to use when the field receives focus (defaults to "x-form-focus")</description>

            <name>focusClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to completely hide the label element (defaults to false)</description>

            <name>hideLabel</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The type attribute for input fields -- e.g. radio, text, password (defaults to "text").</description>

            <name>inputType</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to use when marking a field invalid (defaults to "x-form-invalid")</description>

            <name>invalidClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The error text to use when marking a field invalid and no message is provided 

 (defaults to "The value in this field is invalid")</description>

            <name>invalidText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>itemCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

			<description>

				The standard separator to display after the text of each form label (defaults to the 

 				value of Ext.layout.FormLayout.labelSeparator, which is a colon ':' by default). 

 				To display no separator for this field's label specify empty string ''.</description>

            <name>labelSeparator</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

			<description>

				A CSS style specification to apply directly to this field's label (defaults to the 

				container's labelStyle value if set, or ''). For example, labelStyle: 'font-weight:bold;'.

			</description>

            <name>labelStyle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

			<description>

				The effect used when displaying a validation message under the field (defaults to 'normal').

			</description>

            <name>msgFx</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

			<description>

				The location where error text should display. Should be one of the following values 

				 (defaults to 'qtip'):

				 &lt;pre&gt;

				 Value         Description

				 -----------   ----------------------------------------------------------------------

				 qtip          Display a quick tip when the user hovers over the field

				 title         Display a default browser title attribute popup

				 under         Add a block div beneath the field containing the error text

				 side          Add an error icon to the right of the field with a popup on hover

				 [element id]  Add the error text directly to the innerHTML of the specified element

				 &lt;/pre&gt;

			</description>

            <name>msgTarget</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The field's HTML name attribute.</description>

            <name>name</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

			<description>True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.</description>

            <name>readOnly</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The tabIndex for this field. Note this only applies to fields that are rendered, not those 

 which are built via applyTo (defaults to undefined).</description>

            <name>tabIndex</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>validateOnBlur</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The length of time in milliseconds after user input begins until validation is initiated 

 (defaults to 250)</description>

            <name>validationDelay</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The event that should initiate field validation. Set to false to disable automatic 

 validation (defaults to "keyup").</description>

            <name>validationEvent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A value to initialize this field with.</description>

            <name>value</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>False to validate that the value length &gt; 0 (defaults to true)</description>

            <name>allowBlank</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Error text to display if the allow blank validation fails (defaults to "This field is 

 required")</description>

            <name>blankText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>			

		<attribute>

            <name>hideTrigger</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>triggerClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The text query to send to the server to return all records for the list with no 

 filtering (defaults to '')</description>

            <name>allQuery</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The underlying data field name to bind to this ComboBox (defaults to undefined if 

 mode = 'remote' or 'text' if transforming a select)</description>

            <name>displayField</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>False to prevent the user from typing text directly into the field, just like a 

 traditional select (defaults to true)</description>

            <name>editable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to restrict the selected value to one of the values in the list, false to 

 allow the user to set arbitrary text into the field (defaults to false)</description>

            <name>forceSelection</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The height in pixels of the dropdown list resize handle if resizable = true 

 (defaults to 8)</description>

            <name>handleHeight</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If hiddenName is specified, hiddenId can also be provided to give the hidden 

 field a unique id (defaults to the hiddenName). The hiddenId and combo id 

 should be different, since no two DOM nodes should share the same id.</description>

            <name>hiddenId</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If specified, a hidden form field with this name is dynamically generated to 

 store the field's data value (defaults to the underlying DOM element's name). 

 Required for the combo's value to automatically post during a form submission.</description>

            <name>hiddenName</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to not initialize the list for this combo until the field is focused. 

 (defaults to true)</description>

            <name>lazyInit</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to prevent the ComboBox from rendering until requested (should always be 

 used when rendering into an Ext.Editor, defaults to false).</description>

            <name>lazyRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A valid anchor position value. See Ext.Element.alignTo for details on supported 

 anchor positions (defaults to 'tl-bl')</description>

            <name>listAlign</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class to apply to the dropdown list element (defaults to '')</description>

            <name>listClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width in pixels of the dropdown list (defaults to the width of the ComboBox 

 field)</description>

            <name>listWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The text to display in the dropdown list while data is loading. Only applies 

 when mode = 'remote' (defaults to 'Loading...')</description>

            <name>loadingText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The maximum height in pixels of the dropdown list before scrollbars are shown 

 (defaults to 300)</description>

            <name>maxHeight</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The minimum number of characters the user must type before autocomplete and 

 typeahead activate (defaults to 4 if remote or 0 if local, does not apply if editable = false)</description>

            <name>minChars</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The minimum width of the dropdown list in pixels (defaults to 70, will be ignored if 

 listWidth has a higher value)</description>

            <name>minListWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Set to 'local' if the ComboBox loads local data (defaults to 'remote' which loads 

 from the server)</description>

            <name>mode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If greater than 0, a paging toolbar is displayed in the footer of the dropdown list 

 and the filter queries will execute with page start and limit parameters. Only 

 applies when mode = 'remote' (defaults to 0)</description>

            <name>pageSize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The length of time in milliseconds to delay between the start of typing and sending 

 the query to filter the dropdown list (defaults to 500 if mode = 'remote' or 10 

 if mode = 'local')</description>

            <name>queryDelay</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Name of the query as it will be passed on the querystring (defaults to 'query')</description>

            <name>queryParam</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to add a resize handle to the bottom of the dropdown list (defaults to false)</description>

            <name>resizable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to automatically select any existing field text when the field receives input 

 focus (defaults to false)</description>

            <name>selectOnFocus</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class to apply to the selected item in the dropdown list (defaults to 

 'x-combo-selected')</description>

            <name>selectedClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True or "sides" for the default effect, "frame" for 4-way shadow, and "drop" 

 for bottom-right</description>

            <name>shadow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If supplied, a header element is created containing this text and 

 added into the top of the dropdown list (defaults to undefined, with no header 

 element)</description>

            <name>title</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;The template string, or Ext.XTemplate instance to use to display each item in the 

 dropdown list. Use this to create custom UI layouts for items in the list.&lt;/p&gt;

 

 &lt;p&gt;If you wish to preserve the default visual look of list items, add the CSS class 

 name.&lt;/p&gt;

 

 &lt;code&gt;&lt;pre&gt;

 	x-combo-list-item

 &lt;/pre&gt;&lt;/code&gt;

 

 &lt;p&gt;to the template's container element. The template must contain one or more substitution 

 parameters using field names from the Combo's Store. An example of a custom template 

 would be adding an &lt;/p&gt;

 

 &lt;code&gt;&lt;pre&gt;ext:qtip&lt;/pre&gt;&lt;/code&gt;

 attribute which might display other fields from the Store. The dropdown list is 

 displayed in a DataView. See Ext.DataView for details.</description>

            <name>tpl</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id, DOM node or element of an existing HTML SELECT to convert to a ComboBox. 

 Note that if you specify this and the combo is going to be in a Ext.form.BasicForm or 

 Ext.form.FormPanel, you must also set lazyRender = true.</description>

            <name>transform</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The action to execute when the trigger field is activated. Use 'all' to run the query 

 specified by the allQuery config option (defaults to 'query')</description>

            <name>triggerAction</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to populate and autoselect the remainder of the text being typed after a 

 configurable delay (typeAheadDelay) if it matches a known value (defaults to false)</description>

            <name>typeAhead</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The length of time in milliseconds to wait until the typeahead text is displayed 

 if typeAhead = true (defaults to 250)</description>

            <name>typeAheadDelay</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The underlying data value name to bind to this ComboBox (defaults to undefined 

 if mode = 'remote' or 'value' if transforming a select) Note: use of a valueField 

 requires the user to make a selection in order for a value to be mapped.</description>

            <name>valueField</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>When using a name/value combo, if the value passed to setValue is not found in the 

 store, valueNotFoundText will be displayed as the field text if defined (defaults to undefined)</description>

            <name>valueNotFoundText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width of this component in pixels (defaults to auto).</description>

            <name>width</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The height of this component in pixels (defaults to auto).</description>

            <name>height</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	

		<attribute><description>&lt;p&gt;Fires when this field loses input focus. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBlur</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires just before the field blurs if the field value has changed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;newValue&lt;/strong&gt; : (Mixed) The new value&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;oldValue&lt;/strong&gt; : (Mixed) The original value&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this field receives input focus. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onFocus</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the field has been marked as invalid. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;msg&lt;/strong&gt; : (String) The validation message&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onInvalid</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed. You can 

 check Ext.EventObject.getKey to determine which key was pressed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (Ext.EventObject) The event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onSpecialKey</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed. You can check 

 Ext.EventObject.getKey to determine which key was pressed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onValid</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before all queries are processed. Return false to cancel the query

  or set the queryEvent's cancel property to true.&lt;/p&gt;

  Listeners will be called with the following arguments:

  &lt;ul&gt;

  &lt;li&gt;&lt;strong&gt;queryEvent &lt;/strong&gt;:(Object) An object that has these properties:

  	&lt;ul&gt;

  	&lt;li&gt;&lt;strong&gt;combo &lt;/strong&gt;:(Ext.form.ComboBox) This combo box &lt;/li&gt;

  	&lt;li&gt;&lt;strong&gt;query &lt;/strong&gt;:(String) The query&lt;/li&gt;

  	&lt;li&gt;&lt;strong&gt;forceAll &lt;/strong&gt;:(Boolean) True to force "all" query &lt;/li&gt;

  	&lt;li&gt;&lt;strong&gt;cancel &lt;/strong&gt;:(Boolean) Set to true to cancel the query&lt;/li&gt;

  	&lt;/ul&gt;

  &lt;/li&gt;

  &lt;/ul&gt;</description>

            <name>onBeforeQuery</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before a list item is selected. Return false to cancel the selection. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;combo &lt;/strong&gt;:(Ext.form.ComboBox) This combo box &lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;record &lt;/strong&gt;:(Ext.data.Record) The data record returned from the underlying store&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index &lt;/strong&gt;:(Number) The index of the selected item in the dropdown list &lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeSelect</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the dropdown list is collapsed &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;combo &lt;/strong&gt;:(Ext.form.ComboBox) This combo box &lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the dropdown list is expanded &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;combo &lt;/strong&gt;:(Ext.form.ComboBox) This combo box &lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a list item is selected &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;combo &lt;/strong&gt;:(Ext.form.ComboBox) This combo box &lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;record &lt;/strong&gt;:(Ext.data.Record) The data record returned from the underlying store&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index &lt;/strong&gt;:(Number) The index of the selected item in the dropdown list &lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onSelect</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is rendered. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;combo &lt;/strong&gt;:(Ext.form.ComboBox) This combo box &lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>Provides a date input field with a Ext.DatePicker dropdown and automatic date validation.

 

 &lt;code&gt;&lt;pre&gt;

 	&amp;lt;ext:formPanel url="deneme.jsp" id="myForm" renderTo="form-ct" width="400" bodyStyle="background-color:#EEEEEE;" border="false"&amp;gt;

	  	&amp;lt;ext:dateField name="dateField" minValue="01/03/2008" maxValue="15/03/2008" fieldLabel="Select Date"/&amp;gt;

		&amp;lt;ext:button type="submit" text="Go!" /&amp;gt;

	&amp;lt;/ext:formPanel&amp;gt;

 &lt;/pre&gt;&lt;/code&gt;</description>

		<name>dateField</name>

		<tag-class>isola.tags.ext.form.DateFieldTag</tag-class>

		<body-content>empty</body-content>

		<attribute>

            <name>allowBlank</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class used to provide field clearing (defaults to 'x-form-clear-left')</description>

            <name>clearCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to disable the field (defaults to false).</description>

            <name>disabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default CSS class for the field (defaults to "x-form-field")</description>

            <name>fieldClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The label text to display next to this field (defaults to '')</description>

            <name>fieldLabel</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to use when the field receives focus (defaults to "x-form-focus")</description>

            <name>focusClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to completely hide the label element (defaults to false)</description>

            <name>hideLabel</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The type attribute for input fields -- e.g. radio, text, password (defaults to "text").</description>

            <name>inputType</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to use when marking a field invalid (defaults to "x-form-invalid")</description>

            <name>invalidClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The error text to use when marking a field invalid and no message is provided 

 (defaults to "The value in this field is invalid")</description>

            <name>invalidText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;An additional CSS class to apply to the wrapper element of this field (defaults 

 to the container's itemCls value if set, or ''). Since it is applied to the 

 wrapper, it allows you to write standard CSS rules that can apply to the field, 

 the label (if specified) or any other element within the markup for the field. 

 Example use:&lt;/p&gt;

 

 &lt;pre&gt;&lt;code&gt;

 // Apply a style to the field's label:

 &amp;lt;style&amp;gt;

     .required .x-form-item-label {font-weight:bold;color:red;}

 &amp;lt;/style&amp;gt;

 

 new Ext.FormPanel({

 	height: 100,

 	renderTo: document.body,

 	items: [{

 		xtype: 'textfield',

 		fieldLabel: 'Name',

 		itemCls: 'required' //this label will be styled

 	},{

 		xtype: 'textfield',

 		fieldLabel: 'Favorite Color'

 	}]

 });

 &lt;/code&gt;&lt;/pre&gt;</description>

            <name>itemCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The standard separator to display after the text of each form label (defaults to the 

 value of Ext.layout.FormLayout.labelSeparator, which is a colon ':' by default). 

 To display no separator for this field's label specify empty string ''.</description>

            <name>labelSeparator</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS style specification to apply directly to this field's label (defaults to the 

 container's labelStyle value if set, or ''). For example, labelStyle: 'font-weight:bold;'.</description>

            <name>labelStyle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The effect used when displaying a validation message under the field (defaults to 'normal').</description>

            <name>msgFx</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The location where error text should display. Should be one of the following values 

 (defaults to 'qtip'):

 &lt;pre&gt;

 Value         Description

 -----------   ----------------------------------------------------------------------

 qtip          Display a quick tip when the user hovers over the field

 title         Display a default browser title attribute popup

 under         Add a block div beneath the field containing the error text

 side          Add an error icon to the right of the field with a popup on hover

 [element id]  Add the error text directly to the innerHTML of the specified element

 &lt;/pre&gt;</description>

            <name>msgTarget</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The field's HTML name attribute.</description>

            <name>name</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets 

 the element's readOnly DOM attribute.</description>

            <name>readOnly</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The tabIndex for this field. Note this only applies to fields that are rendered, not those 

 which are built via applyTo (defaults to undefined).</description>

            <name>tabIndex</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>validateOnBlur</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The length of time in milliseconds after user input begins until validation is initiated 

 (defaults to 250)</description>

            <name>validationDelay</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The event that should initiate field validation. Set to false to disable automatic 

 validation (defaults to "keyup").</description>

            <name>validationEvent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A value to initialize this field with.</description>

            <name>value</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>hideTrigger</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>triggerClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Multiple date formats separated by "|" to try when parsing a user input value and 

 it doesn't match the defined format (defaults to 'm/d/Y|m-d-y|m-d-Y|m/d|m-d|d').</description>

            <name>altFormats</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;"dates" seperated by "|" to disable, as strings. These strings will be used to build a dynamic 

 regular expression so they are very powerful. Some examples:&lt;/p&gt;

 ["03/08/2003", "09/16/2003"] would disable those exact dates&lt;br/&gt;

 ["03/08", "09/16"] would disable those days for every year&lt;br/&gt;

 ["^03/08"] would only match the beginning (useful if you are using short years)&lt;br/&gt;

 ["03/../2006"] would disable every day in March 2006&lt;br/&gt;

 ["^03"] would disable every day in every March&lt;br/&gt;

 &lt;p&gt;In order to support regular expressions, if you are using a date format that has "." 

 in it, you will have to escape the dot when restricting dates. 

 For example: ["03\\.08\\.03"].&lt;/p&gt;</description>

            <name>disabledDates</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The tooltip text to display when the date falls on a disabled date (defaults to 'Disabled')</description>

            <name>disabledDatesText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An array of days to disable, 0 based. For example, [0, 6] disables Sunday and Saturday 

 (defaults to null).</description>

            <name>disabledDays</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The tooltip to display when the date falls on a disabled day (defaults to 'Disabled')</description>

            <name>disabledDaysText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default date format string which can be overriden for localization support. The format 

 must be valid according to Date.parseDate (defaults to 'd/m/Y').</description>

            <name>format</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The error text to use when marking a field invalid and no message is provided 

 (defaults to "The value in this field is invalid")</description>

            <name>invalidText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The error text to display when the date in the cell is after maxValue (defaults to 'The 

 date in this field must be before {maxValue}').</description>

            <name>maxText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The maximum allowed date. This value must be in format d/m/Y.</description>

            <name>maxValue</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The error text to display when the date in the cell is before minValue (defaults to 'The 

 date in this field must be after {minValue}').</description>

            <name>minText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The minimum allowed date. This value must be in format d/m/Y</description>

            <name>minValue</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width of this component in pixels (defaults to auto).</description>

            <name>width</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The height of this component in pixels (defaults to auto).</description>

            <name>height</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this field loses input focus. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBlur</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires just before the field blurs if the field value has changed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;newValue&lt;/strong&gt; : (Mixed) The new value&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;oldValue&lt;/strong&gt; : (Mixed) The original value&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this field receives input focus. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onFocus</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the field has been marked as invalid. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;msg&lt;/strong&gt; : (String) The validation message&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onInvalid</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed. You can 

 check Ext.EventObject.getKey to determine which key was pressed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (Ext.EventObject) The event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onSpecialKey</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed. You can check 

 Ext.EventObject.getKey to determine which key was pressed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onValid</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag>

		<name>datePicker</name>

		<tag-class>isola.tags.ext.form.DatePickerTag</tag-class>

		<body-content>empty</body-content>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Whether the component can move the Dom node when rendering (defaults to true).</description>

            <name>allowDomMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element corresponding 

 to a DIV that is already present in the document that specifies some 

 structural markup for this component. When applyTo is used, constituent 

 parts of the component can also be specified by id or CSS class name 

 within the main element, and the component being created may attempt to 

 create its subcomponents from that markup if applicable. Using this 

 config, a call to render() is not required. If applyTo is specified, 

 any value passed for renderTo will be ignored and the target element's 

 parent node will automatically be used as the component's container.</description>

            <name>applyTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the component should check for hidden classes (e.g. 'x-hidden' 

 or 'x-hide-display') and remove them on render (defaults to false).</description>

            <name>autoShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 Element (defaults to ''). This can be useful for adding customized styles 

 to the component or any of its children using standard CSS rules.</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 container (defaults to ''). This can be useful for adding customized 

 styles to the container or any of its children using standard CSS rules.</description>

            <name>ctCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class added to the component when it is disabled (defaults to 

 "x-item-disabled").</description>

            <name>disabledClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide and show the component's container when hide/show is 

 called on the component, false to hide and show the component itself 

 (defaults to false). For example, this can be used as a shortcut 

 for a hide button on a window by setting hide:true on the button when 

 adding it to its parent container.</description>

            <name>hideParent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id of this component (defaults to an auto-assigned id).</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element that will be the 

 container to render this component into. Using this config, a call to 

 render() is not required.</description>

            <name>renderTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id for this component to use for state management purposes 

 (defaults to the component id). See stateful for an explanation of saving 

 and restoring Component state.</description>

            <name>stateId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;A flag which causes the Component to attempt to restore the state of 

 internal properties from a saved state on startup.&lt;/p&gt;

 

 &lt;p&gt;For state saving to work, the state manager's provider must have been 

 set to an implementation of Ext.state.Provider which overrides the set 

 and get methods to save and recall name/value pairs. A built-in 

 implementation, Ext.state.CookieProvider is available.&lt;/p&gt;

 

 &lt;p&gt;To set the state provider for the current page:&lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;Components attempt to save state when one of the events listed in the stateEvents 

 configuration fires.&lt;/p&gt;

 

 &lt;p&gt;You can perform extra processing on state save and restore by attaching 

 handlers to the beforestaterestore, staterestore, beforestatesave and statesave 

 events.&lt;/p&gt;</description>

            <name>stateful</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom style specification to be applied to this component's Element. Should 

 be a valid argument to Ext.Element.applyStyles.</description>

            <name>style</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Where to place this component. Valid values are south, north, west, east, center</description>

            <name>region</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>How this component should hidden. Supported values are "visibility" 

 (css visibility), "offsets" (negative offset position) and "display" 

 (css display) - defaults to "display".</description>

            <name>hideMode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>cancelText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>constrainToViewport</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>disabledDatesText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>format</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>maxText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>minText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>monthYearText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>nextText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>okText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>prevText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>startDay</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>todayText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>todayTip</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>monthNames</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>dayNames</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>maxDate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>minDate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is destroyed. Return false to stop the destroy.&lt;p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is hidden. Return false to stop the hide.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is rendered. Return false to stop the render. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is shown. Return false to stop the show. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is restored. Return false to stop the restore.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is saved to the 

 configured state provider. Return false to stop the save. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is destroyed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is disabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is enabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEnable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is hidden. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is rendered.  &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is shown.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is restored. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is saved to the configured state provider. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a date is selected &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this &lt;/strong&gt;:DatePicker &lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;date &lt;/strong&gt;:(Date) The selected date&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onSelect</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>Standard container used for grouping form fields.</description>

		<name>fieldSet</name>

		<tag-class>isola.tags.ext.form.FieldSetTag</tag-class>

		<body-content>JSP</body-content>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Whether the component can move the Dom node when rendering (defaults to true).</description>

            <name>allowDomMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element corresponding 

 to a DIV that is already present in the document that specifies some 

 structural markup for this component. When applyTo is used, constituent 

 parts of the component can also be specified by id or CSS class name 

 within the main element, and the component being created may attempt to 

 create its subcomponents from that markup if applicable. Using this 

 config, a call to render() is not required. If applyTo is specified, 

 any value passed for renderTo will be ignored and the target element's 

 parent node will automatically be used as the component's container.</description>

            <name>applyTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the component should check for hidden classes (e.g. 'x-hidden' 

 or 'x-hide-display') and remove them on render (defaults to false).</description>

            <name>autoShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 Element (defaults to ''). This can be useful for adding customized styles 

 to the component or any of its children using standard CSS rules.</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 container (defaults to ''). This can be useful for adding customized 

 styles to the container or any of its children using standard CSS rules.</description>

            <name>ctCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class added to the component when it is disabled (defaults to 

 "x-item-disabled").</description>

            <name>disabledClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide and show the component's container when hide/show is 

 called on the component, false to hide and show the component itself 

 (defaults to false). For example, this can be used as a shortcut 

 for a hide button on a window by setting hide:true on the button when 

 adding it to its parent container.</description>

            <name>hideParent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id of this component (defaults to an auto-assigned id).</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element that will be the 

 container to render this component into. Using this config, a call to 

 render() is not required.</description>

            <name>renderTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id for this component to use for state management purposes 

 (defaults to the component id). See stateful for an explanation of saving 

 and restoring Component state.</description>

            <name>stateId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;A flag which causes the Component to attempt to restore the state of 

 internal properties from a saved state on startup.&lt;/p&gt;

 

 &lt;p&gt;For state saving to work, the state manager's provider must have been 

 set to an implementation of Ext.state.Provider which overrides the set 

 and get methods to save and recall name/value pairs. A built-in 

 implementation, Ext.state.CookieProvider is available.&lt;/p&gt;

 

 &lt;p&gt;To set the state provider for the current page:&lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;Components attempt to save state when one of the events listed in the stateEvents 

 configuration fires.&lt;/p&gt;

 

 &lt;p&gt;You can perform extra processing on state save and restore by attaching 

 handlers to the beforestaterestore, staterestore, beforestatesave and statesave 

 events.&lt;/p&gt;</description>

            <name>stateful</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom style specification to be applied to this component's Element. Should 

 be a valid argument to Ext.Element.applyStyles.</description>

            <name>style</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Where to place this component. Valid values are south, north, west, east, center</description>

            <name>region</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>How this component should hidden. Supported values are "visibility" 

 (css visibility), "offsets" (negative offset position) and "display" 

 (css display) - defaults to "display".</description>

            <name>hideMode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use height:'auto', false to use fixed height (defaults to false).</description>

            <name>autoHeight</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use width:'auto', false to use fixed width (defaults to false).</description>

            <name>autoWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The height of this component in pixels (defaults to auto).</description>

            <name>height</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width of this component in pixels (defaults to auto).</description>

            <name>width</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>HTML Element this object is parsed on.</description>

            <name>el</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A string component id or the numeric index of the component that should be 

 initially activated within the container's layout on render. For example, 

 activeItem: 'item-1' or activeItem: 0 (index 0 = the first item in the 

 container's collection). activeItem only applies to layout styles that can 

 display items one at a time (like Ext.layout.Accordion, 

 Ext.layout.CardLayout and Ext.layout.FitLayout). 

 Related to Ext.layout.ContainerLayout.activeItem.</description>

            <name>activeItem</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If true the container will automatically destroy any contained component 

 that is removed from it, else destruction must be handled manually 

 (defaults to true).</description>

            <name>autoDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>When set to true (100 milliseconds) or a number of milliseconds, the 

 layout assigned for this container will buffer the frequency it calculates 

 and does a re-layout of components. This is useful for heavy containers 

 or containers with a large amount of sub components that frequent calls 

 to layout are expensive.</description>

            <name>bufferResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default type of container represented by this object as registered 

  in Ext.ComponentMgr (defaults to 'panel').</description>

            <name>defaultType</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the borders of each contained component, false to defer to the 

 component's existing border settings (defaults to false).</description>

            <name>hideBorders</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;The layout type to be used in this container. If not specified, a default 

 Ext.layout.ContainerLayout will be created and used. 

 

 &lt;p&gt;Valid values are:&lt;/p&gt;

 &lt;ul&gt;

 &lt;li&gt;accordion, &lt;/li&gt;

 &lt;li&gt;anchor, &lt;/li&gt; 

 &lt;li&gt;border,&lt;/li&gt; 

 &lt;li&gt;card,&lt;/li&gt; 

 &lt;li&gt;column,&lt;/li&gt; 

 &lt;li&gt;fit,&lt;/li&gt; 

 &lt;li&gt;form&lt;/li&gt;

 &lt;li&gt;table.&lt;/li&gt; 

 &lt;/ul&gt;

 &lt;p&gt;Specific config values for the chosen layout type can be specified using 

 layoutConfig.&lt;/p&gt;</description>

            <name>layout</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to automatically monitor window resize events to handle anything that is 

 sensitive to the current size of the viewport. This value is typically managed 

 by the chosen layout and should not need to be set manually.</description>

            <name>monitorResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to animate the transition when the panel is collapsed, false to skip 

 the animation (defaults to true if the Ext.Fx class is available, otherwise 

 false).</description>

            <name>animCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use overflow:'auto' on the panel's body element and show scroll bars 

 automatically when necessary, false to clip any overflowing content 

 (defaults to false).</description>

            <name>autoScroll</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The base CSS class to apply to this panel's element (defaults to 'x-panel').</description>

            <name>baseCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display an interior border on the body element of the panel, false 

 to hide it (defaults to true). This only applies when border == true. If 

 border == true and bodyBorder == false, the border will display as a 1px 

 wide inset border, giving the entire body element an inset appearance.</description>

            <name>bodyBorder</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Custom CSS styles to be applied to the body element in the format expected 

 by Ext.Element.applyStyles (defaults to null).</description>

            <name>bodyStyle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display the borders of the panel's body element, false to hide them 

 (defaults to true). By default, the border is a 2px wide inset border, but 

 this can be further altered by setting bodyBorder to false.</description>

            <name>border</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>When set to true (100 milliseconds) or a number of milliseconds, the 

 layout assigned for this container will buffer the frequency it calculates 

 and does a re-layout of components. This is useful for heavy containers 

 or containers with a large amount of sub components that frequent calls 

 to layout are expensive.</description>

            <name>bufferResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The alignment of any buttons added to this panel. Valid values are 'right,' 

 'left' and 'center' (defaults to 'right').</description>

            <name>buttonAlign</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to make sure the collapse/expand toggle button always renders first (to 

 the left of) any other tools in the panel's title bar, false to render it 

 last (defaults to true).</description>

            <name>collapseFirst</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to render the panel collapsed, false to render it expanded (defaults to false).</description>

            <name>collapsed</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS class to add to the panel's element after it has been collapsed (defaults 

 to 'x-panel-collapsed').</description>

            <name>collapsedCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to make the panel collapsible and have the expand/collapse toggle button 

 automatically rendered into the header tool button area, false to keep the 

 panel statically sized with no button (defaults to false).</description>

            <name>collapsible</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of an existing HTML node to use as the panel's body content (defaults to '').</description>

            <name>contentEl</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to enable dragging of this Panel (defaults to false). For custom drag/drop 

 implementations, an Ext.Panel.DD config could also be passed in this config 

 instead of true, although Ext.Panel.DD is an internal, undocumented class.</description>

            <name>draggable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A comma-delimited list of panel elements to initialize when the panel is 

 rendered. Normally, this list will be generated automatically based on the items 

 added to the panel at config time, but sometimes it might be useful to make 

 sure a structural element is rendered even if not specified at config time 

 (for example, you may want to add a button or toolbar dynamically after the 

 panel has been rendered). Adding those elements to this list will allocate 

 the required placeholders in the panel when it is rendered. 

 Valid values are

 &lt;ul&gt;

 &lt;li&gt;header&lt;/li&gt;

 &lt;li&gt;tbar (top bar)&lt;/li&gt;

 &lt;li&gt;body&lt;/li&gt;

 &lt;li&gt;bbar (bottom bar)&lt;/li&gt;

 &lt;li&gt;footer&lt;/li&gt;

 &lt;/ul&gt;

 Defaults to 'body'.</description>

            <name>elements</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to float the panel (absolute position it with automatic shimming and shadow), 

 false to display it inline where it is rendered (defaults to false). Note that 

 by default, setting floating to true will cause the panel to display at negative 

 offsets so that it is hidden -- because the panel is absolute positioned, the 

 position must be set explicitly after render (e.g., myPanel.setPosition(100,100);). 

 Also, when floating a panel you should always assign a fixed width, otherwise it 

 will be auto width and will expand to fill to the right edge of the viewport.</description>

            <name>floating</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to create the footer element explicitly, false to skip creating it. By 

 default, when footer is not specified, if one or more buttons have been added 

 to the panel the footer will be created automatically, otherwise it will not.</description>

            <name>footer</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Shows a nice rounded corner with a thick border around the panel.</description>

            <name>frame</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to create the header element explicitly, false to skip creating it. By 

 default, when header is not specified, if a title is set the header will be 

 created automatically, otherwise it will not. If a title is set but header is 

 explicitly set to false, the header will not be rendered.</description>

            <name>header</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display the panel title in the header, false to hide it (defaults to true).</description>

            <name>headerAsText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the expand/collapse toggle button when collapsible = true, false 

 to display it (defaults to false).</description>

            <name>hideCollapseTool</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An HTML fragment, or a DomHelper specification to use as the panel's body 

 content (defaults to '').</description>

            <name>html</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS class that will provide a background image to be used as the panel header 

 icon (defaults to '').</description>

            <name>iconCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to mask the panel when it is disabled, false to not mask it (defaults 

 to true). Either way, the panel will always tell its contained elements to 

 disable themselves when it is disabled, but masking the panel can provide an 

 additional visual cue that the panel is disabled.</description>

            <name>maskDisabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Minimum width in pixels of all buttons in this panel (defaults to 75)</description>

            <name>minButtonWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True (or a valid Ext.Shadow Ext.Shadow.mode value) to display a shadow behind 

 the panel, false to display no shadow (defaults to 'sides'). Note that this 

 option only applies when floating = true.</description>

            <name>shadow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The number of pixels to offset the shadow if displayed (defaults to 4). Note 

 that this option only applies when floating = true.</description>

            <name>shadowOffset</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>False to disable the iframe shim in browsers which need one (defaults to true). 

 Note that this option only applies when floating = true.</description>

            <name>shim</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Adds a tooltip when mousing over the tab of a Ext.Panel which is an item of a 

 Ext.TabPanel. Ext.QuickTips.init() must be called in order for the tips to render.</description>

            <name>tabTip</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The title text to display in the panel header (defaults to ''). When a title 

 is specified the header element will automatically be created and displayed 

 unless header is explicitly set to false. If you don't want to specify a title 

 at config time, but you may want one later, you must either specify a non-empty 

 title (a blank space ' ' will do) or header:true so that the container element 

 will get created.</description>

            <name>title</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to allow expanding and collapsing the panel (when collapsible = true) 

 by clicking anywhere in the header bar, false to allow it only by clicking to 

 tool button (defaults to false).</description>

            <name>titleCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If border layout is used then you can set this option to true to place a splitbar 

 between the panels.</description>

            <name>split</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The name to assign to the fieldset's checkbox if checkboxToggle = true (defaults to 

 '[checkbox id]-checkbox').</description>

            <name>checkboxName</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to render a checkbox into the fieldset frame just in front of the legend, or a 

 DomHelper config object to create the checkbox. (defaults to false). The fieldset will 

 be expanded or collapsed when the checkbox is toggled.</description>

            <name>checkboxToggle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A css class to apply to the x-form-item of fields. This property cascades to child containers.</description>

            <name>itemCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width of labels. This property cascades to child containers.</description>

            <name>labelWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If anchor layout is used you can set an anchor value here.</description>

            <name>anchor</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If absolute layout is used you can set an absolute X position in pixels to place the component in

 the layout.</description>

            <name>x</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If absolute layout is used you can set an absolute Y position in pixels to place the component in

 the layout.</description>

            <name>y</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If column layout is used you can give a float column width from 0 to 1. Valid example: .5</description>

            <name>columnWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If table layout is used you can set rowspan as in an ordinary table.</description>

            <name>rowSpan</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If table layout is used you can set colspan as in an ordinary table.</description>

            <name>colSpan</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is destroyed. Return false to stop the destroy.&lt;p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is hidden. Return false to stop the hide.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is rendered. Return false to stop the render. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is shown. Return false to stop the show. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is restored. Return false to stop the restore.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is saved to the 

 configured state provider. Return false to stop the save. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is destroyed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is disabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is enabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEnable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is hidden. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is rendered.  &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is shown.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is restored. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is saved to the configured state provider. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is moved. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;x&lt;/strong&gt;: (Number)The new x position&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;y&lt;/strong&gt;: (Number)The new y position&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is resized.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjWidth&lt;/strong&gt;:(Number) The box-adjusted width that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjHeight&lt;/strong&gt;:(Number) The box-adjusted height that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawWidth&lt;/strong&gt;:(Number) The width that was originally specified&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawHeight&lt;/strong&gt;:(Number) The height that was originally specified&lt;/li&gt; 		

 &lt;/ul&gt;</description>

            <name>onResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after any Ext.Component is added or inserted into the container.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;:(Ext.Component) The component that was added&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the component was added to the container's items collection&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAdd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the components in this container are arranged by the associated layout manager. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;layout&lt;/strong&gt;:(ContainerLayout) The ContainerLayout implementation for this container&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAfterLayout</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before any Ext.Component is added or inserted into the container. A handler can return false to cancel the add.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;:(Ext.Component) The component being added&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the component will be added to the container's items collection&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeAdd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before any Ext.Component is removed from the container. A handler can return false to cancel the remove. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: (Ext.Component) The component being removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after any Ext.Component is removed from the container&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: (Ext.Component) The component that was removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been visually activated. Note that Panels do not directly support 

 being activated, but some Panel subclasses do (like Ext.Window). Panels which are child Components 

 of a TabPanel fire the activate and deactivate events under the control of the TabPanel. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been activated.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onActivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is closed. Note that Panels do not directly support being closed, but some

  Panel subclasses do (like Ext.Window). This event only applies to such subclasses. A handler can 

  return false to cancel the close. &lt;/p&gt;

  Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel being closed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeClose</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is collapsed. A handler can return false to cancel the collapse. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel being collapsed.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;animate&lt;/strong&gt;:(Boolean) True if the collapse is animated, else false.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is expanded. A handler can return false to cancel the expand. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel being expanded.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;animate&lt;/strong&gt;:(Boolean) True if the expand is animated, else false.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been resized. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel which has been resized.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;width&lt;/strong&gt;:(Number) The Panel's new width.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;height &lt;/strong&gt;:(Number) The Panel's new height.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBodyResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel is closed. Note that Panels do not directly support being closed, but 

 some Panel subclasses do (like Ext.Window). &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been closed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onClose</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been collapsed. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel that has been collapsed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been visually deactivated. Note that Panels do not directly support 

 being deactivated, but some Panel subclasses do (like Ext.Window). Panels which are child Components

 of a TabPanel fire the activate and deactivate events under the control of the TabPanel. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been deactivated.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDeactivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been expanded. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been expanded.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel title has been set or changed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel which has had its title changed.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;The&lt;/strong&gt;:(String) new title.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onTitleChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>&lt;p&gt;FormPanel uses a Ext.layout.FormLayout internally, and that is required for fields and labels to 

 work correctly within the FormPanel's layout. To nest additional layout styles within a FormPanel, 

 you should nest additional Panels or other containers that can provide additional layout 

 functionality. You should not override FormPanel's layout.&lt;/p&gt;

 

 &lt;p&gt;By default, Ext Forms are submitted through Ajax, using Ext.form.Action. To enable normal 

 browser submission of the Ext Form contained in this FormPanel, override the Form's onSubmit, 

 and submit methods:&lt;/p&gt;

 

 &lt;code&gt;&lt;pre&gt;

 	  &amp;lt;ext:formPanel url="deneme.jsp" id="myForm" renderTo="form-ct" width="400" bodyStyle="background-color:#EEEEEE;" border="false"&amp;gt;

	  	&amp;lt;ext:dateField name="dateField" minValue="01/03/2008" maxValue="15/03/2008" fieldLabel="Select Date"/&amp;gt;

		&amp;lt;ext:button type="submit" text="Go!" /&amp;gt;

	  &amp;lt;/ext:formPanel&amp;gt;

 &lt;/pre&gt;&lt;/code&gt;</description>

		<name>formPanel</name>

		<tag-class>isola.tags.ext.form.FormPanelTag</tag-class>

		<body-content>JSP</body-content>

		<attribute>

            <name>waitingText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>waitingTitle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If anchor layout is used you can set an anchor value here.</description>

            <name>anchor</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If absolute layout is used you can set an absolute X position in pixels to place the component in

 the layout.</description>

            <name>x</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If absolute layout is used you can set an absolute Y position in pixels to place the component in

 the layout.</description>

            <name>y</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If column layout is used you can give a float column width from 0 to 1. Valid example: .5</description>

            <name>columnWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If table layout is used you can set rowspan as in an ordinary table.</description>

            <name>rowSpan</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If table layout is used you can set colspan as in an ordinary table.</description>

            <name>colSpan</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Whether the component can move the Dom node when rendering (defaults to true).</description>

            <name>allowDomMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element corresponding 

 to a DIV that is already present in the document that specifies some 

 structural markup for this component. When applyTo is used, constituent 

 parts of the component can also be specified by id or CSS class name 

 within the main element, and the component being created may attempt to 

 create its subcomponents from that markup if applicable. Using this 

 config, a call to render() is not required. If applyTo is specified, 

 any value passed for renderTo will be ignored and the target element's 

 parent node will automatically be used as the component's container.</description>

            <name>applyTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the component should check for hidden classes (e.g. 'x-hidden' 

 or 'x-hide-display') and remove them on render (defaults to false).</description>

            <name>autoShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 Element (defaults to ''). This can be useful for adding customized styles 

 to the component or any of its children using standard CSS rules.</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 container (defaults to ''). This can be useful for adding customized 

 styles to the container or any of its children using standard CSS rules.</description>

            <name>ctCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class added to the component when it is disabled (defaults to 

 "x-item-disabled").</description>

            <name>disabledClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide and show the component's container when hide/show is 

 called on the component, false to hide and show the component itself 

 (defaults to false). For example, this can be used as a shortcut 

 for a hide button on a window by setting hide:true on the button when 

 adding it to its parent container.</description>

            <name>hideParent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id of this component (defaults to an auto-assigned id).</description>

            <name>id</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element that will be the 

 container to render this component into. Using this config, a call to 

 render() is not required.</description>

            <name>renderTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id for this component to use for state management purposes 

 (defaults to the component id). See stateful for an explanation of saving 

 and restoring Component state.</description>

            <name>stateId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;A flag which causes the Component to attempt to restore the state of 

 internal properties from a saved state on startup.&lt;/p&gt;

 

 &lt;p&gt;For state saving to work, the state manager's provider must have been 

 set to an implementation of Ext.state.Provider which overrides the set 

 and get methods to save and recall name/value pairs. A built-in 

 implementation, Ext.state.CookieProvider is available.&lt;/p&gt;

 

 &lt;p&gt;To set the state provider for the current page:&lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;Components attempt to save state when one of the events listed in the stateEvents 

 configuration fires.&lt;/p&gt;

 

 &lt;p&gt;You can perform extra processing on state save and restore by attaching 

 handlers to the beforestaterestore, staterestore, beforestatesave and statesave 

 events.&lt;/p&gt;</description>

            <name>stateful</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom style specification to be applied to this component's Element. Should 

 be a valid argument to Ext.Element.applyStyles.</description>

            <name>style</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Where to place this component. Valid values are south, north, west, east, center</description>

            <name>region</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>How this component should hidden. Supported values are "visibility" 

 (css visibility), "offsets" (negative offset position) and "display" 

 (css display) - defaults to "display".</description>

            <name>hideMode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use height:'auto', false to use fixed height (defaults to false).</description>

            <name>autoHeight</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use width:'auto', false to use fixed width (defaults to false).</description>

            <name>autoWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The height of this component in pixels (defaults to auto).</description>

            <name>height</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width of this component in pixels (defaults to auto).</description>

            <name>width</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>HTML Element this object is parsed on.</description>

            <name>el</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A string component id or the numeric index of the component that should be 

 initially activated within the container's layout on render. For example, 

 activeItem: 'item-1' or activeItem: 0 (index 0 = the first item in the 

 container's collection). activeItem only applies to layout styles that can 

 display items one at a time (like Ext.layout.Accordion, 

 Ext.layout.CardLayout and Ext.layout.FitLayout). 

 Related to Ext.layout.ContainerLayout.activeItem.</description>

            <name>activeItem</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If true the container will automatically destroy any contained component 

 that is removed from it, else destruction must be handled manually 

 (defaults to true).</description>

            <name>autoDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>When set to true (100 milliseconds) or a number of milliseconds, the 

 layout assigned for this container will buffer the frequency it calculates 

 and does a re-layout of components. This is useful for heavy containers 

 or containers with a large amount of sub components that frequent calls 

 to layout are expensive.</description>

            <name>bufferResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default type of container represented by this object as registered 

  in Ext.ComponentMgr (defaults to 'panel').</description>

            <name>defaultType</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the borders of each contained component, false to defer to the 

 component's existing border settings (defaults to false).</description>

            <name>hideBorders</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;The layout type to be used in this container. If not specified, a default 

 Ext.layout.ContainerLayout will be created and used. 

 

 &lt;p&gt;Valid values are:&lt;/p&gt;

 &lt;ul&gt;

 &lt;li&gt;accordion, &lt;/li&gt;

 &lt;li&gt;anchor, &lt;/li&gt; 

 &lt;li&gt;border,&lt;/li&gt; 

 &lt;li&gt;card,&lt;/li&gt; 

 &lt;li&gt;column,&lt;/li&gt; 

 &lt;li&gt;fit,&lt;/li&gt; 

 &lt;li&gt;form&lt;/li&gt;

 &lt;li&gt;table.&lt;/li&gt; 

 &lt;/ul&gt;

 &lt;p&gt;Specific config values for the chosen layout type can be specified using 

 layoutConfig.&lt;/p&gt;</description>

            <name>layout</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to automatically monitor window resize events to handle anything that is 

 sensitive to the current size of the viewport. This value is typically managed 

 by the chosen layout and should not need to be set manually.</description>

            <name>monitorResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to animate the transition when the panel is collapsed, false to skip 

 the animation (defaults to true if the Ext.Fx class is available, otherwise 

 false).</description>

            <name>animCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use overflow:'auto' on the panel's body element and show scroll bars 

 automatically when necessary, false to clip any overflowing content 

 (defaults to false).</description>

            <name>autoScroll</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The base CSS class to apply to this panel's element (defaults to 'x-panel').</description>

            <name>baseCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display an interior border on the body element of the panel, false 

 to hide it (defaults to true). This only applies when border == true. If 

 border == true and bodyBorder == false, the border will display as a 1px 

 wide inset border, giving the entire body element an inset appearance.</description>

            <name>bodyBorder</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Custom CSS styles to be applied to the body element in the format expected 

 by Ext.Element.applyStyles (defaults to null).</description>

            <name>bodyStyle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display the borders of the panel's body element, false to hide them 

 (defaults to true). By default, the border is a 2px wide inset border, but 

 this can be further altered by setting bodyBorder to false.</description>

            <name>border</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>When set to true (100 milliseconds) or a number of milliseconds, the 

 layout assigned for this container will buffer the frequency it calculates 

 and does a re-layout of components. This is useful for heavy containers 

 or containers with a large amount of sub components that frequent calls 

 to layout are expensive.</description>

            <name>bufferResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The alignment of any buttons added to this panel. Valid values are 'right,' 

 'left' and 'center' (defaults to 'right').</description>

            <name>buttonAlign</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to make sure the collapse/expand toggle button always renders first (to 

 the left of) any other tools in the panel's title bar, false to render it 

 last (defaults to true).</description>

            <name>collapseFirst</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to render the panel collapsed, false to render it expanded (defaults to false).</description>

            <name>collapsed</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS class to add to the panel's element after it has been collapsed (defaults 

 to 'x-panel-collapsed').</description>

            <name>collapsedCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to make the panel collapsible and have the expand/collapse toggle button 

 automatically rendered into the header tool button area, false to keep the 

 panel statically sized with no button (defaults to false).</description>

            <name>collapsible</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of an existing HTML node to use as the panel's body content (defaults to '').</description>

            <name>contentEl</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to enable dragging of this Panel (defaults to false). For custom drag/drop 

 implementations, an Ext.Panel.DD config could also be passed in this config 

 instead of true, although Ext.Panel.DD is an internal, undocumented class.</description>

            <name>draggable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A comma-delimited list of panel elements to initialize when the panel is 

 rendered. Normally, this list will be generated automatically based on the items 

 added to the panel at config time, but sometimes it might be useful to make 

 sure a structural element is rendered even if not specified at config time 

 (for example, you may want to add a button or toolbar dynamically after the 

 panel has been rendered). Adding those elements to this list will allocate 

 the required placeholders in the panel when it is rendered. 

 Valid values are

 &lt;ul&gt;

 &lt;li&gt;header&lt;/li&gt;

 &lt;li&gt;tbar (top bar)&lt;/li&gt;

 &lt;li&gt;body&lt;/li&gt;

 &lt;li&gt;bbar (bottom bar)&lt;/li&gt;

 &lt;li&gt;footer&lt;/li&gt;

 &lt;/ul&gt;

 Defaults to 'body'.</description>

            <name>elements</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to float the panel (absolute position it with automatic shimming and shadow), 

 false to display it inline where it is rendered (defaults to false). Note that 

 by default, setting floating to true will cause the panel to display at negative 

 offsets so that it is hidden -- because the panel is absolute positioned, the 

 position must be set explicitly after render (e.g., myPanel.setPosition(100,100);). 

 Also, when floating a panel you should always assign a fixed width, otherwise it 

 will be auto width and will expand to fill to the right edge of the viewport.</description>

            <name>floating</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to create the footer element explicitly, false to skip creating it. By 

 default, when footer is not specified, if one or more buttons have been added 

 to the panel the footer will be created automatically, otherwise it will not.</description>

            <name>footer</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Shows a nice rounded corner with a thick border around the panel.</description>

            <name>frame</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to create the header element explicitly, false to skip creating it. By 

 default, when header is not specified, if a title is set the header will be 

 created automatically, otherwise it will not. If a title is set but header is 

 explicitly set to false, the header will not be rendered.</description>

            <name>header</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display the panel title in the header, false to hide it (defaults to true).</description>

            <name>headerAsText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the expand/collapse toggle button when collapsible = true, false 

 to display it (defaults to false).</description>

            <name>hideCollapseTool</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An HTML fragment, or a DomHelper specification to use as the panel's body 

 content (defaults to '').</description>

            <name>html</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS class that will provide a background image to be used as the panel header 

 icon (defaults to '').</description>

            <name>iconCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to mask the panel when it is disabled, false to not mask it (defaults 

 to true). Either way, the panel will always tell its contained elements to 

 disable themselves when it is disabled, but masking the panel can provide an 

 additional visual cue that the panel is disabled.</description>

            <name>maskDisabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Minimum width in pixels of all buttons in this panel (defaults to 75)</description>

            <name>minButtonWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True (or a valid Ext.Shadow Ext.Shadow.mode value) to display a shadow behind 

 the panel, false to display no shadow (defaults to 'sides'). Note that this 

 option only applies when floating = true.</description>

            <name>shadow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The number of pixels to offset the shadow if displayed (defaults to 4). Note 

 that this option only applies when floating = true.</description>

            <name>shadowOffset</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>False to disable the iframe shim in browsers which need one (defaults to true). 

 Note that this option only applies when floating = true.</description>

            <name>shim</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Adds a tooltip when mousing over the tab of a Ext.Panel which is an item of a 

 Ext.TabPanel. Ext.QuickTips.init() must be called in order for the tips to render.</description>

            <name>tabTip</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The title text to display in the panel header (defaults to ''). When a title 

 is specified the header element will automatically be created and displayed 

 unless header is explicitly set to false. If you don't want to specify a title 

 at config time, but you may want one later, you must either specify a non-empty 

 title (a blank space ' ' will do) or header:true so that the container element 

 will get created.</description>

            <name>title</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to allow expanding and collapsing the panel (when collapsible = true) 

 by clicking anywhere in the header bar, false to allow it only by clicking to 

 tool button (defaults to false).</description>

            <name>titleCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If border layout is used then you can set this option to true to place a splitbar 

 between the panels.</description>

            <name>split</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>(optional) The id of the FORM tag (defaults to an auto-generated id).</description>

            <name>formId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The alignment of any buttons added to this panel. Valid values are 'right,' 

 'left' and 'center' (defaults to 'right').</description>

            <name>buttonAlign</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A css class to apply to the x-form-item of fields. This property cascades 

 to child containers.</description>

            <name>itemCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Valid values are "left," "top" and "right" (defaults to "left"). This property 

 cascades to child containers if not set.</description>

            <name>labelAlign</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width of labels. This property cascades to child containers.</description>

            <name>labelWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Minimum width in pixels of all buttons in this panel (defaults to 75)</description>

            <name>minButtonWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The milliseconds to poll valid state, ignored if monitorValid is not true (defaults to 

 200)</description>

            <name>monitorPoll</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If true the form monitors its valid state client-side and fires a looping event with 

 that state. This is required to bind buttons to the valid state using the config value 

 formBind:true on the button.</description>

            <name>monitorValid</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Set to true if this form is a file upload.</description>

            <name>fileUpload</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The request method to use (GET or POST) for form actions if one isn't supplied in 

 the action options.</description>

            <name>method</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Timeout for form actions in seconds (default is 30 seconds).</description>

            <name>timeout</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If set to true, form.reset() resets to the last loaded or setValues() data instead 

 of when the form was first created.</description>

            <name>trackResetOnLoad</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The URL to use for form actions if one isn't supplied in the action options.</description>

            <name>url</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If set to false, standard HTML form submits are used instead of XHR (Ajax) 

 style form submissions. (defaults to false)</description>

            <name>isAjaxForm</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is destroyed. Return false to stop the destroy.&lt;p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is hidden. Return false to stop the hide.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is rendered. Return false to stop the render. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is shown. Return false to stop the show. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is restored. Return false to stop the restore.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is saved to the 

 configured state provider. Return false to stop the save. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is destroyed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is disabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is enabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEnable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is hidden. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is rendered.  &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is shown.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is restored. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is saved to the configured state provider. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is moved. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;x&lt;/strong&gt;: (Number)The new x position&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;y&lt;/strong&gt;: (Number)The new y position&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is resized.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjWidth&lt;/strong&gt;:(Number) The box-adjusted width that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjHeight&lt;/strong&gt;:(Number) The box-adjusted height that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawWidth&lt;/strong&gt;:(Number) The width that was originally specified&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawHeight&lt;/strong&gt;:(Number) The height that was originally specified&lt;/li&gt; 		

 &lt;/ul&gt;</description>

            <name>onResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after any Ext.Component is added or inserted into the container.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;:(Ext.Component) The component that was added&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the component was added to the container's items collection&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAdd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<!-- 

		<attribute>

            <name>onAfterLayout</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		-->

		<attribute><description>&lt;p&gt;Fires before any Ext.Component is added or inserted into the container. A handler can return false to cancel the add.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;:(Ext.Component) The component being added&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the component will be added to the container's items collection&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeAdd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before any Ext.Component is removed from the container. A handler can return false to cancel the remove. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: (Ext.Component) The component being removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after any Ext.Component is removed from the container&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: (Ext.Component) The component that was removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been visually activated. Note that Panels do not directly support 

 being activated, but some Panel subclasses do (like Ext.Window). Panels which are child Components 

 of a TabPanel fire the activate and deactivate events under the control of the TabPanel. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been activated.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onActivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is closed. Note that Panels do not directly support being closed, but some

  Panel subclasses do (like Ext.Window). This event only applies to such subclasses. A handler can 

  return false to cancel the close. &lt;/p&gt;

  Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel being closed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeClose</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is collapsed. A handler can return false to cancel the collapse. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel being collapsed.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;animate&lt;/strong&gt;:(Boolean) True if the collapse is animated, else false.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is expanded. A handler can return false to cancel the expand. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel being expanded.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;animate&lt;/strong&gt;:(Boolean) True if the expand is animated, else false.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been resized. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel which has been resized.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;width&lt;/strong&gt;:(Number) The Panel's new width.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;height &lt;/strong&gt;:(Number) The Panel's new height.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBodyResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel is closed. Note that Panels do not directly support being closed, but 

 some Panel subclasses do (like Ext.Window). &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been closed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onClose</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been collapsed. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel that has been collapsed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been visually deactivated. Note that Panels do not directly support 

 being deactivated, but some Panel subclasses do (like Ext.Window). Panels which are child Components

 of a TabPanel fire the activate and deactivate events under the control of the TabPanel. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been deactivated.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDeactivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been expanded. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been expanded.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel title has been set or changed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel which has had its title changed.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;The&lt;/strong&gt;:(String) new title.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onTitleChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;If the monitorValid config option is true, this event fires repetitively to notify of valid state &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.FormPanel&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;valid&lt;/strong&gt; : (Boolean) true if the form has passed client-side validation&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onClientValidation</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when action is completed&lt;/p&gt;</description>

            <name>onActionComplete</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when action is failed&lt;/p&gt;</description>

            <name>onActionFailed</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires just before action&lt;/p&gt;</description>

            <name>onBeforeAction</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>A textfield aimed for password input.</description>

		<name>passwordField</name>

		<tag-class>isola.tags.ext.form.PasswordFieldTag</tag-class>

		<body-content>empty</body-content>

		<attribute>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class used to provide field clearing (defaults to 'x-form-clear-left')</description>

            <name>clearCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to disable the field (defaults to false).</description>

            <name>disabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default CSS class for the field (defaults to "x-form-field")</description>

            <name>fieldClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The label text to display next to this field (defaults to '')</description>

            <name>fieldLabel</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to use when the field receives focus (defaults to "x-form-focus")</description>

            <name>focusClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to completely hide the label element (defaults to false)</description>

            <name>hideLabel</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to use when marking a field invalid (defaults to "x-form-invalid")</description>

            <name>invalidClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The error text to use when marking a field invalid and no message is provided 

 (defaults to "The value in this field is invalid")</description>

            <name>invalidText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;An additional CSS class to apply to the wrapper element of this field (defaults 

 to the container's itemCls value if set, or ''). Since it is applied to the 

 wrapper, it allows you to write standard CSS rules that can apply to the field, 

 the label (if specified) or any other element within the markup for the field. 

 Example use:&lt;/p&gt;

 

 &lt;pre&gt;&lt;code&gt;

 // Apply a style to the field's label:

 &amp;lt;style&amp;gt;

     .required .x-form-item-label {font-weight:bold;color:red;}

 &amp;lt;/style&amp;gt;

 

 new Ext.FormPanel({

 	height: 100,

 	renderTo: document.body,

 	items: [{

 		xtype: 'textfield',

 		fieldLabel: 'Name',

 		itemCls: 'required' //this label will be styled

 	},{

 		xtype: 'textfield',

 		fieldLabel: 'Favorite Color'

 	}]

 });

 &lt;/code&gt;&lt;/pre&gt;</description>

            <name>itemCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The standard separator to display after the text of each form label (defaults to the 

 value of Ext.layout.FormLayout.labelSeparator, which is a colon ':' by default). 

 To display no separator for this field's label specify empty string ''.</description>

            <name>labelSeparator</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS style specification to apply directly to this field's label (defaults to the 

 container's labelStyle value if set, or ''). For example, labelStyle: 'font-weight:bold;'.</description>

            <name>labelStyle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The effect used when displaying a validation message under the field (defaults to 'normal').</description>

            <name>msgFx</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The location where error text should display. Should be one of the following values 

 (defaults to 'qtip'):

 &lt;pre&gt;

 Value         Description

 -----------   ----------------------------------------------------------------------

 qtip          Display a quick tip when the user hovers over the field

 title         Display a default browser title attribute popup

 under         Add a block div beneath the field containing the error text

 side          Add an error icon to the right of the field with a popup on hover

 [element id]  Add the error text directly to the innerHTML of the specified element

 &lt;/pre&gt;</description>

            <name>msgTarget</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The field's HTML name attribute.</description>

            <name>name</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets 

 the element's readOnly DOM attribute.</description>

            <name>readOnly</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The tabIndex for this field. Note this only applies to fields that are rendered, not those 

 which are built via applyTo (defaults to undefined).</description>

            <name>tabIndex</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>validateOnBlur</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The length of time in milliseconds after user input begins until validation is initiated 

 (defaults to 250)</description>

            <name>validationDelay</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The event that should initiate field validation. Set to false to disable automatic 

 validation (defaults to "keyup").</description>

            <name>validationEvent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A value to initialize this field with.</description>

            <name>value</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>False to validate that the value length &gt; 0 (defaults to true)</description>

            <name>allowBlank</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Error text to display if the allow blank validation fails (defaults to "This field is 

 required")</description>

            <name>blankText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to disable input keystroke filtering (defaults to false)</description>

            <name>disableKeyFilter</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to apply to an empty field to style the emptyText (defaults to 

 'x-form-empty-field'). This class is automatically added and removed as needed depending on 

 the current field value.</description>

            <name>emptyClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default text to display in an empty field (defaults to null).</description>

            <name>emptyText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if this field should automatically grow and shrink to its content</description>

            <name>grow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The maximum width to allow when grow = true (defaults to 800)</description>

            <name>growMax</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The minimum width to allow when grow = true (defaults to 30)</description>

            <name>growMin</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Maximum input field length allowed (defaults to Number.MAX_VALUE)</description>

            <name>maxLength</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Error text to display if the maximum length validation fails (defaults to 

 "The maximum length for this field is {maxLength}")</description>

            <name>maxLengthText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Minimum input field length required (defaults to 0)</description>

            <name>minLength</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Error text to display if the minimum length validation fails (defaults to 

 "The minimum length for this field is {minLength}")</description>

            <name>minLengthText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The error text to display if regex is used and the test fails during validation (defaults to "")</description>

            <name>regexText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to automatically select any existing field text when the field receives input 

 focus (defaults to false)</description>

            <name>selectOnFocus</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A validation type name as defined in Ext.form.VTypes (defaults to null)</description>

            <name>vtype</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom error message to display in place of the default message provided for the 

 vtype currently set for this field (defaults to ''). Only applies if vtype is set, 

 else ignored.</description>

            <name>vtypeText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A JavaScript RegExp object to be tested against the field value during validation 

 (defaults to null). If available, this regex will be evaluated only after the basic 

 validators all return true, and will be passed the current field value. If the test 

 fails, the field will be marked invalid using regexText.</description>

            <name>regex</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom validation function to be called during field validation (defaults to null). 

 If available, this function will be called only after the basic validators all return 

 true, and will be passed the current field value and expected to return boolean true 

 if the value is valid or a string error message if invalid.</description>

            <name>validator</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width of this component in pixels (defaults to auto).</description>

            <name>width</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The height of this component in pixels (defaults to auto).</description>

            <name>height</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this field loses input focus. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBlur</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires just before the field blurs if the field value has changed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;newValue&lt;/strong&gt; : (Mixed) The new value&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;oldValue&lt;/strong&gt; : (Mixed) The original value&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this field receives input focus. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onFocus</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the field has been marked as invalid. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;msg&lt;/strong&gt; : (String) The validation message&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onInvalid</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed. You can 

 check Ext.EventObject.getKey to determine which key was pressed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (Ext.EventObject) The event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onSpecialKey</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed. You can check 

 Ext.EventObject.getKey to determine which key was pressed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onValid</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the autosize function is triggered. The field may or may not have actually

  changed size according to the default logic, but this event provides a hook for the 

  developer to apply additional logic at runtime to resize the field if needed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : (Ext.form.Field) This text field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;width&lt;/strong&gt; : (Number) The new field width&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAutoSize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>A basic hidden field for storing hidden values in forms that need to be passed in the form 

 submit.</description>

		<name>hidden</name>

		<tag-class>isola.tags.ext.form.HiddenTag</tag-class>

		<body-content>empty</body-content>

		<attribute>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class used to provide field clearing (defaults to 'x-form-clear-left')</description>

            <name>clearCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to disable the field (defaults to false).</description>

            <name>disabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default CSS class for the field (defaults to "x-form-field")</description>

            <name>fieldClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The label text to display next to this field (defaults to '')</description>

            <name>fieldLabel</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to use when the field receives focus (defaults to "x-form-focus")</description>

            <name>focusClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to completely hide the label element (defaults to false)</description>

            <name>hideLabel</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The type attribute for input fields -- e.g. radio, text, password (defaults to "text").</description>

            <name>inputType</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to use when marking a field invalid (defaults to "x-form-invalid")</description>

            <name>invalidClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The error text to use when marking a field invalid and no message is provided 

 (defaults to "The value in this field is invalid")</description>

            <name>invalidText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;An additional CSS class to apply to the wrapper element of this field (defaults 

 to the container's itemCls value if set, or ''). Since it is applied to the 

 wrapper, it allows you to write standard CSS rules that can apply to the field, 

 the label (if specified) or any other element within the markup for the field. 

 Example use:&lt;/p&gt;

 

 &lt;pre&gt;&lt;code&gt;

 // Apply a style to the field's label:

 &amp;lt;style&amp;gt;

     .required .x-form-item-label {font-weight:bold;color:red;}

 &amp;lt;/style&amp;gt;

 

 new Ext.FormPanel({

 	height: 100,

 	renderTo: document.body,

 	items: [{

 		xtype: 'textfield',

 		fieldLabel: 'Name',

 		itemCls: 'required' //this label will be styled

 	},{

 		xtype: 'textfield',

 		fieldLabel: 'Favorite Color'

 	}]

 });

 &lt;/code&gt;&lt;/pre&gt;</description>

            <name>itemCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The standard separator to display after the text of each form label (defaults to the 

 value of Ext.layout.FormLayout.labelSeparator, which is a colon ':' by default). 

 To display no separator for this field's label specify empty string ''.</description>

            <name>labelSeparator</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS style specification to apply directly to this field's label (defaults to the 

 container's labelStyle value if set, or ''). For example, labelStyle: 'font-weight:bold;'.</description>

            <name>labelStyle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The effect used when displaying a validation message under the field (defaults to 'normal').</description>

            <name>msgFx</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The location where error text should display. Should be one of the following values 

 (defaults to 'qtip'):

 &lt;pre&gt;

 Value         Description

 -----------   ----------------------------------------------------------------------

 qtip          Display a quick tip when the user hovers over the field

 title         Display a default browser title attribute popup

 under         Add a block div beneath the field containing the error text

 side          Add an error icon to the right of the field with a popup on hover

 [element id]  Add the error text directly to the innerHTML of the specified element

 &lt;/pre&gt;</description>

            <name>msgTarget</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The field's HTML name attribute.</description>

            <name>name</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets 

 the element's readOnly DOM attribute.</description>

            <name>readOnly</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The tabIndex for this field. Note this only applies to fields that are rendered, not those 

 which are built via applyTo (defaults to undefined).</description>

            <name>tabIndex</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>validateOnBlur</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The length of time in milliseconds after user input begins until validation is initiated 

 (defaults to 250)</description>

            <name>validationDelay</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The event that should initiate field validation. Set to false to disable automatic 

 validation (defaults to "keyup").</description>

            <name>validationEvent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A value to initialize this field with.</description>

            <name>value</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this field loses input focus. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBlur</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires just before the field blurs if the field value has changed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;newValue&lt;/strong&gt; : (Mixed) The new value&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;oldValue&lt;/strong&gt; : (Mixed) The original value&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this field receives input focus. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onFocus</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the field has been marked as invalid. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;msg&lt;/strong&gt; : (String) The validation message&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onInvalid</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed. You can 

 check Ext.EventObject.getKey to determine which key was pressed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (Ext.EventObject) The event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onSpecialKey</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed. You can check 

 Ext.EventObject.getKey to determine which key was pressed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onValid</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>





	<tag><description>&lt;p&gt;Provides a lightweight HTML Editor component. &lt;/p&gt;

 

 &lt;p&gt;Note: The focus/blur and validation marking functionality inherited from Ext.form.Field 

 is NOT supported by this editor. An Editor is a sensitive component that can't be used in 

 all spots standard fields can be used. Putting an Editor within any element that has display 

 set to 'none' can cause problems in Safari and Firefox due to their default iframe reloading 

 bugs.&lt;/p&gt;</description>

		<name>htmlEditor</name>

		<tag-class>isola.tags.ext.form.HtmlEditorTag</tag-class>

		<body-content>empty</body-content>

		<attribute>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class used to provide field clearing (defaults to 'x-form-clear-left')</description>

            <name>clearCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to disable the field (defaults to false).</description>

            <name>disabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default CSS class for the field (defaults to "x-form-field")</description>

            <name>fieldClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The label text to display next to this field (defaults to '')</description>

            <name>fieldLabel</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to use when the field receives focus (defaults to "x-form-focus")</description>

            <name>focusClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to completely hide the label element (defaults to false)</description>

            <name>hideLabel</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The type attribute for input fields -- e.g. radio, text, password (defaults to "text").</description>

            <name>inputType</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to use when marking a field invalid (defaults to "x-form-invalid")</description>

            <name>invalidClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The error text to use when marking a field invalid and no message is provided 

 (defaults to "The value in this field is invalid")</description>

            <name>invalidText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;An additional CSS class to apply to the wrapper element of this field (defaults 

 to the container's itemCls value if set, or ''). Since it is applied to the 

 wrapper, it allows you to write standard CSS rules that can apply to the field, 

 the label (if specified) or any other element within the markup for the field. 

 Example use:&lt;/p&gt;

 

 &lt;pre&gt;&lt;code&gt;

 // Apply a style to the field's label:

 &amp;lt;style&amp;gt;

     .required .x-form-item-label {font-weight:bold;color:red;}

 &amp;lt;/style&amp;gt;

 

 new Ext.FormPanel({

 	height: 100,

 	renderTo: document.body,

 	items: [{

 		xtype: 'textfield',

 		fieldLabel: 'Name',

 		itemCls: 'required' //this label will be styled

 	},{

 		xtype: 'textfield',

 		fieldLabel: 'Favorite Color'

 	}]

 });

 &lt;/code&gt;&lt;/pre&gt;</description>

            <name>itemCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The standard separator to display after the text of each form label (defaults to the 

 value of Ext.layout.FormLayout.labelSeparator, which is a colon ':' by default). 

 To display no separator for this field's label specify empty string ''.</description>

            <name>labelSeparator</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS style specification to apply directly to this field's label (defaults to the 

 container's labelStyle value if set, or ''). For example, labelStyle: 'font-weight:bold;'.</description>

            <name>labelStyle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The effect used when displaying a validation message under the field (defaults to 'normal').</description>

            <name>msgFx</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The location where error text should display. Should be one of the following values 

 (defaults to 'qtip'):

 &lt;pre&gt;

 Value         Description

 -----------   ----------------------------------------------------------------------

 qtip          Display a quick tip when the user hovers over the field

 title         Display a default browser title attribute popup

 under         Add a block div beneath the field containing the error text

 side          Add an error icon to the right of the field with a popup on hover

 [element id]  Add the error text directly to the innerHTML of the specified element

 &lt;/pre&gt;</description>

            <name>msgTarget</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The field's HTML name attribute.</description>

            <name>name</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets 

 the element's readOnly DOM attribute.</description>

            <name>readOnly</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The tabIndex for this field. Note this only applies to fields that are rendered, not those 

 which are built via applyTo (defaults to undefined).</description>

            <name>tabIndex</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>validateOnBlur</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The length of time in milliseconds after user input begins until validation is initiated 

 (defaults to 250)</description>

            <name>validationDelay</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The event that should initiate field validation. Set to false to disable automatic 

 validation (defaults to "keyup").</description>

            <name>validationEvent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A value to initialize this field with.</description>

            <name>value</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default text for the create link prompt</description>

            <name>createLinkText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default value for the create link prompt (defaults to http://)</description>

            <name>defaultLinkValue</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Enable the left, center, right alignment buttons (defaults to true)</description>

            <name>enableAlignments</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Enable the fore/highlight color buttons (defaults to true)</description>

            <name>enableColors</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Enable font selection. Not available in Safari. (defaults to true)</description>

            <name>enableFont</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Enable the increase/decrease font size buttons (defaults to true)</description>

            <name>enableFontSize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Enable the bold, italic and underline buttons (defaults to true)</description>

            <name>enableFormat</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Enable the create link button. Not available in Safari. (defaults to true)</description>

            <name>enableLinks</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Enable the bullet and numbered list buttons. Not available in Safari. (defaults to true)</description>

            <name>enableLists</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Enable the switch to source edit button. Not available in Safari. (defaults to true)</description>

            <name>enableSourceEdit</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An array of available font families</description>

            <name>fontFamilies</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width of this component in pixels (defaults to auto).</description>

            <name>width</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The height of this component in pixels (defaults to auto).</description>

            <name>height</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this field loses input focus. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBlur</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires just before the field blurs if the field value has changed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;newValue&lt;/strong&gt; : (Mixed) The new value&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;oldValue&lt;/strong&gt; : (Mixed) The original value&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this field receives input focus. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onFocus</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the field has been marked as invalid. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;msg&lt;/strong&gt; : (String) The validation message&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onInvalid</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed. You can 

 check Ext.EventObject.getKey to determine which key was pressed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (Ext.EventObject) The event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onSpecialKey</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed. You can check 

 Ext.EventObject.getKey to determine which key was pressed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onValid</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the editor is first receives the focus. Any insertion must wait until after this event. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : HtmlEditor&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onActivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the iframe editor is updated with content from the textarea. Return false to cancel the push. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : HtmlEditor&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;html&lt;/strong&gt; : String&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforePush</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the textarea is updated with content from the editor iframe. Return false to cancel the sync. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : HtmlEditor&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;html&lt;/strong&gt; : String&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeSync</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the editor switches edit modes &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : HtmlEditor&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;sourceEdit&lt;/strong&gt; :(Boolean) True if source edit, false if standard editing.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEditModeChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the editor is fully initialized (including the iframe) &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : HtmlEditor&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onInitialize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the iframe editor is updated with content from the textarea. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : HtmlEditor&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;html&lt;/strong&gt; : String&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onPush</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the textarea is updated with content from the editor iframe. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : HtmlEditor&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;html&lt;/strong&gt; : String&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onSync</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>Numeric text field that provides automatic keystroke filtering and numeric validation.</description>

		<name>numberField</name>

		<tag-class>isola.tags.ext.form.NumberFieldTag</tag-class>

		<body-content>empty</body-content>

		<attribute>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class used to provide field clearing (defaults to 'x-form-clear-left')</description>

            <name>clearCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to disable the field (defaults to false).</description>

            <name>disabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default CSS class for the field (defaults to "x-form-field")</description>

            <name>fieldClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The label text to display next to this field (defaults to '')</description>

            <name>fieldLabel</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to use when the field receives focus (defaults to "x-form-focus")</description>

            <name>focusClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to completely hide the label element (defaults to false)</description>

            <name>hideLabel</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The type attribute for input fields -- e.g. radio, text, password (defaults to "text").</description>

            <name>inputType</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to use when marking a field invalid (defaults to "x-form-invalid")</description>

            <name>invalidClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The error text to use when marking a field invalid and no message is provided 

 (defaults to "The value in this field is invalid")</description>

            <name>invalidText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;An additional CSS class to apply to the wrapper element of this field (defaults 

 to the container's itemCls value if set, or ''). Since it is applied to the 

 wrapper, it allows you to write standard CSS rules that can apply to the field, 

 the label (if specified) or any other element within the markup for the field. 

 Example use:&lt;/p&gt;

 

 &lt;pre&gt;&lt;code&gt;

 // Apply a style to the field's label:

 &amp;lt;style&amp;gt;

     .required .x-form-item-label {font-weight:bold;color:red;}

 &amp;lt;/style&amp;gt;

 

 new Ext.FormPanel({

 	height: 100,

 	renderTo: document.body,

 	items: [{

 		xtype: 'textfield',

 		fieldLabel: 'Name',

 		itemCls: 'required' //this label will be styled

 	},{

 		xtype: 'textfield',

 		fieldLabel: 'Favorite Color'

 	}]

 });

 &lt;/code&gt;&lt;/pre&gt;</description>

            <name>itemCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The standard separator to display after the text of each form label (defaults to the 

 value of Ext.layout.FormLayout.labelSeparator, which is a colon ':' by default). 

 To display no separator for this field's label specify empty string ''.</description>

            <name>labelSeparator</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS style specification to apply directly to this field's label (defaults to the 

 container's labelStyle value if set, or ''). For example, labelStyle: 'font-weight:bold;'.</description>

            <name>labelStyle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The effect used when displaying a validation message under the field (defaults to 'normal').</description>

            <name>msgFx</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The location where error text should display. Should be one of the following values 

 (defaults to 'qtip'):

 &lt;pre&gt;

 Value         Description

 -----------   ----------------------------------------------------------------------

 qtip          Display a quick tip when the user hovers over the field

 title         Display a default browser title attribute popup

 under         Add a block div beneath the field containing the error text

 side          Add an error icon to the right of the field with a popup on hover

 [element id]  Add the error text directly to the innerHTML of the specified element

 &lt;/pre&gt;</description>

            <name>msgTarget</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The field's HTML name attribute.</description>

            <name>name</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets 

 the element's readOnly DOM attribute.</description>

            <name>readOnly</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The tabIndex for this field. Note this only applies to fields that are rendered, not those 

 which are built via applyTo (defaults to undefined).</description>

            <name>tabIndex</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>validateOnBlur</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The length of time in milliseconds after user input begins until validation is initiated 

 (defaults to 250)</description>

            <name>validationDelay</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The event that should initiate field validation. Set to false to disable automatic 

 validation (defaults to "keyup").</description>

            <name>validationEvent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A value to initialize this field with.</description>

            <name>value</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>False to validate that the value length &gt; 0 (defaults to true)</description>

            <name>allowBlank</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Error text to display if the allow blank validation fails (defaults to "This field is 

 required")</description>

            <name>blankText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to disable input keystroke filtering (defaults to false)</description>

            <name>disableKeyFilter</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to apply to an empty field to style the emptyText (defaults to 

 'x-form-empty-field'). This class is automatically added and removed as needed depending on 

 the current field value.</description>

            <name>emptyClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default text to display in an empty field (defaults to null).</description>

            <name>emptyText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if this field should automatically grow and shrink to its content</description>

            <name>grow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The maximum width to allow when grow = true (defaults to 800)</description>

            <name>growMax</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The minimum width to allow when grow = true (defaults to 30)</description>

            <name>growMin</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Maximum input field length allowed (defaults to Number.MAX_VALUE)</description>

            <name>maxLength</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Error text to display if the maximum length validation fails (defaults to 

 "The maximum length for this field is {maxLength}")</description>

            <name>maxLengthText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Minimum input field length required (defaults to 0)</description>

            <name>minLength</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Error text to display if the minimum length validation fails (defaults to 

 "The minimum length for this field is {minLength}")</description>

            <name>minLengthText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The error text to display if regex is used and the test fails during validation (defaults to "")</description>

            <name>regexText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to automatically select any existing field text when the field receives input 

 focus (defaults to false)</description>

            <name>selectOnFocus</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A validation type name as defined in Ext.form.VTypes (defaults to null)</description>

            <name>vtype</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom error message to display in place of the default message provided for the 

 vtype currently set for this field (defaults to ''). Only applies if vtype is set, 

 else ignored.</description>

            <name>vtypeText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A JavaScript RegExp object to be tested against the field value during validation 

 (defaults to null). If available, this regex will be evaluated only after the basic 

 validators all return true, and will be passed the current field value. If the test 

 fails, the field will be marked invalid using regexText.</description>

            <name>regex</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom validation function to be called during field validation (defaults to null). 

 If available, this function will be called only after the basic validators all return 

 true, and will be passed the current field value and expected to return boolean true 

 if the value is valid or a string error message if invalid.</description>

            <name>validator</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>False to disallow decimal values (defaults to true)</description>

            <name>allowDecimals</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>False to prevent entering a negative sign (defaults to true)</description>

            <name>allowNegative</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The base set of characters to evaluate as valid numbers (defaults to '0123456789').</description>

            <name>baseChars</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The maximum precision to display after the decimal separator (defaults to 2)</description>

            <name>decimalPrecision</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Character(s) to allow as the decimal separator (defaults to '.')</description>

            <name>decimalSeparator</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default CSS class for the field (defaults to "x-form-field")</description>

            <name>fieldClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Error text to display if the maximum value validation fails (defaults to "The maximum value 

 for this field is {maxValue}")</description>

            <name>maxText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The maximum allowed value (defaults to Number.MAX_VALUE)</description>

            <name>maxValue</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Error text to display if the minimum value validation fails (defaults to "The 

 minimum value for this field is {minValue}")</description>

            <name>minText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The minimum allowed value (defaults to Number.NEGATIVE_INFINITY)</description>

            <name>minValue</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Error text to display if the value is not a valid number. For example, this can 

 happen if a valid character like '.' or '-' is left in the field with no number 

 (defaults to "{value} is not a valid number")</description>

            <name>nanText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width of this component in pixels (defaults to auto).</description>

            <name>width</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The height of this component in pixels (defaults to auto).</description>

            <name>height</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this field loses input focus. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBlur</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires just before the field blurs if the field value has changed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;newValue&lt;/strong&gt; : (Mixed) The new value&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;oldValue&lt;/strong&gt; : (Mixed) The original value&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this field receives input focus. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onFocus</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the field has been marked as invalid. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;msg&lt;/strong&gt; : (String) The validation message&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onInvalid</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed. You can 

 check Ext.EventObject.getKey to determine which key was pressed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (Ext.EventObject) The event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onSpecialKey</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed. You can check 

 Ext.EventObject.getKey to determine which key was pressed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onValid</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the autosize function is triggered. The field may or may not have actually

  changed size according to the default logic, but this event provides a hook for the 

  developer to apply additional logic at runtime to resize the field if needed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : (Ext.form.Field) This text field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;width&lt;/strong&gt; : (Number) The new field width&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAutoSize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>&lt;p&gt;Single radio field. Same as CheckBox, but provided as a convenience for automatically 

 setting the input type. Radio grouping is handled automatically by the browser if you 

 give each radio in a group the same name.&lt;/p&gt;

 

 &lt;code&gt;&lt;pre&gt;

 &amp;lt;p&amp;gt;To group radio boxes horizantally, a column layout should be used. Example:&amp;lt;/p&amp;gt;

	&amp;lt;ext:formPanel url="deneme.jsp" id="myForm" renderTo="form-ct" width="400" border="false"&amp;gt;

		&amp;lt;ext:columnLayout&amp;gt;

			&amp;lt;ext:panel columnWidth=".33" border="false"&amp;gt;

				&amp;lt;ext:radio name="rb1" value="1" boxLabel="Radio 1"/&amp;gt;

			&amp;lt;/ext:panel&amp;gt;

			&amp;lt;ext:panel columnWidth=".34" border="false"&amp;gt;

				&amp;lt;ext:radio name="rb1" value="2" boxLabel="Radio 2"/&amp;gt;

			&amp;lt;/ext:panel&amp;gt;

			&amp;lt;ext:panel columnWidth=".33" border="false"&amp;gt;

				&amp;lt;ext:radio name="rb1" value="3" boxLabel="Radio 3"/&amp;gt;

			&amp;lt;/ext:panel&amp;gt;

		&amp;lt;/ext:columnLayout&amp;gt;

		&amp;lt;ext:button type="submit" text="Go!" /&amp;gt;

	&amp;lt;/ext:formPanel&amp;gt;

 &lt;/pre&gt;&lt;/code&gt;</description>

		<name>radio</name>

		<tag-class>isola.tags.ext.form.RadioTag</tag-class>

		<body-content>empty</body-content>

		<attribute>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class used to provide field clearing (defaults to 'x-form-clear-left')</description>

            <name>clearCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to disable the field (defaults to false).</description>

            <name>disabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default CSS class for the field (defaults to "x-form-field")</description>

            <name>fieldClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The label text to display next to this field (defaults to '')</description>

            <name>fieldLabel</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to use when the field receives focus (defaults to "x-form-focus")</description>

            <name>focusClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to completely hide the label element (defaults to false)</description>

            <name>hideLabel</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The type attribute for input fields -- e.g. radio, text, password (defaults to "text").</description>

            <name>inputType</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to use when marking a field invalid (defaults to "x-form-invalid")</description>

            <name>invalidClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The error text to use when marking a field invalid and no message is provided 

 (defaults to "The value in this field is invalid")</description>

            <name>invalidText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;An additional CSS class to apply to the wrapper element of this field (defaults 

 to the container's itemCls value if set, or ''). Since it is applied to the 

 wrapper, it allows you to write standard CSS rules that can apply to the field, 

 the label (if specified) or any other element within the markup for the field. 

 Example use:&lt;/p&gt;

 

 &lt;pre&gt;&lt;code&gt;

 // Apply a style to the field's label:

 &amp;lt;style&amp;gt;

     .required .x-form-item-label {font-weight:bold;color:red;}

 &amp;lt;/style&amp;gt;

 

 new Ext.FormPanel({

 	height: 100,

 	renderTo: document.body,

 	items: [{

 		xtype: 'textfield',

 		fieldLabel: 'Name',

 		itemCls: 'required' //this label will be styled

 	},{

 		xtype: 'textfield',

 		fieldLabel: 'Favorite Color'

 	}]

 });

 &lt;/code&gt;&lt;/pre&gt;</description>

            <name>itemCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The standard separator to display after the text of each form label (defaults to the 

 value of Ext.layout.FormLayout.labelSeparator, which is a colon ':' by default). 

 To display no separator for this field's label specify empty string ''.</description>

            <name>labelSeparator</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS style specification to apply directly to this field's label (defaults to the 

 container's labelStyle value if set, or ''). For example, labelStyle: 'font-weight:bold;'.</description>

            <name>labelStyle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The effect used when displaying a validation message under the field (defaults to 'normal').</description>

            <name>msgFx</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The location where error text should display. Should be one of the following values 

 (defaults to 'qtip'):

 &lt;pre&gt;

 Value         Description

 -----------   ----------------------------------------------------------------------

 qtip          Display a quick tip when the user hovers over the field

 title         Display a default browser title attribute popup

 under         Add a block div beneath the field containing the error text

 side          Add an error icon to the right of the field with a popup on hover

 [element id]  Add the error text directly to the innerHTML of the specified element

 &lt;/pre&gt;</description>

            <name>msgTarget</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The field's HTML name attribute.</description>

            <name>name</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets 

 the element's readOnly DOM attribute.</description>

            <name>readOnly</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The tabIndex for this field. Note this only applies to fields that are rendered, not those 

 which are built via applyTo (defaults to undefined).</description>

            <name>tabIndex</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>validateOnBlur</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The length of time in milliseconds after user input begins until validation is initiated 

 (defaults to 250)</description>

            <name>validationDelay</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The event that should initiate field validation. Set to false to disable automatic 

 validation (defaults to "keyup").</description>

            <name>validationEvent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A value to initialize this field with.</description>

            <name>value</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The text that appears beside the checkbox</description>

            <name>boxLabel</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the the checkbox should render already checked (defaults to false)</description>

            <name>checked</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default CSS class for the field (defaults to "x-form-field")</description>

            <name>fieldClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to use when the field receives focus (defaults to "x-form-focus")</description>

            <name>focusClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The value that should go into the generated input element's value attribute</description>

            <name>inputValue</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width of this component in pixels (defaults to auto).</description>

            <name>width</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The height of this component in pixels (defaults to auto).</description>

            <name>height</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this field loses input focus. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBlur</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires just before the field blurs if the field value has changed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;newValue&lt;/strong&gt; : (Mixed) The new value&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;oldValue&lt;/strong&gt; : (Mixed) The original value&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this field receives input focus. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onFocus</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the field has been marked as invalid. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;msg&lt;/strong&gt; : (String) The validation message&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onInvalid</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed. You can 

 check Ext.EventObject.getKey to determine which key was pressed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (Ext.EventObject) The event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onSpecialKey</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed. You can check 

 Ext.EventObject.getKey to determine which key was pressed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onValid</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the checkbox is checked or unchecked. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:(Ext.form.Checkbox) This checkbox&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;checked&lt;/strong&gt;:(Boolean) The new checked value&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onCheck</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>Multiline text field. Can be used as a direct replacement for traditional textarea 

 fields, plus adds support for auto-sizing.</description>

		<name>textArea</name>

		<tag-class>isola.tags.ext.form.TextAreaTag</tag-class>

		<body-content>empty</body-content>

		<attribute>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class used to provide field clearing (defaults to 'x-form-clear-left')</description>

            <name>clearCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to disable the field (defaults to false).</description>

            <name>disabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default CSS class for the field (defaults to "x-form-field")</description>

            <name>fieldClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The label text to display next to this field (defaults to '')</description>

            <name>fieldLabel</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to use when the field receives focus (defaults to "x-form-focus")</description>

            <name>focusClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to completely hide the label element (defaults to false)</description>

            <name>hideLabel</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The type attribute for input fields -- e.g. radio, text, password (defaults to "text").</description>

            <name>inputType</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to use when marking a field invalid (defaults to "x-form-invalid")</description>

            <name>invalidClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The error text to use when marking a field invalid and no message is provided 

 (defaults to "The value in this field is invalid")</description>

            <name>invalidText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;An additional CSS class to apply to the wrapper element of this field (defaults 

 to the container's itemCls value if set, or ''). Since it is applied to the 

 wrapper, it allows you to write standard CSS rules that can apply to the field, 

 the label (if specified) or any other element within the markup for the field. 

 Example use:&lt;/p&gt;

 

 &lt;pre&gt;&lt;code&gt;

 // Apply a style to the field's label:

 &amp;lt;style&amp;gt;

     .required .x-form-item-label {font-weight:bold;color:red;}

 &amp;lt;/style&amp;gt;

 

 new Ext.FormPanel({

 	height: 100,

 	renderTo: document.body,

 	items: [{

 		xtype: 'textfield',

 		fieldLabel: 'Name',

 		itemCls: 'required' //this label will be styled

 	},{

 		xtype: 'textfield',

 		fieldLabel: 'Favorite Color'

 	}]

 });

 &lt;/code&gt;&lt;/pre&gt;</description>

            <name>itemCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The standard separator to display after the text of each form label (defaults to the 

 value of Ext.layout.FormLayout.labelSeparator, which is a colon ':' by default). 

 To display no separator for this field's label specify empty string ''.</description>

            <name>labelSeparator</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS style specification to apply directly to this field's label (defaults to the 

 container's labelStyle value if set, or ''). For example, labelStyle: 'font-weight:bold;'.</description>

            <name>labelStyle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The effect used when displaying a validation message under the field (defaults to 'normal').</description>

            <name>msgFx</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The location where error text should display. Should be one of the following values 

 (defaults to 'qtip'):

 &lt;pre&gt;

 Value         Description

 -----------   ----------------------------------------------------------------------

 qtip          Display a quick tip when the user hovers over the field

 title         Display a default browser title attribute popup

 under         Add a block div beneath the field containing the error text

 side          Add an error icon to the right of the field with a popup on hover

 [element id]  Add the error text directly to the innerHTML of the specified element

 &lt;/pre&gt;</description>

            <name>msgTarget</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The field's HTML name attribute.</description>

            <name>name</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets 

 the element's readOnly DOM attribute.</description>

            <name>readOnly</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The tabIndex for this field. Note this only applies to fields that are rendered, not those 

 which are built via applyTo (defaults to undefined).</description>

            <name>tabIndex</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>validateOnBlur</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The length of time in milliseconds after user input begins until validation is initiated 

 (defaults to 250)</description>

            <name>validationDelay</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The event that should initiate field validation. Set to false to disable automatic 

 validation (defaults to "keyup").</description>

            <name>validationEvent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A value to initialize this field with.</description>

            <name>value</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>False to validate that the value length &gt; 0 (defaults to true)</description>

            <name>allowBlank</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Error text to display if the allow blank validation fails (defaults to "This field is 

 required")</description>

            <name>blankText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to disable input keystroke filtering (defaults to false)</description>

            <name>disableKeyFilter</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to apply to an empty field to style the emptyText (defaults to 

 'x-form-empty-field'). This class is automatically added and removed as needed depending on 

 the current field value.</description>

            <name>emptyClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default text to display in an empty field (defaults to null).</description>

            <name>emptyText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if this field should automatically grow and shrink to its content</description>

            <name>grow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The maximum width to allow when grow = true (defaults to 800)</description>

            <name>growMax</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The minimum width to allow when grow = true (defaults to 30)</description>

            <name>growMin</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Maximum input field length allowed (defaults to Number.MAX_VALUE)</description>

            <name>maxLength</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Error text to display if the maximum length validation fails (defaults to 

 "The maximum length for this field is {maxLength}")</description>

            <name>maxLengthText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Minimum input field length required (defaults to 0)</description>

            <name>minLength</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Error text to display if the minimum length validation fails (defaults to 

 "The minimum length for this field is {minLength}")</description>

            <name>minLengthText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The error text to display if regex is used and the test fails during validation (defaults to "")</description>

            <name>regexText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to automatically select any existing field text when the field receives input 

 focus (defaults to false)</description>

            <name>selectOnFocus</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A validation type name as defined in Ext.form.VTypes (defaults to null)</description>

            <name>vtype</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom error message to display in place of the default message provided for the 

 vtype currently set for this field (defaults to ''). Only applies if vtype is set, 

 else ignored.</description>

            <name>vtypeText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A JavaScript RegExp object to be tested against the field value during validation 

 (defaults to null). If available, this regex will be evaluated only after the basic 

 validators all return true, and will be passed the current field value. If the test 

 fails, the field will be marked invalid using regexText.</description>

            <name>regex</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom validation function to be called during field validation (defaults to null). 

 If available, this function will be called only after the basic validators all return 

 true, and will be passed the current field value and expected to return boolean true 

 if the value is valid or a string error message if invalid.</description>

            <name>validator</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width of this component in pixels (defaults to auto).</description>

            <name>width</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The height of this component in pixels (defaults to auto).</description>

            <name>height</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The maximum width to allow when grow = true (defaults to 800)</description>

            <name>growMax</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The minimum width to allow when grow = true (defaults to 30)</description>

            <name>growMin</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to prevent scrollbars from appearing regardless of how much text is in the 

 field (equivalent to setting overflow: hidden, defaults to false)</description>

            <name>preventScrollbars</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this field loses input focus. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBlur</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires just before the field blurs if the field value has changed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;newValue&lt;/strong&gt; : (Mixed) The new value&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;oldValue&lt;/strong&gt; : (Mixed) The original value&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this field receives input focus. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onFocus</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the field has been marked as invalid. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;msg&lt;/strong&gt; : (String) The validation message&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onInvalid</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed. You can 

 check Ext.EventObject.getKey to determine which key was pressed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (Ext.EventObject) The event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onSpecialKey</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed. You can check 

 Ext.EventObject.getKey to determine which key was pressed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onValid</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the autosize function is triggered. The field may or may not have actually

  changed size according to the default logic, but this event provides a hook for the 

  developer to apply additional logic at runtime to resize the field if needed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : (Ext.form.Field) This text field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;width&lt;/strong&gt; : (Number) The new field width&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAutoSize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>onKeyDown</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>onKeyPress</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>onKeyUp</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>Provides a time input field with a time dropdown and automatic time validation.</description>

		<name>timeField</name>

		<tag-class>isola.tags.ext.form.TimeFieldTag</tag-class>

		<body-content>empty</body-content>

		<attribute>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class used to provide field clearing (defaults to 'x-form-clear-left')</description>

            <name>clearCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to disable the field (defaults to false).</description>

            <name>disabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default CSS class for the field (defaults to "x-form-field")</description>

            <name>fieldClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The label text to display next to this field (defaults to '')</description>

            <name>fieldLabel</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to use when the field receives focus (defaults to "x-form-focus")</description>

            <name>focusClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to completely hide the label element (defaults to false)</description>

            <name>hideLabel</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The type attribute for input fields -- e.g. radio, text, password (defaults to "text").</description>

            <name>inputType</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to use when marking a field invalid (defaults to "x-form-invalid")</description>

            <name>invalidClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The error text to use when marking a field invalid and no message is provided 

 (defaults to "The value in this field is invalid")</description>

            <name>invalidText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;An additional CSS class to apply to the wrapper element of this field (defaults 

 to the container's itemCls value if set, or ''). Since it is applied to the 

 wrapper, it allows you to write standard CSS rules that can apply to the field, 

 the label (if specified) or any other element within the markup for the field. 

 Example use:&lt;/p&gt;

 

 &lt;pre&gt;&lt;code&gt;

 // Apply a style to the field's label:

 &amp;lt;style&amp;gt;

     .required .x-form-item-label {font-weight:bold;color:red;}

 &amp;lt;/style&amp;gt;

 

 new Ext.FormPanel({

 	height: 100,

 	renderTo: document.body,

 	items: [{

 		xtype: 'textfield',

 		fieldLabel: 'Name',

 		itemCls: 'required' //this label will be styled

 	},{

 		xtype: 'textfield',

 		fieldLabel: 'Favorite Color'

 	}]

 });

 &lt;/code&gt;&lt;/pre&gt;</description>

            <name>itemCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The standard separator to display after the text of each form label (defaults to the 

 value of Ext.layout.FormLayout.labelSeparator, which is a colon ':' by default). 

 To display no separator for this field's label specify empty string ''.</description>

            <name>labelSeparator</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS style specification to apply directly to this field's label (defaults to the 

 container's labelStyle value if set, or ''). For example, labelStyle: 'font-weight:bold;'.</description>

            <name>labelStyle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The effect used when displaying a validation message under the field (defaults to 'normal').</description>

            <name>msgFx</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The location where error text should display. Should be one of the following values 

 (defaults to 'qtip'):

 &lt;pre&gt;

 Value         Description

 -----------   ----------------------------------------------------------------------

 qtip          Display a quick tip when the user hovers over the field

 title         Display a default browser title attribute popup

 under         Add a block div beneath the field containing the error text

 side          Add an error icon to the right of the field with a popup on hover

 [element id]  Add the error text directly to the innerHTML of the specified element

 &lt;/pre&gt;</description>

            <name>msgTarget</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The field's HTML name attribute.</description>

            <name>name</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets 

 the element's readOnly DOM attribute.</description>

            <name>readOnly</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The tabIndex for this field. Note this only applies to fields that are rendered, not those 

 which are built via applyTo (defaults to undefined).</description>

            <name>tabIndex</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>validateOnBlur</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The length of time in milliseconds after user input begins until validation is initiated 

 (defaults to 250)</description>

            <name>validationDelay</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The event that should initiate field validation. Set to false to disable automatic 

 validation (defaults to "keyup").</description>

            <name>validationEvent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A value to initialize this field with.</description>

            <name>value</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>hideTrigger</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>triggerClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The text query to send to the server to return all records for the list with no 

 filtering (defaults to '')</description>

            <name>allQuery</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The underlying data field name to bind to this ComboBox (defaults to undefined if 

 mode = 'remote' or 'text' if transforming a select)</description>

            <name>displayField</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>False to prevent the user from typing text directly into the field, just like a 

 traditional select (defaults to true)</description>

            <name>editable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to restrict the selected value to one of the values in the list, false to 

 allow the user to set arbitrary text into the field (defaults to false)</description>

            <name>forceSelection</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The height in pixels of the dropdown list resize handle if resizable = true 

 (defaults to 8)</description>

            <name>handleHeight</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If hiddenName is specified, hiddenId can also be provided to give the hidden 

 field a unique id (defaults to the hiddenName). The hiddenId and combo id 

 should be different, since no two DOM nodes should share the same id.</description>

            <name>hiddenId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If specified, a hidden form field with this name is dynamically generated to 

 store the field's data value (defaults to the underlying DOM element's name). 

 Required for the combo's value to automatically post during a form submission.</description>

            <name>hiddenName</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to not initialize the list for this combo until the field is focused. 

 (defaults to true)</description>

            <name>lazyInit</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to prevent the ComboBox from rendering until requested (should always be 

 used when rendering into an Ext.Editor, defaults to false).</description>

            <name>lazyRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A valid anchor position value. See Ext.Element.alignTo for details on supported 

 anchor positions (defaults to 'tl-bl')</description>

            <name>listAlign</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class to apply to the dropdown list element (defaults to '')</description>

            <name>listClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width in pixels of the dropdown list (defaults to the width of the ComboBox 

 field)</description>

            <name>listWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The text to display in the dropdown list while data is loading. Only applies 

 when mode = 'remote' (defaults to 'Loading...')</description>

            <name>loadingText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The maximum height in pixels of the dropdown list before scrollbars are shown 

 (defaults to 300)</description>

            <name>maxHeight</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The minimum number of characters the user must type before autocomplete and 

 typeahead activate (defaults to 4 if remote or 0 if local, does not apply if editable = false)</description>

            <name>minChars</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The minimum width of the dropdown list in pixels (defaults to 70, will be ignored if 

 listWidth has a higher value)</description>

            <name>minListWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Set to 'local' if the ComboBox loads local data (defaults to 'remote' which loads 

 from the server)</description>

            <name>mode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If greater than 0, a paging toolbar is displayed in the footer of the dropdown list 

 and the filter queries will execute with page start and limit parameters. Only 

 applies when mode = 'remote' (defaults to 0)</description>

            <name>pageSize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The length of time in milliseconds to delay between the start of typing and sending 

 the query to filter the dropdown list (defaults to 500 if mode = 'remote' or 10 

 if mode = 'local')</description>

            <name>queryDelay</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Name of the query as it will be passed on the querystring (defaults to 'query')</description>

            <name>queryParam</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to add a resize handle to the bottom of the dropdown list (defaults to false)</description>

            <name>resizable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to automatically select any existing field text when the field receives input 

 focus (defaults to false)</description>

            <name>selectOnFocus</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class to apply to the selected item in the dropdown list (defaults to 

 'x-combo-selected')</description>

            <name>selectedClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True or "sides" for the default effect, "frame" for 4-way shadow, and "drop" 

 for bottom-right</description>

            <name>shadow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If supplied, a header element is created containing this text and 

 added into the top of the dropdown list (defaults to undefined, with no header 

 element)</description>

            <name>title</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;The template string, or Ext.XTemplate instance to use to display each item in the 

 dropdown list. Use this to create custom UI layouts for items in the list.&lt;/p&gt;

 

 &lt;p&gt;If you wish to preserve the default visual look of list items, add the CSS class 

 name.&lt;/p&gt;

 

 &lt;code&gt;&lt;pre&gt;

 	x-combo-list-item

 &lt;/pre&gt;&lt;/code&gt;

 

 &lt;p&gt;to the template's container element. The template must contain one or more substitution 

 parameters using field names from the Combo's Store. An example of a custom template 

 would be adding an &lt;/p&gt;

 

 &lt;code&gt;&lt;pre&gt;ext:qtip&lt;/pre&gt;&lt;/code&gt;

 attribute which might display other fields from the Store. The dropdown list is 

 displayed in a DataView. See Ext.DataView for details.</description>

            <name>tpl</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id, DOM node or element of an existing HTML SELECT to convert to a ComboBox. 

 Note that if you specify this and the combo is going to be in a Ext.form.BasicForm or 

 Ext.form.FormPanel, you must also set lazyRender = true.</description>

            <name>transform</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The action to execute when the trigger field is activated. Use 'all' to run the query 

 specified by the allQuery config option (defaults to 'query')</description>

            <name>triggerAction</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to populate and autoselect the remainder of the text being typed after a 

 configurable delay (typeAheadDelay) if it matches a known value (defaults to false)</description>

            <name>typeAhead</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The length of time in milliseconds to wait until the typeahead text is displayed 

 if typeAhead = true (defaults to 250)</description>

            <name>typeAheadDelay</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The underlying data value name to bind to this ComboBox (defaults to undefined 

 if mode = 'remote' or 'value' if transforming a select) Note: use of a valueField 

 requires the user to make a selection in order for a value to be mapped.</description>

            <name>valueField</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>When using a name/value combo, if the value passed to setValue is not found in the 

 store, valueNotFoundText will be displayed as the field text if defined (defaults to undefined)</description>

            <name>valueNotFoundText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width of this component in pixels (defaults to auto).</description>

            <name>width</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The height of this component in pixels (defaults to auto).</description>

            <name>height</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Multiple date formats separated by "|" to try when parsing a user input value 

 and it doesn't match the defined format (defaults to 'm/d/Y|m-d-y|m-d-Y|m/d|m-d|d').</description>

            <name>altFormats</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default date format string which can be overriden for localization support. 

 The format must be valid according to Date.parseDate (defaults to 'm/d/y').</description>

            <name>format</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The number of minutes between each time value in the list (defaults to 15).</description>

            <name>increment</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The error text to use when marking a field invalid and no message is provided 

 (defaults to "The value in this field is invalid")</description>

            <name>invalidText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The error text to display when the time is after maxValue (defaults to 'The time 

 in this field must be equal to or before {0}').</description>

            <name>maxText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The maximum allowed time. Must be in format d/m/Y</description>

            <name>maxValue</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The error text to display when the date in the cell is before minValue (defaults to 

 'The time in this field must be equal to or after {0}').</description>

            <name>minText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The minimum allowed time. Can be either a Javascript date object or a string date 

 in a valid format (defaults to null).</description>

            <name>minValue</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this field loses input focus. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBlur</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires just before the field blurs if the field value has changed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;newValue&lt;/strong&gt; : (Mixed) The new value&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;oldValue&lt;/strong&gt; : (Mixed) The original value&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this field receives input focus. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onFocus</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the field has been marked as invalid. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;msg&lt;/strong&gt; : (String) The validation message&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onInvalid</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed. You can 

 check Ext.EventObject.getKey to determine which key was pressed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (Ext.EventObject) The event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onSpecialKey</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed. You can check 

 Ext.EventObject.getKey to determine which key was pressed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onValid</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before all queries are processed. Return false to cancel the query

  or set the queryEvent's cancel property to true.&lt;/p&gt;

  Listeners will be called with the following arguments:

  &lt;ul&gt;

  &lt;li&gt;&lt;strong&gt;queryEvent &lt;/strong&gt;:(Object) An object that has these properties:

  	&lt;ul&gt;

  	&lt;li&gt;&lt;strong&gt;combo &lt;/strong&gt;:(Ext.form.ComboBox) This combo box &lt;/li&gt;

  	&lt;li&gt;&lt;strong&gt;query &lt;/strong&gt;:(String) The query&lt;/li&gt;

  	&lt;li&gt;&lt;strong&gt;forceAll &lt;/strong&gt;:(Boolean) True to force "all" query &lt;/li&gt;

  	&lt;li&gt;&lt;strong&gt;cancel &lt;/strong&gt;:(Boolean) Set to true to cancel the query&lt;/li&gt;

  	&lt;/ul&gt;

  &lt;/li&gt;

  &lt;/ul&gt;</description>

            <name>onBeforeQuery</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before a list item is selected. Return false to cancel the selection. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;combo &lt;/strong&gt;:(Ext.form.ComboBox) This combo box &lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;record &lt;/strong&gt;:(Ext.data.Record) The data record returned from the underlying store&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index &lt;/strong&gt;:(Number) The index of the selected item in the dropdown list &lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeSelect</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the dropdown list is collapsed &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;combo &lt;/strong&gt;:(Ext.form.ComboBox) This combo box &lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the dropdown list is expanded &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;combo &lt;/strong&gt;:(Ext.form.ComboBox) This combo box &lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a list item is selected &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;combo &lt;/strong&gt;:(Ext.form.ComboBox) This combo box &lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;record &lt;/strong&gt;:(Ext.data.Record) The data record returned from the underlying store&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index &lt;/strong&gt;:(Number) The index of the selected item in the dropdown list &lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onSelect</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>Inherits the anchoring of Ext.layout.AnchorLayout and adds the ability for x/y 

 positioning using the standard x and y component config options.

 Usage:

 &lt;pre&gt;&lt;code&gt;

	&amp;lt;ext:body runOnLoad="true"&amp;gt;

		&amp;lt;ext:absoluteLayout renderTo="hebelek" width="400" height="400" bodyStyle="background-color:black;"&amp;gt;

			&amp;lt;ext:panel bodyStyle="background-color:red;color:white;" x="100" y="50" width="100" height="100"&amp;gt;

				This is a sample content

			&amp;lt;/ext:panel&amp;gt;

		&amp;lt;/ext:absoluteLayout&amp;gt;

	&amp;lt;/ext:body&amp;gt;

	&amp;lt;div id="hebelek"&amp;gt;&amp;lt;/div&amp;gt;

 &lt;/code&gt;&lt;/pre&gt;</description>

		<name>absoluteLayout</name>

		<tag-class>isola.tags.ext.layout.AbsoluteLayoutTag</tag-class>

		<body-content>JSP</body-content>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Whether the component can move the Dom node when rendering (defaults to true).</description>

            <name>allowDomMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element corresponding 

 to a DIV that is already present in the document that specifies some 

 structural markup for this component. When applyTo is used, constituent 

 parts of the component can also be specified by id or CSS class name 

 within the main element, and the component being created may attempt to 

 create its subcomponents from that markup if applicable. Using this 

 config, a call to render() is not required. If applyTo is specified, 

 any value passed for renderTo will be ignored and the target element's 

 parent node will automatically be used as the component's container.</description>

            <name>applyTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the component should check for hidden classes (e.g. 'x-hidden' 

 or 'x-hide-display') and remove them on render (defaults to false).</description>

            <name>autoShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 Element (defaults to ''). This can be useful for adding customized styles 

 to the component or any of its children using standard CSS rules.</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 container (defaults to ''). This can be useful for adding customized 

 styles to the container or any of its children using standard CSS rules.</description>

            <name>ctCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class added to the component when it is disabled (defaults to 

 "x-item-disabled").</description>

            <name>disabledClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide and show the component's container when hide/show is 

 called on the component, false to hide and show the component itself 

 (defaults to false). For example, this can be used as a shortcut 

 for a hide button on a window by setting hide:true on the button when 

 adding it to its parent container.</description>

            <name>hideParent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id of this component (defaults to an auto-assigned id).</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element that will be the 

 container to render this component into. Using this config, a call to 

 render() is not required.</description>

            <name>renderTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id for this component to use for state management purposes 

 (defaults to the component id). See stateful for an explanation of saving 

 and restoring Component state.</description>

            <name>stateId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;A flag which causes the Component to attempt to restore the state of 

 internal properties from a saved state on startup.&lt;/p&gt;

 

 &lt;p&gt;For state saving to work, the state manager's provider must have been 

 set to an implementation of Ext.state.Provider which overrides the set 

 and get methods to save and recall name/value pairs. A built-in 

 implementation, Ext.state.CookieProvider is available.&lt;/p&gt;

 

 &lt;p&gt;To set the state provider for the current page:&lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;Components attempt to save state when one of the events listed in the stateEvents 

 configuration fires.&lt;/p&gt;

 

 &lt;p&gt;You can perform extra processing on state save and restore by attaching 

 handlers to the beforestaterestore, staterestore, beforestatesave and statesave 

 events.&lt;/p&gt;</description>

            <name>stateful</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom style specification to be applied to this component's Element. Should 

 be a valid argument to Ext.Element.applyStyles.</description>

            <name>style</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Where to place this component. Valid values are south, north, west, east, center</description>

            <name>region</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>How this component should hidden. Supported values are "visibility" 

 (css visibility), "offsets" (negative offset position) and "display" 

 (css display) - defaults to "display".</description>

            <name>hideMode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use height:'auto', false to use fixed height (defaults to false).</description>

            <name>autoHeight</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use width:'auto', false to use fixed width (defaults to false).</description>

            <name>autoWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The height of this component in pixels (defaults to auto).</description>

            <name>height</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width of this component in pixels (defaults to auto).</description>

            <name>width</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>HTML Element this object is parsed on.</description>

            <name>el</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A string component id or the numeric index of the component that should be 

 initially activated within the container's layout on render. For example, 

 activeItem: 'item-1' or activeItem: 0 (index 0 = the first item in the 

 container's collection). activeItem only applies to layout styles that can 

 display items one at a time (like Ext.layout.Accordion, 

 Ext.layout.CardLayout and Ext.layout.FitLayout). 

 Related to Ext.layout.ContainerLayout.activeItem.</description>

            <name>activeItem</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If true the container will automatically destroy any contained component 

 that is removed from it, else destruction must be handled manually 

 (defaults to true).</description>

            <name>autoDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>When set to true (100 milliseconds) or a number of milliseconds, the 

 layout assigned for this container will buffer the frequency it calculates 

 and does a re-layout of components. This is useful for heavy containers 

 or containers with a large amount of sub components that frequent calls 

 to layout are expensive.</description>

            <name>bufferResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default type of container represented by this object as registered 

  in Ext.ComponentMgr (defaults to 'panel').</description>

            <name>defaultType</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the borders of each contained component, false to defer to the 

 component's existing border settings (defaults to false).</description>

            <name>hideBorders</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;The layout type to be used in this container. If not specified, a default 

 Ext.layout.ContainerLayout will be created and used. 

 

 &lt;p&gt;Valid values are:&lt;/p&gt;

 &lt;ul&gt;

 &lt;li&gt;accordion, &lt;/li&gt;

 &lt;li&gt;anchor, &lt;/li&gt; 

 &lt;li&gt;border,&lt;/li&gt; 

 &lt;li&gt;card,&lt;/li&gt; 

 &lt;li&gt;column,&lt;/li&gt; 

 &lt;li&gt;fit,&lt;/li&gt; 

 &lt;li&gt;form&lt;/li&gt;

 &lt;li&gt;table.&lt;/li&gt; 

 &lt;/ul&gt;

 &lt;p&gt;Specific config values for the chosen layout type can be specified using 

 layoutConfig.&lt;/p&gt;</description>

            <name>layout</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to automatically monitor window resize events to handle anything that is 

 sensitive to the current size of the viewport. This value is typically managed 

 by the chosen layout and should not need to be set manually.</description>

            <name>monitorResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to animate the transition when the panel is collapsed, false to skip 

 the animation (defaults to true if the Ext.Fx class is available, otherwise 

 false).</description>

            <name>animCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use overflow:'auto' on the panel's body element and show scroll bars 

 automatically when necessary, false to clip any overflowing content 

 (defaults to false).</description>

            <name>autoScroll</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The base CSS class to apply to this panel's element (defaults to 'x-panel').</description>

            <name>baseCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display an interior border on the body element of the panel, false 

 to hide it (defaults to true). This only applies when border == true. If 

 border == true and bodyBorder == false, the border will display as a 1px 

 wide inset border, giving the entire body element an inset appearance.</description>

            <name>bodyBorder</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Custom CSS styles to be applied to the body element in the format expected 

 by Ext.Element.applyStyles (defaults to null).</description>

            <name>bodyStyle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display the borders of the panel's body element, false to hide them 

 (defaults to true). By default, the border is a 2px wide inset border, but 

 this can be further altered by setting bodyBorder to false.</description>

            <name>border</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>When set to true (100 milliseconds) or a number of milliseconds, the 

 layout assigned for this container will buffer the frequency it calculates 

 and does a re-layout of components. This is useful for heavy containers 

 or containers with a large amount of sub components that frequent calls 

 to layout are expensive.</description>

            <name>bufferResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The alignment of any buttons added to this panel. Valid values are 'right,' 

 'left' and 'center' (defaults to 'right').</description>

            <name>buttonAlign</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to make sure the collapse/expand toggle button always renders first (to 

 the left of) any other tools in the panel's title bar, false to render it 

 last (defaults to true).</description>

            <name>collapseFirst</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to render the panel collapsed, false to render it expanded (defaults to false).</description>

            <name>collapsed</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS class to add to the panel's element after it has been collapsed (defaults 

 to 'x-panel-collapsed').</description>

            <name>collapsedCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to make the panel collapsible and have the expand/collapse toggle button 

 automatically rendered into the header tool button area, false to keep the 

 panel statically sized with no button (defaults to false).</description>

            <name>collapsible</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of an existing HTML node to use as the panel's body content (defaults to '').</description>

            <name>contentEl</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to enable dragging of this Panel (defaults to false). For custom drag/drop 

 implementations, an Ext.Panel.DD config could also be passed in this config 

 instead of true, although Ext.Panel.DD is an internal, undocumented class.</description>

            <name>draggable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A comma-delimited list of panel elements to initialize when the panel is 

 rendered. Normally, this list will be generated automatically based on the items 

 added to the panel at config time, but sometimes it might be useful to make 

 sure a structural element is rendered even if not specified at config time 

 (for example, you may want to add a button or toolbar dynamically after the 

 panel has been rendered). Adding those elements to this list will allocate 

 the required placeholders in the panel when it is rendered. 

 Valid values are

 &lt;ul&gt;

 &lt;li&gt;header&lt;/li&gt;

 &lt;li&gt;tbar (top bar)&lt;/li&gt;

 &lt;li&gt;body&lt;/li&gt;

 &lt;li&gt;bbar (bottom bar)&lt;/li&gt;

 &lt;li&gt;footer&lt;/li&gt;

 &lt;/ul&gt;

 Defaults to 'body'.</description>

            <name>elements</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to float the panel (absolute position it with automatic shimming and shadow), 

 false to display it inline where it is rendered (defaults to false). Note that 

 by default, setting floating to true will cause the panel to display at negative 

 offsets so that it is hidden -- because the panel is absolute positioned, the 

 position must be set explicitly after render (e.g., myPanel.setPosition(100,100);). 

 Also, when floating a panel you should always assign a fixed width, otherwise it 

 will be auto width and will expand to fill to the right edge of the viewport.</description>

            <name>floating</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to create the footer element explicitly, false to skip creating it. By 

 default, when footer is not specified, if one or more buttons have been added 

 to the panel the footer will be created automatically, otherwise it will not.</description>

            <name>footer</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Shows a nice rounded corner with a thick border around the panel.</description>

            <name>frame</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to create the header element explicitly, false to skip creating it. By 

 default, when header is not specified, if a title is set the header will be 

 created automatically, otherwise it will not. If a title is set but header is 

 explicitly set to false, the header will not be rendered.</description>

            <name>header</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display the panel title in the header, false to hide it (defaults to true).</description>

            <name>headerAsText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the expand/collapse toggle button when collapsible = true, false 

 to display it (defaults to false).</description>

            <name>hideCollapseTool</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An HTML fragment, or a DomHelper specification to use as the panel's body 

 content (defaults to '').</description>

            <name>html</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS class that will provide a background image to be used as the panel header 

 icon (defaults to '').</description>

            <name>iconCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to mask the panel when it is disabled, false to not mask it (defaults 

 to true). Either way, the panel will always tell its contained elements to 

 disable themselves when it is disabled, but masking the panel can provide an 

 additional visual cue that the panel is disabled.</description>

            <name>maskDisabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Minimum width in pixels of all buttons in this panel (defaults to 75)</description>

            <name>minButtonWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True (or a valid Ext.Shadow Ext.Shadow.mode value) to display a shadow behind 

 the panel, false to display no shadow (defaults to 'sides'). Note that this 

 option only applies when floating = true.</description>

            <name>shadow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The number of pixels to offset the shadow if displayed (defaults to 4). Note 

 that this option only applies when floating = true.</description>

            <name>shadowOffset</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>False to disable the iframe shim in browsers which need one (defaults to true). 

 Note that this option only applies when floating = true.</description>

            <name>shim</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Adds a tooltip when mousing over the tab of a Ext.Panel which is an item of a 

 Ext.TabPanel. Ext.QuickTips.init() must be called in order for the tips to render.</description>

            <name>tabTip</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The title text to display in the panel header (defaults to ''). When a title 

 is specified the header element will automatically be created and displayed 

 unless header is explicitly set to false. If you don't want to specify a title 

 at config time, but you may want one later, you must either specify a non-empty 

 title (a blank space ' ' will do) or header:true so that the container element 

 will get created.</description>

            <name>title</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to allow expanding and collapsing the panel (when collapsible = true) 

 by clicking anywhere in the header bar, false to allow it only by clicking to 

 tool button (defaults to false).</description>

            <name>titleCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If border layout is used then you can set this option to true to place a splitbar 

 between the panels.</description>

            <name>split</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>xtype</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If anchor layout is used you can set an anchor value here.</description>

            <name>anchor</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If absolute layout is used you can set an absolute X position in pixels to place the component in

 the layout.</description>

            <name>x</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If absolute layout is used you can set an absolute Y position in pixels to place the component in

 the layout.</description>

            <name>y</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If column layout is used you can give a float column width from 0 to 1. Valid example: .5</description>

            <name>columnWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If table layout is used you can set rowspan as in an ordinary table.</description>

            <name>rowSpan</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If table layout is used you can set colspan as in an ordinary table.</description>

            <name>colSpan</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is destroyed. Return false to stop the destroy.&lt;p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is hidden. Return false to stop the hide.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is rendered. Return false to stop the render. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is shown. Return false to stop the show. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is restored. Return false to stop the restore.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is saved to the 

 configured state provider. Return false to stop the save. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is destroyed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is disabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is enabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEnable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is hidden. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is rendered.  &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is shown.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is restored. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is saved to the configured state provider. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is moved. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;x&lt;/strong&gt;: (Number)The new x position&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;y&lt;/strong&gt;: (Number)The new y position&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is resized.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjWidth&lt;/strong&gt;:(Number) The box-adjusted width that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjHeight&lt;/strong&gt;:(Number) The box-adjusted height that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawWidth&lt;/strong&gt;:(Number) The width that was originally specified&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawHeight&lt;/strong&gt;:(Number) The height that was originally specified&lt;/li&gt; 		

 &lt;/ul&gt;</description>

            <name>onResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after any Ext.Component is added or inserted into the container.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;:(Ext.Component) The component that was added&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the component was added to the container's items collection&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAdd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the components in this container are arranged by the associated layout manager. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;layout&lt;/strong&gt;:(ContainerLayout) The ContainerLayout implementation for this container&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAfterLayout</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before any Ext.Component is added or inserted into the container. A handler can return false to cancel the add.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;:(Ext.Component) The component being added&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the component will be added to the container's items collection&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeAdd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before any Ext.Component is removed from the container. A handler can return false to cancel the remove. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: (Ext.Component) The component being removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after any Ext.Component is removed from the container&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: (Ext.Component) The component that was removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been visually activated. Note that Panels do not directly support 

 being activated, but some Panel subclasses do (like Ext.Window). Panels which are child Components 

 of a TabPanel fire the activate and deactivate events under the control of the TabPanel. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been activated.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onActivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is closed. Note that Panels do not directly support being closed, but some

  Panel subclasses do (like Ext.Window). This event only applies to such subclasses. A handler can 

  return false to cancel the close. &lt;/p&gt;

  Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel being closed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeClose</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is collapsed. A handler can return false to cancel the collapse. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel being collapsed.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;animate&lt;/strong&gt;:(Boolean) True if the collapse is animated, else false.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is expanded. A handler can return false to cancel the expand. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel being expanded.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;animate&lt;/strong&gt;:(Boolean) True if the expand is animated, else false.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been resized. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel which has been resized.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;width&lt;/strong&gt;:(Number) The Panel's new width.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;height &lt;/strong&gt;:(Number) The Panel's new height.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBodyResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel is closed. Note that Panels do not directly support being closed, but 

 some Panel subclasses do (like Ext.Window). &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been closed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onClose</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been collapsed. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel that has been collapsed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been visually deactivated. Note that Panels do not directly support 

 being deactivated, but some Panel subclasses do (like Ext.Window). Panels which are child Components

 of a TabPanel fire the activate and deactivate events under the control of the TabPanel. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been deactivated.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDeactivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been expanded. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been expanded.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel title has been set or changed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel which has had its title changed.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;The&lt;/strong&gt;:(String) new title.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onTitleChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>&lt;p&gt;This is a layout that enables anchoring of contained elements relative to the container's 

 dimensions. If the container is resized, all anchored items are automatically rerendered 

 according to their anchor rules. This class is intended to be extended or created via the 

 layout:'anchor' Ext.Container.layout config, and should generally not need to be created 

 directly via the new keyword.&lt;/p&gt;

 

 &lt;p&gt;AnchorLayout does not have any direct config options (other than inherited ones). However, 

 the container using the AnchorLayout can supply an anchoring-specific config property of 

 anchorSize. By default, AnchorLayout will calculate anchor measurements based on the size 

 of the container itself. However, if anchorSize is specifed, the layout will use it as a 

 virtual container for the purposes of calculating anchor measurements based on it instead, 

 allowing the container to be sized independently of the anchoring logic if necessary.&lt;/p&gt;

 

 &lt;p&gt;The items added to an AnchorLayout can also supply an anchoring-specific config property 

 of anchor which is a string containing two values: the horizontal anchor value and the 

 vertical anchor value (for example, '100% 50%'). This value is what tells the layout how the 

 item should be anchored to the container. The following types of anchor values are 

 supported: &lt;/p&gt;

 

 &lt;p&gt;&lt;strong&gt;Percentage&lt;/strong&gt;: Any value between 1 and 100, expressed as a percentage. The first 

 anchor is the percentage width that the item should take up within the container, and the 

 second is the percentage height. Example: '100% 50%' would render an item the complete width 

 of the container and 1/2 its height. If only one anchor value is supplied it is assumed to be 

 the width value and the height will default to auto.&lt;/p&gt;

 &lt;p&gt;&lt;strong&gt;Offsets&lt;/strong&gt;: Any positive or negative integer value. The first anchor is the 

 offset from the right edge of the container, and the second is the offset from the bottom edge. 

 Example: '-50 -100' would render an item the complete width of the container minus 50 pixels 

 and the complete height minus 100 pixels. If only one anchor value is supplied it is assumed 

 to be the right offset value and the bottom offset will default to 0.&lt;/p&gt;

 &lt;p&gt;&lt;strong&gt;Sides&lt;/strong&gt;: Valid values are 'right' (or 'r') and 'bottom' (or 'b'). Either the 

 container must have a fixed size or an anchorSize config value defined at render time in order 

 for these to have any effect.&lt;/p&gt;

 Usage:

 &lt;pre&gt;&lt;code&gt;

	&amp;lt;ext:body runOnLoad="true"&amp;gt;

		&amp;lt;ext:anchorLayout id="anchorLayout" renderTo="hebelek" height="500" width="800" border="true" title="Anchor Layout"&amp;gt;

			&amp;lt;ext:panel id="testAnchorBox" anchor="50% 50%" bodyStyle="background-color:black;color:white;"&amp;gt;

				Panel 1

			&amp;lt;/ext:panel&amp;gt;

			&amp;lt;ext:panel id="testAnchorBox2" anchor="-100 -300" bodyStyle="background-color:red;color:white;"&amp;gt;

				Panel 2

			&amp;lt;/ext:panel&amp;gt;

		&amp;lt;/ext:anchorLayout&amp;gt;

	&amp;lt;/ext:body&amp;gt;

	&amp;lt;div id="hebelek"&amp;gt;&amp;lt;/div&amp;gt;

 &lt;/code&gt;&lt;/pre&gt;</description>

		<name>anchorLayout</name>

		<tag-class>isola.tags.ext.layout.AnchorLayoutTag</tag-class>

		<body-content>JSP</body-content>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Whether the component can move the Dom node when rendering (defaults to true).</description>

            <name>allowDomMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element corresponding 

 to a DIV that is already present in the document that specifies some 

 structural markup for this component. When applyTo is used, constituent 

 parts of the component can also be specified by id or CSS class name 

 within the main element, and the component being created may attempt to 

 create its subcomponents from that markup if applicable. Using this 

 config, a call to render() is not required. If applyTo is specified, 

 any value passed for renderTo will be ignored and the target element's 

 parent node will automatically be used as the component's container.</description>

            <name>applyTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the component should check for hidden classes (e.g. 'x-hidden' 

 or 'x-hide-display') and remove them on render (defaults to false).</description>

            <name>autoShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 Element (defaults to ''). This can be useful for adding customized styles 

 to the component or any of its children using standard CSS rules.</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 container (defaults to ''). This can be useful for adding customized 

 styles to the container or any of its children using standard CSS rules.</description>

            <name>ctCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class added to the component when it is disabled (defaults to 

 "x-item-disabled").</description>

            <name>disabledClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide and show the component's container when hide/show is 

 called on the component, false to hide and show the component itself 

 (defaults to false). For example, this can be used as a shortcut 

 for a hide button on a window by setting hide:true on the button when 

 adding it to its parent container.</description>

            <name>hideParent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id of this component (defaults to an auto-assigned id).</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element that will be the 

 container to render this component into. Using this config, a call to 

 render() is not required.</description>

            <name>renderTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id for this component to use for state management purposes 

 (defaults to the component id). See stateful for an explanation of saving 

 and restoring Component state.</description>

            <name>stateId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;A flag which causes the Component to attempt to restore the state of 

 internal properties from a saved state on startup.&lt;/p&gt;

 

 &lt;p&gt;For state saving to work, the state manager's provider must have been 

 set to an implementation of Ext.state.Provider which overrides the set 

 and get methods to save and recall name/value pairs. A built-in 

 implementation, Ext.state.CookieProvider is available.&lt;/p&gt;

 

 &lt;p&gt;To set the state provider for the current page:&lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;Components attempt to save state when one of the events listed in the stateEvents 

 configuration fires.&lt;/p&gt;

 

 &lt;p&gt;You can perform extra processing on state save and restore by attaching 

 handlers to the beforestaterestore, staterestore, beforestatesave and statesave 

 events.&lt;/p&gt;</description>

            <name>stateful</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom style specification to be applied to this component's Element. Should 

 be a valid argument to Ext.Element.applyStyles.</description>

            <name>style</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Where to place this component. Valid values are south, north, west, east, center</description>

            <name>region</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>How this component should hidden. Supported values are "visibility" 

 (css visibility), "offsets" (negative offset position) and "display" 

 (css display) - defaults to "display".</description>

            <name>hideMode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use height:'auto', false to use fixed height (defaults to false).</description>

            <name>autoHeight</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use width:'auto', false to use fixed width (defaults to false).</description>

            <name>autoWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The height of this component in pixels (defaults to auto).</description>

            <name>height</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width of this component in pixels (defaults to auto).</description>

            <name>width</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>HTML Element this object is parsed on.</description>

            <name>el</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A string component id or the numeric index of the component that should be 

 initially activated within the container's layout on render. For example, 

 activeItem: 'item-1' or activeItem: 0 (index 0 = the first item in the 

 container's collection). activeItem only applies to layout styles that can 

 display items one at a time (like Ext.layout.Accordion, 

 Ext.layout.CardLayout and Ext.layout.FitLayout). 

 Related to Ext.layout.ContainerLayout.activeItem.</description>

            <name>activeItem</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If true the container will automatically destroy any contained component 

 that is removed from it, else destruction must be handled manually 

 (defaults to true).</description>

            <name>autoDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>When set to true (100 milliseconds) or a number of milliseconds, the 

 layout assigned for this container will buffer the frequency it calculates 

 and does a re-layout of components. This is useful for heavy containers 

 or containers with a large amount of sub components that frequent calls 

 to layout are expensive.</description>

            <name>bufferResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default type of container represented by this object as registered 

  in Ext.ComponentMgr (defaults to 'panel').</description>

            <name>defaultType</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the borders of each contained component, false to defer to the 

 component's existing border settings (defaults to false).</description>

            <name>hideBorders</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;The layout type to be used in this container. If not specified, a default 

 Ext.layout.ContainerLayout will be created and used. 

 

 &lt;p&gt;Valid values are:&lt;/p&gt;

 &lt;ul&gt;

 &lt;li&gt;accordion, &lt;/li&gt;

 &lt;li&gt;anchor, &lt;/li&gt; 

 &lt;li&gt;border,&lt;/li&gt; 

 &lt;li&gt;card,&lt;/li&gt; 

 &lt;li&gt;column,&lt;/li&gt; 

 &lt;li&gt;fit,&lt;/li&gt; 

 &lt;li&gt;form&lt;/li&gt;

 &lt;li&gt;table.&lt;/li&gt; 

 &lt;/ul&gt;

 &lt;p&gt;Specific config values for the chosen layout type can be specified using 

 layoutConfig.&lt;/p&gt;</description>

            <name>layout</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to automatically monitor window resize events to handle anything that is 

 sensitive to the current size of the viewport. This value is typically managed 

 by the chosen layout and should not need to be set manually.</description>

            <name>monitorResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to animate the transition when the panel is collapsed, false to skip 

 the animation (defaults to true if the Ext.Fx class is available, otherwise 

 false).</description>

            <name>animCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use overflow:'auto' on the panel's body element and show scroll bars 

 automatically when necessary, false to clip any overflowing content 

 (defaults to false).</description>

            <name>autoScroll</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The base CSS class to apply to this panel's element (defaults to 'x-panel').</description>

            <name>baseCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display an interior border on the body element of the panel, false 

 to hide it (defaults to true). This only applies when border == true. If 

 border == true and bodyBorder == false, the border will display as a 1px 

 wide inset border, giving the entire body element an inset appearance.</description>

            <name>bodyBorder</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Custom CSS styles to be applied to the body element in the format expected 

 by Ext.Element.applyStyles (defaults to null).</description>

            <name>bodyStyle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display the borders of the panel's body element, false to hide them 

 (defaults to true). By default, the border is a 2px wide inset border, but 

 this can be further altered by setting bodyBorder to false.</description>

            <name>border</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>When set to true (100 milliseconds) or a number of milliseconds, the 

 layout assigned for this container will buffer the frequency it calculates 

 and does a re-layout of components. This is useful for heavy containers 

 or containers with a large amount of sub components that frequent calls 

 to layout are expensive.</description>

            <name>bufferResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The alignment of any buttons added to this panel. Valid values are 'right,' 

 'left' and 'center' (defaults to 'right').</description>

            <name>buttonAlign</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to make sure the collapse/expand toggle button always renders first (to 

 the left of) any other tools in the panel's title bar, false to render it 

 last (defaults to true).</description>

            <name>collapseFirst</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to render the panel collapsed, false to render it expanded (defaults to false).</description>

            <name>collapsed</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS class to add to the panel's element after it has been collapsed (defaults 

 to 'x-panel-collapsed').</description>

            <name>collapsedCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to make the panel collapsible and have the expand/collapse toggle button 

 automatically rendered into the header tool button area, false to keep the 

 panel statically sized with no button (defaults to false).</description>

            <name>collapsible</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of an existing HTML node to use as the panel's body content (defaults to '').</description>

            <name>contentEl</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to enable dragging of this Panel (defaults to false). For custom drag/drop 

 implementations, an Ext.Panel.DD config could also be passed in this config 

 instead of true, although Ext.Panel.DD is an internal, undocumented class.</description>

            <name>draggable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A comma-delimited list of panel elements to initialize when the panel is 

 rendered. Normally, this list will be generated automatically based on the items 

 added to the panel at config time, but sometimes it might be useful to make 

 sure a structural element is rendered even if not specified at config time 

 (for example, you may want to add a button or toolbar dynamically after the 

 panel has been rendered). Adding those elements to this list will allocate 

 the required placeholders in the panel when it is rendered. 

 Valid values are

 &lt;ul&gt;

 &lt;li&gt;header&lt;/li&gt;

 &lt;li&gt;tbar (top bar)&lt;/li&gt;

 &lt;li&gt;body&lt;/li&gt;

 &lt;li&gt;bbar (bottom bar)&lt;/li&gt;

 &lt;li&gt;footer&lt;/li&gt;

 &lt;/ul&gt;

 Defaults to 'body'.</description>

            <name>elements</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to float the panel (absolute position it with automatic shimming and shadow), 

 false to display it inline where it is rendered (defaults to false). Note that 

 by default, setting floating to true will cause the panel to display at negative 

 offsets so that it is hidden -- because the panel is absolute positioned, the 

 position must be set explicitly after render (e.g., myPanel.setPosition(100,100);). 

 Also, when floating a panel you should always assign a fixed width, otherwise it 

 will be auto width and will expand to fill to the right edge of the viewport.</description>

            <name>floating</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to create the footer element explicitly, false to skip creating it. By 

 default, when footer is not specified, if one or more buttons have been added 

 to the panel the footer will be created automatically, otherwise it will not.</description>

            <name>footer</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Shows a nice rounded corner with a thick border around the panel.</description>

            <name>frame</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to create the header element explicitly, false to skip creating it. By 

 default, when header is not specified, if a title is set the header will be 

 created automatically, otherwise it will not. If a title is set but header is 

 explicitly set to false, the header will not be rendered.</description>

            <name>header</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display the panel title in the header, false to hide it (defaults to true).</description>

            <name>headerAsText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the expand/collapse toggle button when collapsible = true, false 

 to display it (defaults to false).</description>

            <name>hideCollapseTool</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An HTML fragment, or a DomHelper specification to use as the panel's body 

 content (defaults to '').</description>

            <name>html</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS class that will provide a background image to be used as the panel header 

 icon (defaults to '').</description>

            <name>iconCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to mask the panel when it is disabled, false to not mask it (defaults 

 to true). Either way, the panel will always tell its contained elements to 

 disable themselves when it is disabled, but masking the panel can provide an 

 additional visual cue that the panel is disabled.</description>

            <name>maskDisabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Minimum width in pixels of all buttons in this panel (defaults to 75)</description>

            <name>minButtonWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True (or a valid Ext.Shadow Ext.Shadow.mode value) to display a shadow behind 

 the panel, false to display no shadow (defaults to 'sides'). Note that this 

 option only applies when floating = true.</description>

            <name>shadow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The number of pixels to offset the shadow if displayed (defaults to 4). Note 

 that this option only applies when floating = true.</description>

            <name>shadowOffset</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>False to disable the iframe shim in browsers which need one (defaults to true). 

 Note that this option only applies when floating = true.</description>

            <name>shim</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Adds a tooltip when mousing over the tab of a Ext.Panel which is an item of a 

 Ext.TabPanel. Ext.QuickTips.init() must be called in order for the tips to render.</description>

            <name>tabTip</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The title text to display in the panel header (defaults to ''). When a title 

 is specified the header element will automatically be created and displayed 

 unless header is explicitly set to false. If you don't want to specify a title 

 at config time, but you may want one later, you must either specify a non-empty 

 title (a blank space ' ' will do) or header:true so that the container element 

 will get created.</description>

            <name>title</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to allow expanding and collapsing the panel (when collapsible = true) 

 by clicking anywhere in the header bar, false to allow it only by clicking to 

 tool button (defaults to false).</description>

            <name>titleCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If border layout is used then you can set this option to true to place a splitbar 

 between the panels.</description>

            <name>split</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>xtype</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If anchor layout is used you can set an anchor value here.</description>

            <name>anchor</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If absolute layout is used you can set an absolute X position in pixels to place the component in

 the layout.</description>

            <name>x</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If absolute layout is used you can set an absolute Y position in pixels to place the component in

 the layout.</description>

            <name>y</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If column layout is used you can give a float column width from 0 to 1. Valid example: .5</description>

            <name>columnWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If table layout is used you can set rowspan as in an ordinary table.</description>

            <name>rowSpan</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If table layout is used you can set colspan as in an ordinary table.</description>

            <name>colSpan</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is destroyed. Return false to stop the destroy.&lt;p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is hidden. Return false to stop the hide.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is rendered. Return false to stop the render. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is shown. Return false to stop the show. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is restored. Return false to stop the restore.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is saved to the 

 configured state provider. Return false to stop the save. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is destroyed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is disabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is enabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEnable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is hidden. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is rendered.  &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is shown.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is restored. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is saved to the configured state provider. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is moved. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;x&lt;/strong&gt;: (Number)The new x position&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;y&lt;/strong&gt;: (Number)The new y position&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is resized.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjWidth&lt;/strong&gt;:(Number) The box-adjusted width that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjHeight&lt;/strong&gt;:(Number) The box-adjusted height that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawWidth&lt;/strong&gt;:(Number) The width that was originally specified&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawHeight&lt;/strong&gt;:(Number) The height that was originally specified&lt;/li&gt; 		

 &lt;/ul&gt;</description>

            <name>onResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after any Ext.Component is added or inserted into the container.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;:(Ext.Component) The component that was added&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the component was added to the container's items collection&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAdd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the components in this container are arranged by the associated layout manager. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;layout&lt;/strong&gt;:(ContainerLayout) The ContainerLayout implementation for this container&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAfterLayout</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before any Ext.Component is added or inserted into the container. A handler can return false to cancel the add.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;:(Ext.Component) The component being added&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the component will be added to the container's items collection&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeAdd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before any Ext.Component is removed from the container. A handler can return false to cancel the remove. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: (Ext.Component) The component being removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after any Ext.Component is removed from the container&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: (Ext.Component) The component that was removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been visually activated. Note that Panels do not directly support 

 being activated, but some Panel subclasses do (like Ext.Window). Panels which are child Components 

 of a TabPanel fire the activate and deactivate events under the control of the TabPanel. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been activated.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onActivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is closed. Note that Panels do not directly support being closed, but some

  Panel subclasses do (like Ext.Window). This event only applies to such subclasses. A handler can 

  return false to cancel the close. &lt;/p&gt;

  Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel being closed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeClose</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is collapsed. A handler can return false to cancel the collapse. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel being collapsed.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;animate&lt;/strong&gt;:(Boolean) True if the collapse is animated, else false.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is expanded. A handler can return false to cancel the expand. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel being expanded.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;animate&lt;/strong&gt;:(Boolean) True if the expand is animated, else false.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been resized. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel which has been resized.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;width&lt;/strong&gt;:(Number) The Panel's new width.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;height &lt;/strong&gt;:(Number) The Panel's new height.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBodyResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel is closed. Note that Panels do not directly support being closed, but 

 some Panel subclasses do (like Ext.Window). &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been closed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onClose</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been collapsed. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel that has been collapsed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been visually deactivated. Note that Panels do not directly support 

 being deactivated, but some Panel subclasses do (like Ext.Window). Panels which are child Components

 of a TabPanel fire the activate and deactivate events under the control of the TabPanel. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been deactivated.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDeactivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been expanded. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been expanded.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel title has been set or changed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel which has had its title changed.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;The&lt;/strong&gt;:(String) new title.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onTitleChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>&lt;p&gt;This is a multi-pane, application-oriented UI layout style that supports multiple nested 

 panels, automatic split bars between regions and built-in expanding and collapsing of 

 regions. This class is intended to be extended or created via the layout:'border' 

 Ext.Container.layout config, and should generally not need to be created directly via the 

 new keyword.&lt;/p&gt;

 

 &lt;p&gt;BorderLayout does not have any direct config options (other than inherited ones). All configs 

 available for customizing the BorderLayout are at the Ext.layout.BorderLayout.Region and 

 Ext.layout.BorderLayout.SplitRegion levels. Complex Example:&lt;/p&gt;

 

 &lt;pre&gt;&lt;code&gt;

 &amp;lt;ext:body runOnLoad="true"&amp;gt;

 	&amp;lt;ext:borderLayout renderTo="hebelek" border="true" width="900" height="600"&amp;gt;

 		&amp;lt;ext:treePanel rootVisible="true" lines="true" region="west" split="true" width="200" autoScroll="true" animate="true" enableDD="true" title="Folder Tree"&amp;gt;

 			&amp;lt;ext:asyncTreeNode text="Root Node" id="source" draggable="false" /&amp;gt;

 			&amp;lt;ext:treeLoader url="servlet/TreeLoaderServlet" method="post" /&amp;gt;

 		&amp;lt;/ext:treePanel&amp;gt;

 		&amp;lt;ext:borderLayout region="center" split="true"&amp;gt;

 			&amp;lt;ext:gridPanel region="north" height="300" forceFit="true" border="true" checkboxEnabled="true"&amp;gt;

 				&amp;lt;ext:jsonStore url="servlet/JsonSampleServlet" root="result"&amp;gt;

 					&amp;lt;ext:httpParam name="action" value="env"/&amp;gt;

 					&amp;lt;ext:storeMapping name="name"/&amp;gt;

 					&amp;lt;ext:storeMapping name="value"/&amp;gt;

 				&amp;lt;/ext:jsonStore&amp;gt;

 				&amp;lt;ext:columnModel&amp;gt;

 					&amp;lt;ext:gridColumn dataIndex="name" header="Name" /&amp;gt;

 					&amp;lt;ext:gridColumn dataIndex="value" header="Value" /&amp;gt;

 				&amp;lt;/ext:columnModel&amp;gt;

 			&amp;lt;/ext:gridPanel&amp;gt;

 			&amp;lt;ext:borderLayout region="center" split="true" border="false"&amp;gt;

 				&amp;lt;ext:panel region="north" height="40" bodyStyle="background-color:#f8f8f8;" contentEl="msgHead" style="border-top: 1px solid #eeeeee; border-bottom:1px solid #eeeeee;"&amp;gt;

 				&amp;lt;/ext:panel&amp;gt;

 				&amp;lt;ext:panel region="center" split="true" border="true"&amp;gt;

 					This is the center pane

 				&amp;lt;/ext:panel&amp;gt;

 			&amp;lt;/ext:borderLayout&amp;gt;

 		&amp;lt;/ext:borderLayout&amp;gt;

 	&amp;lt;/ext:borderLayout&amp;gt;

 &amp;lt;/ext:body&amp;gt;

 

 &amp;lt;div id="hebelek"&amp;gt;&amp;lt;/div&amp;gt;

 

 &amp;lt;div id="msgHead"&amp;gt;

 	&amp;lt;b&amp;gt;From:&amp;lt;/b&amp;gt;Test User&amp;lt;br/&amp;gt;

 	&amp;lt;b&amp;gt;Subject:&amp;lt;/b&amp;gt;Test Subject

 &amp;lt;/div&amp;gt;

 &lt;/code&gt;&lt;/pre&gt;

 

 Items added to the border layout has some extra config attributes and border layout is configured by them. 

 These are: 

 &lt;ul&gt;

 	&lt;li&gt;

 		&lt;strong&gt;animFloat&lt;/strong&gt; : Boolean&lt;br/&gt;

		When a collapsed region's bar is clicked, the region's panel will be displayed as a floated panel 

		that will close again once the user mouses out of that panel (or clicks out if autoHide = false). 

		Setting animFloat to false will prevent the open and close of these floated panels from being 

		animated (defaults to true).

	&lt;/li&gt;

	&lt;li&gt;

		&lt;strong&gt;autoHide&lt;/strong&gt; : Boolean&lt;br/&gt;

 		When a collapsed region's bar is clicked, the region's panel will be displayed as a floated panel. 

 		If autoHide is true, the panel will automatically hide after the user mouses out of the panel. 

 		If autoHide is false, the panel will continue to display until the user clicks outside of the panel 

 		(defaults to true).

	&lt;/li&gt;

	&lt;li&gt;

		&lt;strong&gt;cmargins&lt;/strong&gt; : Object&lt;br/&gt;

		An object containing margins to apply to the region's collapsed element in the format 

		{left: (left margin), top: (top margin), right: (right margin), bottom: (bottom margin)}

	&lt;/li&gt;

	&lt;li&gt;

		&lt;strong&gt;collapseMode&lt;/strong&gt; : String&lt;br/&gt;

		By default, collapsible regions are collapsed by clicking the expand/collapse tool button that 

		renders into the region's title bar. Optionally, when collapseMode is set to 'mini' the region's 

		split bar will also display a small collapse button in the center of the bar. In 'mini' mode 

		the region will collapse to a thinner bar than in normal mode. By default collapseMode is undefined, 

		and the only two supported values are undefined and 'mini'. Note that if a collapsible region does 

		not have a title bar, then collapseMode must be set to 'mini' in order for the region to be 

		collapsible by the user as the tool button will not be rendered.

	&lt;/li&gt;

	&lt;li&gt;

		&lt;strong&gt;collapsible&lt;/strong&gt; : Boolean&lt;br/&gt;

 		True to allow the user to collapse this region (defaults to false). If true, an expand/collapse 

 		tool button will automatically be rendered into the title bar of the region, otherwise the button 

 		will not be shown. Note that a title bar is required to display the toggle button -- if no region 

 		title is specified, the region will only be collapsible if collapseMode is set to 'mini'.

 	&lt;/li&gt;

 	&lt;li&gt;

 		&lt;strong&gt;floatable&lt;/strong&gt; : Boolean&lt;br/&gt;

 		True to allow clicking a collapsed region's bar to display the region's panel floated above the 

 		layout, false to force the user to fully expand a collapsed region by clicking the expand button 

 		to see it again (defaults to true).

 	&lt;/li&gt;

 	&lt;li&gt;

 		&lt;strong&gt;margins&lt;/strong&gt; : Object&lt;br/&gt;

 		An object containing margins to apply to the region in the format 

 		{left: (left margin), top: (top margin), right: (right margin), bottom: (bottom margin)}

 	&lt;/li&gt;

 	&lt;li&gt;

 		&lt;strong&gt;minHeight&lt;/strong&gt; : Number&lt;br/&gt;

 		The minimum allowable height in pixels for this region (defaults to 50)

 	&lt;/li&gt;

 	&lt;li&gt;

 		&lt;strong&gt;minWidth&lt;/strong&gt; : Number&lt;br/&gt;

 		The minimum allowable width in pixels for this region (defaults to 50)

 	&lt;/li&gt;

 	&lt;li&gt;

 		&lt;strong&gt;split&lt;/strong&gt; : Boolean&lt;/br&gt;

 		True to display a Ext.SplitBar between this region and its neighbor, allowing the user to resize 

 		the regions dynamically (defaults to false). When split = true, it is common to specify a minSize 

 		and maxSize for the region.

 	&lt;/li&gt;

 &lt;/ul&gt;

 

 &lt;p&gt;If split is enabled then the items added have some more extra config options. These are:&lt;/p&gt;

 

 &lt;ul&gt;

 	&lt;li&gt;

 		&lt;strong&gt;collapsibleSplitTip&lt;/strong&gt; : String&lt;br/&gt;

 		The tooltip to display when the user hovers over a collapsible region's split bar (defaults to 

 		"Drag to resize. Double click to hide."). Only applies if useSplitTips = true.

 	&lt;/li&gt;

 	&lt;li&gt;

 		&lt;strong&gt;splitTip&lt;/strong&gt; : String&lt;br/&gt;

 		The tooltip to display when the user hovers over a non-collapsible region's split bar 

 		(defaults to "Drag to resize."). Only applies if useSplitTips = true.

 	&lt;/li&gt;

 	&lt;li&gt;

 		&lt;strong&gt;useSplitTips&lt;/strong&gt; : Boolean&lt;br/&gt;

 		True to display a tooltip when the user hovers over a region's split bar (defaults to false). 

 		The tooltip text will be the value of either splitTip or collapsibleSplitTip as appropriate.

 	&lt;/li&gt;

 &lt;/ul&gt;</description>

		<name>borderLayout</name>

		<tag-class>isola.tags.ext.layout.BorderLayoutTag</tag-class>

		<body-content>JSP</body-content>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Whether the component can move the Dom node when rendering (defaults to true).</description>

            <name>allowDomMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element corresponding 

 to a DIV that is already present in the document that specifies some 

 structural markup for this component. When applyTo is used, constituent 

 parts of the component can also be specified by id or CSS class name 

 within the main element, and the component being created may attempt to 

 create its subcomponents from that markup if applicable. Using this 

 config, a call to render() is not required. If applyTo is specified, 

 any value passed for renderTo will be ignored and the target element's 

 parent node will automatically be used as the component's container.</description>

            <name>applyTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the component should check for hidden classes (e.g. 'x-hidden' 

 or 'x-hide-display') and remove them on render (defaults to false).</description>

            <name>autoShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 Element (defaults to ''). This can be useful for adding customized styles 

 to the component or any of its children using standard CSS rules.</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 container (defaults to ''). This can be useful for adding customized 

 styles to the container or any of its children using standard CSS rules.</description>

            <name>ctCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class added to the component when it is disabled (defaults to 

 "x-item-disabled").</description>

            <name>disabledClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide and show the component's container when hide/show is 

 called on the component, false to hide and show the component itself 

 (defaults to false). For example, this can be used as a shortcut 

 for a hide button on a window by setting hide:true on the button when 

 adding it to its parent container.</description>

            <name>hideParent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id of this component (defaults to an auto-assigned id).</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element that will be the 

 container to render this component into. Using this config, a call to 

 render() is not required.</description>

            <name>renderTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id for this component to use for state management purposes 

 (defaults to the component id). See stateful for an explanation of saving 

 and restoring Component state.</description>

            <name>stateId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;A flag which causes the Component to attempt to restore the state of 

 internal properties from a saved state on startup.&lt;/p&gt;

 

 &lt;p&gt;For state saving to work, the state manager's provider must have been 

 set to an implementation of Ext.state.Provider which overrides the set 

 and get methods to save and recall name/value pairs. A built-in 

 implementation, Ext.state.CookieProvider is available.&lt;/p&gt;

 

 &lt;p&gt;To set the state provider for the current page:&lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;Components attempt to save state when one of the events listed in the stateEvents 

 configuration fires.&lt;/p&gt;

 

 &lt;p&gt;You can perform extra processing on state save and restore by attaching 

 handlers to the beforestaterestore, staterestore, beforestatesave and statesave 

 events.&lt;/p&gt;</description>

            <name>stateful</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom style specification to be applied to this component's Element. Should 

 be a valid argument to Ext.Element.applyStyles.</description>

            <name>style</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Where to place this component. Valid values are south, north, west, east, center</description>

            <name>region</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>How this component should hidden. Supported values are "visibility" 

 (css visibility), "offsets" (negative offset position) and "display" 

 (css display) - defaults to "display".</description>

            <name>hideMode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use height:'auto', false to use fixed height (defaults to false).</description>

            <name>autoHeight</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use width:'auto', false to use fixed width (defaults to false).</description>

            <name>autoWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The height of this component in pixels (defaults to auto).</description>

            <name>height</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width of this component in pixels (defaults to auto).</description>

            <name>width</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>HTML Element this object is parsed on.</description>

            <name>el</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A string component id or the numeric index of the component that should be 

 initially activated within the container's layout on render. For example, 

 activeItem: 'item-1' or activeItem: 0 (index 0 = the first item in the 

 container's collection). activeItem only applies to layout styles that can 

 display items one at a time (like Ext.layout.Accordion, 

 Ext.layout.CardLayout and Ext.layout.FitLayout). 

 Related to Ext.layout.ContainerLayout.activeItem.</description>

            <name>activeItem</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If true the container will automatically destroy any contained component 

 that is removed from it, else destruction must be handled manually 

 (defaults to true).</description>

            <name>autoDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>When set to true (100 milliseconds) or a number of milliseconds, the 

 layout assigned for this container will buffer the frequency it calculates 

 and does a re-layout of components. This is useful for heavy containers 

 or containers with a large amount of sub components that frequent calls 

 to layout are expensive.</description>

            <name>bufferResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default type of container represented by this object as registered 

  in Ext.ComponentMgr (defaults to 'panel').</description>

            <name>defaultType</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the borders of each contained component, false to defer to the 

 component's existing border settings (defaults to false).</description>

            <name>hideBorders</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;The layout type to be used in this container. If not specified, a default 

 Ext.layout.ContainerLayout will be created and used. 

 

 &lt;p&gt;Valid values are:&lt;/p&gt;

 &lt;ul&gt;

 &lt;li&gt;accordion, &lt;/li&gt;

 &lt;li&gt;anchor, &lt;/li&gt; 

 &lt;li&gt;border,&lt;/li&gt; 

 &lt;li&gt;card,&lt;/li&gt; 

 &lt;li&gt;column,&lt;/li&gt; 

 &lt;li&gt;fit,&lt;/li&gt; 

 &lt;li&gt;form&lt;/li&gt;

 &lt;li&gt;table.&lt;/li&gt; 

 &lt;/ul&gt;

 &lt;p&gt;Specific config values for the chosen layout type can be specified using 

 layoutConfig.&lt;/p&gt;</description>

            <name>layout</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to automatically monitor window resize events to handle anything that is 

 sensitive to the current size of the viewport. This value is typically managed 

 by the chosen layout and should not need to be set manually.</description>

            <name>monitorResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to animate the transition when the panel is collapsed, false to skip 

 the animation (defaults to true if the Ext.Fx class is available, otherwise 

 false).</description>

            <name>animCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use overflow:'auto' on the panel's body element and show scroll bars 

 automatically when necessary, false to clip any overflowing content 

 (defaults to false).</description>

            <name>autoScroll</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The base CSS class to apply to this panel's element (defaults to 'x-panel').</description>

            <name>baseCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display an interior border on the body element of the panel, false 

 to hide it (defaults to true). This only applies when border == true. If 

 border == true and bodyBorder == false, the border will display as a 1px 

 wide inset border, giving the entire body element an inset appearance.</description>

            <name>bodyBorder</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Custom CSS styles to be applied to the body element in the format expected 

 by Ext.Element.applyStyles (defaults to null).</description>

            <name>bodyStyle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display the borders of the panel's body element, false to hide them 

 (defaults to true). By default, the border is a 2px wide inset border, but 

 this can be further altered by setting bodyBorder to false.</description>

            <name>border</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>When set to true (100 milliseconds) or a number of milliseconds, the 

 layout assigned for this container will buffer the frequency it calculates 

 and does a re-layout of components. This is useful for heavy containers 

 or containers with a large amount of sub components that frequent calls 

 to layout are expensive.</description>

            <name>bufferResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The alignment of any buttons added to this panel. Valid values are 'right,' 

 'left' and 'center' (defaults to 'right').</description>

            <name>buttonAlign</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to make sure the collapse/expand toggle button always renders first (to 

 the left of) any other tools in the panel's title bar, false to render it 

 last (defaults to true).</description>

            <name>collapseFirst</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to render the panel collapsed, false to render it expanded (defaults to false).</description>

            <name>collapsed</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS class to add to the panel's element after it has been collapsed (defaults 

 to 'x-panel-collapsed').</description>

            <name>collapsedCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to make the panel collapsible and have the expand/collapse toggle button 

 automatically rendered into the header tool button area, false to keep the 

 panel statically sized with no button (defaults to false).</description>

            <name>collapsible</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of an existing HTML node to use as the panel's body content (defaults to '').</description>

            <name>contentEl</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to enable dragging of this Panel (defaults to false). For custom drag/drop 

 implementations, an Ext.Panel.DD config could also be passed in this config 

 instead of true, although Ext.Panel.DD is an internal, undocumented class.</description>

            <name>draggable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A comma-delimited list of panel elements to initialize when the panel is 

 rendered. Normally, this list will be generated automatically based on the items 

 added to the panel at config time, but sometimes it might be useful to make 

 sure a structural element is rendered even if not specified at config time 

 (for example, you may want to add a button or toolbar dynamically after the 

 panel has been rendered). Adding those elements to this list will allocate 

 the required placeholders in the panel when it is rendered. 

 Valid values are

 &lt;ul&gt;

 &lt;li&gt;header&lt;/li&gt;

 &lt;li&gt;tbar (top bar)&lt;/li&gt;

 &lt;li&gt;body&lt;/li&gt;

 &lt;li&gt;bbar (bottom bar)&lt;/li&gt;

 &lt;li&gt;footer&lt;/li&gt;

 &lt;/ul&gt;

 Defaults to 'body'.</description>

            <name>elements</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to float the panel (absolute position it with automatic shimming and shadow), 

 false to display it inline where it is rendered (defaults to false). Note that 

 by default, setting floating to true will cause the panel to display at negative 

 offsets so that it is hidden -- because the panel is absolute positioned, the 

 position must be set explicitly after render (e.g., myPanel.setPosition(100,100);). 

 Also, when floating a panel you should always assign a fixed width, otherwise it 

 will be auto width and will expand to fill to the right edge of the viewport.</description>

            <name>floating</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to create the footer element explicitly, false to skip creating it. By 

 default, when footer is not specified, if one or more buttons have been added 

 to the panel the footer will be created automatically, otherwise it will not.</description>

            <name>footer</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Shows a nice rounded corner with a thick border around the panel.</description>

            <name>frame</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to create the header element explicitly, false to skip creating it. By 

 default, when header is not specified, if a title is set the header will be 

 created automatically, otherwise it will not. If a title is set but header is 

 explicitly set to false, the header will not be rendered.</description>

            <name>header</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display the panel title in the header, false to hide it (defaults to true).</description>

            <name>headerAsText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the expand/collapse toggle button when collapsible = true, false 

 to display it (defaults to false).</description>

            <name>hideCollapseTool</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An HTML fragment, or a DomHelper specification to use as the panel's body 

 content (defaults to '').</description>

            <name>html</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS class that will provide a background image to be used as the panel header 

 icon (defaults to '').</description>

            <name>iconCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to mask the panel when it is disabled, false to not mask it (defaults 

 to true). Either way, the panel will always tell its contained elements to 

 disable themselves when it is disabled, but masking the panel can provide an 

 additional visual cue that the panel is disabled.</description>

            <name>maskDisabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Minimum width in pixels of all buttons in this panel (defaults to 75)</description>

            <name>minButtonWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True (or a valid Ext.Shadow Ext.Shadow.mode value) to display a shadow behind 

 the panel, false to display no shadow (defaults to 'sides'). Note that this 

 option only applies when floating = true.</description>

            <name>shadow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The number of pixels to offset the shadow if displayed (defaults to 4). Note 

 that this option only applies when floating = true.</description>

            <name>shadowOffset</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>False to disable the iframe shim in browsers which need one (defaults to true). 

 Note that this option only applies when floating = true.</description>

            <name>shim</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Adds a tooltip when mousing over the tab of a Ext.Panel which is an item of a 

 Ext.TabPanel. Ext.QuickTips.init() must be called in order for the tips to render.</description>

            <name>tabTip</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The title text to display in the panel header (defaults to ''). When a title 

 is specified the header element will automatically be created and displayed 

 unless header is explicitly set to false. If you don't want to specify a title 

 at config time, but you may want one later, you must either specify a non-empty 

 title (a blank space ' ' will do) or header:true so that the container element 

 will get created.</description>

            <name>title</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to allow expanding and collapsing the panel (when collapsible = true) 

 by clicking anywhere in the header bar, false to allow it only by clicking to 

 tool button (defaults to false).</description>

            <name>titleCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If border layout is used then you can set this option to true to place a splitbar 

 between the panels.</description>

            <name>split</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>xtype</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If anchor layout is used you can set an anchor value here.</description>

            <name>anchor</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If absolute layout is used you can set an absolute X position in pixels to place the component in

 the layout.</description>

            <name>x</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If absolute layout is used you can set an absolute Y position in pixels to place the component in

 the layout.</description>

            <name>y</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If column layout is used you can give a float column width from 0 to 1. Valid example: .5</description>

            <name>columnWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If table layout is used you can set rowspan as in an ordinary table.</description>

            <name>rowSpan</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If table layout is used you can set colspan as in an ordinary table.</description>

            <name>colSpan</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is destroyed. Return false to stop the destroy.&lt;p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is hidden. Return false to stop the hide.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is rendered. Return false to stop the render. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is shown. Return false to stop the show. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is restored. Return false to stop the restore.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is saved to the 

 configured state provider. Return false to stop the save. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is destroyed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is disabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is enabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEnable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is hidden. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is rendered.  &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is shown.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is restored. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is saved to the configured state provider. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is moved. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;x&lt;/strong&gt;: (Number)The new x position&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;y&lt;/strong&gt;: (Number)The new y position&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is resized.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjWidth&lt;/strong&gt;:(Number) The box-adjusted width that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjHeight&lt;/strong&gt;:(Number) The box-adjusted height that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawWidth&lt;/strong&gt;:(Number) The width that was originally specified&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawHeight&lt;/strong&gt;:(Number) The height that was originally specified&lt;/li&gt; 		

 &lt;/ul&gt;</description>

            <name>onResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after any Ext.Component is added or inserted into the container.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;:(Ext.Component) The component that was added&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the component was added to the container's items collection&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAdd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the components in this container are arranged by the associated layout manager. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;layout&lt;/strong&gt;:(ContainerLayout) The ContainerLayout implementation for this container&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAfterLayout</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before any Ext.Component is added or inserted into the container. A handler can return false to cancel the add.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;:(Ext.Component) The component being added&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the component will be added to the container's items collection&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeAdd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before any Ext.Component is removed from the container. A handler can return false to cancel the remove. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: (Ext.Component) The component being removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after any Ext.Component is removed from the container&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: (Ext.Component) The component that was removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been visually activated. Note that Panels do not directly support 

 being activated, but some Panel subclasses do (like Ext.Window). Panels which are child Components 

 of a TabPanel fire the activate and deactivate events under the control of the TabPanel. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been activated.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onActivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is closed. Note that Panels do not directly support being closed, but some

  Panel subclasses do (like Ext.Window). This event only applies to such subclasses. A handler can 

  return false to cancel the close. &lt;/p&gt;

  Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel being closed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeClose</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is collapsed. A handler can return false to cancel the collapse. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel being collapsed.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;animate&lt;/strong&gt;:(Boolean) True if the collapse is animated, else false.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is expanded. A handler can return false to cancel the expand. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel being expanded.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;animate&lt;/strong&gt;:(Boolean) True if the expand is animated, else false.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been resized. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel which has been resized.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;width&lt;/strong&gt;:(Number) The Panel's new width.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;height &lt;/strong&gt;:(Number) The Panel's new height.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBodyResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel is closed. Note that Panels do not directly support being closed, but 

 some Panel subclasses do (like Ext.Window). &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been closed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onClose</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been collapsed. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel that has been collapsed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been visually deactivated. Note that Panels do not directly support 

 being deactivated, but some Panel subclasses do (like Ext.Window). Panels which are child Components

 of a TabPanel fire the activate and deactivate events under the control of the TabPanel. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been deactivated.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDeactivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been expanded. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been expanded.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel title has been set or changed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel which has had its title changed.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;The&lt;/strong&gt;:(String) new title.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onTitleChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>&lt;p&gt;This layout contains multiple panels, each fit to the container, where only a single panel 

 can be visible at any given time. This layout style is most commonly used for wizards, tab 

 implementations, etc. This class is intended to be extended or created via the layout:'card' 

 Ext.Container.layout config, and should generally not need to be created directly via the 

 new keyword.&lt;/p&gt;

 

 &lt;p&gt;The CardLayout's focal method is setActiveItem. Since only one panel is displayed at a time, 

 the only way to move from one panel to the next is by calling setActiveItem, passing the id 

 or index of the next panel to display. The layout itself does not provide a mechanism for 

 handling this navigation, so that functionality must be provided by the developer.&lt;/p&gt;

 

 &lt;p&gt;In the following example, a simplistic wizard setup is demonstrated. A button bar is added 

 to the footer of the containing panel to provide navigation buttons. The buttons will be 

 handled by a common navigation routine -- for this example, the implementation of that 

 routine has been ommitted since it can be any type of custom logic. Note that other uses of 

 a CardLayout (like a tab control) would require a completely different implementation. For 

 serious implementations, a better approach would be to extend CardLayout to provide the 

 custom functionality needed. Example usage:&lt;/p&gt;

 

 &lt;code&gt;&lt;pre&gt;

 

 &amp;lt;ext:body runOnLoad="true"&amp;gt;

 	var navHandler = function(direction){

 		var lay = Ext.getCmp('card1').getLayout();

 		var i = lay.activeItem.id.split('card-')[1];

 		var next = parseInt(i) + direction;

 		lay.setActiveItem(next);

 		Ext.getCmp('move-prev').setDisabled(next==0);

 		Ext.getCmp('move-next').setDisabled(next==2);

 	};

 

 	&amp;lt;ext:cardLayout id="card1" renderTo="hebelek" title="Example Wizard" activeItem="0" bodyStyle="padding:15px" border="true" width="700" height="500"&amp;gt;

 		&amp;lt;ext:toolbar position="bottom"&amp;gt;

 			&amp;lt;ext:toolbarButton id="move-prev" text="Back" handler="navHandler(-1)" disabled="true" /&amp;gt;

 			&amp;lt;ext:toolbarFill/&amp;gt;

 			&amp;lt;ext:toolbarButton id="move-next" text="Next" handler="navHandler(1)" /&amp;gt;

 		&amp;lt;/ext:toolbar&amp;gt;

 		&amp;lt;ext:panel id="card-0" border="false"&amp;gt;

 			&amp;lt;h1&amp;gt;Welcome to the Wizard!&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;Step 1 of 3&amp;lt;/p&amp;gt;

 		&amp;lt;/ext:panel&amp;gt;

 		&amp;lt;ext:panel id="card-1" border="false"&amp;gt;

 			&amp;lt;h1&amp;gt;Second Step&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;Step 2 of 3&amp;lt;/p&amp;gt;

 		&amp;lt;/ext:panel&amp;gt;

 		&amp;lt;ext:panel id="card-2" border="false"&amp;gt;

 			&amp;lt;h1&amp;gt;Congratulations!&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;Step 3 of 3 - Complete&amp;lt;/p&amp;gt;

 		&amp;lt;/ext:panel&amp;gt;

 	&amp;lt;/ext:cardLayout&amp;gt;

 &amp;lt;/ext:body&amp;gt;

 

 &amp;lt;div id="hebelek"&amp;gt;&amp;lt;/div&amp;gt;

 

 &lt;/code&gt;&lt;/pre&gt;</description>

		<name>cardLayout</name>

		<tag-class>isola.tags.ext.layout.CardLayoutTag</tag-class>

		<body-content>JSP</body-content>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Whether the component can move the Dom node when rendering (defaults to true).</description>

            <name>allowDomMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element corresponding 

 to a DIV that is already present in the document that specifies some 

 structural markup for this component. When applyTo is used, constituent 

 parts of the component can also be specified by id or CSS class name 

 within the main element, and the component being created may attempt to 

 create its subcomponents from that markup if applicable. Using this 

 config, a call to render() is not required. If applyTo is specified, 

 any value passed for renderTo will be ignored and the target element's 

 parent node will automatically be used as the component's container.</description>

            <name>applyTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the component should check for hidden classes (e.g. 'x-hidden' 

 or 'x-hide-display') and remove them on render (defaults to false).</description>

            <name>autoShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 Element (defaults to ''). This can be useful for adding customized styles 

 to the component or any of its children using standard CSS rules.</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 container (defaults to ''). This can be useful for adding customized 

 styles to the container or any of its children using standard CSS rules.</description>

            <name>ctCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class added to the component when it is disabled (defaults to 

 "x-item-disabled").</description>

            <name>disabledClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide and show the component's container when hide/show is 

 called on the component, false to hide and show the component itself 

 (defaults to false). For example, this can be used as a shortcut 

 for a hide button on a window by setting hide:true on the button when 

 adding it to its parent container.</description>

            <name>hideParent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id of this component (defaults to an auto-assigned id).</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element that will be the 

 container to render this component into. Using this config, a call to 

 render() is not required.</description>

            <name>renderTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id for this component to use for state management purposes 

 (defaults to the component id). See stateful for an explanation of saving 

 and restoring Component state.</description>

            <name>stateId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;A flag which causes the Component to attempt to restore the state of 

 internal properties from a saved state on startup.&lt;/p&gt;

 

 &lt;p&gt;For state saving to work, the state manager's provider must have been 

 set to an implementation of Ext.state.Provider which overrides the set 

 and get methods to save and recall name/value pairs. A built-in 

 implementation, Ext.state.CookieProvider is available.&lt;/p&gt;

 

 &lt;p&gt;To set the state provider for the current page:&lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;Components attempt to save state when one of the events listed in the stateEvents 

 configuration fires.&lt;/p&gt;

 

 &lt;p&gt;You can perform extra processing on state save and restore by attaching 

 handlers to the beforestaterestore, staterestore, beforestatesave and statesave 

 events.&lt;/p&gt;</description>

            <name>stateful</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom style specification to be applied to this component's Element. Should 

 be a valid argument to Ext.Element.applyStyles.</description>

            <name>style</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Where to place this component. Valid values are south, north, west, east, center</description>

            <name>region</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>How this component should hidden. Supported values are "visibility" 

 (css visibility), "offsets" (negative offset position) and "display" 

 (css display) - defaults to "display".</description>

            <name>hideMode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use height:'auto', false to use fixed height (defaults to false).</description>

            <name>autoHeight</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use width:'auto', false to use fixed width (defaults to false).</description>

            <name>autoWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The height of this component in pixels (defaults to auto).</description>

            <name>height</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width of this component in pixels (defaults to auto).</description>

            <name>width</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>HTML Element this object is parsed on.</description>

            <name>el</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A string component id or the numeric index of the component that should be 

 initially activated within the container's layout on render. For example, 

 activeItem: 'item-1' or activeItem: 0 (index 0 = the first item in the 

 container's collection). activeItem only applies to layout styles that can 

 display items one at a time (like Ext.layout.Accordion, 

 Ext.layout.CardLayout and Ext.layout.FitLayout). 

 Related to Ext.layout.ContainerLayout.activeItem.</description>

            <name>activeItem</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If true the container will automatically destroy any contained component 

 that is removed from it, else destruction must be handled manually 

 (defaults to true).</description>

            <name>autoDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>When set to true (100 milliseconds) or a number of milliseconds, the 

 layout assigned for this container will buffer the frequency it calculates 

 and does a re-layout of components. This is useful for heavy containers 

 or containers with a large amount of sub components that frequent calls 

 to layout are expensive.</description>

            <name>bufferResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default type of container represented by this object as registered 

  in Ext.ComponentMgr (defaults to 'panel').</description>

            <name>defaultType</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the borders of each contained component, false to defer to the 

 component's existing border settings (defaults to false).</description>

            <name>hideBorders</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;The layout type to be used in this container. If not specified, a default 

 Ext.layout.ContainerLayout will be created and used. 

 

 &lt;p&gt;Valid values are:&lt;/p&gt;

 &lt;ul&gt;

 &lt;li&gt;accordion, &lt;/li&gt;

 &lt;li&gt;anchor, &lt;/li&gt; 

 &lt;li&gt;border,&lt;/li&gt; 

 &lt;li&gt;card,&lt;/li&gt; 

 &lt;li&gt;column,&lt;/li&gt; 

 &lt;li&gt;fit,&lt;/li&gt; 

 &lt;li&gt;form&lt;/li&gt;

 &lt;li&gt;table.&lt;/li&gt; 

 &lt;/ul&gt;

 &lt;p&gt;Specific config values for the chosen layout type can be specified using 

 layoutConfig.&lt;/p&gt;</description>

            <name>layout</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to automatically monitor window resize events to handle anything that is 

 sensitive to the current size of the viewport. This value is typically managed 

 by the chosen layout and should not need to be set manually.</description>

            <name>monitorResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to animate the transition when the panel is collapsed, false to skip 

 the animation (defaults to true if the Ext.Fx class is available, otherwise 

 false).</description>

            <name>animCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use overflow:'auto' on the panel's body element and show scroll bars 

 automatically when necessary, false to clip any overflowing content 

 (defaults to false).</description>

            <name>autoScroll</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The base CSS class to apply to this panel's element (defaults to 'x-panel').</description>

            <name>baseCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display an interior border on the body element of the panel, false 

 to hide it (defaults to true). This only applies when border == true. If 

 border == true and bodyBorder == false, the border will display as a 1px 

 wide inset border, giving the entire body element an inset appearance.</description>

            <name>bodyBorder</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Custom CSS styles to be applied to the body element in the format expected 

 by Ext.Element.applyStyles (defaults to null).</description>

            <name>bodyStyle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display the borders of the panel's body element, false to hide them 

 (defaults to true). By default, the border is a 2px wide inset border, but 

 this can be further altered by setting bodyBorder to false.</description>

            <name>border</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>When set to true (100 milliseconds) or a number of milliseconds, the 

 layout assigned for this container will buffer the frequency it calculates 

 and does a re-layout of components. This is useful for heavy containers 

 or containers with a large amount of sub components that frequent calls 

 to layout are expensive.</description>

            <name>bufferResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The alignment of any buttons added to this panel. Valid values are 'right,' 

 'left' and 'center' (defaults to 'right').</description>

            <name>buttonAlign</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to make sure the collapse/expand toggle button always renders first (to 

 the left of) any other tools in the panel's title bar, false to render it 

 last (defaults to true).</description>

            <name>collapseFirst</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to render the panel collapsed, false to render it expanded (defaults to false).</description>

            <name>collapsed</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS class to add to the panel's element after it has been collapsed (defaults 

 to 'x-panel-collapsed').</description>

            <name>collapsedCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to make the panel collapsible and have the expand/collapse toggle button 

 automatically rendered into the header tool button area, false to keep the 

 panel statically sized with no button (defaults to false).</description>

            <name>collapsible</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of an existing HTML node to use as the panel's body content (defaults to '').</description>

            <name>contentEl</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to enable dragging of this Panel (defaults to false). For custom drag/drop 

 implementations, an Ext.Panel.DD config could also be passed in this config 

 instead of true, although Ext.Panel.DD is an internal, undocumented class.</description>

            <name>draggable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A comma-delimited list of panel elements to initialize when the panel is 

 rendered. Normally, this list will be generated automatically based on the items 

 added to the panel at config time, but sometimes it might be useful to make 

 sure a structural element is rendered even if not specified at config time 

 (for example, you may want to add a button or toolbar dynamically after the 

 panel has been rendered). Adding those elements to this list will allocate 

 the required placeholders in the panel when it is rendered. 

 Valid values are

 &lt;ul&gt;

 &lt;li&gt;header&lt;/li&gt;

 &lt;li&gt;tbar (top bar)&lt;/li&gt;

 &lt;li&gt;body&lt;/li&gt;

 &lt;li&gt;bbar (bottom bar)&lt;/li&gt;

 &lt;li&gt;footer&lt;/li&gt;

 &lt;/ul&gt;

 Defaults to 'body'.</description>

            <name>elements</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to float the panel (absolute position it with automatic shimming and shadow), 

 false to display it inline where it is rendered (defaults to false). Note that 

 by default, setting floating to true will cause the panel to display at negative 

 offsets so that it is hidden -- because the panel is absolute positioned, the 

 position must be set explicitly after render (e.g., myPanel.setPosition(100,100);). 

 Also, when floating a panel you should always assign a fixed width, otherwise it 

 will be auto width and will expand to fill to the right edge of the viewport.</description>

            <name>floating</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to create the footer element explicitly, false to skip creating it. By 

 default, when footer is not specified, if one or more buttons have been added 

 to the panel the footer will be created automatically, otherwise it will not.</description>

            <name>footer</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Shows a nice rounded corner with a thick border around the panel.</description>

            <name>frame</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to create the header element explicitly, false to skip creating it. By 

 default, when header is not specified, if a title is set the header will be 

 created automatically, otherwise it will not. If a title is set but header is 

 explicitly set to false, the header will not be rendered.</description>

            <name>header</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display the panel title in the header, false to hide it (defaults to true).</description>

            <name>headerAsText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the expand/collapse toggle button when collapsible = true, false 

 to display it (defaults to false).</description>

            <name>hideCollapseTool</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An HTML fragment, or a DomHelper specification to use as the panel's body 

 content (defaults to '').</description>

            <name>html</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS class that will provide a background image to be used as the panel header 

 icon (defaults to '').</description>

            <name>iconCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to mask the panel when it is disabled, false to not mask it (defaults 

 to true). Either way, the panel will always tell its contained elements to 

 disable themselves when it is disabled, but masking the panel can provide an 

 additional visual cue that the panel is disabled.</description>

            <name>maskDisabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Minimum width in pixels of all buttons in this panel (defaults to 75)</description>

            <name>minButtonWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True (or a valid Ext.Shadow Ext.Shadow.mode value) to display a shadow behind 

 the panel, false to display no shadow (defaults to 'sides'). Note that this 

 option only applies when floating = true.</description>

            <name>shadow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The number of pixels to offset the shadow if displayed (defaults to 4). Note 

 that this option only applies when floating = true.</description>

            <name>shadowOffset</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>False to disable the iframe shim in browsers which need one (defaults to true). 

 Note that this option only applies when floating = true.</description>

            <name>shim</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Adds a tooltip when mousing over the tab of a Ext.Panel which is an item of a 

 Ext.TabPanel. Ext.QuickTips.init() must be called in order for the tips to render.</description>

            <name>tabTip</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The title text to display in the panel header (defaults to ''). When a title 

 is specified the header element will automatically be created and displayed 

 unless header is explicitly set to false. If you don't want to specify a title 

 at config time, but you may want one later, you must either specify a non-empty 

 title (a blank space ' ' will do) or header:true so that the container element 

 will get created.</description>

            <name>title</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to allow expanding and collapsing the panel (when collapsible = true) 

 by clicking anywhere in the header bar, false to allow it only by clicking to 

 tool button (defaults to false).</description>

            <name>titleCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If border layout is used then you can set this option to true to place a splitbar 

 between the panels.</description>

            <name>split</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>xtype</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If anchor layout is used you can set an anchor value here.</description>

            <name>anchor</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If absolute layout is used you can set an absolute X position in pixels to place the component in

 the layout.</description>

            <name>x</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If absolute layout is used you can set an absolute Y position in pixels to place the component in

 the layout.</description>

            <name>y</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If column layout is used you can give a float column width from 0 to 1. Valid example: .5</description>

            <name>columnWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If table layout is used you can set rowspan as in an ordinary table.</description>

            <name>rowSpan</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If table layout is used you can set colspan as in an ordinary table.</description>

            <name>colSpan</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is destroyed. Return false to stop the destroy.&lt;p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is hidden. Return false to stop the hide.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is rendered. Return false to stop the render. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is shown. Return false to stop the show. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is restored. Return false to stop the restore.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is saved to the 

 configured state provider. Return false to stop the save. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is destroyed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is disabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is enabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEnable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is hidden. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is rendered.  &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is shown.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is restored. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is saved to the configured state provider. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is moved. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;x&lt;/strong&gt;: (Number)The new x position&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;y&lt;/strong&gt;: (Number)The new y position&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is resized.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjWidth&lt;/strong&gt;:(Number) The box-adjusted width that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjHeight&lt;/strong&gt;:(Number) The box-adjusted height that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawWidth&lt;/strong&gt;:(Number) The width that was originally specified&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawHeight&lt;/strong&gt;:(Number) The height that was originally specified&lt;/li&gt; 		

 &lt;/ul&gt;</description>

            <name>onResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after any Ext.Component is added or inserted into the container.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;:(Ext.Component) The component that was added&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the component was added to the container's items collection&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAdd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the components in this container are arranged by the associated layout manager. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;layout&lt;/strong&gt;:(ContainerLayout) The ContainerLayout implementation for this container&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAfterLayout</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before any Ext.Component is added or inserted into the container. A handler can return false to cancel the add.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;:(Ext.Component) The component being added&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the component will be added to the container's items collection&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeAdd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before any Ext.Component is removed from the container. A handler can return false to cancel the remove. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: (Ext.Component) The component being removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after any Ext.Component is removed from the container&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: (Ext.Component) The component that was removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been visually activated. Note that Panels do not directly support 

 being activated, but some Panel subclasses do (like Ext.Window). Panels which are child Components 

 of a TabPanel fire the activate and deactivate events under the control of the TabPanel. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been activated.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onActivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is closed. Note that Panels do not directly support being closed, but some

  Panel subclasses do (like Ext.Window). This event only applies to such subclasses. A handler can 

  return false to cancel the close. &lt;/p&gt;

  Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel being closed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeClose</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is collapsed. A handler can return false to cancel the collapse. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel being collapsed.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;animate&lt;/strong&gt;:(Boolean) True if the collapse is animated, else false.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is expanded. A handler can return false to cancel the expand. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel being expanded.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;animate&lt;/strong&gt;:(Boolean) True if the expand is animated, else false.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been resized. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel which has been resized.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;width&lt;/strong&gt;:(Number) The Panel's new width.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;height &lt;/strong&gt;:(Number) The Panel's new height.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBodyResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel is closed. Note that Panels do not directly support being closed, but 

 some Panel subclasses do (like Ext.Window). &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been closed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onClose</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been collapsed. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel that has been collapsed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been visually deactivated. Note that Panels do not directly support 

 being deactivated, but some Panel subclasses do (like Ext.Window). Panels which are child Components

 of a TabPanel fire the activate and deactivate events under the control of the TabPanel. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been deactivated.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDeactivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been expanded. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been expanded.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel title has been set or changed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel which has had its title changed.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;The&lt;/strong&gt;:(String) new title.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onTitleChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>&lt;p&gt;This is the layout style of choice for creating structural layouts in a multi-column format 

 where the width of each column can be specified as a percentage or fixed width, but the height 

 is allowed to vary based on the content. This class is intended to be extended or created via 

 the layout:'column' Ext.Container.layout config, and should generally not need to be created 

 directly via the new keyword.&lt;/p&gt;

 

 &lt;p&gt;ColumnLayout does not have any direct config options (other than inherited ones), but it does 

 support a specific config property of columnWidth that can be included in the config of any panel 

 added to it. The layout will use the width (if pixels) or columnWidth (if percent) of each panel 

 during layout to determine how to size each panel. If width or columnWidth is not specified for 

 a given panel, its width will default to the panel's width (or auto).&lt;/p&gt;

 

 &lt;p&gt;The width property is always evaluated as pixels, and must be a number greater than or equal 

 to 1. The columnWidth property is always evaluated as a percentage, and must be a decimal value 

 greater than 0 and less than 1 (e.g., .25).&lt;/p&gt;

 

 &lt;p&gt;The basic rules for specifying column widths are pretty simple. The logic makes two passes 

 through the set of contained panels. During the first layout pass, all panels that either have a 

 fixed width or none specified (auto) are skipped, but their widths are subtracted from the overall 

 container width. During the second pass, all panels with columnWidths are assigned pixel widths 

 in proportion to their percentages based on the total remaining container width. In other words, 

 percentage width panels are designed to fill the space left over by all the fixed-width or 

 auto-width panels. Because of this, while you can specify any number of columns with different 

 percentages, the columnWidths must always add up to 1 (or 100%) when added together, otherwise 

 your layout may not render as expected. Example usage:&lt;/p&gt;

 

 &lt;code&gt;&lt;pre&gt;

	&amp;lt;ext:body runOnLoad="true"&amp;gt;

		&amp;lt;ext:columnLayout width="800" renderTo="hebelek" height="100" border="true"&amp;gt;

			&amp;lt;ext:panel title="Column 1" columnWidth=".25"&amp;gt;

				Column 1

			&amp;lt;/ext:panel&amp;gt;

			&amp;lt;ext:panel title="Column 2" columnWidth=".6"&amp;gt;

				Column 2

			&amp;lt;/ext:panel&amp;gt;

			&amp;lt;ext:panel title="Column 3" columnWidth=".15"&amp;gt;

				Column 3

			&amp;lt;/ext:panel&amp;gt;

		&amp;lt;/ext:columnLayout&amp;gt;

	&amp;lt;/ext:body&amp;gt;

	&amp;lt;div id="hebelek"&amp;gt;&amp;lt;/div&amp;gt;

 &lt;/pre&gt;&lt;/code&gt;

 

 &lt;p&gt;Mix of width and columnWidth -- all columnWidth values values must add

 up to 1. The first column will take up exactly 120px, and the last two

 columns will fill the remaining container width.&lt;/p&gt;</description>

		<name>columnLayout</name>

		<tag-class>isola.tags.ext.layout.ColumnLayoutTag</tag-class>

		<body-content>JSP</body-content>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Whether the component can move the Dom node when rendering (defaults to true).</description>

            <name>allowDomMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element corresponding 

 to a DIV that is already present in the document that specifies some 

 structural markup for this component. When applyTo is used, constituent 

 parts of the component can also be specified by id or CSS class name 

 within the main element, and the component being created may attempt to 

 create its subcomponents from that markup if applicable. Using this 

 config, a call to render() is not required. If applyTo is specified, 

 any value passed for renderTo will be ignored and the target element's 

 parent node will automatically be used as the component's container.</description>

            <name>applyTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the component should check for hidden classes (e.g. 'x-hidden' 

 or 'x-hide-display') and remove them on render (defaults to false).</description>

            <name>autoShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 Element (defaults to ''). This can be useful for adding customized styles 

 to the component or any of its children using standard CSS rules.</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 container (defaults to ''). This can be useful for adding customized 

 styles to the container or any of its children using standard CSS rules.</description>

            <name>ctCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class added to the component when it is disabled (defaults to 

 "x-item-disabled").</description>

            <name>disabledClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide and show the component's container when hide/show is 

 called on the component, false to hide and show the component itself 

 (defaults to false). For example, this can be used as a shortcut 

 for a hide button on a window by setting hide:true on the button when 

 adding it to its parent container.</description>

            <name>hideParent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id of this component (defaults to an auto-assigned id).</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element that will be the 

 container to render this component into. Using this config, a call to 

 render() is not required.</description>

            <name>renderTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id for this component to use for state management purposes 

 (defaults to the component id). See stateful for an explanation of saving 

 and restoring Component state.</description>

            <name>stateId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;A flag which causes the Component to attempt to restore the state of 

 internal properties from a saved state on startup.&lt;/p&gt;

 

 &lt;p&gt;For state saving to work, the state manager's provider must have been 

 set to an implementation of Ext.state.Provider which overrides the set 

 and get methods to save and recall name/value pairs. A built-in 

 implementation, Ext.state.CookieProvider is available.&lt;/p&gt;

 

 &lt;p&gt;To set the state provider for the current page:&lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;Components attempt to save state when one of the events listed in the stateEvents 

 configuration fires.&lt;/p&gt;

 

 &lt;p&gt;You can perform extra processing on state save and restore by attaching 

 handlers to the beforestaterestore, staterestore, beforestatesave and statesave 

 events.&lt;/p&gt;</description>

            <name>stateful</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom style specification to be applied to this component's Element. Should 

 be a valid argument to Ext.Element.applyStyles.</description>

            <name>style</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Where to place this component. Valid values are south, north, west, east, center</description>

            <name>region</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>How this component should hidden. Supported values are "visibility" 

 (css visibility), "offsets" (negative offset position) and "display" 

 (css display) - defaults to "display".</description>

            <name>hideMode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use height:'auto', false to use fixed height (defaults to false).</description>

            <name>autoHeight</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use width:'auto', false to use fixed width (defaults to false).</description>

            <name>autoWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The height of this component in pixels (defaults to auto).</description>

            <name>height</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width of this component in pixels (defaults to auto).</description>

            <name>width</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>HTML Element this object is parsed on.</description>

            <name>el</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A string component id or the numeric index of the component that should be 

 initially activated within the container's layout on render. For example, 

 activeItem: 'item-1' or activeItem: 0 (index 0 = the first item in the 

 container's collection). activeItem only applies to layout styles that can 

 display items one at a time (like Ext.layout.Accordion, 

 Ext.layout.CardLayout and Ext.layout.FitLayout). 

 Related to Ext.layout.ContainerLayout.activeItem.</description>

            <name>activeItem</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If true the container will automatically destroy any contained component 

 that is removed from it, else destruction must be handled manually 

 (defaults to true).</description>

            <name>autoDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>When set to true (100 milliseconds) or a number of milliseconds, the 

 layout assigned for this container will buffer the frequency it calculates 

 and does a re-layout of components. This is useful for heavy containers 

 or containers with a large amount of sub components that frequent calls 

 to layout are expensive.</description>

            <name>bufferResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default type of container represented by this object as registered 

  in Ext.ComponentMgr (defaults to 'panel').</description>

            <name>defaultType</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the borders of each contained component, false to defer to the 

 component's existing border settings (defaults to false).</description>

            <name>hideBorders</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;The layout type to be used in this container. If not specified, a default 

 Ext.layout.ContainerLayout will be created and used. 

 

 &lt;p&gt;Valid values are:&lt;/p&gt;

 &lt;ul&gt;

 &lt;li&gt;accordion, &lt;/li&gt;

 &lt;li&gt;anchor, &lt;/li&gt; 

 &lt;li&gt;border,&lt;/li&gt; 

 &lt;li&gt;card,&lt;/li&gt; 

 &lt;li&gt;column,&lt;/li&gt; 

 &lt;li&gt;fit,&lt;/li&gt; 

 &lt;li&gt;form&lt;/li&gt;

 &lt;li&gt;table.&lt;/li&gt; 

 &lt;/ul&gt;

 &lt;p&gt;Specific config values for the chosen layout type can be specified using 

 layoutConfig.&lt;/p&gt;</description>

            <name>layout</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to automatically monitor window resize events to handle anything that is 

 sensitive to the current size of the viewport. This value is typically managed 

 by the chosen layout and should not need to be set manually.</description>

            <name>monitorResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to animate the transition when the panel is collapsed, false to skip 

 the animation (defaults to true if the Ext.Fx class is available, otherwise 

 false).</description>

            <name>animCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use overflow:'auto' on the panel's body element and show scroll bars 

 automatically when necessary, false to clip any overflowing content 

 (defaults to false).</description>

            <name>autoScroll</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The base CSS class to apply to this panel's element (defaults to 'x-panel').</description>

            <name>baseCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display an interior border on the body element of the panel, false 

 to hide it (defaults to true). This only applies when border == true. If 

 border == true and bodyBorder == false, the border will display as a 1px 

 wide inset border, giving the entire body element an inset appearance.</description>

            <name>bodyBorder</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Custom CSS styles to be applied to the body element in the format expected 

 by Ext.Element.applyStyles (defaults to null).</description>

            <name>bodyStyle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display the borders of the panel's body element, false to hide them 

 (defaults to true). By default, the border is a 2px wide inset border, but 

 this can be further altered by setting bodyBorder to false.</description>

            <name>border</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>When set to true (100 milliseconds) or a number of milliseconds, the 

 layout assigned for this container will buffer the frequency it calculates 

 and does a re-layout of components. This is useful for heavy containers 

 or containers with a large amount of sub components that frequent calls 

 to layout are expensive.</description>

            <name>bufferResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The alignment of any buttons added to this panel. Valid values are 'right,' 

 'left' and 'center' (defaults to 'right').</description>

            <name>buttonAlign</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to make sure the collapse/expand toggle button always renders first (to 

 the left of) any other tools in the panel's title bar, false to render it 

 last (defaults to true).</description>

            <name>collapseFirst</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to render the panel collapsed, false to render it expanded (defaults to false).</description>

            <name>collapsed</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS class to add to the panel's element after it has been collapsed (defaults 

 to 'x-panel-collapsed').</description>

            <name>collapsedCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to make the panel collapsible and have the expand/collapse toggle button 

 automatically rendered into the header tool button area, false to keep the 

 panel statically sized with no button (defaults to false).</description>

            <name>collapsible</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of an existing HTML node to use as the panel's body content (defaults to '').</description>

            <name>contentEl</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to enable dragging of this Panel (defaults to false). For custom drag/drop 

 implementations, an Ext.Panel.DD config could also be passed in this config 

 instead of true, although Ext.Panel.DD is an internal, undocumented class.</description>

            <name>draggable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A comma-delimited list of panel elements to initialize when the panel is 

 rendered. Normally, this list will be generated automatically based on the items 

 added to the panel at config time, but sometimes it might be useful to make 

 sure a structural element is rendered even if not specified at config time 

 (for example, you may want to add a button or toolbar dynamically after the 

 panel has been rendered). Adding those elements to this list will allocate 

 the required placeholders in the panel when it is rendered. 

 Valid values are

 &lt;ul&gt;

 &lt;li&gt;header&lt;/li&gt;

 &lt;li&gt;tbar (top bar)&lt;/li&gt;

 &lt;li&gt;body&lt;/li&gt;

 &lt;li&gt;bbar (bottom bar)&lt;/li&gt;

 &lt;li&gt;footer&lt;/li&gt;

 &lt;/ul&gt;

 Defaults to 'body'.</description>

            <name>elements</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to float the panel (absolute position it with automatic shimming and shadow), 

 false to display it inline where it is rendered (defaults to false). Note that 

 by default, setting floating to true will cause the panel to display at negative 

 offsets so that it is hidden -- because the panel is absolute positioned, the 

 position must be set explicitly after render (e.g., myPanel.setPosition(100,100);). 

 Also, when floating a panel you should always assign a fixed width, otherwise it 

 will be auto width and will expand to fill to the right edge of the viewport.</description>

            <name>floating</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to create the footer element explicitly, false to skip creating it. By 

 default, when footer is not specified, if one or more buttons have been added 

 to the panel the footer will be created automatically, otherwise it will not.</description>

            <name>footer</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Shows a nice rounded corner with a thick border around the panel.</description>

            <name>frame</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to create the header element explicitly, false to skip creating it. By 

 default, when header is not specified, if a title is set the header will be 

 created automatically, otherwise it will not. If a title is set but header is 

 explicitly set to false, the header will not be rendered.</description>

            <name>header</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display the panel title in the header, false to hide it (defaults to true).</description>

            <name>headerAsText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the expand/collapse toggle button when collapsible = true, false 

 to display it (defaults to false).</description>

            <name>hideCollapseTool</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An HTML fragment, or a DomHelper specification to use as the panel's body 

 content (defaults to '').</description>

            <name>html</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS class that will provide a background image to be used as the panel header 

 icon (defaults to '').</description>

            <name>iconCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to mask the panel when it is disabled, false to not mask it (defaults 

 to true). Either way, the panel will always tell its contained elements to 

 disable themselves when it is disabled, but masking the panel can provide an 

 additional visual cue that the panel is disabled.</description>

            <name>maskDisabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Minimum width in pixels of all buttons in this panel (defaults to 75)</description>

            <name>minButtonWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True (or a valid Ext.Shadow Ext.Shadow.mode value) to display a shadow behind 

 the panel, false to display no shadow (defaults to 'sides'). Note that this 

 option only applies when floating = true.</description>

            <name>shadow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The number of pixels to offset the shadow if displayed (defaults to 4). Note 

 that this option only applies when floating = true.</description>

            <name>shadowOffset</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>False to disable the iframe shim in browsers which need one (defaults to true). 

 Note that this option only applies when floating = true.</description>

            <name>shim</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Adds a tooltip when mousing over the tab of a Ext.Panel which is an item of a 

 Ext.TabPanel. Ext.QuickTips.init() must be called in order for the tips to render.</description>

            <name>tabTip</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The title text to display in the panel header (defaults to ''). When a title 

 is specified the header element will automatically be created and displayed 

 unless header is explicitly set to false. If you don't want to specify a title 

 at config time, but you may want one later, you must either specify a non-empty 

 title (a blank space ' ' will do) or header:true so that the container element 

 will get created.</description>

            <name>title</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to allow expanding and collapsing the panel (when collapsible = true) 

 by clicking anywhere in the header bar, false to allow it only by clicking to 

 tool button (defaults to false).</description>

            <name>titleCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If border layout is used then you can set this option to true to place a splitbar 

 between the panels.</description>

            <name>split</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>xtype</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If anchor layout is used you can set an anchor value here.</description>

            <name>anchor</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If absolute layout is used you can set an absolute X position in pixels to place the component in

 the layout.</description>

            <name>x</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If absolute layout is used you can set an absolute Y position in pixels to place the component in

 the layout.</description>

            <name>y</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If column layout is used you can give a float column width from 0 to 1. Valid example: .5</description>

            <name>columnWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If table layout is used you can set rowspan as in an ordinary table.</description>

            <name>rowSpan</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If table layout is used you can set colspan as in an ordinary table.</description>

            <name>colSpan</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is destroyed. Return false to stop the destroy.&lt;p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is hidden. Return false to stop the hide.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is rendered. Return false to stop the render. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is shown. Return false to stop the show. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is restored. Return false to stop the restore.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is saved to the 

 configured state provider. Return false to stop the save. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is destroyed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is disabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is enabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEnable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is hidden. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is rendered.  &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is shown.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is restored. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is saved to the configured state provider. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is moved. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;x&lt;/strong&gt;: (Number)The new x position&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;y&lt;/strong&gt;: (Number)The new y position&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is resized.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjWidth&lt;/strong&gt;:(Number) The box-adjusted width that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjHeight&lt;/strong&gt;:(Number) The box-adjusted height that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawWidth&lt;/strong&gt;:(Number) The width that was originally specified&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawHeight&lt;/strong&gt;:(Number) The height that was originally specified&lt;/li&gt; 		

 &lt;/ul&gt;</description>

            <name>onResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after any Ext.Component is added or inserted into the container.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;:(Ext.Component) The component that was added&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the component was added to the container's items collection&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAdd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the components in this container are arranged by the associated layout manager. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;layout&lt;/strong&gt;:(ContainerLayout) The ContainerLayout implementation for this container&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAfterLayout</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before any Ext.Component is added or inserted into the container. A handler can return false to cancel the add.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;:(Ext.Component) The component being added&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the component will be added to the container's items collection&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeAdd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before any Ext.Component is removed from the container. A handler can return false to cancel the remove. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: (Ext.Component) The component being removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after any Ext.Component is removed from the container&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: (Ext.Component) The component that was removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been visually activated. Note that Panels do not directly support 

 being activated, but some Panel subclasses do (like Ext.Window). Panels which are child Components 

 of a TabPanel fire the activate and deactivate events under the control of the TabPanel. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been activated.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onActivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is closed. Note that Panels do not directly support being closed, but some

  Panel subclasses do (like Ext.Window). This event only applies to such subclasses. A handler can 

  return false to cancel the close. &lt;/p&gt;

  Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel being closed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeClose</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is collapsed. A handler can return false to cancel the collapse. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel being collapsed.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;animate&lt;/strong&gt;:(Boolean) True if the collapse is animated, else false.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is expanded. A handler can return false to cancel the expand. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel being expanded.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;animate&lt;/strong&gt;:(Boolean) True if the expand is animated, else false.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been resized. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel which has been resized.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;width&lt;/strong&gt;:(Number) The Panel's new width.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;height &lt;/strong&gt;:(Number) The Panel's new height.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBodyResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel is closed. Note that Panels do not directly support being closed, but 

 some Panel subclasses do (like Ext.Window). &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been closed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onClose</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been collapsed. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel that has been collapsed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been visually deactivated. Note that Panels do not directly support 

 being deactivated, but some Panel subclasses do (like Ext.Window). Panels which are child Components

 of a TabPanel fire the activate and deactivate events under the control of the TabPanel. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been deactivated.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDeactivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been expanded. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been expanded.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel title has been set or changed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel which has had its title changed.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;The&lt;/strong&gt;:(String) new title.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onTitleChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>&lt;p&gt;This is a base class for layouts that contain a single item that automatically expands 

 to fill the layout's container. This class is intended to be extended or created via the 

 layout:'fit' Ext.Container.layout config, and should generally not need to be created 

 directly via the new keyword.&lt;/p&gt;

 

 &lt;p&gt;FitLayout does not have any direct config options (other than inherited ones). To fit 

 a panel to a container using FitLayout, simply set layout:'fit' on the container and add 

 a single panel to it. If the container has multiple panels, only the first one will be 

 displayed. Example usage:&lt;/p&gt;

 

 &lt;pre&gt;&lt;code&gt;

	&amp;lt;ext:body runOnLoad="true"&amp;gt;

		&amp;lt;ext:fitLayout title="Fit Layout" renderTo="hebelek" width="500" height="500"&amp;gt;

			&amp;lt;ext:panel border="false" bodyStyle="background-color:#000000;color:white;"&amp;gt;

				&amp;lt;p&amp;gt;This is the inner panel content&amp;lt;/p&amp;gt;

			&amp;lt;/ext:panel&amp;gt;

		&amp;lt;/ext:fitLayout&amp;gt;

	&amp;lt;/ext:body&amp;gt;

	&amp;lt;div id="hebelek"&amp;gt;&amp;lt;/div&amp;gt;

 &lt;/code&gt;&lt;/pre&gt;</description>

		<name>fitLayout</name>

		<tag-class>isola.tags.ext.layout.FitLayoutTag</tag-class>

		<body-content>JSP</body-content>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Whether the component can move the Dom node when rendering (defaults to true).</description>

            <name>allowDomMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element corresponding 

 to a DIV that is already present in the document that specifies some 

 structural markup for this component. When applyTo is used, constituent 

 parts of the component can also be specified by id or CSS class name 

 within the main element, and the component being created may attempt to 

 create its subcomponents from that markup if applicable. Using this 

 config, a call to render() is not required. If applyTo is specified, 

 any value passed for renderTo will be ignored and the target element's 

 parent node will automatically be used as the component's container.</description>

            <name>applyTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the component should check for hidden classes (e.g. 'x-hidden' 

 or 'x-hide-display') and remove them on render (defaults to false).</description>

            <name>autoShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 Element (defaults to ''). This can be useful for adding customized styles 

 to the component or any of its children using standard CSS rules.</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 container (defaults to ''). This can be useful for adding customized 

 styles to the container or any of its children using standard CSS rules.</description>

            <name>ctCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class added to the component when it is disabled (defaults to 

 "x-item-disabled").</description>

            <name>disabledClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide and show the component's container when hide/show is 

 called on the component, false to hide and show the component itself 

 (defaults to false). For example, this can be used as a shortcut 

 for a hide button on a window by setting hide:true on the button when 

 adding it to its parent container.</description>

            <name>hideParent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id of this component (defaults to an auto-assigned id).</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element that will be the 

 container to render this component into. Using this config, a call to 

 render() is not required.</description>

            <name>renderTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id for this component to use for state management purposes 

 (defaults to the component id). See stateful for an explanation of saving 

 and restoring Component state.</description>

            <name>stateId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;A flag which causes the Component to attempt to restore the state of 

 internal properties from a saved state on startup.&lt;/p&gt;

 

 &lt;p&gt;For state saving to work, the state manager's provider must have been 

 set to an implementation of Ext.state.Provider which overrides the set 

 and get methods to save and recall name/value pairs. A built-in 

 implementation, Ext.state.CookieProvider is available.&lt;/p&gt;

 

 &lt;p&gt;To set the state provider for the current page:&lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;Components attempt to save state when one of the events listed in the stateEvents 

 configuration fires.&lt;/p&gt;

 

 &lt;p&gt;You can perform extra processing on state save and restore by attaching 

 handlers to the beforestaterestore, staterestore, beforestatesave and statesave 

 events.&lt;/p&gt;</description>

            <name>stateful</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom style specification to be applied to this component's Element. Should 

 be a valid argument to Ext.Element.applyStyles.</description>

            <name>style</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Where to place this component. Valid values are south, north, west, east, center</description>

            <name>region</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>How this component should hidden. Supported values are "visibility" 

 (css visibility), "offsets" (negative offset position) and "display" 

 (css display) - defaults to "display".</description>

            <name>hideMode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use height:'auto', false to use fixed height (defaults to false).</description>

            <name>autoHeight</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use width:'auto', false to use fixed width (defaults to false).</description>

            <name>autoWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The height of this component in pixels (defaults to auto).</description>

            <name>height</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width of this component in pixels (defaults to auto).</description>

            <name>width</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>HTML Element this object is parsed on.</description>

            <name>el</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A string component id or the numeric index of the component that should be 

 initially activated within the container's layout on render. For example, 

 activeItem: 'item-1' or activeItem: 0 (index 0 = the first item in the 

 container's collection). activeItem only applies to layout styles that can 

 display items one at a time (like Ext.layout.Accordion, 

 Ext.layout.CardLayout and Ext.layout.FitLayout). 

 Related to Ext.layout.ContainerLayout.activeItem.</description>

            <name>activeItem</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If true the container will automatically destroy any contained component 

 that is removed from it, else destruction must be handled manually 

 (defaults to true).</description>

            <name>autoDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>When set to true (100 milliseconds) or a number of milliseconds, the 

 layout assigned for this container will buffer the frequency it calculates 

 and does a re-layout of components. This is useful for heavy containers 

 or containers with a large amount of sub components that frequent calls 

 to layout are expensive.</description>

            <name>bufferResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default type of container represented by this object as registered 

  in Ext.ComponentMgr (defaults to 'panel').</description>

            <name>defaultType</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the borders of each contained component, false to defer to the 

 component's existing border settings (defaults to false).</description>

            <name>hideBorders</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;The layout type to be used in this container. If not specified, a default 

 Ext.layout.ContainerLayout will be created and used. 

 

 &lt;p&gt;Valid values are:&lt;/p&gt;

 &lt;ul&gt;

 &lt;li&gt;accordion, &lt;/li&gt;

 &lt;li&gt;anchor, &lt;/li&gt; 

 &lt;li&gt;border,&lt;/li&gt; 

 &lt;li&gt;card,&lt;/li&gt; 

 &lt;li&gt;column,&lt;/li&gt; 

 &lt;li&gt;fit,&lt;/li&gt; 

 &lt;li&gt;form&lt;/li&gt;

 &lt;li&gt;table.&lt;/li&gt; 

 &lt;/ul&gt;

 &lt;p&gt;Specific config values for the chosen layout type can be specified using 

 layoutConfig.&lt;/p&gt;</description>

            <name>layout</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to automatically monitor window resize events to handle anything that is 

 sensitive to the current size of the viewport. This value is typically managed 

 by the chosen layout and should not need to be set manually.</description>

            <name>monitorResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to animate the transition when the panel is collapsed, false to skip 

 the animation (defaults to true if the Ext.Fx class is available, otherwise 

 false).</description>

            <name>animCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use overflow:'auto' on the panel's body element and show scroll bars 

 automatically when necessary, false to clip any overflowing content 

 (defaults to false).</description>

            <name>autoScroll</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The base CSS class to apply to this panel's element (defaults to 'x-panel').</description>

            <name>baseCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display an interior border on the body element of the panel, false 

 to hide it (defaults to true). This only applies when border == true. If 

 border == true and bodyBorder == false, the border will display as a 1px 

 wide inset border, giving the entire body element an inset appearance.</description>

            <name>bodyBorder</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Custom CSS styles to be applied to the body element in the format expected 

 by Ext.Element.applyStyles (defaults to null).</description>

            <name>bodyStyle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display the borders of the panel's body element, false to hide them 

 (defaults to true). By default, the border is a 2px wide inset border, but 

 this can be further altered by setting bodyBorder to false.</description>

            <name>border</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>When set to true (100 milliseconds) or a number of milliseconds, the 

 layout assigned for this container will buffer the frequency it calculates 

 and does a re-layout of components. This is useful for heavy containers 

 or containers with a large amount of sub components that frequent calls 

 to layout are expensive.</description>

            <name>bufferResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The alignment of any buttons added to this panel. Valid values are 'right,' 

 'left' and 'center' (defaults to 'right').</description>

            <name>buttonAlign</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to make sure the collapse/expand toggle button always renders first (to 

 the left of) any other tools in the panel's title bar, false to render it 

 last (defaults to true).</description>

            <name>collapseFirst</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to render the panel collapsed, false to render it expanded (defaults to false).</description>

            <name>collapsed</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS class to add to the panel's element after it has been collapsed (defaults 

 to 'x-panel-collapsed').</description>

            <name>collapsedCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to make the panel collapsible and have the expand/collapse toggle button 

 automatically rendered into the header tool button area, false to keep the 

 panel statically sized with no button (defaults to false).</description>

            <name>collapsible</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of an existing HTML node to use as the panel's body content (defaults to '').</description>

            <name>contentEl</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to enable dragging of this Panel (defaults to false). For custom drag/drop 

 implementations, an Ext.Panel.DD config could also be passed in this config 

 instead of true, although Ext.Panel.DD is an internal, undocumented class.</description>

            <name>draggable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A comma-delimited list of panel elements to initialize when the panel is 

 rendered. Normally, this list will be generated automatically based on the items 

 added to the panel at config time, but sometimes it might be useful to make 

 sure a structural element is rendered even if not specified at config time 

 (for example, you may want to add a button or toolbar dynamically after the 

 panel has been rendered). Adding those elements to this list will allocate 

 the required placeholders in the panel when it is rendered. 

 Valid values are

 &lt;ul&gt;

 &lt;li&gt;header&lt;/li&gt;

 &lt;li&gt;tbar (top bar)&lt;/li&gt;

 &lt;li&gt;body&lt;/li&gt;

 &lt;li&gt;bbar (bottom bar)&lt;/li&gt;

 &lt;li&gt;footer&lt;/li&gt;

 &lt;/ul&gt;

 Defaults to 'body'.</description>

            <name>elements</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to float the panel (absolute position it with automatic shimming and shadow), 

 false to display it inline where it is rendered (defaults to false). Note that 

 by default, setting floating to true will cause the panel to display at negative 

 offsets so that it is hidden -- because the panel is absolute positioned, the 

 position must be set explicitly after render (e.g., myPanel.setPosition(100,100);). 

 Also, when floating a panel you should always assign a fixed width, otherwise it 

 will be auto width and will expand to fill to the right edge of the viewport.</description>

            <name>floating</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to create the footer element explicitly, false to skip creating it. By 

 default, when footer is not specified, if one or more buttons have been added 

 to the panel the footer will be created automatically, otherwise it will not.</description>

            <name>footer</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Shows a nice rounded corner with a thick border around the panel.</description>

            <name>frame</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to create the header element explicitly, false to skip creating it. By 

 default, when header is not specified, if a title is set the header will be 

 created automatically, otherwise it will not. If a title is set but header is 

 explicitly set to false, the header will not be rendered.</description>

            <name>header</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display the panel title in the header, false to hide it (defaults to true).</description>

            <name>headerAsText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the expand/collapse toggle button when collapsible = true, false 

 to display it (defaults to false).</description>

            <name>hideCollapseTool</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An HTML fragment, or a DomHelper specification to use as the panel's body 

 content (defaults to '').</description>

            <name>html</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS class that will provide a background image to be used as the panel header 

 icon (defaults to '').</description>

            <name>iconCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to mask the panel when it is disabled, false to not mask it (defaults 

 to true). Either way, the panel will always tell its contained elements to 

 disable themselves when it is disabled, but masking the panel can provide an 

 additional visual cue that the panel is disabled.</description>

            <name>maskDisabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Minimum width in pixels of all buttons in this panel (defaults to 75)</description>

            <name>minButtonWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True (or a valid Ext.Shadow Ext.Shadow.mode value) to display a shadow behind 

 the panel, false to display no shadow (defaults to 'sides'). Note that this 

 option only applies when floating = true.</description>

            <name>shadow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The number of pixels to offset the shadow if displayed (defaults to 4). Note 

 that this option only applies when floating = true.</description>

            <name>shadowOffset</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>False to disable the iframe shim in browsers which need one (defaults to true). 

 Note that this option only applies when floating = true.</description>

            <name>shim</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Adds a tooltip when mousing over the tab of a Ext.Panel which is an item of a 

 Ext.TabPanel. Ext.QuickTips.init() must be called in order for the tips to render.</description>

            <name>tabTip</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The title text to display in the panel header (defaults to ''). When a title 

 is specified the header element will automatically be created and displayed 

 unless header is explicitly set to false. If you don't want to specify a title 

 at config time, but you may want one later, you must either specify a non-empty 

 title (a blank space ' ' will do) or header:true so that the container element 

 will get created.</description>

            <name>title</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to allow expanding and collapsing the panel (when collapsible = true) 

 by clicking anywhere in the header bar, false to allow it only by clicking to 

 tool button (defaults to false).</description>

            <name>titleCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If border layout is used then you can set this option to true to place a splitbar 

 between the panels.</description>

            <name>split</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>xtype</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If anchor layout is used you can set an anchor value here.</description>

            <name>anchor</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If absolute layout is used you can set an absolute X position in pixels to place the component in

 the layout.</description>

            <name>x</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If absolute layout is used you can set an absolute Y position in pixels to place the component in

 the layout.</description>

            <name>y</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If column layout is used you can give a float column width from 0 to 1. Valid example: .5</description>

            <name>columnWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If table layout is used you can set rowspan as in an ordinary table.</description>

            <name>rowSpan</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If table layout is used you can set colspan as in an ordinary table.</description>

            <name>colSpan</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is destroyed. Return false to stop the destroy.&lt;p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is hidden. Return false to stop the hide.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is rendered. Return false to stop the render. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is shown. Return false to stop the show. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is restored. Return false to stop the restore.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is saved to the 

 configured state provider. Return false to stop the save. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is destroyed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is disabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is enabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEnable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is hidden. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is rendered.  &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is shown.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is restored. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is saved to the configured state provider. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is moved. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;x&lt;/strong&gt;: (Number)The new x position&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;y&lt;/strong&gt;: (Number)The new y position&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is resized.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjWidth&lt;/strong&gt;:(Number) The box-adjusted width that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjHeight&lt;/strong&gt;:(Number) The box-adjusted height that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawWidth&lt;/strong&gt;:(Number) The width that was originally specified&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawHeight&lt;/strong&gt;:(Number) The height that was originally specified&lt;/li&gt; 		

 &lt;/ul&gt;</description>

            <name>onResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after any Ext.Component is added or inserted into the container.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;:(Ext.Component) The component that was added&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the component was added to the container's items collection&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAdd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the components in this container are arranged by the associated layout manager. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;layout&lt;/strong&gt;:(ContainerLayout) The ContainerLayout implementation for this container&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAfterLayout</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before any Ext.Component is added or inserted into the container. A handler can return false to cancel the add.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;:(Ext.Component) The component being added&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the component will be added to the container's items collection&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeAdd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before any Ext.Component is removed from the container. A handler can return false to cancel the remove. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: (Ext.Component) The component being removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after any Ext.Component is removed from the container&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: (Ext.Component) The component that was removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been visually activated. Note that Panels do not directly support 

 being activated, but some Panel subclasses do (like Ext.Window). Panels which are child Components 

 of a TabPanel fire the activate and deactivate events under the control of the TabPanel. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been activated.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onActivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is closed. Note that Panels do not directly support being closed, but some

  Panel subclasses do (like Ext.Window). This event only applies to such subclasses. A handler can 

  return false to cancel the close. &lt;/p&gt;

  Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel being closed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeClose</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is collapsed. A handler can return false to cancel the collapse. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel being collapsed.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;animate&lt;/strong&gt;:(Boolean) True if the collapse is animated, else false.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is expanded. A handler can return false to cancel the expand. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel being expanded.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;animate&lt;/strong&gt;:(Boolean) True if the expand is animated, else false.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been resized. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel which has been resized.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;width&lt;/strong&gt;:(Number) The Panel's new width.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;height &lt;/strong&gt;:(Number) The Panel's new height.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBodyResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel is closed. Note that Panels do not directly support being closed, but 

 some Panel subclasses do (like Ext.Window). &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been closed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onClose</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been collapsed. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel that has been collapsed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been visually deactivated. Note that Panels do not directly support 

 being deactivated, but some Panel subclasses do (like Ext.Window). Panels which are child Components

 of a TabPanel fire the activate and deactivate events under the control of the TabPanel. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been deactivated.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDeactivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been expanded. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been expanded.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel title has been set or changed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel which has had its title changed.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;The&lt;/strong&gt;:(String) new title.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onTitleChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>&lt;p&gt;This layout allows you to easily render content into an HTML table. The total number of columns 

 can be specified, and rowspan and colspan can be used to create complex layouts within the table. 

 This class is intended to be extended or created via the layout:'table' Ext.Container.layout config, 

 and should generally not need to be created directly via the new keyword.&lt;/p&gt;

 

 &lt;p&gt;Note that when creating a layout via config, the layout-specific config properties must be 

 passed in via the Ext.Container.layoutConfig object which will then be applied internally to the 

 layout. In the case of TableLayout, the only valid layout config property is columns. However, the 

 items added to a TableLayout can supply table-specific config properties of rowspan and colspan, 

 as explained below.&lt;/p&gt;

 

 &lt;p&gt;The basic concept of building up a TableLayout is conceptually very similar to building up a 

 standard HTML table. You simply add each panel (or "cell") that you want to include along with any 

 span attributes specified as the special config properties of rowspan and colspan which work exactly 

 like their HTML counterparts. Rather than explicitly creating and nesting rows and columns as you 

 would in HTML, you simply specify the total column count in the layoutConfig and start adding panels 

 in their natural order from left to right, top to bottom. The layout will automatically figure out, 

 based on the column count, rowspans and colspans, how to position each panel within the table. Just 

 like with HTML tables, your rowspans and colspans must add up correctly in your overall layout or 

 you'll end up with missing and/or extra cells! Example usage:&lt;/p&gt;

 

 &lt;pre&gt;&lt;code&gt;

 

 This code will generate a layout table that is 3 columns by 2 rows

 with some spanning included.  The basic layout will be:

 +--------+-----------------+

 |   A    |   B             |

 |        |--------+--------|

 |        |   C    |   D    |

 +--------+--------+--------+

 

	&amp;lt;ext:body runOnLoad="true"&amp;gt;

		&amp;lt;ext:tableLayout title="Table Layout" columns="3" renderTo="hebelek" width="220" border="true"&amp;gt;

			&amp;lt;ext:panel rowSpan="2" border="true" bodyStyle="height:102;"&amp;gt;

				&amp;lt;p&amp;gt;Cell A content&amp;lt;/p&amp;gt;

			&amp;lt;/ext:panel&amp;gt;

			&amp;lt;ext:panel colSpan="2" border="true" bodyStyle="height:50;"&amp;gt;

				&amp;lt;p&amp;gt;Cell B content&amp;lt;/p&amp;gt;

			&amp;lt;/ext:panel&amp;gt;

			&amp;lt;ext:panel border="true" bodyStyle="height:50;"&amp;gt;

				&amp;lt;p&amp;gt;Cell C content&amp;lt;/p&amp;gt;

			&amp;lt;/ext:panel&amp;gt;

			&amp;lt;ext:panel border="true" bodyStyle="height:50;"&amp;gt;

				&amp;lt;p&amp;gt;Cell D content&amp;lt;/p&amp;gt;

			&amp;lt;/ext:panel&amp;gt;

		&amp;lt;/ext:tableLayout&amp;gt;

	&amp;lt;/ext:body&amp;gt;

	&amp;lt;div id="hebelek"&amp;gt;&amp;lt;/div&amp;gt;

 &lt;/code&gt;&lt;/pre&gt;</description>

		<name>tableLayout</name>

		<tag-class>isola.tags.ext.layout.TableLayoutTag</tag-class>

		<body-content>JSP</body-content>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>columns</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Whether the component can move the Dom node when rendering (defaults to true).</description>

            <name>allowDomMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element corresponding 

 to a DIV that is already present in the document that specifies some 

 structural markup for this component. When applyTo is used, constituent 

 parts of the component can also be specified by id or CSS class name 

 within the main element, and the component being created may attempt to 

 create its subcomponents from that markup if applicable. Using this 

 config, a call to render() is not required. If applyTo is specified, 

 any value passed for renderTo will be ignored and the target element's 

 parent node will automatically be used as the component's container.</description>

            <name>applyTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the component should check for hidden classes (e.g. 'x-hidden' 

 or 'x-hide-display') and remove them on render (defaults to false).</description>

            <name>autoShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 Element (defaults to ''). This can be useful for adding customized styles 

 to the component or any of its children using standard CSS rules.</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 container (defaults to ''). This can be useful for adding customized 

 styles to the container or any of its children using standard CSS rules.</description>

            <name>ctCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class added to the component when it is disabled (defaults to 

 "x-item-disabled").</description>

            <name>disabledClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide and show the component's container when hide/show is 

 called on the component, false to hide and show the component itself 

 (defaults to false). For example, this can be used as a shortcut 

 for a hide button on a window by setting hide:true on the button when 

 adding it to its parent container.</description>

            <name>hideParent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id of this component (defaults to an auto-assigned id).</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element that will be the 

 container to render this component into. Using this config, a call to 

 render() is not required.</description>

            <name>renderTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id for this component to use for state management purposes 

 (defaults to the component id). See stateful for an explanation of saving 

 and restoring Component state.</description>

            <name>stateId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;A flag which causes the Component to attempt to restore the state of 

 internal properties from a saved state on startup.&lt;/p&gt;

 

 &lt;p&gt;For state saving to work, the state manager's provider must have been 

 set to an implementation of Ext.state.Provider which overrides the set 

 and get methods to save and recall name/value pairs. A built-in 

 implementation, Ext.state.CookieProvider is available.&lt;/p&gt;

 

 &lt;p&gt;To set the state provider for the current page:&lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;Components attempt to save state when one of the events listed in the stateEvents 

 configuration fires.&lt;/p&gt;

 

 &lt;p&gt;You can perform extra processing on state save and restore by attaching 

 handlers to the beforestaterestore, staterestore, beforestatesave and statesave 

 events.&lt;/p&gt;</description>

            <name>stateful</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom style specification to be applied to this component's Element. Should 

 be a valid argument to Ext.Element.applyStyles.</description>

            <name>style</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Where to place this component. Valid values are south, north, west, east, center</description>

            <name>region</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>How this component should hidden. Supported values are "visibility" 

 (css visibility), "offsets" (negative offset position) and "display" 

 (css display) - defaults to "display".</description>

            <name>hideMode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use height:'auto', false to use fixed height (defaults to false).</description>

            <name>autoHeight</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use width:'auto', false to use fixed width (defaults to false).</description>

            <name>autoWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The height of this component in pixels (defaults to auto).</description>

            <name>height</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width of this component in pixels (defaults to auto).</description>

            <name>width</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>HTML Element this object is parsed on.</description>

            <name>el</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A string component id or the numeric index of the component that should be 

 initially activated within the container's layout on render. For example, 

 activeItem: 'item-1' or activeItem: 0 (index 0 = the first item in the 

 container's collection). activeItem only applies to layout styles that can 

 display items one at a time (like Ext.layout.Accordion, 

 Ext.layout.CardLayout and Ext.layout.FitLayout). 

 Related to Ext.layout.ContainerLayout.activeItem.</description>

            <name>activeItem</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If true the container will automatically destroy any contained component 

 that is removed from it, else destruction must be handled manually 

 (defaults to true).</description>

            <name>autoDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>When set to true (100 milliseconds) or a number of milliseconds, the 

 layout assigned for this container will buffer the frequency it calculates 

 and does a re-layout of components. This is useful for heavy containers 

 or containers with a large amount of sub components that frequent calls 

 to layout are expensive.</description>

            <name>bufferResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default type of container represented by this object as registered 

  in Ext.ComponentMgr (defaults to 'panel').</description>

            <name>defaultType</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the borders of each contained component, false to defer to the 

 component's existing border settings (defaults to false).</description>

            <name>hideBorders</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;The layout type to be used in this container. If not specified, a default 

 Ext.layout.ContainerLayout will be created and used. 

 

 &lt;p&gt;Valid values are:&lt;/p&gt;

 &lt;ul&gt;

 &lt;li&gt;accordion, &lt;/li&gt;

 &lt;li&gt;anchor, &lt;/li&gt; 

 &lt;li&gt;border,&lt;/li&gt; 

 &lt;li&gt;card,&lt;/li&gt; 

 &lt;li&gt;column,&lt;/li&gt; 

 &lt;li&gt;fit,&lt;/li&gt; 

 &lt;li&gt;form&lt;/li&gt;

 &lt;li&gt;table.&lt;/li&gt; 

 &lt;/ul&gt;

 &lt;p&gt;Specific config values for the chosen layout type can be specified using 

 layoutConfig.&lt;/p&gt;</description>

            <name>layout</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to automatically monitor window resize events to handle anything that is 

 sensitive to the current size of the viewport. This value is typically managed 

 by the chosen layout and should not need to be set manually.</description>

            <name>monitorResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to animate the transition when the panel is collapsed, false to skip 

 the animation (defaults to true if the Ext.Fx class is available, otherwise 

 false).</description>

            <name>animCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use overflow:'auto' on the panel's body element and show scroll bars 

 automatically when necessary, false to clip any overflowing content 

 (defaults to false).</description>

            <name>autoScroll</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The base CSS class to apply to this panel's element (defaults to 'x-panel').</description>

            <name>baseCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display an interior border on the body element of the panel, false 

 to hide it (defaults to true). This only applies when border == true. If 

 border == true and bodyBorder == false, the border will display as a 1px 

 wide inset border, giving the entire body element an inset appearance.</description>

            <name>bodyBorder</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Custom CSS styles to be applied to the body element in the format expected 

 by Ext.Element.applyStyles (defaults to null).</description>

            <name>bodyStyle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display the borders of the panel's body element, false to hide them 

 (defaults to true). By default, the border is a 2px wide inset border, but 

 this can be further altered by setting bodyBorder to false.</description>

            <name>border</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>When set to true (100 milliseconds) or a number of milliseconds, the 

 layout assigned for this container will buffer the frequency it calculates 

 and does a re-layout of components. This is useful for heavy containers 

 or containers with a large amount of sub components that frequent calls 

 to layout are expensive.</description>

            <name>bufferResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The alignment of any buttons added to this panel. Valid values are 'right,' 

 'left' and 'center' (defaults to 'right').</description>

            <name>buttonAlign</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to make sure the collapse/expand toggle button always renders first (to 

 the left of) any other tools in the panel's title bar, false to render it 

 last (defaults to true).</description>

            <name>collapseFirst</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to render the panel collapsed, false to render it expanded (defaults to false).</description>

            <name>collapsed</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS class to add to the panel's element after it has been collapsed (defaults 

 to 'x-panel-collapsed').</description>

            <name>collapsedCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to make the panel collapsible and have the expand/collapse toggle button 

 automatically rendered into the header tool button area, false to keep the 

 panel statically sized with no button (defaults to false).</description>

            <name>collapsible</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of an existing HTML node to use as the panel's body content (defaults to '').</description>

            <name>contentEl</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to enable dragging of this Panel (defaults to false). For custom drag/drop 

 implementations, an Ext.Panel.DD config could also be passed in this config 

 instead of true, although Ext.Panel.DD is an internal, undocumented class.</description>

            <name>draggable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A comma-delimited list of panel elements to initialize when the panel is 

 rendered. Normally, this list will be generated automatically based on the items 

 added to the panel at config time, but sometimes it might be useful to make 

 sure a structural element is rendered even if not specified at config time 

 (for example, you may want to add a button or toolbar dynamically after the 

 panel has been rendered). Adding those elements to this list will allocate 

 the required placeholders in the panel when it is rendered. 

 Valid values are

 &lt;ul&gt;

 &lt;li&gt;header&lt;/li&gt;

 &lt;li&gt;tbar (top bar)&lt;/li&gt;

 &lt;li&gt;body&lt;/li&gt;

 &lt;li&gt;bbar (bottom bar)&lt;/li&gt;

 &lt;li&gt;footer&lt;/li&gt;

 &lt;/ul&gt;

 Defaults to 'body'.</description>

            <name>elements</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to float the panel (absolute position it with automatic shimming and shadow), 

 false to display it inline where it is rendered (defaults to false). Note that 

 by default, setting floating to true will cause the panel to display at negative 

 offsets so that it is hidden -- because the panel is absolute positioned, the 

 position must be set explicitly after render (e.g., myPanel.setPosition(100,100);). 

 Also, when floating a panel you should always assign a fixed width, otherwise it 

 will be auto width and will expand to fill to the right edge of the viewport.</description>

            <name>floating</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to create the footer element explicitly, false to skip creating it. By 

 default, when footer is not specified, if one or more buttons have been added 

 to the panel the footer will be created automatically, otherwise it will not.</description>

            <name>footer</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Shows a nice rounded corner with a thick border around the panel.</description>

            <name>frame</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to create the header element explicitly, false to skip creating it. By 

 default, when header is not specified, if a title is set the header will be 

 created automatically, otherwise it will not. If a title is set but header is 

 explicitly set to false, the header will not be rendered.</description>

            <name>header</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display the panel title in the header, false to hide it (defaults to true).</description>

            <name>headerAsText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the expand/collapse toggle button when collapsible = true, false 

 to display it (defaults to false).</description>

            <name>hideCollapseTool</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An HTML fragment, or a DomHelper specification to use as the panel's body 

 content (defaults to '').</description>

            <name>html</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS class that will provide a background image to be used as the panel header 

 icon (defaults to '').</description>

            <name>iconCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to mask the panel when it is disabled, false to not mask it (defaults 

 to true). Either way, the panel will always tell its contained elements to 

 disable themselves when it is disabled, but masking the panel can provide an 

 additional visual cue that the panel is disabled.</description>

            <name>maskDisabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Minimum width in pixels of all buttons in this panel (defaults to 75)</description>

            <name>minButtonWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True (or a valid Ext.Shadow Ext.Shadow.mode value) to display a shadow behind 

 the panel, false to display no shadow (defaults to 'sides'). Note that this 

 option only applies when floating = true.</description>

            <name>shadow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The number of pixels to offset the shadow if displayed (defaults to 4). Note 

 that this option only applies when floating = true.</description>

            <name>shadowOffset</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>False to disable the iframe shim in browsers which need one (defaults to true). 

 Note that this option only applies when floating = true.</description>

            <name>shim</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Adds a tooltip when mousing over the tab of a Ext.Panel which is an item of a 

 Ext.TabPanel. Ext.QuickTips.init() must be called in order for the tips to render.</description>

            <name>tabTip</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The title text to display in the panel header (defaults to ''). When a title 

 is specified the header element will automatically be created and displayed 

 unless header is explicitly set to false. If you don't want to specify a title 

 at config time, but you may want one later, you must either specify a non-empty 

 title (a blank space ' ' will do) or header:true so that the container element 

 will get created.</description>

            <name>title</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to allow expanding and collapsing the panel (when collapsible = true) 

 by clicking anywhere in the header bar, false to allow it only by clicking to 

 tool button (defaults to false).</description>

            <name>titleCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If border layout is used then you can set this option to true to place a splitbar 

 between the panels.</description>

            <name>split</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>xtype</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If anchor layout is used you can set an anchor value here.</description>

            <name>anchor</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If absolute layout is used you can set an absolute X position in pixels to place the component in

 the layout.</description>

            <name>x</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If absolute layout is used you can set an absolute Y position in pixels to place the component in

 the layout.</description>

            <name>y</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If column layout is used you can give a float column width from 0 to 1. Valid example: .5</description>

            <name>columnWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If table layout is used you can set rowspan as in an ordinary table.</description>

            <name>rowSpan</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If table layout is used you can set colspan as in an ordinary table.</description>

            <name>colSpan</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is destroyed. Return false to stop the destroy.&lt;p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is hidden. Return false to stop the hide.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is rendered. Return false to stop the render. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is shown. Return false to stop the show. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is restored. Return false to stop the restore.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is saved to the 

 configured state provider. Return false to stop the save. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is destroyed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is disabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is enabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEnable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is hidden. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is rendered.  &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is shown.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is restored. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is saved to the configured state provider. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is moved. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;x&lt;/strong&gt;: (Number)The new x position&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;y&lt;/strong&gt;: (Number)The new y position&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is resized.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjWidth&lt;/strong&gt;:(Number) The box-adjusted width that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjHeight&lt;/strong&gt;:(Number) The box-adjusted height that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawWidth&lt;/strong&gt;:(Number) The width that was originally specified&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawHeight&lt;/strong&gt;:(Number) The height that was originally specified&lt;/li&gt; 		

 &lt;/ul&gt;</description>

            <name>onResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after any Ext.Component is added or inserted into the container.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;:(Ext.Component) The component that was added&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the component was added to the container's items collection&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAdd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the components in this container are arranged by the associated layout manager. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;layout&lt;/strong&gt;:(ContainerLayout) The ContainerLayout implementation for this container&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAfterLayout</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before any Ext.Component is added or inserted into the container. A handler can return false to cancel the add.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;:(Ext.Component) The component being added&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the component will be added to the container's items collection&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeAdd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before any Ext.Component is removed from the container. A handler can return false to cancel the remove. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: (Ext.Component) The component being removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after any Ext.Component is removed from the container&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: (Ext.Component) The component that was removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been visually activated. Note that Panels do not directly support 

 being activated, but some Panel subclasses do (like Ext.Window). Panels which are child Components 

 of a TabPanel fire the activate and deactivate events under the control of the TabPanel. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been activated.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onActivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is closed. Note that Panels do not directly support being closed, but some

  Panel subclasses do (like Ext.Window). This event only applies to such subclasses. A handler can 

  return false to cancel the close. &lt;/p&gt;

  Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel being closed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeClose</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is collapsed. A handler can return false to cancel the collapse. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel being collapsed.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;animate&lt;/strong&gt;:(Boolean) True if the collapse is animated, else false.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is expanded. A handler can return false to cancel the expand. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel being expanded.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;animate&lt;/strong&gt;:(Boolean) True if the expand is animated, else false.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been resized. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel which has been resized.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;width&lt;/strong&gt;:(Number) The Panel's new width.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;height &lt;/strong&gt;:(Number) The Panel's new height.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBodyResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel is closed. Note that Panels do not directly support being closed, but 

 some Panel subclasses do (like Ext.Window). &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been closed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onClose</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been collapsed. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel that has been collapsed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been visually deactivated. Note that Panels do not directly support 

 being deactivated, but some Panel subclasses do (like Ext.Window). Panels which are child Components

 of a TabPanel fire the activate and deactivate events under the control of the TabPanel. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been deactivated.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDeactivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been expanded. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been expanded.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel title has been set or changed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel which has had its title changed.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;The&lt;/strong&gt;:(String) new title.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onTitleChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>&lt;p&gt;This is a layout that contains multiple panels in an expandable accordion style such 

 that only one panel can be open at any given time. Each panel has built-in support for 

 expanding and collapsing. This class is intended to be extended or created via the 

 layout:'accordion' Ext.Container.layout config, and should generally not need to be created 

 directly via the new keyword.&lt;/p&gt;

 

 &lt;p&gt;Note that when creating a layout via config, the layout-specific config properties must 

 be passed in via the Ext.Container.layoutConfig object which will then be applied internally 

 to the layout. Example usage:&lt;/p&gt;

 

 &lt;pre&gt;&lt;code&gt;

	&amp;lt;ext:body runOnLoad="true"&amp;gt;

		&amp;lt;ext:accordion renderTo="hebelek" animate="true" width="200" height="600" title="Accordion Layout" border="true"&amp;gt;

			&amp;lt;ext:panel title="Settings"&amp;gt;

				This is the settings pane

			&amp;lt;/ext:panel&amp;gt;

			&amp;lt;ext:panel title="Preferences"&amp;gt;

				This is the preferences pane

			&amp;lt;/ext:panel&amp;gt;

		&amp;lt;/ext:accordion&amp;gt;

	&amp;lt;/ext:body&amp;gt;

	&amp;lt;div id="hebelek"&amp;gt;&amp;lt;/div&amp;gt;

 &lt;/code&gt;&lt;/pre&gt;</description>

		<name>accordion</name>

		<tag-class>isola.tags.ext.layout.AccordionTag</tag-class>

		<body-content>JSP</body-content>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Whether the component can move the Dom node when rendering (defaults to true).</description>

            <name>allowDomMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element corresponding 

 to a DIV that is already present in the document that specifies some 

 structural markup for this component. When applyTo is used, constituent 

 parts of the component can also be specified by id or CSS class name 

 within the main element, and the component being created may attempt to 

 create its subcomponents from that markup if applicable. Using this 

 config, a call to render() is not required. If applyTo is specified, 

 any value passed for renderTo will be ignored and the target element's 

 parent node will automatically be used as the component's container.</description>

            <name>applyTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the component should check for hidden classes (e.g. 'x-hidden' 

 or 'x-hide-display') and remove them on render (defaults to false).</description>

            <name>autoShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 Element (defaults to ''). This can be useful for adding customized styles 

 to the component or any of its children using standard CSS rules.</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 container (defaults to ''). This can be useful for adding customized 

 styles to the container or any of its children using standard CSS rules.</description>

            <name>ctCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class added to the component when it is disabled (defaults to 

 "x-item-disabled").</description>

            <name>disabledClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide and show the component's container when hide/show is 

 called on the component, false to hide and show the component itself 

 (defaults to false). For example, this can be used as a shortcut 

 for a hide button on a window by setting hide:true on the button when 

 adding it to its parent container.</description>

            <name>hideParent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id of this component (defaults to an auto-assigned id).</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element that will be the 

 container to render this component into. Using this config, a call to 

 render() is not required.</description>

            <name>renderTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id for this component to use for state management purposes 

 (defaults to the component id). See stateful for an explanation of saving 

 and restoring Component state.</description>

            <name>stateId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;A flag which causes the Component to attempt to restore the state of 

 internal properties from a saved state on startup.&lt;/p&gt;

 

 &lt;p&gt;For state saving to work, the state manager's provider must have been 

 set to an implementation of Ext.state.Provider which overrides the set 

 and get methods to save and recall name/value pairs. A built-in 

 implementation, Ext.state.CookieProvider is available.&lt;/p&gt;

 

 &lt;p&gt;To set the state provider for the current page:&lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;Components attempt to save state when one of the events listed in the stateEvents 

 configuration fires.&lt;/p&gt;

 

 &lt;p&gt;You can perform extra processing on state save and restore by attaching 

 handlers to the beforestaterestore, staterestore, beforestatesave and statesave 

 events.&lt;/p&gt;</description>

            <name>stateful</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom style specification to be applied to this component's Element. Should 

 be a valid argument to Ext.Element.applyStyles.</description>

            <name>style</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Where to place this component. Valid values are south, north, west, east, center</description>

            <name>region</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>How this component should hidden. Supported values are "visibility" 

 (css visibility), "offsets" (negative offset position) and "display" 

 (css display) - defaults to "display".</description>

            <name>hideMode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use height:'auto', false to use fixed height (defaults to false).</description>

            <name>autoHeight</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use width:'auto', false to use fixed width (defaults to false).</description>

            <name>autoWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The height of this component in pixels (defaults to auto).</description>

            <name>height</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width of this component in pixels (defaults to auto).</description>

            <name>width</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>HTML Element this object is parsed on.</description>

            <name>el</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If true the container will automatically destroy any contained component 

 that is removed from it, else destruction must be handled manually 

 (defaults to true).</description>

            <name>autoDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>When set to true (100 milliseconds) or a number of milliseconds, the 

 layout assigned for this container will buffer the frequency it calculates 

 and does a re-layout of components. This is useful for heavy containers 

 or containers with a large amount of sub components that frequent calls 

 to layout are expensive.</description>

            <name>bufferResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default type of container represented by this object as registered 

  in Ext.ComponentMgr (defaults to 'panel').</description>

            <name>defaultType</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the borders of each contained component, false to defer to the 

 component's existing border settings (defaults to false).</description>

            <name>hideBorders</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;The layout type to be used in this container. If not specified, a default 

 Ext.layout.ContainerLayout will be created and used. 

 

 &lt;p&gt;Valid values are:&lt;/p&gt;

 &lt;ul&gt;

 &lt;li&gt;accordion, &lt;/li&gt;

 &lt;li&gt;anchor, &lt;/li&gt; 

 &lt;li&gt;border,&lt;/li&gt; 

 &lt;li&gt;card,&lt;/li&gt; 

 &lt;li&gt;column,&lt;/li&gt; 

 &lt;li&gt;fit,&lt;/li&gt; 

 &lt;li&gt;form&lt;/li&gt;

 &lt;li&gt;table.&lt;/li&gt; 

 &lt;/ul&gt;

 &lt;p&gt;Specific config values for the chosen layout type can be specified using 

 layoutConfig.&lt;/p&gt;</description>

            <name>layout</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to automatically monitor window resize events to handle anything that is 

 sensitive to the current size of the viewport. This value is typically managed 

 by the chosen layout and should not need to be set manually.</description>

            <name>monitorResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to animate the transition when the panel is collapsed, false to skip 

 the animation (defaults to true if the Ext.Fx class is available, otherwise 

 false).</description>

            <name>animCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use overflow:'auto' on the panel's body element and show scroll bars 

 automatically when necessary, false to clip any overflowing content 

 (defaults to false).</description>

            <name>autoScroll</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The base CSS class to apply to this panel's element (defaults to 'x-panel').</description>

            <name>baseCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display an interior border on the body element of the panel, false 

 to hide it (defaults to true). This only applies when border == true. If 

 border == true and bodyBorder == false, the border will display as a 1px 

 wide inset border, giving the entire body element an inset appearance.</description>

            <name>bodyBorder</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Custom CSS styles to be applied to the body element in the format expected 

 by Ext.Element.applyStyles (defaults to null).</description>

            <name>bodyStyle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display the borders of the panel's body element, false to hide them 

 (defaults to true). By default, the border is a 2px wide inset border, but 

 this can be further altered by setting bodyBorder to false.</description>

            <name>border</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>When set to true (100 milliseconds) or a number of milliseconds, the 

 layout assigned for this container will buffer the frequency it calculates 

 and does a re-layout of components. This is useful for heavy containers 

 or containers with a large amount of sub components that frequent calls 

 to layout are expensive.</description>

            <name>bufferResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The alignment of any buttons added to this panel. Valid values are 'right,' 

 'left' and 'center' (defaults to 'right').</description>

            <name>buttonAlign</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to make sure the collapse/expand toggle button always renders first (to 

 the left of) any other tools in the panel's title bar, false to render it 

 last (defaults to true).</description>

            <name>collapseFirst</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to render the panel collapsed, false to render it expanded (defaults to false).</description>

            <name>collapsed</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS class to add to the panel's element after it has been collapsed (defaults 

 to 'x-panel-collapsed').</description>

            <name>collapsedCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to make the panel collapsible and have the expand/collapse toggle button 

 automatically rendered into the header tool button area, false to keep the 

 panel statically sized with no button (defaults to false).</description>

            <name>collapsible</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of an existing HTML node to use as the panel's body content (defaults to '').</description>

            <name>contentEl</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to enable dragging of this Panel (defaults to false). For custom drag/drop 

 implementations, an Ext.Panel.DD config could also be passed in this config 

 instead of true, although Ext.Panel.DD is an internal, undocumented class.</description>

            <name>draggable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A comma-delimited list of panel elements to initialize when the panel is 

 rendered. Normally, this list will be generated automatically based on the items 

 added to the panel at config time, but sometimes it might be useful to make 

 sure a structural element is rendered even if not specified at config time 

 (for example, you may want to add a button or toolbar dynamically after the 

 panel has been rendered). Adding those elements to this list will allocate 

 the required placeholders in the panel when it is rendered. 

 Valid values are

 &lt;ul&gt;

 &lt;li&gt;header&lt;/li&gt;

 &lt;li&gt;tbar (top bar)&lt;/li&gt;

 &lt;li&gt;body&lt;/li&gt;

 &lt;li&gt;bbar (bottom bar)&lt;/li&gt;

 &lt;li&gt;footer&lt;/li&gt;

 &lt;/ul&gt;

 Defaults to 'body'.</description>

            <name>elements</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to float the panel (absolute position it with automatic shimming and shadow), 

 false to display it inline where it is rendered (defaults to false). Note that 

 by default, setting floating to true will cause the panel to display at negative 

 offsets so that it is hidden -- because the panel is absolute positioned, the 

 position must be set explicitly after render (e.g., myPanel.setPosition(100,100);). 

 Also, when floating a panel you should always assign a fixed width, otherwise it 

 will be auto width and will expand to fill to the right edge of the viewport.</description>

            <name>floating</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to create the footer element explicitly, false to skip creating it. By 

 default, when footer is not specified, if one or more buttons have been added 

 to the panel the footer will be created automatically, otherwise it will not.</description>

            <name>footer</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Shows a nice rounded corner with a thick border around the panel.</description>

            <name>frame</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to create the header element explicitly, false to skip creating it. By 

 default, when header is not specified, if a title is set the header will be 

 created automatically, otherwise it will not. If a title is set but header is 

 explicitly set to false, the header will not be rendered.</description>

            <name>header</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display the panel title in the header, false to hide it (defaults to true).</description>

            <name>headerAsText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the expand/collapse toggle button when collapsible = true, false 

 to display it (defaults to false).</description>

            <name>hideCollapseTool</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An HTML fragment, or a DomHelper specification to use as the panel's body 

 content (defaults to '').</description>

            <name>html</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS class that will provide a background image to be used as the panel header 

 icon (defaults to '').</description>

            <name>iconCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to mask the panel when it is disabled, false to not mask it (defaults 

 to true). Either way, the panel will always tell its contained elements to 

 disable themselves when it is disabled, but masking the panel can provide an 

 additional visual cue that the panel is disabled.</description>

            <name>maskDisabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Minimum width in pixels of all buttons in this panel (defaults to 75)</description>

            <name>minButtonWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True (or a valid Ext.Shadow Ext.Shadow.mode value) to display a shadow behind 

 the panel, false to display no shadow (defaults to 'sides'). Note that this 

 option only applies when floating = true.</description>

            <name>shadow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The number of pixels to offset the shadow if displayed (defaults to 4). Note 

 that this option only applies when floating = true.</description>

            <name>shadowOffset</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>False to disable the iframe shim in browsers which need one (defaults to true). 

 Note that this option only applies when floating = true.</description>

            <name>shim</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Adds a tooltip when mousing over the tab of a Ext.Panel which is an item of a 

 Ext.TabPanel. Ext.QuickTips.init() must be called in order for the tips to render.</description>

            <name>tabTip</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The title text to display in the panel header (defaults to ''). When a title 

 is specified the header element will automatically be created and displayed 

 unless header is explicitly set to false. If you don't want to specify a title 

 at config time, but you may want one later, you must either specify a non-empty 

 title (a blank space ' ' will do) or header:true so that the container element 

 will get created.</description>

            <name>title</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to allow expanding and collapsing the panel (when collapsible = true) 

 by clicking anywhere in the header bar, false to allow it only by clicking to 

 tool button (defaults to false).</description>

            <name>titleCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If border layout is used then you can set this option to true to place a splitbar 

 between the panels.</description>

            <name>split</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>xtype</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If anchor layout is used you can set an anchor value here.</description>

            <name>anchor</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If absolute layout is used you can set an absolute X position in pixels to place the component in

 the layout.</description>

            <name>x</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If absolute layout is used you can set an absolute Y position in pixels to place the component in

 the layout.</description>

            <name>y</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If column layout is used you can give a float column width from 0 to 1. Valid example: .5</description>

            <name>columnWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If table layout is used you can set rowspan as in an ordinary table.</description>

            <name>rowSpan</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If table layout is used you can set colspan as in an ordinary table.</description>

            <name>colSpan</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to swap the position of each panel as it is expanded so that it becomes the first item 

 in the container, false to keep the panels in the rendered order. This is NOT compatible 

 with "animate:true" (defaults to false).</description>

            <name>activeOnTop</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to slide the contained panels open and closed during expand/collapse using animation, 

 false to open and close directly with no animation (defaults to false). Note: to defer to 

 the specific config setting of each contained panel for this property, set this to undefined 

 at the layout level.</description>

            <name>animate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use width:'auto', false to use fixed width (defaults to false).</description>

            <name>autoWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to make sure the collapse/expand toggle button always renders first (to 

 the left of) any other tools in the panel's title bar, false to render it 

 last (defaults to true).</description>

            <name>collapseFirst</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to adjust the active item's height to fill the available space in the container, 

 false to use the item's current height, or auto height if not explicitly set 

 (defaults to true).</description>

            <name>fill</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the expand/collapse toggle button when collapsible = true, false 

 to display it (defaults to false).</description>

            <name>hideCollapseTool</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Experimental. If animate is set to true, this will result in each animation running in 

 sequence.</description>

            <name>sequence</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to allow expanding and collapsing the panel (when collapsible = true) 

 by clicking anywhere in the header bar, false to allow it only by clicking to 

 tool button (defaults to false).</description>

            <name>titleCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is destroyed. Return false to stop the destroy.&lt;p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is hidden. Return false to stop the hide.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is rendered. Return false to stop the render. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is shown. Return false to stop the show. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is restored. Return false to stop the restore.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is saved to the 

 configured state provider. Return false to stop the save. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is destroyed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is disabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is enabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEnable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is hidden. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is rendered.  &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is shown.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is restored. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is saved to the configured state provider. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is moved. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;x&lt;/strong&gt;: (Number)The new x position&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;y&lt;/strong&gt;: (Number)The new y position&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is resized.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjWidth&lt;/strong&gt;:(Number) The box-adjusted width that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjHeight&lt;/strong&gt;:(Number) The box-adjusted height that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawWidth&lt;/strong&gt;:(Number) The width that was originally specified&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawHeight&lt;/strong&gt;:(Number) The height that was originally specified&lt;/li&gt; 		

 &lt;/ul&gt;</description>

            <name>onResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after any Ext.Component is added or inserted into the container.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;:(Ext.Component) The component that was added&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the component was added to the container's items collection&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAdd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the components in this container are arranged by the associated layout manager. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;layout&lt;/strong&gt;:(ContainerLayout) The ContainerLayout implementation for this container&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAfterLayout</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before any Ext.Component is added or inserted into the container. A handler can return false to cancel the add.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;:(Ext.Component) The component being added&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the component will be added to the container's items collection&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeAdd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before any Ext.Component is removed from the container. A handler can return false to cancel the remove. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: (Ext.Component) The component being removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after any Ext.Component is removed from the container&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: (Ext.Component) The component that was removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been visually activated. Note that Panels do not directly support 

 being activated, but some Panel subclasses do (like Ext.Window). Panels which are child Components 

 of a TabPanel fire the activate and deactivate events under the control of the TabPanel. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been activated.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onActivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is closed. Note that Panels do not directly support being closed, but some

  Panel subclasses do (like Ext.Window). This event only applies to such subclasses. A handler can 

  return false to cancel the close. &lt;/p&gt;

  Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel being closed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeClose</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is collapsed. A handler can return false to cancel the collapse. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel being collapsed.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;animate&lt;/strong&gt;:(Boolean) True if the collapse is animated, else false.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is expanded. A handler can return false to cancel the expand. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel being expanded.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;animate&lt;/strong&gt;:(Boolean) True if the expand is animated, else false.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been resized. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel which has been resized.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;width&lt;/strong&gt;:(Number) The Panel's new width.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;height &lt;/strong&gt;:(Number) The Panel's new height.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBodyResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel is closed. Note that Panels do not directly support being closed, but 

 some Panel subclasses do (like Ext.Window). &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been closed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onClose</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been collapsed. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel that has been collapsed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been visually deactivated. Note that Panels do not directly support 

 being deactivated, but some Panel subclasses do (like Ext.Window). Panels which are child Components

 of a TabPanel fire the activate and deactivate events under the control of the TabPanel. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been deactivated.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDeactivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been expanded. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been expanded.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel title has been set or changed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel which has had its title changed.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;The&lt;/strong&gt;:(String) new title.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onTitleChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>The base class for all items that render into menus. BaseItem provides default rendering, activated 

 state management and base configuration options shared by all menu components.</description>

		<name>menuBaseItem</name>

		<tag-class>isola.tags.ext.menu.BaseItemTag</tag-class>

		<body-content>empty</body-content>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Whether the component can move the Dom node when rendering (defaults to true).</description>

            <name>allowDomMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element corresponding 

 to a DIV that is already present in the document that specifies some 

 structural markup for this component. When applyTo is used, constituent 

 parts of the component can also be specified by id or CSS class name 

 within the main element, and the component being created may attempt to 

 create its subcomponents from that markup if applicable. Using this 

 config, a call to render() is not required. If applyTo is specified, 

 any value passed for renderTo will be ignored and the target element's 

 parent node will automatically be used as the component's container.</description>

            <name>applyTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the component should check for hidden classes (e.g. 'x-hidden' 

 or 'x-hide-display') and remove them on render (defaults to false).</description>

            <name>autoShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 Element (defaults to ''). This can be useful for adding customized styles 

 to the component or any of its children using standard CSS rules.</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 container (defaults to ''). This can be useful for adding customized 

 styles to the container or any of its children using standard CSS rules.</description>

            <name>ctCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class added to the component when it is disabled (defaults to 

 "x-item-disabled").</description>

            <name>disabledClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide and show the component's container when hide/show is 

 called on the component, false to hide and show the component itself 

 (defaults to false). For example, this can be used as a shortcut 

 for a hide button on a window by setting hide:true on the button when 

 adding it to its parent container.</description>

            <name>hideParent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id of this component (defaults to an auto-assigned id).</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element that will be the 

 container to render this component into. Using this config, a call to 

 render() is not required.</description>

            <name>renderTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id for this component to use for state management purposes 

 (defaults to the component id). See stateful for an explanation of saving 

 and restoring Component state.</description>

            <name>stateId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;A flag which causes the Component to attempt to restore the state of 

 internal properties from a saved state on startup.&lt;/p&gt;

 

 &lt;p&gt;For state saving to work, the state manager's provider must have been 

 set to an implementation of Ext.state.Provider which overrides the set 

 and get methods to save and recall name/value pairs. A built-in 

 implementation, Ext.state.CookieProvider is available.&lt;/p&gt;

 

 &lt;p&gt;To set the state provider for the current page:&lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;Components attempt to save state when one of the events listed in the stateEvents 

 configuration fires.&lt;/p&gt;

 

 &lt;p&gt;You can perform extra processing on state save and restore by attaching 

 handlers to the beforestaterestore, staterestore, beforestatesave and statesave 

 events.&lt;/p&gt;</description>

            <name>stateful</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom style specification to be applied to this component's Element. Should 

 be a valid argument to Ext.Element.applyStyles.</description>

            <name>style</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Where to place this component. Valid values are south, north, west, east, center</description>

            <name>region</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>How this component should hidden. Supported values are "visibility" 

 (css visibility), "offsets" (negative offset position) and "display" 

 (css display) - defaults to "display".</description>

            <name>hideMode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to use when the item becomes activated (defaults to "x-menu-item-active")</description>

            <name>activeClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if this item can be visually activated (defaults to false)</description>

            <name>canActivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A function that will handle the click event of this menu item (defaults to undefined)</description>

            <name>handler</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Length of time in milliseconds to wait before hiding after a click (defaults to 100)</description>

            <name>hideDelay</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the containing menu after this item is clicked (defaults to true)</description>

            <name>hideOnClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The scope in which the handler function will be called.</description>

            <name>scope</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is destroyed. Return false to stop the destroy.&lt;p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is hidden. Return false to stop the hide.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is rendered. Return false to stop the render. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is shown. Return false to stop the show. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is restored. Return false to stop the restore.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is saved to the 

 configured state provider. Return false to stop the save. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is destroyed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is disabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is enabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEnable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is hidden. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is rendered.  &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is shown.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is restored. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is saved to the configured state provider. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>The base class for all items that render into menus. BaseItem provides default rendering, activated 

 state management and base configuration options shared by all menu components.</description>

		<name>menuAdapter</name>

		<tag-class>isola.tags.ext.menu.BaseItemTag</tag-class>

		<body-content>empty</body-content>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Whether the component can move the Dom node when rendering (defaults to true).</description>

            <name>allowDomMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element corresponding 

 to a DIV that is already present in the document that specifies some 

 structural markup for this component. When applyTo is used, constituent 

 parts of the component can also be specified by id or CSS class name 

 within the main element, and the component being created may attempt to 

 create its subcomponents from that markup if applicable. Using this 

 config, a call to render() is not required. If applyTo is specified, 

 any value passed for renderTo will be ignored and the target element's 

 parent node will automatically be used as the component's container.</description>

            <name>applyTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the component should check for hidden classes (e.g. 'x-hidden' 

 or 'x-hide-display') and remove them on render (defaults to false).</description>

            <name>autoShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 Element (defaults to ''). This can be useful for adding customized styles 

 to the component or any of its children using standard CSS rules.</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 container (defaults to ''). This can be useful for adding customized 

 styles to the container or any of its children using standard CSS rules.</description>

            <name>ctCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class added to the component when it is disabled (defaults to 

 "x-item-disabled").</description>

            <name>disabledClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide and show the component's container when hide/show is 

 called on the component, false to hide and show the component itself 

 (defaults to false). For example, this can be used as a shortcut 

 for a hide button on a window by setting hide:true on the button when 

 adding it to its parent container.</description>

            <name>hideParent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id of this component (defaults to an auto-assigned id).</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element that will be the 

 container to render this component into. Using this config, a call to 

 render() is not required.</description>

            <name>renderTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id for this component to use for state management purposes 

 (defaults to the component id). See stateful for an explanation of saving 

 and restoring Component state.</description>

            <name>stateId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;A flag which causes the Component to attempt to restore the state of 

 internal properties from a saved state on startup.&lt;/p&gt;

 

 &lt;p&gt;For state saving to work, the state manager's provider must have been 

 set to an implementation of Ext.state.Provider which overrides the set 

 and get methods to save and recall name/value pairs. A built-in 

 implementation, Ext.state.CookieProvider is available.&lt;/p&gt;

 

 &lt;p&gt;To set the state provider for the current page:&lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;Components attempt to save state when one of the events listed in the stateEvents 

 configuration fires.&lt;/p&gt;

 

 &lt;p&gt;You can perform extra processing on state save and restore by attaching 

 handlers to the beforestaterestore, staterestore, beforestatesave and statesave 

 events.&lt;/p&gt;</description>

            <name>stateful</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom style specification to be applied to this component's Element. Should 

 be a valid argument to Ext.Element.applyStyles.</description>

            <name>style</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Where to place this component. Valid values are south, north, west, east, center</description>

            <name>region</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>How this component should hidden. Supported values are "visibility" 

 (css visibility), "offsets" (negative offset position) and "display" 

 (css display) - defaults to "display".</description>

            <name>hideMode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to use when the item becomes activated (defaults to "x-menu-item-active")</description>

            <name>activeClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if this item can be visually activated (defaults to false)</description>

            <name>canActivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A function that will handle the click event of this menu item (defaults to undefined)</description>

            <name>handler</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Length of time in milliseconds to wait before hiding after a click (defaults to 100)</description>

            <name>hideDelay</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the containing menu after this item is clicked (defaults to true)</description>

            <name>hideOnClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The scope in which the handler function will be called.</description>

            <name>scope</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is destroyed. Return false to stop the destroy.&lt;p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is hidden. Return false to stop the hide.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is rendered. Return false to stop the render. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is shown. Return false to stop the show. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is restored. Return false to stop the restore.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is saved to the 

 configured state provider. Return false to stop the save. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is destroyed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is disabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is enabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEnable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is hidden. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is rendered.  &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is shown.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is restored. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is saved to the configured state provider. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>A base class for all menu items that require menu-related functionality (like sub-menus) and are not 

 static display items. Item extends the base functionality of Ext.menu.BaseItem by adding menu-specific 

 activation and click handling.</description>

		<name>menuItem</name>

		<tag-class>isola.tags.ext.menu.ItemTag</tag-class>

		<body-content>JSP</body-content>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Whether the component can move the Dom node when rendering (defaults to true).</description>

            <name>allowDomMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element corresponding 

 to a DIV that is already present in the document that specifies some 

 structural markup for this component. When applyTo is used, constituent 

 parts of the component can also be specified by id or CSS class name 

 within the main element, and the component being created may attempt to 

 create its subcomponents from that markup if applicable. Using this 

 config, a call to render() is not required. If applyTo is specified, 

 any value passed for renderTo will be ignored and the target element's 

 parent node will automatically be used as the component's container.</description>

            <name>applyTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the component should check for hidden classes (e.g. 'x-hidden' 

 or 'x-hide-display') and remove them on render (defaults to false).</description>

            <name>autoShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 Element (defaults to ''). This can be useful for adding customized styles 

 to the component or any of its children using standard CSS rules.</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 container (defaults to ''). This can be useful for adding customized 

 styles to the container or any of its children using standard CSS rules.</description>

            <name>ctCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class added to the component when it is disabled (defaults to 

 "x-item-disabled").</description>

            <name>disabledClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide and show the component's container when hide/show is 

 called on the component, false to hide and show the component itself 

 (defaults to false). For example, this can be used as a shortcut 

 for a hide button on a window by setting hide:true on the button when 

 adding it to its parent container.</description>

            <name>hideParent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id of this component (defaults to an auto-assigned id).</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element that will be the 

 container to render this component into. Using this config, a call to 

 render() is not required.</description>

            <name>renderTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id for this component to use for state management purposes 

 (defaults to the component id). See stateful for an explanation of saving 

 and restoring Component state.</description>

            <name>stateId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;A flag which causes the Component to attempt to restore the state of 

 internal properties from a saved state on startup.&lt;/p&gt;

 

 &lt;p&gt;For state saving to work, the state manager's provider must have been 

 set to an implementation of Ext.state.Provider which overrides the set 

 and get methods to save and recall name/value pairs. A built-in 

 implementation, Ext.state.CookieProvider is available.&lt;/p&gt;

 

 &lt;p&gt;To set the state provider for the current page:&lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;Components attempt to save state when one of the events listed in the stateEvents 

 configuration fires.&lt;/p&gt;

 

 &lt;p&gt;You can perform extra processing on state save and restore by attaching 

 handlers to the beforestaterestore, staterestore, beforestatesave and statesave 

 events.&lt;/p&gt;</description>

            <name>stateful</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom style specification to be applied to this component's Element. Should 

 be a valid argument to Ext.Element.applyStyles.</description>

            <name>style</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Where to place this component. Valid values are south, north, west, east, center</description>

            <name>region</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>How this component should hidden. Supported values are "visibility" 

 (css visibility), "offsets" (negative offset position) and "display" 

 (css display) - defaults to "display".</description>

            <name>hideMode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to use when the item becomes activated (defaults to "x-menu-item-active")</description>

            <name>activeClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if this item can be visually activated (defaults to false)</description>

            <name>canActivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A function that will handle the click event of this menu item (defaults to undefined)</description>

            <name>handler</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Length of time in milliseconds to wait before hiding after a click (defaults to 100)</description>

            <name>hideDelay</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the containing menu after this item is clicked (defaults to true)</description>

            <name>hideOnClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The scope in which the handler function will be called.</description>

            <name>scope</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The href attribute to use for the underlying anchor link (defaults to '#').</description>

            <name>href</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The target attribute to use for the underlying anchor link (defaults to '').</description>

            <name>hrefTarget</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The path to an icon to display in this item (defaults to Ext.BLANK_IMAGE_URL). If icon is 

 specified iconCls should not be.</description>

            <name>icon</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS class that specifies a background image that will be used as the icon for this item 

 (defaults to ''). If iconCls is specified icon should not be.</description>

            <name>iconCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default CSS class to use for menu items (defaults to 'x-menu-item')</description>

            <name>itemCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Length of time in milliseconds to wait before showing this item (defaults to 200)</description>

            <name>showDelay</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The text to display in this item (defaults to '').</description>

            <name>text</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is destroyed. Return false to stop the destroy.&lt;p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is hidden. Return false to stop the hide.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is rendered. Return false to stop the render. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is shown. Return false to stop the show. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is restored. Return false to stop the restore.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is saved to the 

 configured state provider. Return false to stop the save. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is destroyed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is disabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is enabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEnable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is hidden. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is rendered.  &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is shown.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is restored. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is saved to the configured state provider. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>Adds a menu item that contains a checkbox by default, but can also be part of a radio group.</description>

		<name>menuCheckItem</name>

		<tag-class>isola.tags.ext.menu.CheckItemTag</tag-class>

		<body-content>empty</body-content>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Whether the component can move the Dom node when rendering (defaults to true).</description>

            <name>allowDomMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element corresponding 

 to a DIV that is already present in the document that specifies some 

 structural markup for this component. When applyTo is used, constituent 

 parts of the component can also be specified by id or CSS class name 

 within the main element, and the component being created may attempt to 

 create its subcomponents from that markup if applicable. Using this 

 config, a call to render() is not required. If applyTo is specified, 

 any value passed for renderTo will be ignored and the target element's 

 parent node will automatically be used as the component's container.</description>

            <name>applyTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the component should check for hidden classes (e.g. 'x-hidden' 

 or 'x-hide-display') and remove them on render (defaults to false).</description>

            <name>autoShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 Element (defaults to ''). This can be useful for adding customized styles 

 to the component or any of its children using standard CSS rules.</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 container (defaults to ''). This can be useful for adding customized 

 styles to the container or any of its children using standard CSS rules.</description>

            <name>ctCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class added to the component when it is disabled (defaults to 

 "x-item-disabled").</description>

            <name>disabledClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide and show the component's container when hide/show is 

 called on the component, false to hide and show the component itself 

 (defaults to false). For example, this can be used as a shortcut 

 for a hide button on a window by setting hide:true on the button when 

 adding it to its parent container.</description>

            <name>hideParent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id of this component (defaults to an auto-assigned id).</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element that will be the 

 container to render this component into. Using this config, a call to 

 render() is not required.</description>

            <name>renderTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id for this component to use for state management purposes 

 (defaults to the component id). See stateful for an explanation of saving 

 and restoring Component state.</description>

            <name>stateId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;A flag which causes the Component to attempt to restore the state of 

 internal properties from a saved state on startup.&lt;/p&gt;

 

 &lt;p&gt;For state saving to work, the state manager's provider must have been 

 set to an implementation of Ext.state.Provider which overrides the set 

 and get methods to save and recall name/value pairs. A built-in 

 implementation, Ext.state.CookieProvider is available.&lt;/p&gt;

 

 &lt;p&gt;To set the state provider for the current page:&lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;Components attempt to save state when one of the events listed in the stateEvents 

 configuration fires.&lt;/p&gt;

 

 &lt;p&gt;You can perform extra processing on state save and restore by attaching 

 handlers to the beforestaterestore, staterestore, beforestatesave and statesave 

 events.&lt;/p&gt;</description>

            <name>stateful</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom style specification to be applied to this component's Element. Should 

 be a valid argument to Ext.Element.applyStyles.</description>

            <name>style</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Where to place this component. Valid values are south, north, west, east, center</description>

            <name>region</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>How this component should hidden. Supported values are "visibility" 

 (css visibility), "offsets" (negative offset position) and "display" 

 (css display) - defaults to "display".</description>

            <name>hideMode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to use when the item becomes activated (defaults to "x-menu-item-active")</description>

            <name>activeClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if this item can be visually activated (defaults to false)</description>

            <name>canActivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A function that will handle the click event of this menu item (defaults to undefined)</description>

            <name>handler</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Length of time in milliseconds to wait before hiding after a click (defaults to 100)</description>

            <name>hideDelay</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the containing menu after this item is clicked (defaults to true)</description>

            <name>hideOnClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The scope in which the handler function will be called.</description>

            <name>scope</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The href attribute to use for the underlying anchor link (defaults to '#').</description>

            <name>href</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The target attribute to use for the underlying anchor link (defaults to '').</description>

            <name>hrefTarget</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The path to an icon to display in this item (defaults to Ext.BLANK_IMAGE_URL). If icon is 

 specified iconCls should not be.</description>

            <name>icon</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS class that specifies a background image that will be used as the icon for this item 

 (defaults to ''). If iconCls is specified icon should not be.</description>

            <name>iconCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default CSS class to use for menu items (defaults to 'x-menu-item')</description>

            <name>itemCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Length of time in milliseconds to wait before showing this item (defaults to 200)</description>

            <name>showDelay</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The text to display in this item (defaults to '').</description>

            <name>text</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to initialize this checkbox as checked (defaults to false). Note that if this checkbox 

 is part of a radio group (group = true) only the last item in the group that is initialized 

 with checked = true will be rendered as checked.</description>

            <name>checked</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>All check items with the same group name will automatically be grouped into a single-select 

 radio button group (defaults to '')</description>

            <name>group</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default CSS class to use for radio group check items (defaults to "x-menu-group-item")</description>

            <name>groupClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is destroyed. Return false to stop the destroy.&lt;p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is hidden. Return false to stop the hide.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is rendered. Return false to stop the render. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is shown. Return false to stop the show. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is restored. Return false to stop the restore.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is saved to the 

 configured state provider. Return false to stop the save. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is destroyed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is disabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is enabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEnable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is hidden. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is rendered.  &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is shown.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is restored. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is saved to the configured state provider. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the checked value is set, providing an opportunity to cancel if needed &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.menu.CheckItem&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;checked&lt;/strong&gt; : (Boolean) The new checked value that will be set&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeCheckChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the checked value has been set &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.menu.CheckItem&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;checked&lt;/strong&gt; : (Boolean) The checked value that was set&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onCheckChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>A menu item that wraps the Ext.ColorPalette component.</description>

		<name>menuColorItem</name>

		<tag-class>isola.tags.ext.menu.ColorItemTag</tag-class>

		<body-content>empty</body-content>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Whether the component can move the Dom node when rendering (defaults to true).</description>

            <name>allowDomMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element corresponding 

 to a DIV that is already present in the document that specifies some 

 structural markup for this component. When applyTo is used, constituent 

 parts of the component can also be specified by id or CSS class name 

 within the main element, and the component being created may attempt to 

 create its subcomponents from that markup if applicable. Using this 

 config, a call to render() is not required. If applyTo is specified, 

 any value passed for renderTo will be ignored and the target element's 

 parent node will automatically be used as the component's container.</description>

            <name>applyTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the component should check for hidden classes (e.g. 'x-hidden' 

 or 'x-hide-display') and remove them on render (defaults to false).</description>

            <name>autoShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 Element (defaults to ''). This can be useful for adding customized styles 

 to the component or any of its children using standard CSS rules.</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 container (defaults to ''). This can be useful for adding customized 

 styles to the container or any of its children using standard CSS rules.</description>

            <name>ctCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class added to the component when it is disabled (defaults to 

 "x-item-disabled").</description>

            <name>disabledClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide and show the component's container when hide/show is 

 called on the component, false to hide and show the component itself 

 (defaults to false). For example, this can be used as a shortcut 

 for a hide button on a window by setting hide:true on the button when 

 adding it to its parent container.</description>

            <name>hideParent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id of this component (defaults to an auto-assigned id).</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element that will be the 

 container to render this component into. Using this config, a call to 

 render() is not required.</description>

            <name>renderTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id for this component to use for state management purposes 

 (defaults to the component id). See stateful for an explanation of saving 

 and restoring Component state.</description>

            <name>stateId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;A flag which causes the Component to attempt to restore the state of 

 internal properties from a saved state on startup.&lt;/p&gt;

 

 &lt;p&gt;For state saving to work, the state manager's provider must have been 

 set to an implementation of Ext.state.Provider which overrides the set 

 and get methods to save and recall name/value pairs. A built-in 

 implementation, Ext.state.CookieProvider is available.&lt;/p&gt;

 

 &lt;p&gt;To set the state provider for the current page:&lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;Components attempt to save state when one of the events listed in the stateEvents 

 configuration fires.&lt;/p&gt;

 

 &lt;p&gt;You can perform extra processing on state save and restore by attaching 

 handlers to the beforestaterestore, staterestore, beforestatesave and statesave 

 events.&lt;/p&gt;</description>

            <name>stateful</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom style specification to be applied to this component's Element. Should 

 be a valid argument to Ext.Element.applyStyles.</description>

            <name>style</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Where to place this component. Valid values are south, north, west, east, center</description>

            <name>region</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>How this component should hidden. Supported values are "visibility" 

 (css visibility), "offsets" (negative offset position) and "display" 

 (css display) - defaults to "display".</description>

            <name>hideMode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to use when the item becomes activated (defaults to "x-menu-item-active")</description>

            <name>activeClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if this item can be visually activated (defaults to false)</description>

            <name>canActivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A function that will handle the click event of this menu item (defaults to undefined)</description>

            <name>handler</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Length of time in milliseconds to wait before hiding after a click (defaults to 100)</description>

            <name>hideDelay</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the containing menu after this item is clicked (defaults to true)</description>

            <name>hideOnClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The scope in which the handler function will be called.</description>

            <name>scope</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is destroyed. Return false to stop the destroy.&lt;p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is hidden. Return false to stop the hide.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is rendered. Return false to stop the render. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is shown. Return false to stop the show. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is restored. Return false to stop the restore.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is saved to the 

 configured state provider. Return false to stop the save. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is destroyed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is disabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is enabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEnable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is hidden. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is rendered.  &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is shown.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is restored. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is saved to the configured state provider. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>A menu item that wraps the Ext.DatePicker component.</description>

		<name>menuDateItem</name>

		<tag-class>isola.tags.ext.menu.DateItemTag</tag-class>

		<body-content>empty</body-content>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Whether the component can move the Dom node when rendering (defaults to true).</description>

            <name>allowDomMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element corresponding 

 to a DIV that is already present in the document that specifies some 

 structural markup for this component. When applyTo is used, constituent 

 parts of the component can also be specified by id or CSS class name 

 within the main element, and the component being created may attempt to 

 create its subcomponents from that markup if applicable. Using this 

 config, a call to render() is not required. If applyTo is specified, 

 any value passed for renderTo will be ignored and the target element's 

 parent node will automatically be used as the component's container.</description>

            <name>applyTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the component should check for hidden classes (e.g. 'x-hidden' 

 or 'x-hide-display') and remove them on render (defaults to false).</description>

            <name>autoShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 Element (defaults to ''). This can be useful for adding customized styles 

 to the component or any of its children using standard CSS rules.</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 container (defaults to ''). This can be useful for adding customized 

 styles to the container or any of its children using standard CSS rules.</description>

            <name>ctCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class added to the component when it is disabled (defaults to 

 "x-item-disabled").</description>

            <name>disabledClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide and show the component's container when hide/show is 

 called on the component, false to hide and show the component itself 

 (defaults to false). For example, this can be used as a shortcut 

 for a hide button on a window by setting hide:true on the button when 

 adding it to its parent container.</description>

            <name>hideParent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id of this component (defaults to an auto-assigned id).</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element that will be the 

 container to render this component into. Using this config, a call to 

 render() is not required.</description>

            <name>renderTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id for this component to use for state management purposes 

 (defaults to the component id). See stateful for an explanation of saving 

 and restoring Component state.</description>

            <name>stateId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;A flag which causes the Component to attempt to restore the state of 

 internal properties from a saved state on startup.&lt;/p&gt;

 

 &lt;p&gt;For state saving to work, the state manager's provider must have been 

 set to an implementation of Ext.state.Provider which overrides the set 

 and get methods to save and recall name/value pairs. A built-in 

 implementation, Ext.state.CookieProvider is available.&lt;/p&gt;

 

 &lt;p&gt;To set the state provider for the current page:&lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;Components attempt to save state when one of the events listed in the stateEvents 

 configuration fires.&lt;/p&gt;

 

 &lt;p&gt;You can perform extra processing on state save and restore by attaching 

 handlers to the beforestaterestore, staterestore, beforestatesave and statesave 

 events.&lt;/p&gt;</description>

            <name>stateful</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom style specification to be applied to this component's Element. Should 

 be a valid argument to Ext.Element.applyStyles.</description>

            <name>style</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Where to place this component. Valid values are south, north, west, east, center</description>

            <name>region</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>How this component should hidden. Supported values are "visibility" 

 (css visibility), "offsets" (negative offset position) and "display" 

 (css display) - defaults to "display".</description>

            <name>hideMode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to use when the item becomes activated (defaults to "x-menu-item-active")</description>

            <name>activeClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if this item can be visually activated (defaults to false)</description>

            <name>canActivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A function that will handle the click event of this menu item (defaults to undefined)</description>

            <name>handler</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Length of time in milliseconds to wait before hiding after a click (defaults to 100)</description>

            <name>hideDelay</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the containing menu after this item is clicked (defaults to true)</description>

            <name>hideOnClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The scope in which the handler function will be called.</description>

            <name>scope</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is destroyed. Return false to stop the destroy.&lt;p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is hidden. Return false to stop the hide.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is rendered. Return false to stop the render. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is shown. Return false to stop the show. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is restored. Return false to stop the restore.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is saved to the 

 configured state provider. Return false to stop the save. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is destroyed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is disabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is enabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEnable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is hidden. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is rendered.  &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is shown.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is restored. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is saved to the configured state provider. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>A menu object. This is the container to which you add all other menu items. Menu can also serve a 

 as a base class when you want a specialzed menu based off of another component (like Ext.menu.DateMenu 

 for example).</description>

		<name>menu</name>

		<tag-class>isola.tags.ext.menu.MenuTag</tag-class>

		<body-content>JSP</body-content>

		<attribute><description>True to allow multiple menus to be displayed at the same time (defaults to false)</description>

            <name>allowOtherMenus</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default {@link Ext.Element#alignTo) anchor position value for this menu relative to 

 its element of origin (defaults to "tl-bl?")</description>

            <name>defaultAlign</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The minimum width of the menu in pixels (defaults to 120)</description>

            <name>minWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True or "sides" for the default effect, "frame" for 4-way shadow, and "drop" for bottom-right shadow 

 (defaults to "sides")</description>

            <name>shadow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The Ext.Element.alignTo anchor position value to use for submenus of this menu (defaults to 

 "tl-tr?")</description>

            <name>subMenuAlign</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before this menu is hidden &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.menu.Menu&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before this menu is displayed &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.menu.Menu&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this menu is clicked (or when the enter key is pressed while it is active) &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.menu.Menu&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;menuItem&lt;/strong&gt; : (Ext.menu.Item) The menu item that was clicked&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after this menu is hidden&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.menu.Menu&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a menu item contained in this menu is clicked &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;baseItem&lt;/strong&gt; : (Ext.menu.BaseItem) The BaseItem that was clicked&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onItemClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the mouse exits this menu&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.menu.Menu&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;menuItem &lt;/strong&gt; : (Ext.menu.Item) The menu item that was clicked&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMouseOut</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the mouse is hovering over this menu&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.menu.Menu&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;menuItem &lt;/strong&gt; : (Ext.menu.Item) The menu item that was clicked&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMouseOver</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after this menu is displayed &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.menu.Menu&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>A menu containing a Ext.menu.ColorItem component (which provides a basic color picker).</description>

		<name>colorMenu</name>

		<tag-class>isola.tags.ext.menu.ColorMenuTag</tag-class>

		<body-content>JSP</body-content>

		<attribute><description>True to allow multiple menus to be displayed at the same time (defaults to false)</description>

            <name>allowOtherMenus</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default {@link Ext.Element#alignTo) anchor position value for this menu relative to 

 its element of origin (defaults to "tl-bl?")</description>

            <name>defaultAlign</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The minimum width of the menu in pixels (defaults to 120)</description>

            <name>minWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True or "sides" for the default effect, "frame" for 4-way shadow, and "drop" for bottom-right shadow 

 (defaults to "sides")</description>

            <name>shadow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The Ext.Element.alignTo anchor position value to use for submenus of this menu (defaults to 

 "tl-tr?")</description>

            <name>subMenuAlign</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before this menu is hidden &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.menu.Menu&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before this menu is displayed &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.menu.Menu&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this menu is clicked (or when the enter key is pressed while it is active) &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.menu.Menu&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;menuItem&lt;/strong&gt; : (Ext.menu.Item) The menu item that was clicked&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after this menu is hidden&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.menu.Menu&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a menu item contained in this menu is clicked &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;baseItem&lt;/strong&gt; : (Ext.menu.BaseItem) The BaseItem that was clicked&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onItemClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the mouse exits this menu&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.menu.Menu&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;menuItem &lt;/strong&gt; : (Ext.menu.Item) The menu item that was clicked&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMouseOut</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the mouse is hovering over this menu&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.menu.Menu&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;menuItem &lt;/strong&gt; : (Ext.menu.Item) The menu item that was clicked&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMouseOver</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after this menu is displayed &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.menu.Menu&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>A menu containing a Ext.menu.DateItem component (which provides a date picker).</description>

		<name>dateMenu</name>

		<tag-class>isola.tags.ext.menu.DateMenuTag</tag-class>

		<body-content>JSP</body-content>

		<attribute><description>True to allow multiple menus to be displayed at the same time (defaults to false)</description>

            <name>allowOtherMenus</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default {@link Ext.Element#alignTo) anchor position value for this menu relative to 

 its element of origin (defaults to "tl-bl?")</description>

            <name>defaultAlign</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The minimum width of the menu in pixels (defaults to 120)</description>

            <name>minWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True or "sides" for the default effect, "frame" for 4-way shadow, and "drop" for bottom-right shadow 

 (defaults to "sides")</description>

            <name>shadow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The Ext.Element.alignTo anchor position value to use for submenus of this menu (defaults to 

 "tl-tr?")</description>

            <name>subMenuAlign</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before this menu is hidden &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.menu.Menu&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before this menu is displayed &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.menu.Menu&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this menu is clicked (or when the enter key is pressed while it is active) &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.menu.Menu&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;menuItem&lt;/strong&gt; : (Ext.menu.Item) The menu item that was clicked&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after this menu is hidden&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.menu.Menu&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a menu item contained in this menu is clicked &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;baseItem&lt;/strong&gt; : (Ext.menu.BaseItem) The BaseItem that was clicked&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onItemClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the mouse exits this menu&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.menu.Menu&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;menuItem &lt;/strong&gt; : (Ext.menu.Item) The menu item that was clicked&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMouseOut</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the mouse is hovering over this menu&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.menu.Menu&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : Ext.EventObject&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;menuItem &lt;/strong&gt; : (Ext.menu.Item) The menu item that was clicked&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMouseOver</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after this menu is displayed &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.menu.Menu&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>Adds a separator bar to a menu, used to divide logical groups of menu items. Generally you 

 will add one of these by using "-" in you call to add() or in your items config rather than 

 creating one directly.</description>

		<name>menuSeparator</name>

		<tag-class>isola.tags.ext.menu.SeparatorTag</tag-class>

		<body-content>empty</body-content>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Whether the component can move the Dom node when rendering (defaults to true).</description>

            <name>allowDomMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element corresponding 

 to a DIV that is already present in the document that specifies some 

 structural markup for this component. When applyTo is used, constituent 

 parts of the component can also be specified by id or CSS class name 

 within the main element, and the component being created may attempt to 

 create its subcomponents from that markup if applicable. Using this 

 config, a call to render() is not required. If applyTo is specified, 

 any value passed for renderTo will be ignored and the target element's 

 parent node will automatically be used as the component's container.</description>

            <name>applyTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the component should check for hidden classes (e.g. 'x-hidden' 

 or 'x-hide-display') and remove them on render (defaults to false).</description>

            <name>autoShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 Element (defaults to ''). This can be useful for adding customized styles 

 to the component or any of its children using standard CSS rules.</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 container (defaults to ''). This can be useful for adding customized 

 styles to the container or any of its children using standard CSS rules.</description>

            <name>ctCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class added to the component when it is disabled (defaults to 

 "x-item-disabled").</description>

            <name>disabledClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide and show the component's container when hide/show is 

 called on the component, false to hide and show the component itself 

 (defaults to false). For example, this can be used as a shortcut 

 for a hide button on a window by setting hide:true on the button when 

 adding it to its parent container.</description>

            <name>hideParent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id of this component (defaults to an auto-assigned id).</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element that will be the 

 container to render this component into. Using this config, a call to 

 render() is not required.</description>

            <name>renderTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id for this component to use for state management purposes 

 (defaults to the component id). See stateful for an explanation of saving 

 and restoring Component state.</description>

            <name>stateId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;A flag which causes the Component to attempt to restore the state of 

 internal properties from a saved state on startup.&lt;/p&gt;

 

 &lt;p&gt;For state saving to work, the state manager's provider must have been 

 set to an implementation of Ext.state.Provider which overrides the set 

 and get methods to save and recall name/value pairs. A built-in 

 implementation, Ext.state.CookieProvider is available.&lt;/p&gt;

 

 &lt;p&gt;To set the state provider for the current page:&lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;Components attempt to save state when one of the events listed in the stateEvents 

 configuration fires.&lt;/p&gt;

 

 &lt;p&gt;You can perform extra processing on state save and restore by attaching 

 handlers to the beforestaterestore, staterestore, beforestatesave and statesave 

 events.&lt;/p&gt;</description>

            <name>stateful</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom style specification to be applied to this component's Element. Should 

 be a valid argument to Ext.Element.applyStyles.</description>

            <name>style</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Where to place this component. Valid values are south, north, west, east, center</description>

            <name>region</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>How this component should hidden. Supported values are "visibility" 

 (css visibility), "offsets" (negative offset position) and "display" 

 (css display) - defaults to "display".</description>

            <name>hideMode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to use when the item becomes activated (defaults to "x-menu-item-active")</description>

            <name>activeClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if this item can be visually activated (defaults to false)</description>

            <name>canActivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A function that will handle the click event of this menu item (defaults to undefined)</description>

            <name>handler</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Length of time in milliseconds to wait before hiding after a click (defaults to 100)</description>

            <name>hideDelay</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the containing menu after this item is clicked (defaults to true)</description>

            <name>hideOnClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The scope in which the handler function will be called.</description>

            <name>scope</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is destroyed. Return false to stop the destroy.&lt;p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is hidden. Return false to stop the hide.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is rendered. Return false to stop the render. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is shown. Return false to stop the show. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is restored. Return false to stop the restore.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is saved to the 

 configured state provider. Return false to stop the save. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is destroyed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is disabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is enabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEnable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is hidden. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is rendered.  &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is shown.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is restored. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is saved to the configured state provider. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>Adds a static text string to a menu, usually used as either a heading or group separator.</description>

		<name>menuTextItem</name>

		<tag-class>isola.tags.ext.menu.TextItemTag</tag-class>

		<body-content>empty</body-content>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Whether the component can move the Dom node when rendering (defaults to true).</description>

            <name>allowDomMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element corresponding 

 to a DIV that is already present in the document that specifies some 

 structural markup for this component. When applyTo is used, constituent 

 parts of the component can also be specified by id or CSS class name 

 within the main element, and the component being created may attempt to 

 create its subcomponents from that markup if applicable. Using this 

 config, a call to render() is not required. If applyTo is specified, 

 any value passed for renderTo will be ignored and the target element's 

 parent node will automatically be used as the component's container.</description>

            <name>applyTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the component should check for hidden classes (e.g. 'x-hidden' 

 or 'x-hide-display') and remove them on render (defaults to false).</description>

            <name>autoShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 Element (defaults to ''). This can be useful for adding customized styles 

 to the component or any of its children using standard CSS rules.</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 container (defaults to ''). This can be useful for adding customized 

 styles to the container or any of its children using standard CSS rules.</description>

            <name>ctCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class added to the component when it is disabled (defaults to 

 "x-item-disabled").</description>

            <name>disabledClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide and show the component's container when hide/show is 

 called on the component, false to hide and show the component itself 

 (defaults to false). For example, this can be used as a shortcut 

 for a hide button on a window by setting hide:true on the button when 

 adding it to its parent container.</description>

            <name>hideParent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id of this component (defaults to an auto-assigned id).</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element that will be the 

 container to render this component into. Using this config, a call to 

 render() is not required.</description>

            <name>renderTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id for this component to use for state management purposes 

 (defaults to the component id). See stateful for an explanation of saving 

 and restoring Component state.</description>

            <name>stateId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;A flag which causes the Component to attempt to restore the state of 

 internal properties from a saved state on startup.&lt;/p&gt;

 

 &lt;p&gt;For state saving to work, the state manager's provider must have been 

 set to an implementation of Ext.state.Provider which overrides the set 

 and get methods to save and recall name/value pairs. A built-in 

 implementation, Ext.state.CookieProvider is available.&lt;/p&gt;

 

 &lt;p&gt;To set the state provider for the current page:&lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;Components attempt to save state when one of the events listed in the stateEvents 

 configuration fires.&lt;/p&gt;

 

 &lt;p&gt;You can perform extra processing on state save and restore by attaching 

 handlers to the beforestaterestore, staterestore, beforestatesave and statesave 

 events.&lt;/p&gt;</description>

            <name>stateful</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom style specification to be applied to this component's Element. Should 

 be a valid argument to Ext.Element.applyStyles.</description>

            <name>style</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Where to place this component. Valid values are south, north, west, east, center</description>

            <name>region</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>How this component should hidden. Supported values are "visibility" 

 (css visibility), "offsets" (negative offset position) and "display" 

 (css display) - defaults to "display".</description>

            <name>hideMode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to use when the item becomes activated (defaults to "x-menu-item-active")</description>

            <name>activeClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if this item can be visually activated (defaults to false)</description>

            <name>canActivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A function that will handle the click event of this menu item (defaults to undefined)</description>

            <name>handler</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Length of time in milliseconds to wait before hiding after a click (defaults to 100)</description>

            <name>hideDelay</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the containing menu after this item is clicked (defaults to true)</description>

            <name>hideOnClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The scope in which the handler function will be called.</description>

            <name>scope</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the containing menu after this item is clicked (defaults to true)</description>

            <name>hideOnClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default CSS class to use for text items (defaults to "x-menu-text")</description>

            <name>itemCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The text to display for this item (defaults to '')</description>

            <name>text</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is destroyed. Return false to stop the destroy.&lt;p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is hidden. Return false to stop the hide.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is rendered. Return false to stop the render. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is shown. Return false to stop the show. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is restored. Return false to stop the restore.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is saved to the 

 configured state provider. Return false to stop the save. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is destroyed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is disabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is enabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEnable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is hidden. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is rendered.  &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is shown.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is restored. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is saved to the configured state provider. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>&lt;p&gt;A split button that provides a built-in dropdown arrow that can fire an event 

 separately from the default click event of the button. Typically this would be 

 used to display a dropdown menu that provides additional options to the 

 primary button action, but any custom handler can provide the arrowclick 

 implementation. Example usage:&lt;/p&gt;

 

 &lt;code&gt;&lt;pre&gt;

	&amp;lt;ext:formPanel url="deneme.jsp" id="myForm" renderTo="form-ct" width="400" bodyStyle="background-color:#EEEEEE;" border="false"&amp;gt;

		&amp;lt;ext:textArea name="area" fieldLabel="Text Area"/&amp;gt;

		&amp;lt;ext:splitButton text="Split Button" handler="alert('this is the handler');"&amp;gt;

			&amp;lt;ext:menu&amp;gt;

				&amp;lt;ext:menuTextItem text="Text Item" /&amp;gt;

				&amp;lt;ext:menuCheckItem text="Check Item" checked="true"/&amp;gt;

				&amp;lt;ext:menuSeparator/&amp;gt;

				&amp;lt;ext:menuDateItem /&amp;gt;

				&amp;lt;ext:menuColorItem /&amp;gt;

			&amp;lt;/ext:menu&amp;gt;

			&amp;lt;ext:menuTextItem /&amp;gt;

		&amp;lt;/ext:splitButton&amp;gt;

		&amp;lt;ext:button type="submit" text="Go!" /&amp;gt;

	&amp;lt;/ext:formPanel&amp;gt;

 &lt;/pre&gt;&lt;/code&gt;</description>

		<name>splitButton</name>

		<tag-class>isola.tags.ext.form.SplitButtonTag</tag-class>

		<body-content>JSP</body-content>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Whether the component can move the Dom node when rendering (defaults to true).</description>

            <name>allowDomMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element corresponding 

 to a DIV that is already present in the document that specifies some 

 structural markup for this component. When applyTo is used, constituent 

 parts of the component can also be specified by id or CSS class name 

 within the main element, and the component being created may attempt to 

 create its subcomponents from that markup if applicable. Using this 

 config, a call to render() is not required. If applyTo is specified, 

 any value passed for renderTo will be ignored and the target element's 

 parent node will automatically be used as the component's container.</description>

            <name>applyTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the component should check for hidden classes (e.g. 'x-hidden' 

 or 'x-hide-display') and remove them on render (defaults to false).</description>

            <name>autoShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 Element (defaults to ''). This can be useful for adding customized styles 

 to the component or any of its children using standard CSS rules.</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 container (defaults to ''). This can be useful for adding customized 

 styles to the container or any of its children using standard CSS rules.</description>

            <name>ctCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class added to the component when it is disabled (defaults to 

 "x-item-disabled").</description>

            <name>disabledClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide and show the component's container when hide/show is 

 called on the component, false to hide and show the component itself 

 (defaults to false). For example, this can be used as a shortcut 

 for a hide button on a window by setting hide:true on the button when 

 adding it to its parent container.</description>

            <name>hideParent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id of this component (defaults to an auto-assigned id).</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element that will be the 

 container to render this component into. Using this config, a call to 

 render() is not required.</description>

            <name>renderTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id for this component to use for state management purposes 

 (defaults to the component id). See stateful for an explanation of saving 

 and restoring Component state.</description>

            <name>stateId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;A flag which causes the Component to attempt to restore the state of 

 internal properties from a saved state on startup.&lt;/p&gt;

 

 &lt;p&gt;For state saving to work, the state manager's provider must have been 

 set to an implementation of Ext.state.Provider which overrides the set 

 and get methods to save and recall name/value pairs. A built-in 

 implementation, Ext.state.CookieProvider is available.&lt;/p&gt;

 

 &lt;p&gt;To set the state provider for the current page:&lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;Components attempt to save state when one of the events listed in the stateEvents 

 configuration fires.&lt;/p&gt;

 

 &lt;p&gt;You can perform extra processing on state save and restore by attaching 

 handlers to the beforestaterestore, staterestore, beforestatesave and statesave 

 events.&lt;/p&gt;</description>

            <name>stateful</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom style specification to be applied to this component's Element. Should 

 be a valid argument to Ext.Element.applyStyles.</description>

            <name>style</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Where to place this component. Valid values are south, north, west, east, center</description>

            <name>region</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>How this component should hidden. Supported values are "visibility" 

 (css visibility), "offsets" (negative offset position) and "display" 

 (css display) - defaults to "display".</description>

            <name>hideMode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The type of event to map to the button's event handler (defaults to 'click')</description>

            <name>clickEvent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to start disabled (defaults to false)</description>

            <name>disabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to enable pressed/not pressed toggling (defaults to false)</description>

            <name>enableToggle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>False to disable visual cues on mouseover, mouseout and mousedown (defaults to true)</description>

            <name>handleMouseEvents</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to start hidden (defaults to false)</description>

            <name>hidden</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The path to an image to display in the button (the image will be set as the 

 background-image CSS property of the button by default, so if you want a mixed 

 icon/text button, set cls:"x-btn-text-icon")</description>

            <name>icon</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A css class which sets a background image to be used as the icon for this button</description>

            <name>iconCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The position to align the menu to (see Ext.Element.alignTo for more details, 

 defaults to 'tl-bl?').</description>

            <name>menuAlign</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The minimum width for this button (used to give a set of buttons a common width)</description>

            <name>minWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to start pressed (only if enableToggle = true)</description>

            <name>pressed</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to repeat fire the click event while the mouse is down. This can also be an 

 Ext.util.ClickRepeater config object (defaults to false).</description>

            <name>repeat</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The scope of the handler</description>

            <name>scope</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Set a DOM tabIndex for this button (defaults to undefined)</description>

            <name>tabIndex</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Set a DOM tabIndex for this button (defaults to undefined)</description>

            <name>text</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The group this toggle button is a member of (only 1 per group can be 

 pressed, only applies if enableToggle = true)</description>

            <name>toggleGroup</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The tooltip for the button - can be a string or QuickTips config object</description>

            <name>tooltip</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>submit, reset or button - defaults to 'button'</description>

            <name>type</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A function called when the button is clicked (can be used instead of click event)</description>

            <name>handler</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A function called when the arrow button is clicked (can be used instead of click event)</description>

            <name>arrowHandler</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The title attribute of the arrow</description>

            <name>arrowTooltip</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The type of event to map to the button's event handler (defaults to 'click')</description>

            <name>clickEvent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this button's arrow is clicked &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : MenuButton&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (EventObject) The click event&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onArrowClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is destroyed. Return false to stop the destroy.&lt;p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is hidden. Return false to stop the hide.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is rendered. Return false to stop the render. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is shown. Return false to stop the show. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is restored. Return false to stop the restore.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is saved to the 

 configured state provider. Return false to stop the save. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is destroyed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is disabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is enabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEnable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is hidden. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is rendered.  &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is shown.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is restored. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is saved to the configured state provider. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this button is clicked &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Button&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt;:(EventObject) The click event&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;If this button has a menu, this event fires when it is hidden&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Button&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;menu&lt;/strong&gt;: Menu&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMenuHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;If this button has a menu, this event fires when it is shown &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Button&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;menu&lt;/strong&gt;: Menu&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMenuShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;If this button has a menu, this event fires when the mouse leaves the menu triggering element &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Button&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;menu&lt;/strong&gt;: Menu&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt;: EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMenuTriggerOut</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;If this button has a menu, this event fires when the mouse enters the menu triggering element &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Button&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;menu&lt;/strong&gt;: Menu&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt;: EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMenuTriggerOver</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the mouse exits the button &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Button&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt;:(Event) The event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMouseOut</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the mouse hovers over the button&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Button&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt;:(Event) The event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMouseOver</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the "pressed" state of this button changes (only if enableToggle = true) &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Button&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;pressed&lt;/strong&gt;: Boolean&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onToggle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>&lt;p&gt;A specialized SplitButton that contains a menu of Ext.menu.CheckItem elements. 

 The button automatically cycles through each menu item on click, raising the 

 button's change event (or calling the button's changeHandler function, if 

 supplied) for the active menu item. Clicking on the arrow section of the button 

 displays the dropdown menu just like a normal SplitButton. Example usage:&lt;/p&gt;

 

 &lt;code&gt;&lt;pre&gt;

	&amp;lt;ext:cycleButton&amp;gt;

		&amp;lt;ext:menuCheckItem text="Test 1" handler="alert('test1 clicked');"/&amp;gt;

		&amp;lt;ext:menuCheckItem checked="true" text="Test 2" handler="alert('test2 clicked');"/&amp;gt;

	&amp;lt;/ext:cycleButton&amp;gt;

 &lt;/pre&gt;&lt;/code&gt;</description>

		<name>cycleButton</name>

		<tag-class>isola.tags.ext.form.CycleButtonTag</tag-class>

		<body-content>JSP</body-content>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Whether the component can move the Dom node when rendering (defaults to true).</description>

            <name>allowDomMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element corresponding 

 to a DIV that is already present in the document that specifies some 

 structural markup for this component. When applyTo is used, constituent 

 parts of the component can also be specified by id or CSS class name 

 within the main element, and the component being created may attempt to 

 create its subcomponents from that markup if applicable. Using this 

 config, a call to render() is not required. If applyTo is specified, 

 any value passed for renderTo will be ignored and the target element's 

 parent node will automatically be used as the component's container.</description>

            <name>applyTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the component should check for hidden classes (e.g. 'x-hidden' 

 or 'x-hide-display') and remove them on render (defaults to false).</description>

            <name>autoShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 Element (defaults to ''). This can be useful for adding customized styles 

 to the component or any of its children using standard CSS rules.</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 container (defaults to ''). This can be useful for adding customized 

 styles to the container or any of its children using standard CSS rules.</description>

            <name>ctCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class added to the component when it is disabled (defaults to 

 "x-item-disabled").</description>

            <name>disabledClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide and show the component's container when hide/show is 

 called on the component, false to hide and show the component itself 

 (defaults to false). For example, this can be used as a shortcut 

 for a hide button on a window by setting hide:true on the button when 

 adding it to its parent container.</description>

            <name>hideParent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id of this component (defaults to an auto-assigned id).</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element that will be the 

 container to render this component into. Using this config, a call to 

 render() is not required.</description>

            <name>renderTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id for this component to use for state management purposes 

 (defaults to the component id). See stateful for an explanation of saving 

 and restoring Component state.</description>

            <name>stateId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;A flag which causes the Component to attempt to restore the state of 

 internal properties from a saved state on startup.&lt;/p&gt;

 

 &lt;p&gt;For state saving to work, the state manager's provider must have been 

 set to an implementation of Ext.state.Provider which overrides the set 

 and get methods to save and recall name/value pairs. A built-in 

 implementation, Ext.state.CookieProvider is available.&lt;/p&gt;

 

 &lt;p&gt;To set the state provider for the current page:&lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;Components attempt to save state when one of the events listed in the stateEvents 

 configuration fires.&lt;/p&gt;

 

 &lt;p&gt;You can perform extra processing on state save and restore by attaching 

 handlers to the beforestaterestore, staterestore, beforestatesave and statesave 

 events.&lt;/p&gt;</description>

            <name>stateful</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom style specification to be applied to this component's Element. Should 

 be a valid argument to Ext.Element.applyStyles.</description>

            <name>style</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Where to place this component. Valid values are south, north, west, east, center</description>

            <name>region</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>How this component should hidden. Supported values are "visibility" 

 (css visibility), "offsets" (negative offset position) and "display" 

 (css display) - defaults to "display".</description>

            <name>hideMode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The type of event to map to the button's event handler (defaults to 'click')</description>

            <name>clickEvent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to start disabled (defaults to false)</description>

            <name>disabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to enable pressed/not pressed toggling (defaults to false)</description>

            <name>enableToggle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>False to disable visual cues on mouseover, mouseout and mousedown (defaults to true)</description>

            <name>handleMouseEvents</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to start hidden (defaults to false)</description>

            <name>hidden</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The path to an image to display in the button (the image will be set as the 

 background-image CSS property of the button by default, so if you want a mixed 

 icon/text button, set cls:"x-btn-text-icon")</description>

            <name>icon</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A css class which sets a background image to be used as the icon for this button</description>

            <name>iconCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The position to align the menu to (see Ext.Element.alignTo for more details, 

 defaults to 'tl-bl?').</description>

            <name>menuAlign</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The minimum width for this button (used to give a set of buttons a common width)</description>

            <name>minWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to start pressed (only if enableToggle = true)</description>

            <name>pressed</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to repeat fire the click event while the mouse is down. This can also be an 

 Ext.util.ClickRepeater config object (defaults to false).</description>

            <name>repeat</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The scope of the handler</description>

            <name>scope</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Set a DOM tabIndex for this button (defaults to undefined)</description>

            <name>tabIndex</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Set a DOM tabIndex for this button (defaults to undefined)</description>

            <name>text</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The group this toggle button is a member of (only 1 per group can be 

 pressed, only applies if enableToggle = true)</description>

            <name>toggleGroup</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The tooltip for the button - can be a string or QuickTips config object</description>

            <name>tooltip</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>submit, reset or button - defaults to 'button'</description>

            <name>type</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A function called when the button is clicked (can be used instead of click event)</description>

            <name>handler</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A function called when the arrow button is clicked (can be used instead of click event)</description>

            <name>arrowHandler</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The title attribute of the arrow</description>

            <name>arrowTooltip</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The type of event to map to the button's event handler (defaults to 'click')</description>

            <name>clickEvent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A callback function that will be invoked each time the active menu item in the 

 button's menu has changed. If this callback is not supplied, the SplitButton 

 will instead fire the change event on active item change. The changeHandler 

 function will be called with the following argument list: (SplitButton this, 

 Ext.menu.CheckItem item)</description>

            <name>changeHandler</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A static string to prepend before the active item's text when displayed as 

 the button's text (only applies when showText = true, defaults to '')</description>

            <name>prependText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display the active item's text as the button text (defaults to true)</description>

            <name>showText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the button's active menu item has changed. Note that if a changeHandler function 

 is set on this CycleButton, it will be called instead on active item change and this change event 

 will not be fired.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this &lt;/strong&gt;: Ext.CycleButton&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;item &lt;/strong&gt;:(Ext.menu.CheckItem) The menu item that was selected&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this button's arrow is clicked &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : MenuButton&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (EventObject) The click event&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onArrowClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is destroyed. Return false to stop the destroy.&lt;p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is hidden. Return false to stop the hide.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is rendered. Return false to stop the render. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is shown. Return false to stop the show. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is restored. Return false to stop the restore.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is saved to the 

 configured state provider. Return false to stop the save. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is destroyed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is disabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is enabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEnable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is hidden. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is rendered.  &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is shown.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is restored. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is saved to the configured state provider. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this button is clicked &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Button&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt;:(EventObject) The click event&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;If this button has a menu, this event fires when it is hidden&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Button&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;menu&lt;/strong&gt;: Menu&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMenuHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;If this button has a menu, this event fires when it is shown &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Button&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;menu&lt;/strong&gt;: Menu&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMenuShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;If this button has a menu, this event fires when the mouse leaves the menu triggering element &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Button&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;menu&lt;/strong&gt;: Menu&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt;: EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMenuTriggerOut</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;If this button has a menu, this event fires when the mouse enters the menu triggering element &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Button&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;menu&lt;/strong&gt;: Menu&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt;: EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMenuTriggerOver</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the mouse exits the button &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Button&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt;:(Event) The event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMouseOut</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the mouse hovers over the button&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Button&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt;:(Event) The event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMouseOver</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the "pressed" state of this button changes (only if enableToggle = true) &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Button&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;pressed&lt;/strong&gt;: Boolean&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onToggle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>Basic Toolbar class. Toolbar elements can be created explicitly via their constructors, 

 or implicitly via their xtypes. Some items also have shortcut strings for creation.</description>

		<name>toolbar</name>

		<tag-class>isola.tags.ext.toolbar.ToolbarTag</tag-class>

		<body-content>JSP</body-content>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Is this toolbar a top toolbar or bottom toolbar. Valid values are top and bottom.</description>

            <name>position</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Whether the component can move the Dom node when rendering (defaults to true).</description>

            <name>allowDomMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element corresponding 

 to a DIV that is already present in the document that specifies some 

 structural markup for this component. When applyTo is used, constituent 

 parts of the component can also be specified by id or CSS class name 

 within the main element, and the component being created may attempt to 

 create its subcomponents from that markup if applicable. Using this 

 config, a call to render() is not required. If applyTo is specified, 

 any value passed for renderTo will be ignored and the target element's 

 parent node will automatically be used as the component's container.</description>

            <name>applyTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the component should check for hidden classes (e.g. 'x-hidden' 

 or 'x-hide-display') and remove them on render (defaults to false).</description>

            <name>autoShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 Element (defaults to ''). This can be useful for adding customized styles 

 to the component or any of its children using standard CSS rules.</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 container (defaults to ''). This can be useful for adding customized 

 styles to the container or any of its children using standard CSS rules.</description>

            <name>ctCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class added to the component when it is disabled (defaults to 

 "x-item-disabled").</description>

            <name>disabledClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide and show the component's container when hide/show is 

 called on the component, false to hide and show the component itself 

 (defaults to false). For example, this can be used as a shortcut 

 for a hide button on a window by setting hide:true on the button when 

 adding it to its parent container.</description>

            <name>hideParent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id of this component (defaults to an auto-assigned id).</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element that will be the 

 container to render this component into. Using this config, a call to 

 render() is not required.</description>

            <name>renderTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id for this component to use for state management purposes 

 (defaults to the component id). See stateful for an explanation of saving 

 and restoring Component state.</description>

            <name>stateId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;A flag which causes the Component to attempt to restore the state of 

 internal properties from a saved state on startup.&lt;/p&gt;

 

 &lt;p&gt;For state saving to work, the state manager's provider must have been 

 set to an implementation of Ext.state.Provider which overrides the set 

 and get methods to save and recall name/value pairs. A built-in 

 implementation, Ext.state.CookieProvider is available.&lt;/p&gt;

 

 &lt;p&gt;To set the state provider for the current page:&lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;Components attempt to save state when one of the events listed in the stateEvents 

 configuration fires.&lt;/p&gt;

 

 &lt;p&gt;You can perform extra processing on state save and restore by attaching 

 handlers to the beforestaterestore, staterestore, beforestatesave and statesave 

 events.&lt;/p&gt;</description>

            <name>stateful</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom style specification to be applied to this component's Element. Should 

 be a valid argument to Ext.Element.applyStyles.</description>

            <name>style</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Where to place this component. Valid values are south, north, west, east, center</description>

            <name>region</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>How this component should hidden. Supported values are "visibility" 

 (css visibility), "offsets" (negative offset position) and "display" 

 (css display) - defaults to "display".</description>

            <name>hideMode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use height:'auto', false to use fixed height (defaults to false).</description>

            <name>autoHeight</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use width:'auto', false to use fixed width (defaults to false).</description>

            <name>autoWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The height of this component in pixels (defaults to auto).</description>

            <name>height</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width of this component in pixels (defaults to auto).</description>

            <name>width</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>HTML Element this object is parsed on.</description>

            <name>el</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is destroyed. Return false to stop the destroy.&lt;p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is hidden. Return false to stop the hide.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is rendered. Return false to stop the render. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is shown. Return false to stop the show. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is restored. Return false to stop the restore.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is saved to the 

 configured state provider. Return false to stop the save. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is destroyed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is disabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is enabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEnable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is hidden. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is rendered.  &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is shown.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is restored. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is saved to the configured state provider. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is moved. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;x&lt;/strong&gt;: (Number)The new x position&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;y&lt;/strong&gt;: (Number)The new y position&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is resized.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjWidth&lt;/strong&gt;:(Number) The box-adjusted width that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjHeight&lt;/strong&gt;:(Number) The box-adjusted height that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawWidth&lt;/strong&gt;:(Number) The width that was originally specified&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawHeight&lt;/strong&gt;:(Number) The height that was originally specified&lt;/li&gt; 		

 &lt;/ul&gt;</description>

            <name>onResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>&lt;p&gt;A specialized toolbar that is bound to a Ext.data.Store and provides automatic paging controls.&lt;/p&gt;

 

 &lt;p&gt;Sample: &lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 &amp;lt;ext:body runOnLoad="true"&amp;gt;

 	var jsonStore = &amp;lt;ext:jsonStore id="jsonStore" url="servlet/JsonSampleServlet" root="result" totalProperty="total" remoteSort="true" autoLoad="true"&amp;gt;

 		&amp;lt;ext:httpParam name="id" value="1"/&amp;gt;

 		&amp;lt;ext:httpParam name="action" value="env"/&amp;gt;

 		&amp;lt;ext:storeMapping name="name" /&amp;gt;

 		&amp;lt;ext:storeMapping name="value"/&amp;gt;

 	&amp;lt;/ext:jsonStore&amp;gt;

 

 	&amp;lt;ext:gridPanel storeId="jsonStore" renderTo="hebelek" width="700" height="400" border="true" frame="true" forceFit="true" title="Bu Mudur?" rowNumbererEnabled="true" region="north"&amp;gt;

 		&amp;lt;ext:pagingToolbar position="bottom" pageSize="10" displayInfo="true" storeId="jsonStore" /&amp;gt;

 		&amp;lt;ext:columnModel&amp;gt;

 			&amp;lt;ext:gridColumn dataIndex="name" sortable="true" header="Name" /&amp;gt;

 			&amp;lt;ext:gridColumn dataIndex="value" sortable="false" header="Value" /&amp;gt;

 		&amp;lt;/ext:columnModel&amp;gt;

 	&amp;lt;/ext:gridPanel&amp;gt;

 &amp;lt;/ext:body&amp;gt;

 &amp;lt;div id="hebelek"&amp;gt;&amp;lt;/div&amp;gt;

 &lt;/code&gt;&lt;pre&gt;

  

 &lt;p&gt;When a button on the paging grid is pressed store is called by two parameters.&lt;p&gt;

 &lt;ul&gt;

 	&lt;li&gt;limit: How many records should the servlet return.&lt;/li&gt;

  &lt;li&gt;start: The record number should the servlet start processing &lt;/li&gt;

 &lt;/ul&gt;

 

 &lt;p&gt;On the server side developer can fetch these parameters by : &lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 		String sStart = request.getParameter("start");

		String sLimit = request.getParameter("limit");

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;Paging is highly dependend on the business rules, so developer is responsible of fetching the right data set

 and caching them.&lt;/p&gt;</description>

		<name>pagingToolbar</name>

		<tag-class>isola.tags.ext.toolbar.PagingToolbarTag</tag-class>

		<body-content>JSP</body-content>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Lets assigining a predefined store variable to this component via the store's id.</description>

			<name>storeId</name>

			<required>false</required>

			<rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Is this toolbar a top toolbar or bottom toolbar. Valid values are top and bottom.</description>

            <name>position</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Whether the component can move the Dom node when rendering (defaults to true).</description>

            <name>allowDomMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element corresponding 

 to a DIV that is already present in the document that specifies some 

 structural markup for this component. When applyTo is used, constituent 

 parts of the component can also be specified by id or CSS class name 

 within the main element, and the component being created may attempt to 

 create its subcomponents from that markup if applicable. Using this 

 config, a call to render() is not required. If applyTo is specified, 

 any value passed for renderTo will be ignored and the target element's 

 parent node will automatically be used as the component's container.</description>

            <name>applyTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the component should check for hidden classes (e.g. 'x-hidden' 

 or 'x-hide-display') and remove them on render (defaults to false).</description>

            <name>autoShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 Element (defaults to ''). This can be useful for adding customized styles 

 to the component or any of its children using standard CSS rules.</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 container (defaults to ''). This can be useful for adding customized 

 styles to the container or any of its children using standard CSS rules.</description>

            <name>ctCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class added to the component when it is disabled (defaults to 

 "x-item-disabled").</description>

            <name>disabledClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide and show the component's container when hide/show is 

 called on the component, false to hide and show the component itself 

 (defaults to false). For example, this can be used as a shortcut 

 for a hide button on a window by setting hide:true on the button when 

 adding it to its parent container.</description>

            <name>hideParent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id of this component (defaults to an auto-assigned id).</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element that will be the 

 container to render this component into. Using this config, a call to 

 render() is not required.</description>

            <name>renderTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id for this component to use for state management purposes 

 (defaults to the component id). See stateful for an explanation of saving 

 and restoring Component state.</description>

            <name>stateId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;A flag which causes the Component to attempt to restore the state of 

 internal properties from a saved state on startup.&lt;/p&gt;

 

 &lt;p&gt;For state saving to work, the state manager's provider must have been 

 set to an implementation of Ext.state.Provider which overrides the set 

 and get methods to save and recall name/value pairs. A built-in 

 implementation, Ext.state.CookieProvider is available.&lt;/p&gt;

 

 &lt;p&gt;To set the state provider for the current page:&lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;Components attempt to save state when one of the events listed in the stateEvents 

 configuration fires.&lt;/p&gt;

 

 &lt;p&gt;You can perform extra processing on state save and restore by attaching 

 handlers to the beforestaterestore, staterestore, beforestatesave and statesave 

 events.&lt;/p&gt;</description>

            <name>stateful</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom style specification to be applied to this component's Element. Should 

 be a valid argument to Ext.Element.applyStyles.</description>

            <name>style</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Where to place this component. Valid values are south, north, west, east, center</description>

            <name>region</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>How this component should hidden. Supported values are "visibility" 

 (css visibility), "offsets" (negative offset position) and "display" 

 (css display) - defaults to "display".</description>

            <name>hideMode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use height:'auto', false to use fixed height (defaults to false).</description>

            <name>autoHeight</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use width:'auto', false to use fixed width (defaults to false).</description>

            <name>autoWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The height of this component in pixels (defaults to auto).</description>

            <name>height</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width of this component in pixels (defaults to auto).</description>

            <name>width</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>HTML Element this object is parsed on.</description>

            <name>el</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display the displayMsg (defaults to false)</description>

            <name>displayInfo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The paging status message to display (defaults to "Displaying {0} - {1} of {2}"). 

 Note that this string is formatted using the braced numbers 0-2 as tokens that 

 are replaced by the values for start, end and total respectively. These tokens should 

 be preserved when overriding this string if showing those values is desired.</description>

            <name>displayMsg</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The message to display when no records are found (defaults to "No data to display")</description>

            <name>emptyMsg</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The number of records to display per page (defaults to 20)</description>

            <name>pageSize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is destroyed. Return false to stop the destroy.&lt;p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is hidden. Return false to stop the hide.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is rendered. Return false to stop the render. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is shown. Return false to stop the show. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is restored. Return false to stop the restore.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is saved to the 

 configured state provider. Return false to stop the save. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is destroyed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is disabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is enabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEnable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is hidden. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is rendered.  &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is shown.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is restored. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is saved to the configured state provider. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is moved. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;x&lt;/strong&gt;: (Number)The new x position&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;y&lt;/strong&gt;: (Number)The new y position&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is resized.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjWidth&lt;/strong&gt;:(Number) The box-adjusted width that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjHeight&lt;/strong&gt;:(Number) The box-adjusted height that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawWidth&lt;/strong&gt;:(Number) The width that was originally specified&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawHeight&lt;/strong&gt;:(Number) The height that was originally specified&lt;/li&gt; 		

 &lt;/ul&gt;</description>

            <name>onResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>A button that renders into a toolbar. Use the handler config to specify 

 a callback function to handle the button's click event.</description>

		<name>toolbarButton</name>

		<tag-class>isola.tags.ext.toolbar.ToolbarButtonTag</tag-class>

		<body-content>JSP</body-content>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Whether the component can move the Dom node when rendering (defaults to true).</description>

            <name>allowDomMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element corresponding 

 to a DIV that is already present in the document that specifies some 

 structural markup for this component. When applyTo is used, constituent 

 parts of the component can also be specified by id or CSS class name 

 within the main element, and the component being created may attempt to 

 create its subcomponents from that markup if applicable. Using this 

 config, a call to render() is not required. If applyTo is specified, 

 any value passed for renderTo will be ignored and the target element's 

 parent node will automatically be used as the component's container.</description>

            <name>applyTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the component should check for hidden classes (e.g. 'x-hidden' 

 or 'x-hide-display') and remove them on render (defaults to false).</description>

            <name>autoShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 Element (defaults to ''). This can be useful for adding customized styles 

 to the component or any of its children using standard CSS rules.</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 container (defaults to ''). This can be useful for adding customized 

 styles to the container or any of its children using standard CSS rules.</description>

            <name>ctCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class added to the component when it is disabled (defaults to 

 "x-item-disabled").</description>

            <name>disabledClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide and show the component's container when hide/show is 

 called on the component, false to hide and show the component itself 

 (defaults to false). For example, this can be used as a shortcut 

 for a hide button on a window by setting hide:true on the button when 

 adding it to its parent container.</description>

            <name>hideParent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id of this component (defaults to an auto-assigned id).</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element that will be the 

 container to render this component into. Using this config, a call to 

 render() is not required.</description>

            <name>renderTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id for this component to use for state management purposes 

 (defaults to the component id). See stateful for an explanation of saving 

 and restoring Component state.</description>

            <name>stateId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;A flag which causes the Component to attempt to restore the state of 

 internal properties from a saved state on startup.&lt;/p&gt;

 

 &lt;p&gt;For state saving to work, the state manager's provider must have been 

 set to an implementation of Ext.state.Provider which overrides the set 

 and get methods to save and recall name/value pairs. A built-in 

 implementation, Ext.state.CookieProvider is available.&lt;/p&gt;

 

 &lt;p&gt;To set the state provider for the current page:&lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;Components attempt to save state when one of the events listed in the stateEvents 

 configuration fires.&lt;/p&gt;

 

 &lt;p&gt;You can perform extra processing on state save and restore by attaching 

 handlers to the beforestaterestore, staterestore, beforestatesave and statesave 

 events.&lt;/p&gt;</description>

            <name>stateful</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom style specification to be applied to this component's Element. Should 

 be a valid argument to Ext.Element.applyStyles.</description>

            <name>style</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Where to place this component. Valid values are south, north, west, east, center</description>

            <name>region</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>How this component should hidden. Supported values are "visibility" 

 (css visibility), "offsets" (negative offset position) and "display" 

 (css display) - defaults to "display".</description>

            <name>hideMode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The type of event to map to the button's event handler (defaults to 'click')</description>

            <name>clickEvent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to start disabled (defaults to false)</description>

            <name>disabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to enable pressed/not pressed toggling (defaults to false)</description>

            <name>enableToggle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>False to disable visual cues on mouseover, mouseout and mousedown (defaults to true)</description>

            <name>handleMouseEvents</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to start hidden (defaults to false)</description>

            <name>hidden</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The path to an image to display in the button (the image will be set as the 

 background-image CSS property of the button by default, so if you want a mixed 

 icon/text button, set cls:"x-btn-text-icon")</description>

            <name>icon</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A css class which sets a background image to be used as the icon for this button</description>

            <name>iconCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The position to align the menu to (see Ext.Element.alignTo for more details, 

 defaults to 'tl-bl?').</description>

            <name>menuAlign</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The minimum width for this button (used to give a set of buttons a common width)</description>

            <name>minWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to start pressed (only if enableToggle = true)</description>

            <name>pressed</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to repeat fire the click event while the mouse is down. This can also be an 

 Ext.util.ClickRepeater config object (defaults to false).</description>

            <name>repeat</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The scope of the handler</description>

            <name>scope</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Set a DOM tabIndex for this button (defaults to undefined)</description>

            <name>tabIndex</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Set a DOM tabIndex for this button (defaults to undefined)</description>

            <name>text</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The group this toggle button is a member of (only 1 per group can be 

 pressed, only applies if enableToggle = true)</description>

            <name>toggleGroup</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The tooltip for the button - can be a string or QuickTips config object</description>

            <name>tooltip</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>submit, reset or button - defaults to 'button'</description>

            <name>type</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A function called when the button is clicked (can be used instead of click event)</description>

            <name>handler</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is destroyed. Return false to stop the destroy.&lt;p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is hidden. Return false to stop the hide.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is rendered. Return false to stop the render. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is shown. Return false to stop the show. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is restored. Return false to stop the restore.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is saved to the 

 configured state provider. Return false to stop the save. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is destroyed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is disabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is enabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEnable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is hidden. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is rendered.  &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is shown.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is restored. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is saved to the configured state provider. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this button is clicked &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Button&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt;:(EventObject) The click event&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;If this button has a menu, this event fires when it is hidden&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Button&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;menu&lt;/strong&gt;: Menu&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMenuHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;If this button has a menu, this event fires when it is shown &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Button&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;menu&lt;/strong&gt;: Menu&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMenuShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;If this button has a menu, this event fires when the mouse leaves the menu triggering element &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Button&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;menu&lt;/strong&gt;: Menu&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt;: EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMenuTriggerOut</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;If this button has a menu, this event fires when the mouse enters the menu triggering element &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Button&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;menu&lt;/strong&gt;: Menu&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt;: EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMenuTriggerOver</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the mouse exits the button &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Button&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt;:(Event) The event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMouseOut</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the mouse hovers over the button&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Button&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt;:(Event) The event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMouseOver</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the "pressed" state of this button changes (only if enableToggle = true) &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Button&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;pressed&lt;/strong&gt;: Boolean&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onToggle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>A simple element that adds extra horizontal space between items in a toolbar.</description>

		<name>toolbarSpacer</name>

		<tag-class>isola.tags.ext.toolbar.ToolbarSpacerTag</tag-class>

		<body-content>empty</body-content>

	</tag>



	<tag><description>&lt;p&gt;A simple element that adds a greedy (100% width) horizontal space between items in 

 a toolbar.&lt;/p&gt;</description>

		<name>toolbarFill</name>

		<tag-class>isola.tags.ext.toolbar.ToolbarFillTag</tag-class>

		<body-content>empty</body-content>

	</tag>



	<tag><description>&lt;p&gt;A simple class that adds a vertical separator bar between toolbar items. Example usage:&lt;/p&gt;</description>

		<name>toolbarSeparator</name>

		<tag-class>isola.tags.ext.toolbar.ToolbarSeparatorTag</tag-class>

		<body-content>empty</body-content>

	</tag>



	<tag><description>&lt;p&gt;A simple class that renders text directly into a toolbar.&lt;/p&gt;</description>

		<name>toolbarTextItem</name>

		<tag-class>isola.tags.ext.toolbar.ToolbarTextItemTag</tag-class>

		<body-content>empty</body-content>

		<attribute>

            <name>text</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>A split button that renders into a toolbar.</description>

		<name>toolbarSplitButton</name>

		<tag-class>isola.tags.ext.toolbar.ToolbarSplitButtonTag</tag-class>

		<body-content>JSP</body-content>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Whether the component can move the Dom node when rendering (defaults to true).</description>

            <name>allowDomMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element corresponding 

 to a DIV that is already present in the document that specifies some 

 structural markup for this component. When applyTo is used, constituent 

 parts of the component can also be specified by id or CSS class name 

 within the main element, and the component being created may attempt to 

 create its subcomponents from that markup if applicable. Using this 

 config, a call to render() is not required. If applyTo is specified, 

 any value passed for renderTo will be ignored and the target element's 

 parent node will automatically be used as the component's container.</description>

            <name>applyTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the component should check for hidden classes (e.g. 'x-hidden' 

 or 'x-hide-display') and remove them on render (defaults to false).</description>

            <name>autoShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 Element (defaults to ''). This can be useful for adding customized styles 

 to the component or any of its children using standard CSS rules.</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 container (defaults to ''). This can be useful for adding customized 

 styles to the container or any of its children using standard CSS rules.</description>

            <name>ctCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class added to the component when it is disabled (defaults to 

 "x-item-disabled").</description>

            <name>disabledClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide and show the component's container when hide/show is 

 called on the component, false to hide and show the component itself 

 (defaults to false). For example, this can be used as a shortcut 

 for a hide button on a window by setting hide:true on the button when 

 adding it to its parent container.</description>

            <name>hideParent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id of this component (defaults to an auto-assigned id).</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element that will be the 

 container to render this component into. Using this config, a call to 

 render() is not required.</description>

            <name>renderTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id for this component to use for state management purposes 

 (defaults to the component id). See stateful for an explanation of saving 

 and restoring Component state.</description>

            <name>stateId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;A flag which causes the Component to attempt to restore the state of 

 internal properties from a saved state on startup.&lt;/p&gt;

 

 &lt;p&gt;For state saving to work, the state manager's provider must have been 

 set to an implementation of Ext.state.Provider which overrides the set 

 and get methods to save and recall name/value pairs. A built-in 

 implementation, Ext.state.CookieProvider is available.&lt;/p&gt;

 

 &lt;p&gt;To set the state provider for the current page:&lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;Components attempt to save state when one of the events listed in the stateEvents 

 configuration fires.&lt;/p&gt;

 

 &lt;p&gt;You can perform extra processing on state save and restore by attaching 

 handlers to the beforestaterestore, staterestore, beforestatesave and statesave 

 events.&lt;/p&gt;</description>

            <name>stateful</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom style specification to be applied to this component's Element. Should 

 be a valid argument to Ext.Element.applyStyles.</description>

            <name>style</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Where to place this component. Valid values are south, north, west, east, center</description>

            <name>region</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>How this component should hidden. Supported values are "visibility" 

 (css visibility), "offsets" (negative offset position) and "display" 

 (css display) - defaults to "display".</description>

            <name>hideMode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The type of event to map to the button's event handler (defaults to 'click')</description>

            <name>clickEvent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to start disabled (defaults to false)</description>

            <name>disabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to enable pressed/not pressed toggling (defaults to false)</description>

            <name>enableToggle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>False to disable visual cues on mouseover, mouseout and mousedown (defaults to true)</description>

            <name>handleMouseEvents</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to start hidden (defaults to false)</description>

            <name>hidden</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The path to an image to display in the button (the image will be set as the 

 background-image CSS property of the button by default, so if you want a mixed 

 icon/text button, set cls:"x-btn-text-icon")</description>

            <name>icon</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A css class which sets a background image to be used as the icon for this button</description>

            <name>iconCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The position to align the menu to (see Ext.Element.alignTo for more details, 

 defaults to 'tl-bl?').</description>

            <name>menuAlign</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The minimum width for this button (used to give a set of buttons a common width)</description>

            <name>minWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to start pressed (only if enableToggle = true)</description>

            <name>pressed</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to repeat fire the click event while the mouse is down. This can also be an 

 Ext.util.ClickRepeater config object (defaults to false).</description>

            <name>repeat</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The scope of the handler</description>

            <name>scope</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Set a DOM tabIndex for this button (defaults to undefined)</description>

            <name>tabIndex</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Set a DOM tabIndex for this button (defaults to undefined)</description>

            <name>text</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The group this toggle button is a member of (only 1 per group can be 

 pressed, only applies if enableToggle = true)</description>

            <name>toggleGroup</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The tooltip for the button - can be a string or QuickTips config object</description>

            <name>tooltip</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>submit, reset or button - defaults to 'button'</description>

            <name>type</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A function called when the button is clicked (can be used instead of click event)</description>

            <name>handler</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A function called when the arrow button is clicked (can be used instead of click event)</description>

            <name>arrowHandler</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The title attribute of the arrow</description>

            <name>arrowTooltip</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The type of event to map to the button's event handler (defaults to 'click')</description>

            <name>clickEvent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this button's arrow is clicked &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : MenuButton&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (EventObject) The click event&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onArrowClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is destroyed. Return false to stop the destroy.&lt;p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is hidden. Return false to stop the hide.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is rendered. Return false to stop the render. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is shown. Return false to stop the show. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is restored. Return false to stop the restore.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is saved to the 

 configured state provider. Return false to stop the save. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is destroyed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is disabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is enabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEnable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is hidden. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is rendered.  &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is shown.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is restored. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is saved to the configured state provider. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this button is clicked &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Button&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt;:(EventObject) The click event&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;If this button has a menu, this event fires when it is hidden&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Button&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;menu&lt;/strong&gt;: Menu&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMenuHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;If this button has a menu, this event fires when it is shown &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Button&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;menu&lt;/strong&gt;: Menu&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMenuShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;If this button has a menu, this event fires when the mouse leaves the menu triggering element &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Button&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;menu&lt;/strong&gt;: Menu&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt;: EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMenuTriggerOut</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;If this button has a menu, this event fires when the mouse enters the menu triggering element &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Button&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;menu&lt;/strong&gt;: Menu&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt;: EventObject&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMenuTriggerOver</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the mouse exits the button &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Button&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt;:(Event) The event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMouseOut</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the mouse hovers over the button&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Button&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt;:(Event) The event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMouseOver</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the "pressed" state of this button changes (only if enableToggle = true) &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Button&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;pressed&lt;/strong&gt;: Boolean&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onToggle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>Used by underlying framework. Don't needed to be instantiated seperately.</description>

		<name>node</name>

		<tag-class>isola.tags.ext.data.NodeTag</tag-class>

		<body-content>JSP</body-content>

		<attribute><description>The id for this node. If one is not specified, one is generated.</description>

            <name>id</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>true if this node is a leaf and does not have children</description>

            <name>leaf</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a new child node is appended &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;tree&lt;/strong&gt;:(Tree) The owner tree&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:(Node) This node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt;:(Node) The newly appended node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index of the newly appended node&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAppend</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before a new child is appended, return false to cancel the append. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;tree&lt;/strong&gt;:(Tree) The owner tree&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:(Node) This node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt;:(Node) The child node to be appended&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeAppend</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before a new child is inserted, return false to cancel the insert. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;tree&lt;/strong&gt;:(Tree) The owner tree&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:(Node) This node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt;:(Node) The child node to be inserted&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;refNode&lt;/strong&gt;:(Node) The child node the node is being inserted before&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeInsert</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before this node is moved to a new location in the tree. Return false to cancel the move. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;tree&lt;/strong&gt;:(Tree) The owner tree&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:(Node) This node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;oldParent&lt;/strong&gt;:(Node) The parent of this node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;newParent&lt;/strong&gt;:(Node) The new parent this node is moving to&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index it is being moved to&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before a child is removed, return false to cancel the remove. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;tree&lt;/strong&gt;:(Tree) The owner tree&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:(Node) This node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt;:(Node) The child node to be removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRemove</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a new child node is inserted. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;tree&lt;/strong&gt;:(Tree) The owner tree&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:(Node) This node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt;:(Node) The child node inserted&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;refNode&lt;/strong&gt;:(Node) The child node the node was inserted before&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onInsert</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this node is moved to a new location in the tree &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;tree&lt;/strong&gt;:(Tree) The owner tree&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:(Node) This node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;oldParent&lt;/strong&gt;:(Node) The old parent of this node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;newParent&lt;/strong&gt;:(Node) The new parent of this node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index it was moved to&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMove</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a child node is removed &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;tree&lt;/strong&gt;:(Tree) The owner tree&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:(Node) This node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt;:(Node) The removed node&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRemove</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag>

		<name>treeNode</name>

		<tag-class>isola.tags.ext.tree.TreeNodeTag</tag-class>

		<body-content>JSP</body-content>

		<attribute><description>The id for this node. If one is not specified, one is generated.</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>true if this node is a leaf and does not have children</description>

            <name>leaf</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>False to not allow this node to have child nodes (defaults to true)</description>

            <name>allowChildren</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>False to make this node undraggable if draggable = true (defaults to true)</description>

            <name>allowDrag</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>False if this node cannot have child nodes dropped on it (defaults to true)</description>

            <name>allowDrop</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to render a checked checkbox for this node, false to render an unchecked checkbox 

 (defaults to undefined with no checkbox rendered)</description>

            <name>checked</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A css class to be added to the node</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>true to start the node disabled</description>

            <name>disabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to make this node draggable (defaults to false)</description>

            <name>draggable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If set to true, the node will always show a plus/minus icon, even when empty</description>

            <name>expandable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>URL of the link used for the node (defaults to #)</description>

            <name>href</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>target frame for the link</description>

            <name>hrefTarget</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The path to an icon for the node. The preferred way to do this is to use the cls or 

 iconCls attributes and add the icon via a CSS background image.</description>

            <name>icon</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A css class to be added to the nodes icon element for applying css background images</description>

            <name>iconCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>False to not allow this node to act as a drop target (defaults to true)</description>

            <name>isTarget</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An Ext QuickTip for the node</description>

            <name>qtip</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True for single click expand on this node</description>

            <name>singleClickExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The text for this node</description>

            <name>text</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires right before the child nodes for this node are rendered &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;This&lt;/strong&gt; : (Node) This node.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeChildrenRendered</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before click processing. Return false to cancel the default action. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;This&lt;/strong&gt; : (Node) This node.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (Ext.EventObject) The event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before this node is collapsed, return false to cancel. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;This&lt;/strong&gt; : (Node) This node.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;deep&lt;/strong&gt; : Boolean&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;anim&lt;/strong&gt; : Boolean&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before this node is expanded, return false to cancel. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;This&lt;/strong&gt; : (Node) This node.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;deep&lt;/strong&gt; : Boolean&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;anim&lt;/strong&gt; : Boolean&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a node with a checkbox's checked property changes &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;This&lt;/strong&gt; : (Node) This node.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;checked&lt;/strong&gt; : Boolean&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onCheckChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this node is clicked &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;This&lt;/strong&gt; : (Node) This node.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (Ext.EventObject) The event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this node is collapsed &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;This&lt;/strong&gt; : (Node) This node.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this node is right clicked &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;This&lt;/strong&gt; : (Node) This node.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (Ext.EventObject) The event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onContextMenu</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this node is double clicked&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;This&lt;/strong&gt; : (Node) This node.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (Ext.EventObject) The event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDblClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the disabled status of this node changes &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;This&lt;/strong&gt; : (Node) This node.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;disabled&lt;/strong&gt; : Boolean&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisabledChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this node is expanded &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;This&lt;/strong&gt; : (Node) This node.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the text for this node is changed &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;This&lt;/strong&gt; : (Node) This node.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;text&lt;/strong&gt; : (String) The new text&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;oldText&lt;/strong&gt; : (String) The old text&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onTextChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a new child node is appended &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;tree&lt;/strong&gt;:(Tree) The owner tree&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:(Node) This node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt;:(Node) The newly appended node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index of the newly appended node&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAppend</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before a new child is appended, return false to cancel the append. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;tree&lt;/strong&gt;:(Tree) The owner tree&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:(Node) This node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt;:(Node) The child node to be appended&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeAppend</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before a new child is inserted, return false to cancel the insert. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;tree&lt;/strong&gt;:(Tree) The owner tree&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:(Node) This node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt;:(Node) The child node to be inserted&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;refNode&lt;/strong&gt;:(Node) The child node the node is being inserted before&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeInsert</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before this node is moved to a new location in the tree. Return false to cancel the move. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;tree&lt;/strong&gt;:(Tree) The owner tree&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:(Node) This node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;oldParent&lt;/strong&gt;:(Node) The parent of this node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;newParent&lt;/strong&gt;:(Node) The new parent this node is moving to&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index it is being moved to&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before a child is removed, return false to cancel the remove. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;tree&lt;/strong&gt;:(Tree) The owner tree&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:(Node) This node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt;:(Node) The child node to be removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a new child node is inserted. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;tree&lt;/strong&gt;:(Tree) The owner tree&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:(Node) This node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt;:(Node) The child node inserted&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;refNode&lt;/strong&gt;:(Node) The child node the node was inserted before&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onInsert</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this node is moved to a new location in the tree &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;tree&lt;/strong&gt;:(Tree) The owner tree&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:(Node) This node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;oldParent&lt;/strong&gt;:(Node) The old parent of this node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;newParent&lt;/strong&gt;:(Node) The new parent of this node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index it was moved to&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a child node is removed &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;tree&lt;/strong&gt;:(Tree) The owner tree&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:(Node) This node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt;:(Node) The removed node&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>Provides editor functionality for inline tree node editing. Any valid Ext.form.Field can be 

 used as the editor field.</description>

		<name>treeEditor</name>

		<tag-class>isola.tags.ext.tree.TreeEditorTag</tag-class>

		<body-content>JSP</body-content>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Whether the component can move the Dom node when rendering (defaults to true).</description>

            <name>allowDomMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element corresponding 

 to a DIV that is already present in the document that specifies some 

 structural markup for this component. When applyTo is used, constituent 

 parts of the component can also be specified by id or CSS class name 

 within the main element, and the component being created may attempt to 

 create its subcomponents from that markup if applicable. Using this 

 config, a call to render() is not required. If applyTo is specified, 

 any value passed for renderTo will be ignored and the target element's 

 parent node will automatically be used as the component's container.</description>

            <name>applyTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the component should check for hidden classes (e.g. 'x-hidden' 

 or 'x-hide-display') and remove them on render (defaults to false).</description>

            <name>autoShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 Element (defaults to ''). This can be useful for adding customized styles 

 to the component or any of its children using standard CSS rules.</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 container (defaults to ''). This can be useful for adding customized 

 styles to the container or any of its children using standard CSS rules.</description>

            <name>ctCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class added to the component when it is disabled (defaults to 

 "x-item-disabled").</description>

            <name>disabledClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide and show the component's container when hide/show is 

 called on the component, false to hide and show the component itself 

 (defaults to false). For example, this can be used as a shortcut 

 for a hide button on a window by setting hide:true on the button when 

 adding it to its parent container.</description>

            <name>hideParent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id of this component (defaults to an auto-assigned id).</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element that will be the 

 container to render this component into. Using this config, a call to 

 render() is not required.</description>

            <name>renderTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id for this component to use for state management purposes 

 (defaults to the component id). See stateful for an explanation of saving 

 and restoring Component state.</description>

            <name>stateId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;A flag which causes the Component to attempt to restore the state of 

 internal properties from a saved state on startup.&lt;/p&gt;

 

 &lt;p&gt;For state saving to work, the state manager's provider must have been 

 set to an implementation of Ext.state.Provider which overrides the set 

 and get methods to save and recall name/value pairs. A built-in 

 implementation, Ext.state.CookieProvider is available.&lt;/p&gt;

 

 &lt;p&gt;To set the state provider for the current page:&lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;Components attempt to save state when one of the events listed in the stateEvents 

 configuration fires.&lt;/p&gt;

 

 &lt;p&gt;You can perform extra processing on state save and restore by attaching 

 handlers to the beforestaterestore, staterestore, beforestatesave and statesave 

 events.&lt;/p&gt;</description>

            <name>stateful</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom style specification to be applied to this component's Element. Should 

 be a valid argument to Ext.Element.applyStyles.</description>

            <name>style</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Where to place this component. Valid values are south, north, west, east, center</description>

            <name>region</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>How this component should hidden. Supported values are "visibility" 

 (css visibility), "offsets" (negative offset position) and "display" 

 (css display) - defaults to "display".</description>

            <name>hideMode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The position to align to (see Ext.Element.alignTo for more details, defaults to "c-c?").</description>

            <name>alignment</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to cancel the edit when the escape key is pressed (defaults to false)</description>

            <name>cancelOnEsc</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to complete the edit when the enter key is pressed (defaults to false)</description>

            <name>completeOnEnter</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to constrain the editor to the viewport</description>

            <name>constrain</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to skip the the edit completion process (no save, no events fired) if the 

 user completes an edit and the value has not changed (defaults to false). Applies 

 only to string values - edits for other data types will never be ignored.</description>

            <name>ignoreNoChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to automatically revert the field value and cancel the edit when the user 

 completes an edit and the field validation fails (defaults to true)</description>

            <name>revertInvalid</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>"sides" for sides/bottom only, "frame" for 4-way shadow, and "drop" for 

 bottom-right shadow (defaults to "frame")</description>

            <name>shadow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Handle the keydown/keypress events so they don't propagate (defaults to true)</description>

            <name>swallowKeys</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to update the innerHTML of the bound element when the update completes (defaults to false)</description>

            <name>updateEl</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The data value of the underlying field (defaults to "")</description>

            <name>value</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The position to align to (see Ext.Element.alignTo for more details, defaults to "c-c?").</description>

            <name>alignment</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 Element (defaults to ''). This can be useful for adding customized styles 

 to the component or any of its children using standard CSS rules.</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The number of milliseconds between clicks to register a double-click that will trigger 

 editing on the current node (defaults to 350). If two clicks occur on the same node 

 within this time span, the editor for the node will display, otherwise it will be processed 

 as a regular click.</description>

            <name>editDelay</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the bound element while the editor is displayed (defaults to false)</description>

            <name>hideEl</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The maximum width in pixels of the editor field (defaults to 250). Note that if the maxWidth 

 would exceed the containing tree element's size, it will be automatically limited for you to 

 the container width, taking scroll and client offsets into account prior to each edit.</description>

            <name>maxWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to shim the editor if selects/iframes could be displayed beneath it (defaults to false)</description>

            <name>shim</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after a change has been made to the field, but before the change is reflected in the underlying field. 

 Saving the change to the field can be canceled by returning false from the handler of this event. Note that if 

 the value has not changed and ignoreNoChange = true, the editing will still end but this event will not fire since

 no edit actually occurred.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 	&lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Editor&lt;/li&gt;

 	&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt; : (Mixed) current field value&lt;/li&gt;

  &lt;li&gt;&lt;strong&gt;startValue&lt;/strong&gt; : (Mixed) The original field value&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeComplete</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when editing is initiated, but before the value changes. Editing can be canceled by 

 returning false from the handler of this event. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Editor&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;boundEl&lt;/strong&gt; : (Ext.Element) The underlying element bound to this editor&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;value&lt;/strong&gt; : (Mixed) The field value being set&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStartEdit</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after editing is complete and any changed value has been written to the underlying field. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Editor&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;value&lt;/strong&gt; : (Mixed) The current field value&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;startValue &lt;/strong&gt; : (Mixed) The original field value&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onComplete</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed. You can check 

 Ext.EventObject.getKey to determine which key was pressed.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (Ext.EventObject) The event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onSpecialKey</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this editor is displayed &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;boundEl&lt;/strong&gt; : (Ext.Element) The underlying element bound to this editor&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;value&lt;/strong&gt; : (Mixed) The starting field value&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStartEdit</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is destroyed. Return false to stop the destroy.&lt;p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is hidden. Return false to stop the hide.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is rendered. Return false to stop the render. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is shown. Return false to stop the show. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is restored. Return false to stop the restore.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is saved to the 

 configured state provider. Return false to stop the save. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is destroyed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is disabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is enabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEnable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is hidden. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is rendered.  &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is shown.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is restored. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is saved to the configured state provider. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>A TreeLoader provides for lazy loading of an Ext.tree.TreeNode's child nodes from a specified 

 URL. The response must be a JavaScript Array definition whose elements are node definition 

 objects. eg:

 

 &lt;pre&gt;&lt;code&gt;

 [{

       id: 1,

       text: 'A leaf Node',

       leaf: true

   },{

       id: 2,

       text: 'A folder Node',

       children: [{

           id: 3,

           text: 'A child Node',

           leaf: true

       }]

 }]

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;A server request is sent, and child nodes are loaded only when a node is expanded. The loading 

 node's id is passed to the server under the parameter name "node" to enable the server to produce 

 the correct child nodes.&lt;/p&gt;

 

 &lt;p&gt;To pass extra parameters, an event handler may be attached to the "beforeload" event, and the 

 parameters specified in the TreeLoader's baseParams property:&lt;/p&gt;

 

 &lt;pre&gt;&lt;code&gt;

 myTreeLoader.on("beforeload", function(treeLoader, node) {

       this.baseParams.category = node.attributes.category;

   }, this);

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;This would pass an HTTP parameter called "category" to the server containing the value of the 

 Node's "category" attribute.&lt;/p&gt;</description>

		<name>treeLoader</name>

		<tag-class>isola.tags.ext.tree.TreeLoaderTag</tag-class>

		<body-content>JSP</body-content>

		<attribute><description>(optional) Default to true. Remove previously existing child nodes before loading.</description>

            <name>clearOnLoad</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If set to true, the loader recursively loads "children" attributes when doing the first load on 

 nodes.</description>

            <name>preloadChildren</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The HTTP request method for loading data (defaults to 'POST').</description>

            <name>method</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The URL from which to request a Json string which specifies an array of node definition objects 

 representing the child nodes to be loaded.</description>

            <name>url</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before a network request is made to retrieve the Json text which specifies a node's children. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;This&lt;/strong&gt; : (Object) TreeLoader object.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; : (Object) The Ext.tree.TreeNode object being loaded.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;callback&lt;/strong&gt; : (Object) The callback function specified in the load call.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeLoad</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the node has been successfuly loaded. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;This&lt;/strong&gt; : (Object) TreeLoader object.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; : (Object) The Ext.tree.TreeNode object being loaded.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;response&lt;/strong&gt; : (Object) The response object containing the data from the server.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onLoad</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires if the network request failed.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;This&lt;/strong&gt; : (Object) TreeLoader object.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; : (Object) The Ext.tree.TreeNode object being loaded.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;response&lt;/strong&gt; : (Object) The response object containing the data from the server.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onLoadException</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>&lt;p&gt;The TreePanel provides tree-structured UI representation of tree-structured data.&lt;/p&gt;

 

 &lt;p&gt;TreeNodes added to the TreePanel may each contain metadata used by your application in 

 their attributes property.&lt;/p&gt;

 

 &lt;p&gt;&lt;strong&gt;A TreePanel must have a root node before it is rendered.&lt;/strong&gt; This may either be specified 

 using the root config option, or using the setRootNode method.&lt;/p&gt;

 

 &lt;pre&gt;&lt;code&gt;

 &amp;lt;ext:body runOnLoad="true"&amp;gt;

 	&amp;lt;ext:borderLayout renderTo="hebelek" border="true" width="900" height="600"&amp;gt;

 		&amp;lt;ext:treePanel rootVisible="true" lines="true" region="west" split="true" width="200" autoScroll="true" animate="true" enableDD="true" title="Folder Tree"&amp;gt;

 			&amp;lt;ext:asyncTreeNode text="Root Node" id="source" draggable="false" /&amp;gt;

 			&amp;lt;ext:treeLoader url="servlet/TreeLoaderServlet" method="post" /&amp;gt;

 		&amp;lt;/ext:treePanel&amp;gt;

 		&amp;lt;ext:borderLayout region="center" split="true"&amp;gt;

 			&amp;lt;ext:gridPanel region="north" height="300" forceFit="true" border="true" checkboxEnabled="true"&amp;gt;

 				&amp;lt;ext:jsonStore url="servlet/JsonSampleServlet" root="result"&amp;gt;

 					&amp;lt;ext:httpParam name="action" value="env"/&amp;gt;

 					&amp;lt;ext:storeMapping name="name"/&amp;gt;

 					&amp;lt;ext:storeMapping name="value"/&amp;gt;

 				&amp;lt;/ext:jsonStore&amp;gt;

 				&amp;lt;ext:columnModel&amp;gt;

 					&amp;lt;ext:gridColumn dataIndex="name" header="Name" /&amp;gt;

 					&amp;lt;ext:gridColumn dataIndex="value" header="Value" /&amp;gt;

 				&amp;lt;/ext:columnModel&amp;gt;

 			&amp;lt;/ext:gridPanel&amp;gt;

 			&amp;lt;ext:borderLayout region="center" split="true" border="false"&amp;gt;

 				&amp;lt;ext:panel region="north" height="40" bodyStyle="background-color:#f8f8f8;" contentEl="msgHead" style="border-top: 1px solid #eeeeee; border-bottom:1px solid #eeeeee;"&amp;gt;

 				&amp;lt;/ext:panel&amp;gt;

 				&amp;lt;ext:panel region="center" split="true" border="true"&amp;gt;

 					This is the center pane

 				&amp;lt;/ext:panel&amp;gt;

 			&amp;lt;/ext:borderLayout&amp;gt;

 		&amp;lt;/ext:borderLayout&amp;gt;

 	&amp;lt;/ext:borderLayout&amp;gt;

 &amp;lt;/ext:body&amp;gt;

 

 &amp;lt;div id="hebelek"&amp;gt;&amp;lt;/div&amp;gt;

 

 &amp;lt;div id="msgHead"&amp;gt;

 	&amp;lt;b&amp;gt;From:&amp;lt;/b&amp;gt;Test User&amp;lt;br/&amp;gt;

 	&amp;lt;b&amp;gt;Subject:&amp;lt;/b&amp;gt;Test Subject

 &amp;lt;/div&amp;gt;

 &lt;/code&gt;&lt;/pre&gt;</description>

		<name>treePanel</name>

		<tag-class>isola.tags.ext.tree.TreePanelTag</tag-class>

		<body-content>JSP</body-content>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Whether the component can move the Dom node when rendering (defaults to true).</description>

            <name>allowDomMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element corresponding 

 to a DIV that is already present in the document that specifies some 

 structural markup for this component. When applyTo is used, constituent 

 parts of the component can also be specified by id or CSS class name 

 within the main element, and the component being created may attempt to 

 create its subcomponents from that markup if applicable. Using this 

 config, a call to render() is not required. If applyTo is specified, 

 any value passed for renderTo will be ignored and the target element's 

 parent node will automatically be used as the component's container.</description>

            <name>applyTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the component should check for hidden classes (e.g. 'x-hidden' 

 or 'x-hide-display') and remove them on render (defaults to false).</description>

            <name>autoShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 Element (defaults to ''). This can be useful for adding customized styles 

 to the component or any of its children using standard CSS rules.</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 container (defaults to ''). This can be useful for adding customized 

 styles to the container or any of its children using standard CSS rules.</description>

            <name>ctCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class added to the component when it is disabled (defaults to 

 "x-item-disabled").</description>

            <name>disabledClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide and show the component's container when hide/show is 

 called on the component, false to hide and show the component itself 

 (defaults to false). For example, this can be used as a shortcut 

 for a hide button on a window by setting hide:true on the button when 

 adding it to its parent container.</description>

            <name>hideParent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id of this component (defaults to an auto-assigned id).</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element that will be the 

 container to render this component into. Using this config, a call to 

 render() is not required.</description>

            <name>renderTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id for this component to use for state management purposes 

 (defaults to the component id). See stateful for an explanation of saving 

 and restoring Component state.</description>

            <name>stateId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;A flag which causes the Component to attempt to restore the state of 

 internal properties from a saved state on startup.&lt;/p&gt;

 

 &lt;p&gt;For state saving to work, the state manager's provider must have been 

 set to an implementation of Ext.state.Provider which overrides the set 

 and get methods to save and recall name/value pairs. A built-in 

 implementation, Ext.state.CookieProvider is available.&lt;/p&gt;

 

 &lt;p&gt;To set the state provider for the current page:&lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;Components attempt to save state when one of the events listed in the stateEvents 

 configuration fires.&lt;/p&gt;

 

 &lt;p&gt;You can perform extra processing on state save and restore by attaching 

 handlers to the beforestaterestore, staterestore, beforestatesave and statesave 

 events.&lt;/p&gt;</description>

            <name>stateful</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom style specification to be applied to this component's Element. Should 

 be a valid argument to Ext.Element.applyStyles.</description>

            <name>style</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Where to place this component. Valid values are south, north, west, east, center</description>

            <name>region</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>How this component should hidden. Supported values are "visibility" 

 (css visibility), "offsets" (negative offset position) and "display" 

 (css display) - defaults to "display".</description>

            <name>hideMode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use height:'auto', false to use fixed height (defaults to false).</description>

            <name>autoHeight</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use width:'auto', false to use fixed width (defaults to false).</description>

            <name>autoWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The height of this component in pixels (defaults to auto).</description>

            <name>height</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width of this component in pixels (defaults to auto).</description>

            <name>width</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>HTML Element this object is parsed on.</description>

            <name>el</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A string component id or the numeric index of the component that should be 

 initially activated within the container's layout on render. For example, 

 activeItem: 'item-1' or activeItem: 0 (index 0 = the first item in the 

 container's collection). activeItem only applies to layout styles that can 

 display items one at a time (like Ext.layout.Accordion, 

 Ext.layout.CardLayout and Ext.layout.FitLayout). 

 Related to Ext.layout.ContainerLayout.activeItem.</description>

            <name>activeItem</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If true the container will automatically destroy any contained component 

 that is removed from it, else destruction must be handled manually 

 (defaults to true).</description>

            <name>autoDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>When set to true (100 milliseconds) or a number of milliseconds, the 

 layout assigned for this container will buffer the frequency it calculates 

 and does a re-layout of components. This is useful for heavy containers 

 or containers with a large amount of sub components that frequent calls 

 to layout are expensive.</description>

            <name>bufferResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default type of container represented by this object as registered 

  in Ext.ComponentMgr (defaults to 'panel').</description>

            <name>defaultType</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the borders of each contained component, false to defer to the 

 component's existing border settings (defaults to false).</description>

            <name>hideBorders</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;The layout type to be used in this container. If not specified, a default 

 Ext.layout.ContainerLayout will be created and used. 

 

 &lt;p&gt;Valid values are:&lt;/p&gt;

 &lt;ul&gt;

 &lt;li&gt;accordion, &lt;/li&gt;

 &lt;li&gt;anchor, &lt;/li&gt; 

 &lt;li&gt;border,&lt;/li&gt; 

 &lt;li&gt;card,&lt;/li&gt; 

 &lt;li&gt;column,&lt;/li&gt; 

 &lt;li&gt;fit,&lt;/li&gt; 

 &lt;li&gt;form&lt;/li&gt;

 &lt;li&gt;table.&lt;/li&gt; 

 &lt;/ul&gt;

 &lt;p&gt;Specific config values for the chosen layout type can be specified using 

 layoutConfig.&lt;/p&gt;</description>

            <name>layout</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to automatically monitor window resize events to handle anything that is 

 sensitive to the current size of the viewport. This value is typically managed 

 by the chosen layout and should not need to be set manually.</description>

            <name>monitorResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to animate the transition when the panel is collapsed, false to skip 

 the animation (defaults to true if the Ext.Fx class is available, otherwise 

 false).</description>

            <name>animCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use overflow:'auto' on the panel's body element and show scroll bars 

 automatically when necessary, false to clip any overflowing content 

 (defaults to false).</description>

            <name>autoScroll</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The base CSS class to apply to this panel's element (defaults to 'x-panel').</description>

            <name>baseCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display an interior border on the body element of the panel, false 

 to hide it (defaults to true). This only applies when border == true. If 

 border == true and bodyBorder == false, the border will display as a 1px 

 wide inset border, giving the entire body element an inset appearance.</description>

            <name>bodyBorder</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Custom CSS styles to be applied to the body element in the format expected 

 by Ext.Element.applyStyles (defaults to null).</description>

            <name>bodyStyle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display the borders of the panel's body element, false to hide them 

 (defaults to true). By default, the border is a 2px wide inset border, but 

 this can be further altered by setting bodyBorder to false.</description>

            <name>border</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>When set to true (100 milliseconds) or a number of milliseconds, the 

 layout assigned for this container will buffer the frequency it calculates 

 and does a re-layout of components. This is useful for heavy containers 

 or containers with a large amount of sub components that frequent calls 

 to layout are expensive.</description>

            <name>bufferResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The alignment of any buttons added to this panel. Valid values are 'right,' 

 'left' and 'center' (defaults to 'right').</description>

            <name>buttonAlign</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to make sure the collapse/expand toggle button always renders first (to 

 the left of) any other tools in the panel's title bar, false to render it 

 last (defaults to true).</description>

            <name>collapseFirst</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to render the panel collapsed, false to render it expanded (defaults to false).</description>

            <name>collapsed</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS class to add to the panel's element after it has been collapsed (defaults 

 to 'x-panel-collapsed').</description>

            <name>collapsedCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to make the panel collapsible and have the expand/collapse toggle button 

 automatically rendered into the header tool button area, false to keep the 

 panel statically sized with no button (defaults to false).</description>

            <name>collapsible</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of an existing HTML node to use as the panel's body content (defaults to '').</description>

            <name>contentEl</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to enable dragging of this Panel (defaults to false). For custom drag/drop 

 implementations, an Ext.Panel.DD config could also be passed in this config 

 instead of true, although Ext.Panel.DD is an internal, undocumented class.</description>

            <name>draggable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A comma-delimited list of panel elements to initialize when the panel is 

 rendered. Normally, this list will be generated automatically based on the items 

 added to the panel at config time, but sometimes it might be useful to make 

 sure a structural element is rendered even if not specified at config time 

 (for example, you may want to add a button or toolbar dynamically after the 

 panel has been rendered). Adding those elements to this list will allocate 

 the required placeholders in the panel when it is rendered. 

 Valid values are

 &lt;ul&gt;

 &lt;li&gt;header&lt;/li&gt;

 &lt;li&gt;tbar (top bar)&lt;/li&gt;

 &lt;li&gt;body&lt;/li&gt;

 &lt;li&gt;bbar (bottom bar)&lt;/li&gt;

 &lt;li&gt;footer&lt;/li&gt;

 &lt;/ul&gt;

 Defaults to 'body'.</description>

            <name>elements</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to float the panel (absolute position it with automatic shimming and shadow), 

 false to display it inline where it is rendered (defaults to false). Note that 

 by default, setting floating to true will cause the panel to display at negative 

 offsets so that it is hidden -- because the panel is absolute positioned, the 

 position must be set explicitly after render (e.g., myPanel.setPosition(100,100);). 

 Also, when floating a panel you should always assign a fixed width, otherwise it 

 will be auto width and will expand to fill to the right edge of the viewport.</description>

            <name>floating</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to create the footer element explicitly, false to skip creating it. By 

 default, when footer is not specified, if one or more buttons have been added 

 to the panel the footer will be created automatically, otherwise it will not.</description>

            <name>footer</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Shows a nice rounded corner with a thick border around the panel.</description>

            <name>frame</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to create the header element explicitly, false to skip creating it. By 

 default, when header is not specified, if a title is set the header will be 

 created automatically, otherwise it will not. If a title is set but header is 

 explicitly set to false, the header will not be rendered.</description>

            <name>header</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display the panel title in the header, false to hide it (defaults to true).</description>

            <name>headerAsText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the expand/collapse toggle button when collapsible = true, false 

 to display it (defaults to false).</description>

            <name>hideCollapseTool</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An HTML fragment, or a DomHelper specification to use as the panel's body 

 content (defaults to '').</description>

            <name>html</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS class that will provide a background image to be used as the panel header 

 icon (defaults to '').</description>

            <name>iconCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to mask the panel when it is disabled, false to not mask it (defaults 

 to true). Either way, the panel will always tell its contained elements to 

 disable themselves when it is disabled, but masking the panel can provide an 

 additional visual cue that the panel is disabled.</description>

            <name>maskDisabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Minimum width in pixels of all buttons in this panel (defaults to 75)</description>

            <name>minButtonWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True (or a valid Ext.Shadow Ext.Shadow.mode value) to display a shadow behind 

 the panel, false to display no shadow (defaults to 'sides'). Note that this 

 option only applies when floating = true.</description>

            <name>shadow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The number of pixels to offset the shadow if displayed (defaults to 4). Note 

 that this option only applies when floating = true.</description>

            <name>shadowOffset</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>False to disable the iframe shim in browsers which need one (defaults to true). 

 Note that this option only applies when floating = true.</description>

            <name>shim</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Adds a tooltip when mousing over the tab of a Ext.Panel which is an item of a 

 Ext.TabPanel. Ext.QuickTips.init() must be called in order for the tips to render.</description>

            <name>tabTip</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The title text to display in the panel header (defaults to ''). When a title 

 is specified the header element will automatically be created and displayed 

 unless header is explicitly set to false. If you don't want to specify a title 

 at config time, but you may want one later, you must either specify a non-empty 

 title (a blank space ' ' will do) or header:true so that the container element 

 will get created.</description>

            <name>title</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to allow expanding and collapsing the panel (when collapsible = true) 

 by clicking anywhere in the header bar, false to allow it only by clicking to 

 tool button (defaults to false).</description>

            <name>titleCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If border layout is used then you can set this option to true to place a splitbar 

 between the panels.</description>

            <name>split</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>xtype</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If anchor layout is used you can set an anchor value here.</description>

            <name>anchor</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If absolute layout is used you can set an absolute X position in pixels to place the component in

 the layout.</description>

            <name>x</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If absolute layout is used you can set an absolute Y position in pixels to place the component in

 the layout.</description>

            <name>y</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If column layout is used you can give a float column width from 0 to 1. Valid example: .5</description>

            <name>columnWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If table layout is used you can set rowspan as in an ordinary table.</description>

            <name>rowSpan</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If table layout is used you can set colspan as in an ordinary table.</description>

            <name>colSpan</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>true to enable animated expand/collapse (defaults to the value of Ext.enableFx)</description>

            <name>animate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>true to register this container with ScrollManager</description>

            <name>containerScroll</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the tree should only allow append drops (use for trees which are sorted)</description>

            <name>ddAppendOnly</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The DD group this TreePanel belongs to</description>

            <name>ddGroup</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>true to enable body scrolling</description>

            <name>ddScroll</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>true to enable drag and drop</description>

            <name>enableDD</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>true to enable just drag</description>

            <name>enableDrag</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>true to enable just drop</description>

            <name>enableDrop</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The color of the node highlight (defaults to C3DAF9)</description>

            <name>hlColor</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>false to disable node highlight on drop (defaults to the value of Ext.enableFx)</description>

            <name>hlDrop</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>false to disable tree lines (defaults to true)</description>

            <name>lines</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The token used to separate sub-paths in path strings (defaults to '/')</description>

            <name>pathSeparator</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>false to hide the root node (defaults to true)</description>

            <name>rootVisible</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>true if only 1 node per branch may be expanded</description>

            <name>singleExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is destroyed. Return false to stop the destroy.&lt;p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is hidden. Return false to stop the hide.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is rendered. Return false to stop the render. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is shown. Return false to stop the show. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is restored. Return false to stop the restore.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is saved to the 

 configured state provider. Return false to stop the save. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before a node is moved to a new location in the tree. Return false to cancel the move.
	 		Listeners will be called with the following arguments:
 &lt;ul&gt;
 &lt;li&gt;&lt;strong&gt;tree&lt;/strong&gt;:The owner tree&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt;:The node being moved&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;oldParent&lt;/strong&gt;:The parent of the node&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;newParent&lt;/strong&gt;:The new parent the node is moving to&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:The index it is being moved to&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeMoveNode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>



		<attribute><description>&lt;p&gt;Fires after the component is destroyed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>




		<attribute><description>&lt;p&gt;Fires after the component is disabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is enabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEnable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is hidden. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is rendered.  &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is shown.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is restored. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is saved to the configured state provider. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is moved. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;x&lt;/strong&gt;: (Number)The new x position&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;y&lt;/strong&gt;: (Number)The new y position&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is resized.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjWidth&lt;/strong&gt;:(Number) The box-adjusted width that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjHeight&lt;/strong&gt;:(Number) The box-adjusted height that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawWidth&lt;/strong&gt;:(Number) The width that was originally specified&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawHeight&lt;/strong&gt;:(Number) The height that was originally specified&lt;/li&gt; 		

 &lt;/ul&gt;</description>

            <name>onResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after any Ext.Component is added or inserted into the container.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;:(Ext.Component) The component that was added&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the component was added to the container's items collection&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAdd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the components in this container are arranged by the associated layout manager. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;layout&lt;/strong&gt;:(ContainerLayout) The ContainerLayout implementation for this container&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAfterLayout</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before any Ext.Component is added or inserted into the container. A handler can return false to cancel the add.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;:(Ext.Component) The component being added&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the component will be added to the container's items collection&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeAdd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before any Ext.Component is removed from the container. A handler can return false to cancel the remove. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: (Ext.Component) The component being removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after any Ext.Component is removed from the container&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: (Ext.Component) The component that was removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been visually activated. Note that Panels do not directly support 

 being activated, but some Panel subclasses do (like Ext.Window). Panels which are child Components 

 of a TabPanel fire the activate and deactivate events under the control of the TabPanel. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been activated.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onActivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is closed. Note that Panels do not directly support being closed, but some

  Panel subclasses do (like Ext.Window). This event only applies to such subclasses. A handler can 

  return false to cancel the close. &lt;/p&gt;

  Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel being closed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeClose</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is collapsed. A handler can return false to cancel the collapse. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel being collapsed.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;animate&lt;/strong&gt;:(Boolean) True if the collapse is animated, else false.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is expanded. A handler can return false to cancel the expand. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel being expanded.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;animate&lt;/strong&gt;:(Boolean) True if the expand is animated, else false.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been resized. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel which has been resized.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;width&lt;/strong&gt;:(Number) The Panel's new width.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;height &lt;/strong&gt;:(Number) The Panel's new height.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBodyResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel is closed. Note that Panels do not directly support being closed, but 

 some Panel subclasses do (like Ext.Window). &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been closed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onClose</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been collapsed. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel that has been collapsed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been visually deactivated. Note that Panels do not directly support 

 being deactivated, but some Panel subclasses do (like Ext.Window). Panels which are child Components

 of a TabPanel fire the activate and deactivate events under the control of the TabPanel. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been deactivated.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDeactivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been expanded. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been expanded.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel title has been set or changed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel which has had its title changed.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;The&lt;/strong&gt;:(String) new title.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onTitleChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a new child node is appended to a node in this tree. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;tree&lt;/strong&gt; : (Tree) The owner tree.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;parent&lt;/strong&gt; : (Node) The parent node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; : (Node) The newly appended node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt; : (Number) The index of the newly appended node&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAppend</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before a new child is appended to a node in this tree, return false to cancel the append. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;tree&lt;/strong&gt; : (Tree) The owner tree.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;parent&lt;/strong&gt; : (Node) The parent node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; : (Node) The newly appended node&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeAppend</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires right before the child nodes for a node are rendered &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; : (Node) The node&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeChildRendered</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before click processing on a node. Return false to cancel the default action. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; : (Node) The node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (Ext.EventObject) The event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before a node is collapsed, return false to cancel. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; : (Node) The node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;deep&lt;/strong&gt; : Boolean&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;anim&lt;/strong&gt; : Boolean&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeCollapseNode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is expanded. A handler can return false to cancel the expand. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; : (Ext.Panel) The Panel being expanded.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;animate&lt;/strong&gt; : (Boolean) True if the expand is animated, else false.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeExpandNode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before a new child is inserted in a node in this tree, return false to cancel the insert. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;tree&lt;/strong&gt; : (Tree) The owner tree.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;parent&lt;/strong&gt; : (Node) The parent node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; : (Node) The child node to be inserted&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;refNode&lt;/strong&gt; : (Node) The child node the node is being inserted before&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeInsert</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before a node is loaded, return false to cancel &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; : (Node) The node being loaded.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeLoad</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before a node is moved to a new location in the tree. Return false to cancel the move.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;tree&lt;/strong&gt; : (Tree) The owner tree&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; : (Node) The node being moved&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;oldParent&lt;/strong&gt; : (Node) The parent of the node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;newParent&lt;/strong&gt; : (Node) The new parent the node is moving to&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt; : (Number) The index it is being moved to&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRemoveNode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a DD object is dropped on a node in this tree for preprocessing. Return false to cancel 

 the drop. The dropEvent passed to handlers has the following properties:&lt;/p&gt;

 &lt;pre&gt;

 tree - The TreePanel

 target - The node being targeted for the drop

 data - The drag data from the drag source

 point - The point of the drop - append, above or below

 source - The drag source

 rawEvent - Raw mouse event

 dropNode - Drop node(s) provided by the source &lt;strong&gt;OR&lt;/strong&gt; you can supply node(s) to be inserted by setting them on this object.

 cancel - Set this to true to cancel the drop.

 dropStatus - If the default drop action is cancelled but the drop is valid, setting this to true will prevent the animated "repair" from appearing.

 &lt;/pre&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;dropEvent &lt;/strong&gt; : Object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeNodeDrop</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before any Ext.Component is removed from the container. A handler can return false to cancel the remove. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: (Ext.Component) The component being removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a node with a checkbox's checked property changes &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : (Node) This node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;checked&lt;/strong&gt; : Boolean&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onCheckChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a node is clicked &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; : (Node) The node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (Ext.EventObject) The event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a node is collapsed &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; : (Node) The node&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onCollapseNode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a node is right clicked &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; : (Node) The node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (Ext.EventObject) The event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onContextMenu</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a node is double clicked &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; : (Node) The node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (Ext.EventObject) The event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDblClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the disabled status of a node changes &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; : (Node) The node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;disabled&lt;/strong&gt; : Boolean&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisabledChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a dragged node is dropped on a valid DD target &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.tree.TreePanel&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; :  Ext.tree.TreeNode&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;dd&lt;/strong&gt; : (DD) The dd it was dropped on&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (Event) The raw browser event&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDragDrop</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a drag operation is complete &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.tree.TreePanel&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; :  Ext.tree.TreeNode&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (Event) The raw browser event&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEndDrag</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a node is expanded &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; : (Node) The node&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onExpandNode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a new child node is inserted in a node in this tree. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;tree&lt;/strong&gt; : (Tree) The owner tree&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;parent&lt;/strong&gt; : (Node) The parent node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; : (Node) The child node inserted&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;refNode&lt;/strong&gt; : (Node) The child node the node was inserted before&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onInsert</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a node is loaded &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; : (Node) The node that was loaded&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onLoad</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a node is moved to a new location in the tree &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;tree&lt;/strong&gt; : (Tree) The owner tree&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; : (Node) The node moved&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;oldParent&lt;/strong&gt; : (Node) The old parent of this node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;newParent&lt;/strong&gt; : (Node) The new parent of this node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt; : (Number) The index it was moved to&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMoveNode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a tree node is being targeted for a drag drop, return false to signal drop not allowed.

 The dragOverEvent passed to handlers has the following properties:&lt;/p&gt;

 &lt;pre&gt;

 tree - The TreePanel

 target - The node being targeted for the drop

 data - The drag data from the drag source

 point - The point of the drop - append, above or below

 source - The drag source

 rawEvent - Raw mouse event

 dropNode - Drop node(s) provided by the source.

 cancel - Set this to true to signal drop not allowed.

 

 &lt;/pre&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;dragOverEvent&lt;/strong&gt; : Object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onNodeDragOver</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after a DD object is dropped on a node in this tree. 

 The dropEvent passed to handlers has the following properties:&lt;/p&gt;

 &lt;pre&gt;

 tree - The TreePanel

 target - The node being targeted for the drop

 data - The drag data from the drag source

 point - The point of the drop - append, above or below

 source - The drag source

 rawEvent - Raw mouse event

 dropNode - Dropped node(s).

 

 &lt;/pre&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;dropEvent&lt;/strong&gt; : Object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onNodeDrop</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after any Ext.Component is removed from the container&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: (Ext.Component) The component that was removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a node starts being dragged &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.tree.TreePanel&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; :  Ext.tree.TreeNode&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (Event) The raw browser event&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStartDrag</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the text for a node is changed &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; : (Node) The node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;text&lt;/strong&gt; : (String) The new text&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;oldText&lt;/strong&gt; : (String) The old text&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onTextChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag>

		<name>asyncTreeNode</name>

		<tag-class>isola.tags.ext.tree.AsyncTreeNodeTag</tag-class>

		<body-content>JSP</body-content>

		<attribute><description>The id for this node. If one is not specified, one is generated.</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>true to start the node expanded.</description>

            <name>expanded</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>true if this node is a leaf and does not have children</description>

            <name>leaf</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>False to not allow this node to have child nodes (defaults to true)</description>

            <name>allowChildren</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>False to make this node undraggable if draggable = true (defaults to true)</description>

            <name>allowDrag</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>False if this node cannot have child nodes dropped on it (defaults to true)</description>

            <name>allowDrop</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to render a checked checkbox for this node, false to render an unchecked checkbox 

 (defaults to undefined with no checkbox rendered)</description>

            <name>checked</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A css class to be added to the node</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>true to start the node disabled</description>

            <name>disabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to make this node draggable (defaults to false)</description>

            <name>draggable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If set to true, the node will always show a plus/minus icon, even when empty</description>

            <name>expandable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>URL of the link used for the node (defaults to #)</description>

            <name>href</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>target frame for the link</description>

            <name>hrefTarget</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The path to an icon for the node. The preferred way to do this is to use the cls or 

 iconCls attributes and add the icon via a CSS background image.</description>

            <name>icon</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A css class to be added to the nodes icon element for applying css background images</description>

            <name>iconCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>False to not allow this node to act as a drop target (defaults to true)</description>

            <name>isTarget</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An Ext QuickTip for the node</description>

            <name>qtip</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True for single click expand on this node</description>

            <name>singleClickExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The text for this node</description>

            <name>text</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires right before the child nodes for this node are rendered &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;This&lt;/strong&gt; : (Node) This node.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeChildrenRendered</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before click processing. Return false to cancel the default action. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;This&lt;/strong&gt; : (Node) This node.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (Ext.EventObject) The event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before this node is collapsed, return false to cancel. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;This&lt;/strong&gt; : (Node) This node.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;deep&lt;/strong&gt; : Boolean&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;anim&lt;/strong&gt; : Boolean&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before this node is expanded, return false to cancel. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;This&lt;/strong&gt; : (Node) This node.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;deep&lt;/strong&gt; : Boolean&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;anim&lt;/strong&gt; : Boolean&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a node with a checkbox's checked property changes &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;This&lt;/strong&gt; : (Node) This node.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;checked&lt;/strong&gt; : Boolean&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onCheckChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this node is clicked &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;This&lt;/strong&gt; : (Node) This node.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (Ext.EventObject) The event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this node is collapsed &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;This&lt;/strong&gt; : (Node) This node.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this node is right clicked &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;This&lt;/strong&gt; : (Node) This node.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (Ext.EventObject) The event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onContextMenu</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this node is double clicked&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;This&lt;/strong&gt; : (Node) This node.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (Ext.EventObject) The event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDblClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the disabled status of this node changes &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;This&lt;/strong&gt; : (Node) This node.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;disabled&lt;/strong&gt; : Boolean&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisabledChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this node is expanded &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;This&lt;/strong&gt; : (Node) This node.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the text for this node is changed &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;This&lt;/strong&gt; : (Node) This node.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;text&lt;/strong&gt; : (String) The new text&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;oldText&lt;/strong&gt; : (String) The old text&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onTextChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a new child node is appended &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;tree&lt;/strong&gt;:(Tree) The owner tree&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:(Node) This node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt;:(Node) The newly appended node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index of the newly appended node&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAppend</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before a new child is appended, return false to cancel the append. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;tree&lt;/strong&gt;:(Tree) The owner tree&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:(Node) This node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt;:(Node) The child node to be appended&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeAppend</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before a new child is inserted, return false to cancel the insert. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;tree&lt;/strong&gt;:(Tree) The owner tree&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:(Node) This node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt;:(Node) The child node to be inserted&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;refNode&lt;/strong&gt;:(Node) The child node the node is being inserted before&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeInsert</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before this node is moved to a new location in the tree. Return false to cancel the move. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;tree&lt;/strong&gt;:(Tree) The owner tree&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:(Node) This node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;oldParent&lt;/strong&gt;:(Node) The parent of this node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;newParent&lt;/strong&gt;:(Node) The new parent this node is moving to&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index it is being moved to&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before a child is removed, return false to cancel the remove. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;tree&lt;/strong&gt;:(Tree) The owner tree&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:(Node) This node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt;:(Node) The child node to be removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a new child node is inserted. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;tree&lt;/strong&gt;:(Tree) The owner tree&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:(Node) This node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt;:(Node) The child node inserted&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;refNode&lt;/strong&gt;:(Node) The child node the node was inserted before&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onInsert</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this node is moved to a new location in the tree &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;tree&lt;/strong&gt;:(Tree) The owner tree&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:(Node) This node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;oldParent&lt;/strong&gt;:(Node) The old parent of this node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;newParent&lt;/strong&gt;:(Node) The new parent of this node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index it was moved to&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a child node is removed &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;tree&lt;/strong&gt;:(Tree) The owner tree&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:(Node) This node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt;:(Node) The removed node&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>





	<tag><description>&lt;p&gt;An updateable progress bar component. The progress bar supports two different 

 modes: manual and automatic.&lt;/p&gt;

 

 &lt;p&gt;In manual mode, you are responsible for showing, updating (via updateProgress) and 

 clearing the progress bar as needed from your own code. This method is most appropriate 

 when you want to show progress throughout an operation that has predictable points of 

 interest at which you can update the control.&lt;/p&gt;

 

 &lt;p&gt;In automatic mode, you simply call wait and let the progress bar run indefinitely, 

 only clearing it once the operation is complete. You can optionally have the progress 

 bar wait for a specific amount of time and then clear itself. Automatic mode is most 

 appropriate for timed operations or asymchronous operations in which you have no need 

 for indicating intermediate progress.&lt;/p&gt;</description>

		<name>progressBar</name>

		<tag-class>isola.tags.ext.misc.ProgressBarTag</tag-class>

		<body-content>empty</body-content>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Whether the component can move the Dom node when rendering (defaults to true).</description>

            <name>allowDomMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element corresponding 

 to a DIV that is already present in the document that specifies some 

 structural markup for this component. When applyTo is used, constituent 

 parts of the component can also be specified by id or CSS class name 

 within the main element, and the component being created may attempt to 

 create its subcomponents from that markup if applicable. Using this 

 config, a call to render() is not required. If applyTo is specified, 

 any value passed for renderTo will be ignored and the target element's 

 parent node will automatically be used as the component's container.</description>

            <name>applyTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the component should check for hidden classes (e.g. 'x-hidden' 

 or 'x-hide-display') and remove them on render (defaults to false).</description>

            <name>autoShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 Element (defaults to ''). This can be useful for adding customized styles 

 to the component or any of its children using standard CSS rules.</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 container (defaults to ''). This can be useful for adding customized 

 styles to the container or any of its children using standard CSS rules.</description>

            <name>ctCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class added to the component when it is disabled (defaults to 

 "x-item-disabled").</description>

            <name>disabledClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide and show the component's container when hide/show is 

 called on the component, false to hide and show the component itself 

 (defaults to false). For example, this can be used as a shortcut 

 for a hide button on a window by setting hide:true on the button when 

 adding it to its parent container.</description>

            <name>hideParent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id of this component (defaults to an auto-assigned id).</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element that will be the 

 container to render this component into. Using this config, a call to 

 render() is not required.</description>

            <name>renderTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id for this component to use for state management purposes 

 (defaults to the component id). See stateful for an explanation of saving 

 and restoring Component state.</description>

            <name>stateId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;A flag which causes the Component to attempt to restore the state of 

 internal properties from a saved state on startup.&lt;/p&gt;

 

 &lt;p&gt;For state saving to work, the state manager's provider must have been 

 set to an implementation of Ext.state.Provider which overrides the set 

 and get methods to save and recall name/value pairs. A built-in 

 implementation, Ext.state.CookieProvider is available.&lt;/p&gt;

 

 &lt;p&gt;To set the state provider for the current page:&lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;Components attempt to save state when one of the events listed in the stateEvents 

 configuration fires.&lt;/p&gt;

 

 &lt;p&gt;You can perform extra processing on state save and restore by attaching 

 handlers to the beforestaterestore, staterestore, beforestatesave and statesave 

 events.&lt;/p&gt;</description>

            <name>stateful</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom style specification to be applied to this component's Element. Should 

 be a valid argument to Ext.Element.applyStyles.</description>

            <name>style</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Where to place this component. Valid values are south, north, west, east, center</description>

            <name>region</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>How this component should hidden. Supported values are "visibility" 

 (css visibility), "offsets" (negative offset position) and "display" 

 (css display) - defaults to "display".</description>

            <name>hideMode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use height:'auto', false to use fixed height (defaults to false).</description>

            <name>autoHeight</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use width:'auto', false to use fixed width (defaults to false).</description>

            <name>autoWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The height of this component in pixels (defaults to auto).</description>

            <name>height</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width of this component in pixels (defaults to auto).</description>

            <name>width</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>HTML Element this object is parsed on.</description>

            <name>el</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The base CSS class to apply to the progress bar's wrapper element (defaults to 

 'x-progress')</description>

            <name>baseCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The progress bar text (defaults to '')</description>

            <name>text</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The element to render the progress text to (defaults to the progress bar's internal text 

 element)</description>

            <name>textEl</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A floating point value between 0 and 1 (e.g., .5, defaults to 0)</description>

            <name>value</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after each update interval &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.ProgressBar&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;The&lt;/strong&gt; : (Number) current progress value&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;The&lt;/strong&gt; : (String) current progress textt&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onUpdate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is destroyed. Return false to stop the destroy.&lt;p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is hidden. Return false to stop the hide.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is rendered. Return false to stop the render. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is shown. Return false to stop the show. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is restored. Return false to stop the restore.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is saved to the 

 configured state provider. Return false to stop the save. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is destroyed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is disabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is enabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEnable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is hidden. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is rendered.  &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is shown.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is restored. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is saved to the configured state provider. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is moved. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;x&lt;/strong&gt;: (Number)The new x position&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;y&lt;/strong&gt;: (Number)The new y position&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is resized.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjWidth&lt;/strong&gt;:(Number) The box-adjusted width that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjHeight&lt;/strong&gt;:(Number) The box-adjusted height that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawWidth&lt;/strong&gt;:(Number) The width that was originally specified&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawHeight&lt;/strong&gt;:(Number) The height that was originally specified&lt;/li&gt; 		

 &lt;/ul&gt;</description>

            <name>onResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>A specialized panel intended for use as an application window. Windows are floated and 

 draggable by default, and also provide specific behavior like the ability to maximize and 

 restore (with an event for minimizing, since the minimize behavior is 

 application-specific). Windows can also be linked to a Ext.WindowGroup or managed by the 

 Ext.WindowManager to provide grouping, activation, to front/back and other 

 application-specific behavior.</description>

		<name>window</name>

		<tag-class>isola.tags.ext.window.WindowTag</tag-class>

		<body-content>JSP</body-content>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Whether the component can move the Dom node when rendering (defaults to true).</description>

            <name>allowDomMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element corresponding 

 to a DIV that is already present in the document that specifies some 

 structural markup for this component. When applyTo is used, constituent 

 parts of the component can also be specified by id or CSS class name 

 within the main element, and the component being created may attempt to 

 create its subcomponents from that markup if applicable. Using this 

 config, a call to render() is not required. If applyTo is specified, 

 any value passed for renderTo will be ignored and the target element's 

 parent node will automatically be used as the component's container.</description>

            <name>applyTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the component should check for hidden classes (e.g. 'x-hidden' 

 or 'x-hide-display') and remove them on render (defaults to false).</description>

            <name>autoShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 Element (defaults to ''). This can be useful for adding customized styles 

 to the component or any of its children using standard CSS rules.</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 container (defaults to ''). This can be useful for adding customized 

 styles to the container or any of its children using standard CSS rules.</description>

            <name>ctCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class added to the component when it is disabled (defaults to 

 "x-item-disabled").</description>

            <name>disabledClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide and show the component's container when hide/show is 

 called on the component, false to hide and show the component itself 

 (defaults to false). For example, this can be used as a shortcut 

 for a hide button on a window by setting hide:true on the button when 

 adding it to its parent container.</description>

            <name>hideParent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id of this component (defaults to an auto-assigned id).</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element that will be the 

 container to render this component into. Using this config, a call to 

 render() is not required.</description>

            <name>renderTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id for this component to use for state management purposes 

 (defaults to the component id). See stateful for an explanation of saving 

 and restoring Component state.</description>

            <name>stateId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;A flag which causes the Component to attempt to restore the state of 

 internal properties from a saved state on startup.&lt;/p&gt;

 

 &lt;p&gt;For state saving to work, the state manager's provider must have been 

 set to an implementation of Ext.state.Provider which overrides the set 

 and get methods to save and recall name/value pairs. A built-in 

 implementation, Ext.state.CookieProvider is available.&lt;/p&gt;

 

 &lt;p&gt;To set the state provider for the current page:&lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;Components attempt to save state when one of the events listed in the stateEvents 

 configuration fires.&lt;/p&gt;

 

 &lt;p&gt;You can perform extra processing on state save and restore by attaching 

 handlers to the beforestaterestore, staterestore, beforestatesave and statesave 

 events.&lt;/p&gt;</description>

            <name>stateful</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom style specification to be applied to this component's Element. Should 

 be a valid argument to Ext.Element.applyStyles.</description>

            <name>style</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Where to place this component. Valid values are south, north, west, east, center</description>

            <name>region</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>How this component should hidden. Supported values are "visibility" 

 (css visibility), "offsets" (negative offset position) and "display" 

 (css display) - defaults to "display".</description>

            <name>hideMode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use height:'auto', false to use fixed height (defaults to false).</description>

            <name>autoHeight</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use width:'auto', false to use fixed width (defaults to false).</description>

            <name>autoWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The height of this component in pixels (defaults to auto).</description>

            <name>height</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width of this component in pixels (defaults to auto).</description>

            <name>width</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>HTML Element this object is parsed on.</description>

            <name>el</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A string component id or the numeric index of the component that should be 

 initially activated within the container's layout on render. For example, 

 activeItem: 'item-1' or activeItem: 0 (index 0 = the first item in the 

 container's collection). activeItem only applies to layout styles that can 

 display items one at a time (like Ext.layout.Accordion, 

 Ext.layout.CardLayout and Ext.layout.FitLayout). 

 Related to Ext.layout.ContainerLayout.activeItem.</description>

            <name>activeItem</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If true the container will automatically destroy any contained component 

 that is removed from it, else destruction must be handled manually 

 (defaults to true).</description>

            <name>autoDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>When set to true (100 milliseconds) or a number of milliseconds, the 

 layout assigned for this container will buffer the frequency it calculates 

 and does a re-layout of components. This is useful for heavy containers 

 or containers with a large amount of sub components that frequent calls 

 to layout are expensive.</description>

            <name>bufferResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default type of container represented by this object as registered 

  in Ext.ComponentMgr (defaults to 'panel').</description>

            <name>defaultType</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the borders of each contained component, false to defer to the 

 component's existing border settings (defaults to false).</description>

            <name>hideBorders</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;The layout type to be used in this container. If not specified, a default 

 Ext.layout.ContainerLayout will be created and used. 

 

 &lt;p&gt;Valid values are:&lt;/p&gt;

 &lt;ul&gt;

 &lt;li&gt;accordion, &lt;/li&gt;

 &lt;li&gt;anchor, &lt;/li&gt; 

 &lt;li&gt;border,&lt;/li&gt; 

 &lt;li&gt;card,&lt;/li&gt; 

 &lt;li&gt;column,&lt;/li&gt; 

 &lt;li&gt;fit,&lt;/li&gt; 

 &lt;li&gt;form&lt;/li&gt;

 &lt;li&gt;table.&lt;/li&gt; 

 &lt;/ul&gt;

 &lt;p&gt;Specific config values for the chosen layout type can be specified using 

 layoutConfig.&lt;/p&gt;</description>

            <name>layout</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to automatically monitor window resize events to handle anything that is 

 sensitive to the current size of the viewport. This value is typically managed 

 by the chosen layout and should not need to be set manually.</description>

            <name>monitorResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to animate the transition when the panel is collapsed, false to skip 

 the animation (defaults to true if the Ext.Fx class is available, otherwise 

 false).</description>

            <name>animCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use overflow:'auto' on the panel's body element and show scroll bars 

 automatically when necessary, false to clip any overflowing content 

 (defaults to false).</description>

            <name>autoScroll</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The base CSS class to apply to this panel's element (defaults to 'x-panel').</description>

            <name>baseCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display an interior border on the body element of the panel, false 

 to hide it (defaults to true). This only applies when border == true. If 

 border == true and bodyBorder == false, the border will display as a 1px 

 wide inset border, giving the entire body element an inset appearance.</description>

            <name>bodyBorder</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Custom CSS styles to be applied to the body element in the format expected 

 by Ext.Element.applyStyles (defaults to null).</description>

            <name>bodyStyle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display the borders of the panel's body element, false to hide them 

 (defaults to true). By default, the border is a 2px wide inset border, but 

 this can be further altered by setting bodyBorder to false.</description>

            <name>border</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>When set to true (100 milliseconds) or a number of milliseconds, the 

 layout assigned for this container will buffer the frequency it calculates 

 and does a re-layout of components. This is useful for heavy containers 

 or containers with a large amount of sub components that frequent calls 

 to layout are expensive.</description>

            <name>bufferResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The alignment of any buttons added to this panel. Valid values are 'right,' 

 'left' and 'center' (defaults to 'right').</description>

            <name>buttonAlign</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to make sure the collapse/expand toggle button always renders first (to 

 the left of) any other tools in the panel's title bar, false to render it 

 last (defaults to true).</description>

            <name>collapseFirst</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to render the panel collapsed, false to render it expanded (defaults to false).</description>

            <name>collapsed</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS class to add to the panel's element after it has been collapsed (defaults 

 to 'x-panel-collapsed').</description>

            <name>collapsedCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to make the panel collapsible and have the expand/collapse toggle button 

 automatically rendered into the header tool button area, false to keep the 

 panel statically sized with no button (defaults to false).</description>

            <name>collapsible</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of an existing HTML node to use as the panel's body content (defaults to '').</description>

            <name>contentEl</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to enable dragging of this Panel (defaults to false). For custom drag/drop 

 implementations, an Ext.Panel.DD config could also be passed in this config 

 instead of true, although Ext.Panel.DD is an internal, undocumented class.</description>

            <name>draggable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A comma-delimited list of panel elements to initialize when the panel is 

 rendered. Normally, this list will be generated automatically based on the items 

 added to the panel at config time, but sometimes it might be useful to make 

 sure a structural element is rendered even if not specified at config time 

 (for example, you may want to add a button or toolbar dynamically after the 

 panel has been rendered). Adding those elements to this list will allocate 

 the required placeholders in the panel when it is rendered. 

 Valid values are

 &lt;ul&gt;

 &lt;li&gt;header&lt;/li&gt;

 &lt;li&gt;tbar (top bar)&lt;/li&gt;

 &lt;li&gt;body&lt;/li&gt;

 &lt;li&gt;bbar (bottom bar)&lt;/li&gt;

 &lt;li&gt;footer&lt;/li&gt;

 &lt;/ul&gt;

 Defaults to 'body'.</description>

            <name>elements</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to float the panel (absolute position it with automatic shimming and shadow), 

 false to display it inline where it is rendered (defaults to false). Note that 

 by default, setting floating to true will cause the panel to display at negative 

 offsets so that it is hidden -- because the panel is absolute positioned, the 

 position must be set explicitly after render (e.g., myPanel.setPosition(100,100);). 

 Also, when floating a panel you should always assign a fixed width, otherwise it 

 will be auto width and will expand to fill to the right edge of the viewport.</description>

            <name>floating</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to create the footer element explicitly, false to skip creating it. By 

 default, when footer is not specified, if one or more buttons have been added 

 to the panel the footer will be created automatically, otherwise it will not.</description>

            <name>footer</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Shows a nice rounded corner with a thick border around the panel.</description>

            <name>frame</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to create the header element explicitly, false to skip creating it. By 

 default, when header is not specified, if a title is set the header will be 

 created automatically, otherwise it will not. If a title is set but header is 

 explicitly set to false, the header will not be rendered.</description>

            <name>header</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display the panel title in the header, false to hide it (defaults to true).</description>

            <name>headerAsText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the expand/collapse toggle button when collapsible = true, false 

 to display it (defaults to false).</description>

            <name>hideCollapseTool</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An HTML fragment, or a DomHelper specification to use as the panel's body 

 content (defaults to '').</description>

            <name>html</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS class that will provide a background image to be used as the panel header 

 icon (defaults to '').</description>

            <name>iconCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to mask the panel when it is disabled, false to not mask it (defaults 

 to true). Either way, the panel will always tell its contained elements to 

 disable themselves when it is disabled, but masking the panel can provide an 

 additional visual cue that the panel is disabled.</description>

            <name>maskDisabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Minimum width in pixels of all buttons in this panel (defaults to 75)</description>

            <name>minButtonWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True (or a valid Ext.Shadow Ext.Shadow.mode value) to display a shadow behind 

 the panel, false to display no shadow (defaults to 'sides'). Note that this 

 option only applies when floating = true.</description>

            <name>shadow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The number of pixels to offset the shadow if displayed (defaults to 4). Note 

 that this option only applies when floating = true.</description>

            <name>shadowOffset</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>False to disable the iframe shim in browsers which need one (defaults to true). 

 Note that this option only applies when floating = true.</description>

            <name>shim</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Adds a tooltip when mousing over the tab of a Ext.Panel which is an item of a 

 Ext.TabPanel. Ext.QuickTips.init() must be called in order for the tips to render.</description>

            <name>tabTip</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The title text to display in the panel header (defaults to ''). When a title 

 is specified the header element will automatically be created and displayed 

 unless header is explicitly set to false. If you don't want to specify a title 

 at config time, but you may want one later, you must either specify a non-empty 

 title (a blank space ' ' will do) or header:true so that the container element 

 will get created.</description>

            <name>title</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to allow expanding and collapsing the panel (when collapsible = true) 

 by clicking anywhere in the header bar, false to allow it only by clicking to 

 tool button (defaults to false).</description>

            <name>titleCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If border layout is used then you can set this option to true to place a splitbar 

 between the panels.</description>

            <name>split</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If anchor layout is used you can set an anchor value here.</description>

            <name>anchor</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If absolute layout is used you can set an absolute X position in pixels to place the component in

 the layout.</description>

            <name>x</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If absolute layout is used you can set an absolute Y position in pixels to place the component in

 the layout.</description>

            <name>y</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If column layout is used you can give a float column width from 0 to 1. Valid example: .5</description>

            <name>columnWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If table layout is used you can set rowspan as in an ordinary table.</description>

            <name>rowSpan</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If table layout is used you can set colspan as in an ordinary table.</description>

            <name>colSpan</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Id or element from which the window should animate while opening (defaults to null 

 with no animation).</description>

            <name>animateTarget</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The base CSS class to apply to this panel's element (defaults to 'x-panel').</description>

            <name>baseCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display the 'close' tool button and allow the user to close the window, false to hide 

 the button and disallow closing the window (default to true).</description>

            <name>closable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The action to take when the close button is clicked. The default action is 'close' 

 which will actually remove the window from the DOM and destroy it. The other valid 

 option is 'hide' which will simply hide the window by setting visibility to hidden and 

 applying negative offsets, keeping the window available to be redisplayed via the show 

 method.</description>

            <name>closeAction</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to constrain the window to the viewport, false to allow it to fall outside of the 

 viewport (defaults to false). Optionally the header only can be constrained using 

 constrainHeader.</description>

            <name>constrain</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to constrain the window header to the viewport, allowing the window body to fall 

 outside of the viewport, false to allow the header to fall outside the viewport 

 (defaults to false). Optionally the entire window can be constrained using constrain.</description>

            <name>constrainHeader</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id / index of a button or a button instance to focus when this window received the focus.</description>

            <name>defaultButton</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to enable dragging of this Panel (defaults to false). For custom drag/drop 

 implementations, an Ext.Panel.DD config could also be passed in this config 

 instead of true, although Ext.Panel.DD is an internal, undocumented class.</description>

            <name>draggable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to always expand the window when it is displayed, false to keep it in its current 

 state (which may be collapsed) when displayed (defaults to true).</description>

            <name>expandOnShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display the 'maximize' tool button and allow the user to maximize the window, 

 false to hide the button and disallow maximizing the window (defaults to false). Note 

 that when a window is maximized, the tool button will automatically change to a 

 'restore' button with the appropriate behavior already built-in that will restore the 

 window to its previous size.</description>

            <name>maximizable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The minimum height in pixels allowed for this window (defaults to 100). Only applies 

 when resizable = true.</description>

            <name>minHeight</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The minimum width in pixels allowed for this window (defaults to 200). Only applies when 

 resizable = true.</description>

            <name>minWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display the 'minimize' tool button and allow the user to minimize the window, 

 false to hide the button and disallow minimizing the window (defaults to false). Note 

 that this button provides no implementation -- the behavior of minimizing a window is 

 implementation-specific, so the minimize event must be handled and a custom minimize 

 behavior implemented for this option to be useful.</description>

            <name>minimizable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to make the window modal and mask everything behind it when displayed, false to 

 display it without restricting access to other UI elements (defaults to false).</description>

            <name>modal</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to render the window body with a transparent background so that it will blend 

 into the framing elements, false to add a lighter background color to visually highlight 

 the body element and separate it more distinctly from the surrounding frame 

 (defaults to false).</description>

            <name>plain</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to allow user resizing at each edge and corner of the window, false to disable 

 resizing (defaults to true).</description>

            <name>resizable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A valid Ext.Resizable handles config string (defaults to 'all'). Only applies when 

  resizable = true. Possible values: 

  &lt;ul&gt;

  	&lt;li&gt;'n':     north&lt;/li&gt;

  	&lt;li&gt;'s':     south&lt;/li&gt;

  	&lt;li&gt;'e':     east&lt;/li&gt;

  	&lt;li&gt;'w':     west&lt;/li&gt;

		&lt;li&gt;'nw':    northwest&lt;/li&gt;

		&lt;li&gt;'sw':    southwest&lt;/li&gt;

		&lt;li&gt;'se':    southeast&lt;/li&gt;

		&lt;li&gt;'ne':    northeast&lt;/li&gt;

		&lt;li&gt;'all':   all&lt;/li&gt;

	&lt;/ul&gt;</description>

            <name>resizeHandles</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Allows override of the built-in processing for the escape key. Default action is to 

 close the Window (performing whatever action is specified in closeAction. To prevent 

 the Window closing when the escape key is pressed, specify this as Ext.emptyFn 

 (See Ext.emptyFn).</description>

            <name>onEsc</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been visually activated. Note that Panels do not directly support 

 being activated, but some Panel subclasses do (like Ext.Window). Panels which are child Components 

 of a TabPanel fire the activate and deactivate events under the control of the TabPanel. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been activated.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onActivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been visually deactivated. Note that Panels do not directly support 

 being deactivated, but some Panel subclasses do (like Ext.Window). Panels which are child Components

 of a TabPanel fire the activate and deactivate events under the control of the TabPanel. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been deactivated.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDeactivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the window has been maximized. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.Window&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMaximize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the window has been minimized.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.Window&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMinimize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is resized.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjWidth&lt;/strong&gt;:(Number) The box-adjusted width that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjHeight&lt;/strong&gt;:(Number) The box-adjusted height that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawWidth&lt;/strong&gt;:(Number) The width that was originally specified&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawHeight&lt;/strong&gt;:(Number) The height that was originally specified&lt;/li&gt; 		

 &lt;/ul&gt;</description>

            <name>onResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the window has been restored to its original size after being maximized. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.Window&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is destroyed. Return false to stop the destroy.&lt;p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is hidden. Return false to stop the hide.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is rendered. Return false to stop the render. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is shown. Return false to stop the show. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is restored. Return false to stop the restore.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is saved to the 

 configured state provider. Return false to stop the save. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is destroyed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is disabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is enabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEnable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is hidden. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is rendered.  &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is shown.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is restored. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is saved to the configured state provider. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is moved. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;x&lt;/strong&gt;: (Number)The new x position&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;y&lt;/strong&gt;: (Number)The new y position&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is resized.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjWidth&lt;/strong&gt;:(Number) The box-adjusted width that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjHeight&lt;/strong&gt;:(Number) The box-adjusted height that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawWidth&lt;/strong&gt;:(Number) The width that was originally specified&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawHeight&lt;/strong&gt;:(Number) The height that was originally specified&lt;/li&gt; 		

 &lt;/ul&gt;</description>

            <name>onResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after any Ext.Component is added or inserted into the container.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;:(Ext.Component) The component that was added&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the component was added to the container's items collection&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAdd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the components in this container are arranged by the associated layout manager. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;layout&lt;/strong&gt;:(ContainerLayout) The ContainerLayout implementation for this container&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAfterLayout</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before any Ext.Component is added or inserted into the container. A handler can return false to cancel the add.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;:(Ext.Component) The component being added&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the component will be added to the container's items collection&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeAdd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before any Ext.Component is removed from the container. A handler can return false to cancel the remove. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: (Ext.Component) The component being removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after any Ext.Component is removed from the container&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: (Ext.Component) The component that was removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been visually activated. Note that Panels do not directly support 

 being activated, but some Panel subclasses do (like Ext.Window). Panels which are child Components 

 of a TabPanel fire the activate and deactivate events under the control of the TabPanel. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been activated.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onActivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is closed. Note that Panels do not directly support being closed, but some

  Panel subclasses do (like Ext.Window). This event only applies to such subclasses. A handler can 

  return false to cancel the close. &lt;/p&gt;

  Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel being closed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeClose</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is collapsed. A handler can return false to cancel the collapse. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel being collapsed.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;animate&lt;/strong&gt;:(Boolean) True if the collapse is animated, else false.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is expanded. A handler can return false to cancel the expand. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel being expanded.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;animate&lt;/strong&gt;:(Boolean) True if the expand is animated, else false.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been resized. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel which has been resized.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;width&lt;/strong&gt;:(Number) The Panel's new width.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;height &lt;/strong&gt;:(Number) The Panel's new height.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBodyResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel is closed. Note that Panels do not directly support being closed, but 

 some Panel subclasses do (like Ext.Window). &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been closed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onClose</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been collapsed. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel that has been collapsed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been visually deactivated. Note that Panels do not directly support 

 being deactivated, but some Panel subclasses do (like Ext.Window). Panels which are child Components

 of a TabPanel fire the activate and deactivate events under the control of the TabPanel. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been deactivated.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDeactivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been expanded. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been expanded.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel title has been set or changed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel which has had its title changed.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;The&lt;/strong&gt;:(String) new title.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onTitleChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>An object that represents a group of Ext.Window instances and provides z-order management and 

 window activation behavior.</description>

		<name>windowGroup</name>

		<tag-class>isola.tags.ext.window.WindowGroupTag</tag-class>

		<body-content>JSP</body-content>

		<attribute><description>The starting z-index for windows (defaults to 9000)</description>

            <name>zseed</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>Global Ajax request class. Provides a simple way to make Ajax requests with maximum flexibility.</description>

		<name>ajaxRequest</name>

		<tag-class>isola.tags.ext.misc.AjaxRequestTag</tag-class>

		<body-content>JSP</body-content>

		<attribute><description>The URL to which to send the request. Defaults to configured URL</description>

            <name>url</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

			<description>

				The HTTP method to use for the request. Defaults to the configured method, or if no method was configured, "GET" if no parameters are being sent, and "POST" if parameters are being sent. Note that the method name is case-sensitive and should be all caps.

			</description>

            <name>method</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

			<description>

				The function to be called upon receipt of the HTTP response. The callback is called regardless of success or failure and is passed the following parameters:

				&lt;ul&gt;

				&lt;li&gt;&lt;strong&gt;options :&lt;/strong&gt; Object: The parameter to the request call.&lt;/li&gt;

				&lt;li&gt;&lt;strong&gt;success :&lt;/strong&gt; Boolean: True if the request succeeded.&lt;/li&gt;

				&lt;li&gt;response :&lt;/strong&gt; Object: The XMLHttpRequest object containing the response data. 

				See http://www.w3.org/TR/XMLHttpRequest/ for details about accessing elements of the response.&lt;/li&gt;

				&lt;/ul&gt;

			</description>

            <name>callback</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

			<description>

				The function to be called upon success of the request. The callback is passed the following parameters:

				&lt;ul&gt;

				&lt;li&gt;&lt;strong&gt;response :&lt;/strong&gt; Object: The XMLHttpRequest object containing the response data.&lt;/li&gt;

				&lt;li&gt;&lt;strong&gt;options :&lt;/strong&gt; Object: The parameter to the request call.&lt;/li&gt;

				&lt;/ul&gt;

			</description>

            <name>success</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

			<description>

				The function to be called upon failure of the request. The callback is passed the following parameters:

				&lt;ul&gt;

				&lt;li&gt;&lt;strong&gt;response :&lt;/strong&gt; Object: The XMLHttpRequest object containing the response data.&lt;/li&gt;

				&lt;li&gt;&lt;strong&gt;options :&lt;/strong&gt; Object: The parameter to the request call.&lt;/li&gt;

				&lt;/ul&gt;

			</description>

            <name>failure</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

			<description>

				The scope in which to execute the callbacks: The "this" object for the callback function. Defaults to the browser window.

			</description>

            <name>scope</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

			<description>

				A form object or id to pull parameters from.

			</description>

            <name>form</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

			<description>

				True if the form object is a file upload (will usually be automatically detected).

			</description>

            <name>isUpload</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

			<description>

				XML document to use for the post. Note: This will be used instead of params for the post data. Any params will be appended to the URL.

			</description>

            <name>xmlData</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

			<description>

				JSON data to use as the post. Note: This will be used instead of params for the post data. Any params will be appended to the URL.

			</description>

            <name>jsonData</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

			<description>

				True to add a unique cache-buster param to GET requests.

			</description>

            <name>disableCaching</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

			<description>

				The timeout in milliseconds to be used for requests. (defaults to 30000)

			</description>

            <name>timeout</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>









	<tag>

		<description>

			A TreePanel combined with a grid panel. 

		</description>

		<name>columnTree</name>

		<tag-class>isola.tags.ext.tree.ColumnTreeTag</tag-class>

		<body-content>JSP</body-content>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Whether the component can move the Dom node when rendering (defaults to true).</description>

            <name>allowDomMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element corresponding 

 to a DIV that is already present in the document that specifies some 

 structural markup for this component. When applyTo is used, constituent 

 parts of the component can also be specified by id or CSS class name 

 within the main element, and the component being created may attempt to 

 create its subcomponents from that markup if applicable. Using this 

 config, a call to render() is not required. If applyTo is specified, 

 any value passed for renderTo will be ignored and the target element's 

 parent node will automatically be used as the component's container.</description>

            <name>applyTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the component should check for hidden classes (e.g. 'x-hidden' 

 or 'x-hide-display') and remove them on render (defaults to false).</description>

            <name>autoShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 Element (defaults to ''). This can be useful for adding customized styles 

 to the component or any of its children using standard CSS rules.</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 container (defaults to ''). This can be useful for adding customized 

 styles to the container or any of its children using standard CSS rules.</description>

            <name>ctCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class added to the component when it is disabled (defaults to 

 "x-item-disabled").</description>

            <name>disabledClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide and show the component's container when hide/show is 

 called on the component, false to hide and show the component itself 

 (defaults to false). For example, this can be used as a shortcut 

 for a hide button on a window by setting hide:true on the button when 

 adding it to its parent container.</description>

            <name>hideParent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id of this component (defaults to an auto-assigned id).</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element that will be the 

 container to render this component into. Using this config, a call to 

 render() is not required.</description>

            <name>renderTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id for this component to use for state management purposes 

 (defaults to the component id). See stateful for an explanation of saving 

 and restoring Component state.</description>

            <name>stateId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;A flag which causes the Component to attempt to restore the state of 

 internal properties from a saved state on startup.&lt;/p&gt;

 

 &lt;p&gt;For state saving to work, the state manager's provider must have been 

 set to an implementation of Ext.state.Provider which overrides the set 

 and get methods to save and recall name/value pairs. A built-in 

 implementation, Ext.state.CookieProvider is available.&lt;/p&gt;

 

 &lt;p&gt;To set the state provider for the current page:&lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;Components attempt to save state when one of the events listed in the stateEvents 

 configuration fires.&lt;/p&gt;

 

 &lt;p&gt;You can perform extra processing on state save and restore by attaching 

 handlers to the beforestaterestore, staterestore, beforestatesave and statesave 

 events.&lt;/p&gt;</description>

            <name>stateful</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom style specification to be applied to this component's Element. Should 

 be a valid argument to Ext.Element.applyStyles.</description>

            <name>style</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Where to place this component. Valid values are south, north, west, east, center</description>

            <name>region</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>How this component should hidden. Supported values are "visibility" 

 (css visibility), "offsets" (negative offset position) and "display" 

 (css display) - defaults to "display".</description>

            <name>hideMode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use height:'auto', false to use fixed height (defaults to false).</description>

            <name>autoHeight</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use width:'auto', false to use fixed width (defaults to false).</description>

            <name>autoWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The height of this component in pixels (defaults to auto).</description>

            <name>height</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width of this component in pixels (defaults to auto).</description>

            <name>width</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>HTML Element this object is parsed on.</description>

            <name>el</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A string component id or the numeric index of the component that should be 

 initially activated within the container's layout on render. For example, 

 activeItem: 'item-1' or activeItem: 0 (index 0 = the first item in the 

 container's collection). activeItem only applies to layout styles that can 

 display items one at a time (like Ext.layout.Accordion, 

 Ext.layout.CardLayout and Ext.layout.FitLayout). 

 Related to Ext.layout.ContainerLayout.activeItem.</description>

            <name>activeItem</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If true the container will automatically destroy any contained component 

 that is removed from it, else destruction must be handled manually 

 (defaults to true).</description>

            <name>autoDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>When set to true (100 milliseconds) or a number of milliseconds, the 

 layout assigned for this container will buffer the frequency it calculates 

 and does a re-layout of components. This is useful for heavy containers 

 or containers with a large amount of sub components that frequent calls 

 to layout are expensive.</description>

            <name>bufferResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default type of container represented by this object as registered 

  in Ext.ComponentMgr (defaults to 'panel').</description>

            <name>defaultType</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the borders of each contained component, false to defer to the 

 component's existing border settings (defaults to false).</description>

            <name>hideBorders</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;The layout type to be used in this container. If not specified, a default 

 Ext.layout.ContainerLayout will be created and used. 

 

 &lt;p&gt;Valid values are:&lt;/p&gt;

 &lt;ul&gt;

 &lt;li&gt;accordion, &lt;/li&gt;

 &lt;li&gt;anchor, &lt;/li&gt; 

 &lt;li&gt;border,&lt;/li&gt; 

 &lt;li&gt;card,&lt;/li&gt; 

 &lt;li&gt;column,&lt;/li&gt; 

 &lt;li&gt;fit,&lt;/li&gt; 

 &lt;li&gt;form&lt;/li&gt;

 &lt;li&gt;table.&lt;/li&gt; 

 &lt;/ul&gt;

 &lt;p&gt;Specific config values for the chosen layout type can be specified using 

 layoutConfig.&lt;/p&gt;</description>

            <name>layout</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to automatically monitor window resize events to handle anything that is 

 sensitive to the current size of the viewport. This value is typically managed 

 by the chosen layout and should not need to be set manually.</description>

            <name>monitorResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to animate the transition when the panel is collapsed, false to skip 

 the animation (defaults to true if the Ext.Fx class is available, otherwise 

 false).</description>

            <name>animCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use overflow:'auto' on the panel's body element and show scroll bars 

 automatically when necessary, false to clip any overflowing content 

 (defaults to false).</description>

            <name>autoScroll</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The base CSS class to apply to this panel's element (defaults to 'x-panel').</description>

            <name>baseCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display an interior border on the body element of the panel, false 

 to hide it (defaults to true). This only applies when border == true. If 

 border == true and bodyBorder == false, the border will display as a 1px 

 wide inset border, giving the entire body element an inset appearance.</description>

            <name>bodyBorder</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Custom CSS styles to be applied to the body element in the format expected 

 by Ext.Element.applyStyles (defaults to null).</description>

            <name>bodyStyle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display the borders of the panel's body element, false to hide them 

 (defaults to true). By default, the border is a 2px wide inset border, but 

 this can be further altered by setting bodyBorder to false.</description>

            <name>border</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>When set to true (100 milliseconds) or a number of milliseconds, the 

 layout assigned for this container will buffer the frequency it calculates 

 and does a re-layout of components. This is useful for heavy containers 

 or containers with a large amount of sub components that frequent calls 

 to layout are expensive.</description>

            <name>bufferResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The alignment of any buttons added to this panel. Valid values are 'right,' 

 'left' and 'center' (defaults to 'right').</description>

            <name>buttonAlign</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to make sure the collapse/expand toggle button always renders first (to 

 the left of) any other tools in the panel's title bar, false to render it 

 last (defaults to true).</description>

            <name>collapseFirst</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to render the panel collapsed, false to render it expanded (defaults to false).</description>

            <name>collapsed</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS class to add to the panel's element after it has been collapsed (defaults 

 to 'x-panel-collapsed').</description>

            <name>collapsedCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to make the panel collapsible and have the expand/collapse toggle button 

 automatically rendered into the header tool button area, false to keep the 

 panel statically sized with no button (defaults to false).</description>

            <name>collapsible</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of an existing HTML node to use as the panel's body content (defaults to '').</description>

            <name>contentEl</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to enable dragging of this Panel (defaults to false). For custom drag/drop 

 implementations, an Ext.Panel.DD config could also be passed in this config 

 instead of true, although Ext.Panel.DD is an internal, undocumented class.</description>

            <name>draggable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A comma-delimited list of panel elements to initialize when the panel is 

 rendered. Normally, this list will be generated automatically based on the items 

 added to the panel at config time, but sometimes it might be useful to make 

 sure a structural element is rendered even if not specified at config time 

 (for example, you may want to add a button or toolbar dynamically after the 

 panel has been rendered). Adding those elements to this list will allocate 

 the required placeholders in the panel when it is rendered. 

 Valid values are

 &lt;ul&gt;

 &lt;li&gt;header&lt;/li&gt;

 &lt;li&gt;tbar (top bar)&lt;/li&gt;

 &lt;li&gt;body&lt;/li&gt;

 &lt;li&gt;bbar (bottom bar)&lt;/li&gt;

 &lt;li&gt;footer&lt;/li&gt;

 &lt;/ul&gt;

 Defaults to 'body'.</description>

            <name>elements</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to float the panel (absolute position it with automatic shimming and shadow), 

 false to display it inline where it is rendered (defaults to false). Note that 

 by default, setting floating to true will cause the panel to display at negative 

 offsets so that it is hidden -- because the panel is absolute positioned, the 

 position must be set explicitly after render (e.g., myPanel.setPosition(100,100);). 

 Also, when floating a panel you should always assign a fixed width, otherwise it 

 will be auto width and will expand to fill to the right edge of the viewport.</description>

            <name>floating</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to create the footer element explicitly, false to skip creating it. By 

 default, when footer is not specified, if one or more buttons have been added 

 to the panel the footer will be created automatically, otherwise it will not.</description>

            <name>footer</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Shows a nice rounded corner with a thick border around the panel.</description>

            <name>frame</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to create the header element explicitly, false to skip creating it. By 

 default, when header is not specified, if a title is set the header will be 

 created automatically, otherwise it will not. If a title is set but header is 

 explicitly set to false, the header will not be rendered.</description>

            <name>header</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to display the panel title in the header, false to hide it (defaults to true).</description>

            <name>headerAsText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide the expand/collapse toggle button when collapsible = true, false 

 to display it (defaults to false).</description>

            <name>hideCollapseTool</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An HTML fragment, or a DomHelper specification to use as the panel's body 

 content (defaults to '').</description>

            <name>html</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS class that will provide a background image to be used as the panel header 

 icon (defaults to '').</description>

            <name>iconCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to mask the panel when it is disabled, false to not mask it (defaults 

 to true). Either way, the panel will always tell its contained elements to 

 disable themselves when it is disabled, but masking the panel can provide an 

 additional visual cue that the panel is disabled.</description>

            <name>maskDisabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Minimum width in pixels of all buttons in this panel (defaults to 75)</description>

            <name>minButtonWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True (or a valid Ext.Shadow Ext.Shadow.mode value) to display a shadow behind 

 the panel, false to display no shadow (defaults to 'sides'). Note that this 

 option only applies when floating = true.</description>

            <name>shadow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The number of pixels to offset the shadow if displayed (defaults to 4). Note 

 that this option only applies when floating = true.</description>

            <name>shadowOffset</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>False to disable the iframe shim in browsers which need one (defaults to true). 

 Note that this option only applies when floating = true.</description>

            <name>shim</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Adds a tooltip when mousing over the tab of a Ext.Panel which is an item of a 

 Ext.TabPanel. Ext.QuickTips.init() must be called in order for the tips to render.</description>

            <name>tabTip</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The title text to display in the panel header (defaults to ''). When a title 

 is specified the header element will automatically be created and displayed 

 unless header is explicitly set to false. If you don't want to specify a title 

 at config time, but you may want one later, you must either specify a non-empty 

 title (a blank space ' ' will do) or header:true so that the container element 

 will get created.</description>

            <name>title</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to allow expanding and collapsing the panel (when collapsible = true) 

 by clicking anywhere in the header bar, false to allow it only by clicking to 

 tool button (defaults to false).</description>

            <name>titleCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If border layout is used then you can set this option to true to place a splitbar 

 between the panels.</description>

            <name>split</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>xtype</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If anchor layout is used you can set an anchor value here.</description>

            <name>anchor</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If absolute layout is used you can set an absolute X position in pixels to place the component in

 the layout.</description>

            <name>x</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If absolute layout is used you can set an absolute Y position in pixels to place the component in

 the layout.</description>

            <name>y</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If column layout is used you can give a float column width from 0 to 1. Valid example: .5</description>

            <name>columnWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If table layout is used you can set rowspan as in an ordinary table.</description>

            <name>rowSpan</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If table layout is used you can set colspan as in an ordinary table.</description>

            <name>colSpan</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>true to enable animated expand/collapse (defaults to the value of Ext.enableFx)</description>

            <name>animate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>true to register this container with ScrollManager</description>

            <name>containerScroll</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the tree should only allow append drops (use for trees which are sorted)</description>

            <name>ddAppendOnly</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The DD group this TreePanel belongs to</description>

            <name>ddGroup</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>true to enable body scrolling</description>

            <name>ddScroll</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>true to enable drag and drop</description>

            <name>enableDD</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>true to enable just drag</description>

            <name>enableDrag</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>true to enable just drop</description>

            <name>enableDrop</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The color of the node highlight (defaults to C3DAF9)</description>

            <name>hlColor</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>false to disable node highlight on drop (defaults to the value of Ext.enableFx)</description>

            <name>hlDrop</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>false to disable tree lines (defaults to true)</description>

            <name>lines</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The token used to separate sub-paths in path strings (defaults to '/')</description>

            <name>pathSeparator</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>false to hide the root node (defaults to true)</description>

            <name>rootVisible</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>true if only 1 node per branch may be expanded</description>

            <name>singleExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is destroyed. Return false to stop the destroy.&lt;p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is hidden. Return false to stop the hide.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is rendered. Return false to stop the render. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is shown. Return false to stop the show. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is restored. Return false to stop the restore.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is saved to the 

 configured state provider. Return false to stop the save. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is destroyed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is disabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is enabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEnable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is hidden. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is rendered.  &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is shown.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is restored. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is saved to the configured state provider. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is moved. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;x&lt;/strong&gt;: (Number)The new x position&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;y&lt;/strong&gt;: (Number)The new y position&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is resized.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjWidth&lt;/strong&gt;:(Number) The box-adjusted width that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjHeight&lt;/strong&gt;:(Number) The box-adjusted height that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawWidth&lt;/strong&gt;:(Number) The width that was originally specified&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawHeight&lt;/strong&gt;:(Number) The height that was originally specified&lt;/li&gt; 		

 &lt;/ul&gt;</description>

            <name>onResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after any Ext.Component is added or inserted into the container.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;:(Ext.Component) The component that was added&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the component was added to the container's items collection&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAdd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the components in this container are arranged by the associated layout manager. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;layout&lt;/strong&gt;:(ContainerLayout) The ContainerLayout implementation for this container&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAfterLayout</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before any Ext.Component is added or inserted into the container. A handler can return false to cancel the add.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;:(Ext.Component) The component being added&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;:(Number) The index at which the component will be added to the container's items collection&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeAdd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before any Ext.Component is removed from the container. A handler can return false to cancel the remove. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: (Ext.Component) The component being removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after any Ext.Component is removed from the container&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: (Ext.Component) The component that was removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been visually activated. Note that Panels do not directly support 

 being activated, but some Panel subclasses do (like Ext.Window). Panels which are child Components 

 of a TabPanel fire the activate and deactivate events under the control of the TabPanel. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been activated.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onActivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is closed. Note that Panels do not directly support being closed, but some

  Panel subclasses do (like Ext.Window). This event only applies to such subclasses. A handler can 

  return false to cancel the close. &lt;/p&gt;

  Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel being closed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeClose</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is collapsed. A handler can return false to cancel the collapse. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel being collapsed.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;animate&lt;/strong&gt;:(Boolean) True if the collapse is animated, else false.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is expanded. A handler can return false to cancel the expand. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel being expanded.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;animate&lt;/strong&gt;:(Boolean) True if the expand is animated, else false.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been resized. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel which has been resized.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;width&lt;/strong&gt;:(Number) The Panel's new width.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;height &lt;/strong&gt;:(Number) The Panel's new height.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBodyResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel is closed. Note that Panels do not directly support being closed, but 

 some Panel subclasses do (like Ext.Window). &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been closed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onClose</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been collapsed. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) the Panel that has been collapsed.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onCollapse</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been visually deactivated. Note that Panels do not directly support 

 being deactivated, but some Panel subclasses do (like Ext.Window). Panels which are child Components

 of a TabPanel fire the activate and deactivate events under the control of the TabPanel. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been deactivated.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDeactivate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel has been expanded. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel that has been expanded.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onExpand</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the Panel title has been set or changed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt;:(Ext.Panel) The Panel which has had its title changed.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;The&lt;/strong&gt;:(String) new title.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onTitleChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a new child node is appended to a node in this tree. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;tree&lt;/strong&gt; : (Tree) The owner tree.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;parent&lt;/strong&gt; : (Node) The parent node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; : (Node) The newly appended node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt; : (Number) The index of the newly appended node&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onAppend</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before a new child is appended to a node in this tree, return false to cancel the append. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;tree&lt;/strong&gt; : (Tree) The owner tree.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;parent&lt;/strong&gt; : (Node) The parent node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; : (Node) The newly appended node&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeAppend</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires right before the child nodes for a node are rendered &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; : (Node) The node&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeChildRendered</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before click processing on a node. Return false to cancel the default action. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; : (Node) The node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (Ext.EventObject) The event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before a node is collapsed, return false to cancel. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; : (Node) The node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;deep&lt;/strong&gt; : Boolean&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;anim&lt;/strong&gt; : Boolean&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeCollapseNode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the Panel is expanded. A handler can return false to cancel the expand. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; : (Ext.Panel) The Panel being expanded.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;animate&lt;/strong&gt; : (Boolean) True if the expand is animated, else false.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeExpandNode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before a new child is inserted in a node in this tree, return false to cancel the insert. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;tree&lt;/strong&gt; : (Tree) The owner tree.&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;parent&lt;/strong&gt; : (Node) The parent node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; : (Node) The child node to be inserted&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;refNode&lt;/strong&gt; : (Node) The child node the node is being inserted before&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeInsert</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before a node is loaded, return false to cancel &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; : (Node) The node being loaded.&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeLoad</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before a node is moved to a new location in the tree. Return false to cancel the move.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;tree&lt;/strong&gt; : (Tree) The owner tree&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; : (Node) The node being moved&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;oldParent&lt;/strong&gt; : (Node) The parent of the node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;newParent&lt;/strong&gt; : (Node) The new parent the node is moving to&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt; : (Number) The index it is being moved to&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRemoveNode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a DD object is dropped on a node in this tree for preprocessing. Return false to cancel 

 the drop. The dropEvent passed to handlers has the following properties:&lt;/p&gt;

 &lt;pre&gt;

 tree - The TreePanel

 target - The node being targeted for the drop

 data - The drag data from the drag source

 point - The point of the drop - append, above or below

 source - The drag source

 rawEvent - Raw mouse event

 dropNode - Drop node(s) provided by the source &lt;strong&gt;OR&lt;/strong&gt; you can supply node(s) to be inserted by setting them on this object.

 cancel - Set this to true to cancel the drop.

 dropStatus - If the default drop action is cancelled but the drop is valid, setting this to true will prevent the animated "repair" from appearing.

 &lt;/pre&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;dropEvent &lt;/strong&gt; : Object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeNodeDrop</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before any Ext.Component is removed from the container. A handler can return false to cancel the remove. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: (Ext.Component) The component being removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a node with a checkbox's checked property changes &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : (Node) This node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;checked&lt;/strong&gt; : Boolean&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onCheckChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a node is clicked &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; : (Node) The node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (Ext.EventObject) The event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a node is collapsed &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; : (Node) The node&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onCollapseNode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a node is right clicked &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; : (Node) The node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (Ext.EventObject) The event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onContextMenu</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a node is double clicked &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; : (Node) The node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (Ext.EventObject) The event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDblClick</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the disabled status of a node changes &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; : (Node) The node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;disabled&lt;/strong&gt; : Boolean&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisabledChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a dragged node is dropped on a valid DD target &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.tree.TreePanel&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; :  Ext.tree.TreeNode&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;dd&lt;/strong&gt; : (DD) The dd it was dropped on&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (Event) The raw browser event&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDragDrop</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a drag operation is complete &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.tree.TreePanel&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; :  Ext.tree.TreeNode&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (Event) The raw browser event&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEndDrag</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a node is expanded &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; : (Node) The node&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onExpandNode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a new child node is inserted in a node in this tree. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;tree&lt;/strong&gt; : (Tree) The owner tree&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;parent&lt;/strong&gt; : (Node) The parent node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; : (Node) The child node inserted&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;refNode&lt;/strong&gt; : (Node) The child node the node was inserted before&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onInsert</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a node is loaded &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; : (Node) The node that was loaded&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onLoad</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a node is moved to a new location in the tree &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;tree&lt;/strong&gt; : (Tree) The owner tree&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; : (Node) The node moved&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;oldParent&lt;/strong&gt; : (Node) The old parent of this node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;newParent&lt;/strong&gt; : (Node) The new parent of this node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;index&lt;/strong&gt; : (Number) The index it was moved to&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMoveNode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a tree node is being targeted for a drag drop, return false to signal drop not allowed.

 The dragOverEvent passed to handlers has the following properties:&lt;/p&gt;

 &lt;pre&gt;

 tree - The TreePanel

 target - The node being targeted for the drop

 data - The drag data from the drag source

 point - The point of the drop - append, above or below

 source - The drag source

 rawEvent - Raw mouse event

 dropNode - Drop node(s) provided by the source.

 cancel - Set this to true to signal drop not allowed.

 

 &lt;/pre&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;dragOverEvent&lt;/strong&gt; : Object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onNodeDragOver</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after a DD object is dropped on a node in this tree. 

 The dropEvent passed to handlers has the following properties:&lt;/p&gt;

 &lt;pre&gt;

 tree - The TreePanel

 target - The node being targeted for the drop

 data - The drag data from the drag source

 point - The point of the drop - append, above or below

 source - The drag source

 rawEvent - Raw mouse event

 dropNode - Dropped node(s).

 

 &lt;/pre&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;dropEvent&lt;/strong&gt; : Object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onNodeDrop</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after any Ext.Component is removed from the container&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Container&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: (Ext.Component) The component that was removed&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRemove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when a node starts being dragged &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.tree.TreePanel&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; :  Ext.tree.TreeNode&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (Event) The raw browser event&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStartDrag</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when the text for a node is changed &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; : (Node) The node&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;text&lt;/strong&gt; : (String) The new text&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;oldText&lt;/strong&gt; : (String) The old text&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onTextChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Html element this node is applied to</description>

            <name>el</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag>

		<description>

			Places a search box and the buttons to one of the grid's toolbar (bottom or top). 

			Default is the bottom toolbar. Please note that this plugin will not create a toolbar. 

 			You have to create it manually.

		</description>

		<name>gridSearchPlugin</name>

		<tag-class>

			isola.tags.ext.grid.GridSearchPluginTag

		</tag-class>

		<body-content>empty</body-content>

		<attribute>

			<description>Text to display on menu button</description>

			<name>searchText</name>

			<required>false</required>

			<rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

			<description>Text to display as input tooltip. Set to '' for no tooltip</description>

			<name>searchTipText</name>

			<required>false</required>

			<rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

			<description>Text to display on menu item that selects all fields</description>

			<name>selectAllText</name>

			<required>false</required>

			<rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

			<description>

			 	Where to display the search controls. Valid values are top and bottom (defaults to bottom)

			 	Corresponding toolbar has to exist at least with mimimum configuration tbar:[] for position:top or bbar:[]

	 			for position bottom. Plugin does NOT create any toolbar.

			</description>

			<name>position</name>

			<required>false</required>

			<rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

			<description>Icon class for menu button (defaults to icon-magnifier)</description>

			<name>iconCls</name>

			<required>false</required>

			<rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

			<description>How to format date values. If undefined (the default) date is formatted as configured in colummn model</description>

			<name>dateFormat</name>

			<required>false</required>

			<rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

			<description>

	 			Use 'remote' for remote stores or 'local' for local stores. If mode is local

	 			no data requests are sent to server the grid's store is filtered instead 

	 			(defaults to 'remote')

			</description>

			<name>mode</name>

			<required>false</required>

			<rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

			<description>Width of input field in pixels (defaults to 200)</description>

			<name>width</name>

			<required>false</required>

			<rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag><description>Base class for form fields that provides default event handling, sizing, value handling 

 and other functionality.</description>

		<name>radioGroup</name>

		<tag-class>isola.tags.ext.form.RadioGroupTag</tag-class>

		<body-content>JSP</body-content>

		<attribute>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the the checkbox should render already checked (defaults to false)</description>

            <name>checked</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>If set to true radio group will group radio buttons horizantally</description>

            <name>horizontal</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class used to provide field clearing (defaults to 'x-form-clear-left')</description>

            <name>clearCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to disable the field (defaults to false).</description>

            <name>disabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default CSS class for the field (defaults to "x-form-field")</description>

            <name>fieldClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The label text to display next to this field (defaults to '')</description>

            <name>fieldLabel</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to use when the field receives focus (defaults to "x-form-focus")</description>

            <name>focusClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to completely hide the label element (defaults to false)</description>

            <name>hideLabel</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The type attribute for input fields -- e.g. radio, text, password (defaults to "text").</description>

            <name>inputType</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to use when marking a field invalid (defaults to "x-form-invalid")</description>

            <name>invalidClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The error text to use when marking a field invalid and no message is provided 

 (defaults to "The value in this field is invalid")</description>

            <name>invalidText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;An additional CSS class to apply to the wrapper element of this field (defaults 

 to the container's itemCls value if set, or ''). Since it is applied to the 

 wrapper, it allows you to write standard CSS rules that can apply to the field, 

 the label (if specified) or any other element within the markup for the field. 

 Example use:&lt;/p&gt;

 

 &lt;pre&gt;&lt;code&gt;

 // Apply a style to the field's label:

 &amp;lt;style&amp;gt;

     .required .x-form-item-label {font-weight:bold;color:red;}

 &amp;lt;/style&amp;gt;

 

 new Ext.FormPanel({

 	height: 100,

 	renderTo: document.body,

 	items: [{

 		xtype: 'textfield',

 		fieldLabel: 'Name',

 		itemCls: 'required' //this label will be styled

 	},{

 		xtype: 'textfield',

 		fieldLabel: 'Favorite Color'

 	}]

 });

 &lt;/code&gt;&lt;/pre&gt;</description>

            <name>itemCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The standard separator to display after the text of each form label (defaults to the 

 value of Ext.layout.FormLayout.labelSeparator, which is a colon ':' by default). 

 To display no separator for this field's label specify empty string ''.</description>

            <name>labelSeparator</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS style specification to apply directly to this field's label (defaults to the 

 container's labelStyle value if set, or ''). For example, labelStyle: 'font-weight:bold;'.</description>

            <name>labelStyle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The effect used when displaying a validation message under the field (defaults to 'normal').</description>

            <name>msgFx</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The location where error text should display. Should be one of the following values 

 (defaults to 'qtip'):

 &lt;pre&gt;

 Value         Description

 -----------   ----------------------------------------------------------------------

 qtip          Display a quick tip when the user hovers over the field

 title         Display a default browser title attribute popup

 under         Add a block div beneath the field containing the error text

 side          Add an error icon to the right of the field with a popup on hover

 [element id]  Add the error text directly to the innerHTML of the specified element

 &lt;/pre&gt;</description>

            <name>msgTarget</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The field's HTML name attribute.</description>

            <name>name</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets 

 the element's readOnly DOM attribute.</description>

            <name>readOnly</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The tabIndex for this field. Note this only applies to fields that are rendered, not those 

 which are built via applyTo (defaults to undefined).</description>

            <name>tabIndex</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>validateOnBlur</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The length of time in milliseconds after user input begins until validation is initiated 

 (defaults to 250)</description>

            <name>validationDelay</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The event that should initiate field validation. Set to false to disable automatic 

 validation (defaults to "keyup").</description>

            <name>validationEvent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A value to initialize this field with.</description>

            <name>value</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width of this component in pixels (defaults to auto).</description>

            <name>width</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The height of this component in pixels (defaults to auto).</description>

            <name>height</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this field loses input focus. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBlur</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires just before the field blurs if the field value has changed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;newValue&lt;/strong&gt; : (Mixed) The new value&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;oldValue&lt;/strong&gt; : (Mixed) The original value&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this field receives input focus. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onFocus</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the field has been marked as invalid. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;msg&lt;/strong&gt; : (String) The validation message&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onInvalid</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed. You can 

 check Ext.EventObject.getKey to determine which key was pressed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (Ext.EventObject) The event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onSpecialKey</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed. You can check 

 Ext.EventObject.getKey to determine which key was pressed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onValid</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>







	<tag><description>Slider which supports vertical or horizontal orientation, keyboard adjustments, configurable snapping, axis clicking and animation. Can be added as an item to any container.</description>

		<name>slider</name>

		<tag-class>isola.tags.ext.misc.SliderTag</tag-class>

		<body-content>empty</body-content>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Whether the component can move the Dom node when rendering (defaults to true).</description>

            <name>allowDomMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element corresponding 

 to a DIV that is already present in the document that specifies some 

 structural markup for this component. When applyTo is used, constituent 

 parts of the component can also be specified by id or CSS class name 

 within the main element, and the component being created may attempt to 

 create its subcomponents from that markup if applicable. Using this 

 config, a call to render() is not required. If applyTo is specified, 

 any value passed for renderTo will be ignored and the target element's 

 parent node will automatically be used as the component's container.</description>

            <name>applyTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True if the component should check for hidden classes (e.g. 'x-hidden' 

 or 'x-hide-display') and remove them on render (defaults to false).</description>

            <name>autoShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 Element (defaults to ''). This can be useful for adding customized styles 

 to the component or any of its children using standard CSS rules.</description>

            <name>cls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>An optional extra CSS class that will be added to this component's 

 container (defaults to ''). This can be useful for adding customized 

 styles to the container or any of its children using standard CSS rules.</description>

            <name>ctCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>CSS class added to the component when it is disabled (defaults to 

 "x-item-disabled").</description>

            <name>disabledClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to hide and show the component's container when hide/show is 

 called on the component, false to hide and show the component itself 

 (defaults to false). For example, this can be used as a shortcut 

 for a hide button on a window by setting hide:true on the button when 

 adding it to its parent container.</description>

            <name>hideParent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id of this component (defaults to an auto-assigned id).</description>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The id of the node, a DOM node or an existing Element that will be the 

 container to render this component into. Using this config, a call to 

 render() is not required.</description>

            <name>renderTo</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The unique id for this component to use for state management purposes 

 (defaults to the component id). See stateful for an explanation of saving 

 and restoring Component state.</description>

            <name>stateId</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;A flag which causes the Component to attempt to restore the state of 

 internal properties from a saved state on startup.&lt;/p&gt;

 

 &lt;p&gt;For state saving to work, the state manager's provider must have been 

 set to an implementation of Ext.state.Provider which overrides the set 

 and get methods to save and recall name/value pairs. A built-in 

 implementation, Ext.state.CookieProvider is available.&lt;/p&gt;

 

 &lt;p&gt;To set the state provider for the current page:&lt;/p&gt;

 &lt;pre&gt;&lt;code&gt;

 Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

 &lt;/code&gt;&lt;/pre&gt;

 

 &lt;p&gt;Components attempt to save state when one of the events listed in the stateEvents 

 configuration fires.&lt;/p&gt;

 

 &lt;p&gt;You can perform extra processing on state save and restore by attaching 

 handlers to the beforestaterestore, staterestore, beforestatesave and statesave 

 events.&lt;/p&gt;</description>

            <name>stateful</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A custom style specification to be applied to this component's Element. Should 

 be a valid argument to Ext.Element.applyStyles.</description>

            <name>style</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Where to place this component. Valid values are south, north, west, east, center</description>

            <name>region</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>How this component should hidden. Supported values are "visibility" 

 (css visibility), "offsets" (negative offset position) and "display" 

 (css display) - defaults to "display".</description>

            <name>hideMode</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use height:'auto', false to use fixed height (defaults to false).</description>

            <name>autoHeight</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to use width:'auto', false to use fixed width (defaults to false).</description>

            <name>autoWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The height of this component in pixels (defaults to auto).</description>

            <name>height</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width of this component in pixels (defaults to auto).</description>

            <name>width</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>HTML Element this object is parsed on.</description>

            <name>el</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>animate</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>clickToChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>increment</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>keyIncrement</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>maxValue</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>minValue</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>value</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>vertical</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is destroyed. Return false to stop the destroy.&lt;p&gt; 

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is hidden. Return false to stop the hide.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is rendered. Return false to stop the render. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the component is shown. Return false to stop the show. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is restored. Return false to stop the restore.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires before the state of the component is saved to the 

 configured state provider. Return false to stop the save. &lt;p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBeforeStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is destroyed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDestroy</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is disabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onDisable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is enabled. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onEnable</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is hidden. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onHide</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is rendered.  &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onRender</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is shown.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is restored. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateRestore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the state of the component is saved to the configured state provider. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;:Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;:(Object) The hash of state values&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onStateSave</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is moved. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;x&lt;/strong&gt;: (Number)The new x position&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;y&lt;/strong&gt;: (Number)The new y position&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onMove</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the component is resized.&lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: Ext.Component&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjWidth&lt;/strong&gt;:(Number) The box-adjusted width that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;adjHeight&lt;/strong&gt;:(Number) The box-adjusted height that was set&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawWidth&lt;/strong&gt;:(Number) The width that was originally specified&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;rawHeight&lt;/strong&gt;:(Number) The height that was originally specified&lt;/li&gt; 		

 &lt;/ul&gt;</description>

            <name>onResize</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>onBeforechange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>onChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>onDrag</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>onDragEnd</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>onDragStart</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>



	</tag>

	

	

	<tag><description>&lt;p&gt;Provides a convenient wrapper for TextFields that adds a clickable trigger button 

 (looks like a combobox by default) which enables to show a list of values window bound to a grid panel. &lt;/p&gt;</description>

		<name>lovField</name>

		<tag-class>isola.tags.ext.form.LovFieldTag</tag-class>

		<body-content>JSP</body-content>

		<attribute>

            <name>id</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class used to provide field clearing (defaults to 'x-form-clear-left')</description>

            <name>clearCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to disable the field (defaults to false).</description>

            <name>disabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default CSS class for the field (defaults to "x-form-field")</description>

            <name>fieldClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The label text to display next to this field (defaults to '')</description>

            <name>fieldLabel</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to use when the field receives focus (defaults to "x-form-focus")</description>

            <name>focusClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to completely hide the label element (defaults to false)</description>

            <name>hideLabel</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The type attribute for input fields -- e.g. radio, text, password (defaults to "text").</description>

            <name>inputType</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to use when marking a field invalid (defaults to "x-form-invalid")</description>

            <name>invalidClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The error text to use when marking a field invalid and no message is provided 

 (defaults to "The value in this field is invalid")</description>

            <name>invalidText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;An additional CSS class to apply to the wrapper element of this field (defaults 

 to the container's itemCls value if set, or ''). Since it is applied to the 

 wrapper, it allows you to write standard CSS rules that can apply to the field, 

 the label (if specified) or any other element within the markup for the field. 

 Example use:&lt;/p&gt;

 

 &lt;pre&gt;&lt;code&gt;

 // Apply a style to the field's label:

 &amp;lt;style&amp;gt;

     .required .x-form-item-label {font-weight:bold;color:red;}

 &amp;lt;/style&amp;gt;

 

 new Ext.FormPanel({

 	height: 100,

 	renderTo: document.body,

 	items: [{

 		xtype: 'textfield',

 		fieldLabel: 'Name',

 		itemCls: 'required' //this label will be styled

 	},{

 		xtype: 'textfield',

 		fieldLabel: 'Favorite Color'

 	}]

 });

 &lt;/code&gt;&lt;/pre&gt;</description>

            <name>itemCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The standard separator to display after the text of each form label (defaults to the 

 value of Ext.layout.FormLayout.labelSeparator, which is a colon ':' by default). 

 To display no separator for this field's label specify empty string ''.</description>

            <name>labelSeparator</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS style specification to apply directly to this field's label (defaults to the 

 container's labelStyle value if set, or ''). For example, labelStyle: 'font-weight:bold;'.</description>

            <name>labelStyle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The effect used when displaying a validation message under the field (defaults to 'normal').</description>

            <name>msgFx</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The location where error text should display. Should be one of the following values 

 (defaults to 'qtip'):

 &lt;pre&gt;

 Value         Description

 -----------   ----------------------------------------------------------------------

 qtip          Display a quick tip when the user hovers over the field

 title         Display a default browser title attribute popup

 under         Add a block div beneath the field containing the error text

 side          Add an error icon to the right of the field with a popup on hover

 [element id]  Add the error text directly to the innerHTML of the specified element

 &lt;/pre&gt;</description>

            <name>msgTarget</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The field's HTML name attribute.</description>

            <name>name</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets 

 the element's readOnly DOM attribute.</description>

            <name>readOnly</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The tabIndex for this field. Note this only applies to fields that are rendered, not those 

 which are built via applyTo (defaults to undefined).</description>

            <name>tabIndex</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>validateOnBlur</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The length of time in milliseconds after user input begins until validation is initiated 

 (defaults to 250)</description>

            <name>validationDelay</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The event that should initiate field validation. Set to false to disable automatic 

 validation (defaults to "keyup").</description>

            <name>validationEvent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A value to initialize this field with.</description>

            <name>value</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>False to validate that the value length &gt; 0 (defaults to true)</description>

            <name>allowBlank</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Error text to display if the allow blank validation fails (defaults to "This field is 

 required")</description>

            <name>blankText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>		

		<attribute>

            <name>hideTrigger</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>triggerClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width of this component in pixels (defaults to auto).</description>

            <name>width</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The height of this component in pixels (defaults to auto).</description>

            <name>height</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this field loses input focus. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBlur</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires just before the field blurs if the field value has changed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;newValue&lt;/strong&gt; : (Mixed) The new value&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;oldValue&lt;/strong&gt; : (Mixed) The original value&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this field receives input focus. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onFocus</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the field has been marked as invalid. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;msg&lt;/strong&gt; : (String) The validation message&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onInvalid</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed. You can 

 check Ext.EventObject.getKey to determine which key was pressed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (Ext.EventObject) The event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onSpecialKey</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed. You can check 

 Ext.EventObject.getKey to determine which key was pressed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onValid</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		

		

		<attribute><description>The width of the LOV window in pixels (defaults to 300).</description>

            <name>lovWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		

		<attribute><description>The height of the LOV window in pixels (defaults to 300).</description>

            <name>lovHeight</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>



		<attribute><description>The title of the LOV window.</description>

            <name>lovTitle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		

		<attribute>

			<description>Multiple selection is possible?(defaults to false).</description>

    				<name>multiSelect</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

				

		<attribute>

						<description>If this option is true, data store reloads each time the LOV opens(defaults to false).</description>

    				<name>alwaysLoadStore</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

					

		<attribute>

						<description>Id of the Grid Panel.</description>

    				<name>view</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>	

		

		<attribute>

						<description>Which data store field will use for return.</description>

    				<name>valueField</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

									

		<attribute>

						<description>Which data store field will use for display.</description>

    				<name>displayField</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		

		<attribute>

						<description>If multiple items are selected, they are joined with this character.</description>

    				<name>valueSeparator</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>		

					

		<attribute>

						<description>If multiple items are selected, they are joined with this character.</description>

    				<name>displaySeparator</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>	

													

		<attribute>

						<description>if this option is true, shows the LOV window when this component got focus(defaults to false).</description>

    				<name>showOnFocus</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>	

						

		<attribute>

			<name>textarea</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>	

												

		<attribute>

						<description>The minimum selected item number for this field(defaults to 0).</description>

    				<name>minItem</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>	

														

		<attribute>

						<description>minItemText</description>

    				<name>minItemText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>	

														

		<attribute>

						<description>The maximum selected item number for this field(defaults to 500).</description>

    				<name>maxItem</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>	

														

		<attribute>

						<description>maxItemText</description>

    				<name>maxItemText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>	

		

		<attribute><description>&lt;p&gt;Fires when an item is selected&lt;/p&gt;</description>

            <name>onSelect</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>		

		

		<attribute><description>&lt;p&gt;Fires when cancel button clicked in LOV window&lt;/p&gt;</description>

            <name>onCancel</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>		

		

		<attribute><description>&lt;p&gt;Fires when LOV window showed&lt;/p&gt;</description>

            <name>onShow</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>																							

	</tag>	


	<tag><description>Base class for form fields that provides default event handling, sizing, value handling 

 and other functionality.</description>

		<name>dateTime</name>

		<tag-class>isola.tags.ext.form.DateTimeFieldTag</tag-class>

		<body-content>empty</body-content>

		<attribute>
			<description>Allows blank values or not. Default is true</description>
            <name>allowBlank</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>


		<attribute>
			<description>Width of time field in pixels (defaults to 100)</description>
            <name>timeWidth</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>
			<description>Date - Time separator. Used to split date and time (defaults to ' ' (space))</description>
            <name>dtSeparator</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>
			<description>Format of datetime used to store value in hidden field and submitted to server (defaults to 'Y-m-d H:i:s' that is mysql format).</description>

            <name>hiddenFormat</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>
			<description>Where the time field should be rendered. 'right' is suitable for forms and 'below' is suitable if the field is used as the grid editor (defaults to 'right') Valid values: below and right</description>

            <name>timePosition</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>
			<description>Format of DateField. Can be localized. (defaults to 'm/y/d')</description>

            <name>dateFormat</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>
			<description>Format of TimeField. Can be localized. (defaults to 'H:i')</description>
			
            <name>timeFormat</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>plugins</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class used to provide field clearing (defaults to 'x-form-clear-left')</description>

            <name>clearCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to disable the field (defaults to false).</description>

            <name>disabled</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The default CSS class for the field (defaults to "x-form-field")</description>

            <name>fieldClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The label text to display next to this field (defaults to '')</description>

            <name>fieldLabel</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to use when the field receives focus (defaults to "x-form-focus")</description>

            <name>focusClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to completely hide the label element (defaults to false)</description>

            <name>hideLabel</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The type attribute for input fields -- e.g. radio, text, password (defaults to "text").</description>

            <name>inputType</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The CSS class to use when marking a field invalid (defaults to "x-form-invalid")</description>

            <name>invalidClass</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The error text to use when marking a field invalid and no message is provided 

 (defaults to "The value in this field is invalid")</description>

            <name>invalidText</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;An additional CSS class to apply to the wrapper element of this field (defaults 

 to the container's itemCls value if set, or ''). Since it is applied to the 

 wrapper, it allows you to write standard CSS rules that can apply to the field, 

 the label (if specified) or any other element within the markup for the field. 

 Example use:&lt;/p&gt;

 

 &lt;pre&gt;&lt;code&gt;

 // Apply a style to the field's label:

 &amp;lt;style&amp;gt;

     .required .x-form-item-label {font-weight:bold;color:red;}

 &amp;lt;/style&amp;gt;

 

 new Ext.FormPanel({

 	height: 100,

 	renderTo: document.body,

 	items: [{

 		xtype: 'textfield',

 		fieldLabel: 'Name',

 		itemCls: 'required' //this label will be styled

 	},{

 		xtype: 'textfield',

 		fieldLabel: 'Favorite Color'

 	}]

 });

 &lt;/code&gt;&lt;/pre&gt;</description>

            <name>itemCls</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The standard separator to display after the text of each form label (defaults to the 

 value of Ext.layout.FormLayout.labelSeparator, which is a colon ':' by default). 

 To display no separator for this field's label specify empty string ''.</description>

            <name>labelSeparator</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A CSS style specification to apply directly to this field's label (defaults to the 

 container's labelStyle value if set, or ''). For example, labelStyle: 'font-weight:bold;'.</description>

            <name>labelStyle</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The effect used when displaying a validation message under the field (defaults to 'normal').</description>

            <name>msgFx</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The location where error text should display. Should be one of the following values 

 (defaults to 'qtip'):

 &lt;pre&gt;

 Value         Description

 -----------   ----------------------------------------------------------------------

 qtip          Display a quick tip when the user hovers over the field

 title         Display a default browser title attribute popup

 under         Add a block div beneath the field containing the error text

 side          Add an error icon to the right of the field with a popup on hover

 [element id]  Add the error text directly to the innerHTML of the specified element

 &lt;/pre&gt;</description>

            <name>msgTarget</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The field's HTML name attribute.</description>

            <name>name</name>

            <required>true</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets 

 the element's readOnly DOM attribute.</description>

            <name>readOnly</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The tabIndex for this field. Note this only applies to fields that are rendered, not those 

 which are built via applyTo (defaults to undefined).</description>

            <name>tabIndex</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute>

            <name>validateOnBlur</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The length of time in milliseconds after user input begins until validation is initiated 

 (defaults to 250)</description>

            <name>validationDelay</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The event that should initiate field validation. Set to false to disable automatic 

 validation (defaults to "keyup").</description>

            <name>validationEvent</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>A value to initialize this field with.</description>

            <name>value</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The width of this component in pixels (defaults to auto).</description>

            <name>width</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>The height of this component in pixels (defaults to auto).</description>

            <name>height</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this field loses input focus. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onBlur</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires just before the field blurs if the field value has changed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;newValue&lt;/strong&gt; : (Mixed) The new value&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;oldValue&lt;/strong&gt; : (Mixed) The original value&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onChange</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when this field receives input focus. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onFocus</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires after the field has been marked as invalid. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;msg&lt;/strong&gt; : (String) The validation message&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onInvalid</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>&lt;p&gt;Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed. You can 

 check Ext.EventObject.getKey to determine which key was pressed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; : (Ext.EventObject) The event object&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onSpecialKey</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

		<attribute><description>Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed. You can check 

 Ext.EventObject.getKey to determine which key was pressed. &lt;/p&gt;

 Listeners will be called with the following arguments:

 &lt;ul&gt;

 &lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; : Ext.form.Field&lt;/li&gt;

 &lt;/ul&gt;</description>

            <name>onValid</name>

            <required>false</required>

            <rtexprvalue>true</rtexprvalue>

		</attribute>

	</tag>



	<tag>
		<name>rowExpander</name>
		<tag-class>isola.tags.ext.grid.RowExpanderTag</tag-class>
		<body-content>JSP</body-content>
	</tag>

</taglib>


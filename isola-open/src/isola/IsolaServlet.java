package isola;import java.io.BufferedInputStream;import java.io.OutputStream;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.lang.reflect.Method;import java.math.BigDecimal;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.HashMap;import java.util.List;import java.util.Locale;import java.util.Map;import javax.servlet.ServletException;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javolution.lang.Reflection;import javolution.util.FastList;import javolution.util.FastMap;import net.arnx.jsonic.JSON;import net.arnx.jsonic.JSONParseException;import org.apache.commons.configuration.PropertiesConfiguration;import org.apache.commons.lang.StringUtils;import isola.annotations.RemoteMethod;import isola.constants.MimeTypes;import isola.helpers.ClassLoaderHelper;import isola.helpers.TemplateHelper;import isola.model.core.IsolaTemplateFunction;import isola.model.core.NameValuePair;import isola.utility.Utility;/** * @author Umut Gokbayrak */public class IsolaServlet extends HttpServlet {	private static final long serialVersionUID = -1322873986403693833L;	private static FastMap<String, Object> remoteServices = new FastMap<String, Object>();	private static String urlPrefix;	private static final String templatePath = "/templates/isola";	private static boolean jsCaching = true;	private static long jsCacheAge = 28800;	private static boolean jsDebug = false;	private static SimpleDateFormat sdf = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss");	private String[] xssFilterChars = { "<", ">", "<", ">", "&#", "\"", "\\", "0x", "..", "?", "&" };	private String[] xssReplacementChars = { " ", " ", " ", " ", "#", "", "/", "0 x", " ", " ", " " };	private static String encoding = "utf-8";	private static Map<String, byte[]> outputCache = new HashMap<String, byte[]>();		@Override	public void init() throws ServletException {		initServices();		initParams();		initConfig();	}		private void initConfig() {		PropertiesConfiguration config = null;		try {			config = new PropertiesConfiguration("freemarker.properties");		} catch (org.apache.commons.configuration.ConfigurationException e1) {			e1.printStackTrace();		}		encoding = config.getString("encoding");	}		@Override	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {		// get the uri string		String uri = getURI(request);		// prepare the response header with the mime type		setFileType(uri, response);		// start processing by uriengine		if (uri.equals("/engine.js")) {			printEngineJs(request, response);		} else if (uri.startsWith("/js/") || uri.startsWith("/css/") || uri.startsWith("/images/")) {			// resources can be cached			printCaching(response);			uri = uriSafe(uri);			printResource(uri, response);		} else {			// first get the params			String jMethod = request.getParameter("method");			if (jMethod == null) {				// prepare caching				printCaching(response);				// HTTP GET -> print service stub				printServiceStub(response, uri);			} else {				// no caching header shall be set.				// HTTP POST -> execute service				String params = request.getParameter("params");				params = replaceReserved(params, request);				executeService(response, uri, jMethod, params);			}		}	}		/**	 * There are some reserved words such as REMOTE_HOST, REMOTE_ADDR etc...	 * This will replace them.	 * 	 * @param params	 * @return	 */	private String replaceReserved(String params, HttpServletRequest request) {		params = Utility.replaceAllOccurances(params, "$REMOTE_HOST", request.getRemoteHost());		params = Utility.replaceAllOccurances(params, "$REMOTE_ADDR", request.getRemoteAddr());		params = Utility.replaceAllOccurances(params, "$REMOTE_USER", request.getRemoteUser());		params = Utility.replaceAllOccurances(params, "$REMOTE_PORT", "" + request.getRemotePort());		params = Utility.replaceAllOccurances(params, "$LOCAL_ADDR", request.getLocalAddr());		params = Utility.replaceAllOccurances(params, "$LOCAL_NAME", request.getLocalName());		params = Utility.replaceAllOccurances(params, "$LOCAL_PORT", "" + request.getLocalPort());		return params;	}		/**	 * Prepares the response content type header	 * 	 * @param uri	 * @param response	 */	private void setFileType(String uri, HttpServletResponse response) {		response.setCharacterEncoding(encoding);		if (uri.toLowerCase().endsWith(".css")) {			response.setContentType(MimeTypes.text_css);		} else if (uri.toLowerCase().endsWith(".js")) {			response.setContentType(MimeTypes.text_javascript + "; charset=" + encoding);		} else if (uri.toLowerCase().endsWith(".jpg")) {			response.setContentType(MimeTypes.image_jpeg);		} else if (uri.toLowerCase().endsWith(".gif")) {			response.setContentType(MimeTypes.image_gif);		} else if (uri.toLowerCase().endsWith(".png")) {			response.setContentType(MimeTypes.image_png);		} else if (uri.toLowerCase().endsWith(".html")) {			response.setContentType(MimeTypes.text_html + "; charset=" + encoding);		}	}		/**	 * @param uri	 * @param response	 */	private void printResource(String uri, HttpServletResponse response) {		byte[] bOut = outputCache.get(uri);		if (bOut == null) {			BufferedInputStream is = null;			ByteArrayOutputStream baos = null;			try {				baos = new ByteArrayOutputStream();				is = new BufferedInputStream(IsolaServlet.class.getResourceAsStream("/resources" + uri));				int byte_;				while ((byte_ = is.read()) != -1) {					baos.write(byte_);				}				bOut = baos.toByteArray();				outputCache.put(uri, bOut);			} catch (IOException e) {				// e.printStackTrace();			} finally {				try { is.close(); } catch (Exception t) {}				try { baos.close(); } catch (Exception e) {}			}		}		OutputStream out = null;		try { out = response.getOutputStream(); } catch (Exception e) {};		if (out != null) {			try { out.write(bOut); } catch (Exception e) {};			// try { out.flush(); } catch (Exception e) {};			// try { out.close(); } catch (Exception e) {};		}	}		/**	 * Prevents from xss attacks.	 * @param uri	 * @return	 */	private String uriSafe(String uri) {		for (int i = 0; i < xssFilterChars.length; i++) {			uri = StringUtils.replace(uri, xssFilterChars[i], xssReplacementChars[i]);		}		return uri;	}		/**	 * @param response	 * @param params	 * @return	 * @throws IOException	 */	@SuppressWarnings("unchecked")	private void executeService(HttpServletResponse response, String uri, String jMethod, String params) throws IOException {		StringBuffer sParams = new StringBuffer();		List<?> jParams = null;		if (params != null) {			try {				jParams = (List) JSON.decode(params);				if (jParams != null) {					for (int i = 0; i < jParams.size(); i++) {						Map<?, ?> map = (Map) jParams.get(i);						String type = (String) map.get("type");						sParams.append(type);						if (i < jParams.size() - 1) {							sParams.append(",");						}					}				}			} catch (JSONParseException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}		}		Object obj = remoteServices.get(uri);		if (obj != null) {			Reflection.Constructor sbc = Reflection.getConstructor(obj.getClass().getName() + "()");			if (sbc != null) {				Object sb = sbc.newInstance();				Reflection.Method method = Reflection.getMethod(obj.getClass().getName() + "." + jMethod + "(" + sParams.toString() + ")");				Object[] prms = null;				if (jParams != null) {					prms = new Object[jParams.size()];					if (jParams != null) {						for (int i = 0; i < jParams.size(); i++) {							Map<?, ?> map = (Map) jParams.get(i);							prms[i] = map.get("value");							if (map.get("type").equals("int")) {								prms[i] = ((BigDecimal) prms[i]).intValue();							} else if (map.get("type").equals("long")) {								prms[i] = ((BigDecimal) prms[i]).longValue();							}						}					}				}				Object res = "";				try {					if (prms != null && prms.length > 0) {						res = method.invoke(sb, prms);					} else {						res = method.invoke(sb);					}					if (res != null) {						response.getWriter().print(res.toString());					}				} catch (Throwable e) {					e.printStackTrace();				}			}		}	}		/**	 * @param response	 * @param uri	 * @throws IOException	 */	private void printServiceStub(HttpServletResponse response, String uri) throws IOException {		// in this case user requested a reference to the class with a get		// method.		// we shall create a javascript stub for the user to operate on.		Object obj = remoteServices.get(uri);		if (obj != null) {			Class<?> cls = obj.getClass();			String className = cls.getName();			if (className.indexOf(".") > 0) {				className = className.substring(cls.getName().lastIndexOf(".") + 1);			}			Map<String, Object> dataMap = new HashMap<String, Object>();			dataMap.put("uri", uri);			dataMap.put("className", className);			FastList<IsolaTemplateFunction> functions = new FastList<IsolaTemplateFunction>();			String methodName = null;			while (cls != null) {				Method[] methods = cls.getDeclaredMethods();				if (methods != null) {					for (int i = 0; i < methods.length; i++) {						if (methods[i].getAnnotation(RemoteMethod.class) != null) {							methodName = methods[i].getName();							Class<?>[] types = methods[i].getParameterTypes();							IsolaTemplateFunction funct = new IsolaTemplateFunction();							funct.setName(methodName);							if (types.length == 0) {								// this is a zero parameter method. we can call								// it directly								funct.setParams(null);							} else {								// there are some parameters.								NameValuePair params[] = new NameValuePair[types.length];								for (int j = 0; j < types.length; j++) {									String paramName = types[j].getName();									String var = paramName.substring(paramName.lastIndexOf(".") + 1).toLowerCase(Locale.ENGLISH) + j;									params[j] = new NameValuePair(paramName, var);								}								funct.setParams(params);							}							functions.add(funct);						}					}				}				cls = cls.getSuperclass();			}			// add the functions to the data map			if (functions.size() > 0) {				dataMap.put("functions", functions);			}			try {				TemplateHelper merger = new TemplateHelper(templatePath + "/Class.ftl", dataMap);				String js = merger.merge();				response.getWriter().print(js);			} catch (Exception e) {				e.printStackTrace();			}		}	}		/**	 * @param response	 */	private void printCaching(HttpServletResponse response) {		if (!jsCaching) {			response.setHeader("Pragma", "no-cache"); // HTTP 1.0			response.setDateHeader("Expires", 0); // prevents caching at the													// proxy server		} else {			Calendar cal = Calendar.getInstance();			cal.add(Calendar.SECOND, (int) jsCacheAge);			response.setHeader("Cache-Control", "cache"); // HTTP 1.1			response.setHeader("Pragma", "cache"); // HTTP 1.0			response.setHeader("Expires", sdf.format(cal.getTime()) + " GMT");		}	}		/**	 * @param response	 * @param out	 */	private void printEngineJs(HttpServletRequest request, HttpServletResponse response) {		// engine.js is never cached.		response.setHeader("Pragma", "no-cache"); // HTTP 1.0		response.setDateHeader("Expires", 0); // prevents caching at the proxy												// server		// user requests to load the engine. Send it.		try {			Map<String, Object> dataMap = new HashMap<String, Object>();			String contextPath = request.getContextPath();			dataMap.put("contextRoot", contextPath);			dataMap.put("urlPrefix", urlPrefix);			dataMap.put("jsDebug", jsDebug);			TemplateHelper merger = new TemplateHelper(templatePath + "/Isola.ftl", dataMap);			String js = merger.merge();			response.getWriter().print(js);		} catch (Exception e) {			e.printStackTrace();		}	}		/**	 * 	 */	private void initServices() {		// get the package to start the search		String packagePrefix = getInitParameter("class-prefix");		if (packagePrefix == null) {			String packageOrig = this.getClass().getPackage().getName();			String packageTmp = "/";			if (packageOrig.indexOf(".") > 0) {				packageTmp = packageOrig.substring(0, packageOrig.indexOf("."));				packageOrig = packageOrig.substring(packageOrig.indexOf(".") + 1);			}			if (packageOrig.indexOf(".") > 0) {				packageTmp = packageTmp + "." + packageOrig.substring(0, packageOrig.indexOf("."));			}			packagePrefix = packageTmp;		}		// searching the classes with a RemoteService annotation		ClassLoaderHelper.findRemoteServices(packagePrefix);		// get 'em		remoteServices = ClassLoaderHelper.getRemoteServices();	}		/**	 * 	 */	private void initParams() {		// get the init parameter if javascript files are cached or not		String strJsCached = getInitParameter("resources-cached");		if (strJsCached != null && strJsCached.toLowerCase().equals("false")) {			jsCaching = false;		} // default is true		// enable Javascript log console		String strJsDebug = getInitParameter("js-log");		if (strJsDebug != null && strJsDebug.toLowerCase().equals("true")) {			jsDebug = true;		} // default is false		// if javascript caching is enabled aging is important.		if (jsCaching) {			String strJsCacheAge = getInitParameter("resources-cache-age");			if (strJsCacheAge != null) {				try {					jsCacheAge = Long.parseLong(strJsCacheAge);				} catch (NumberFormatException ignore) {				}			}		}	}		/**	 * @param request	 * @return	 */	private String getURI(HttpServletRequest request) {		String uri = request.getRequestURI();		String contextPath = request.getContextPath();		if (uri.startsWith(contextPath)) {			uri = uri.substring(contextPath.length());		}		if (urlPrefix == null) {			int posUri = uri.substring(1).indexOf("/");			urlPrefix = uri.substring(0, posUri + 1);			if (!urlPrefix.startsWith("/")) {				urlPrefix = "/" + urlPrefix;			}		}		uri = uri.substring(urlPrefix.length());		return uri;	}		@Override	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {		doGet(request, response);	}}
package isola.helpers;import isola.annotations.RemoteService;import java.io.File;import java.net.URL;import java.util.ArrayList;import java.util.Enumeration;import java.util.List;import java.util.jar.JarEntry;import java.util.jar.JarFile;import java.util.zip.ZipEntry;import javolution.util.FastMap;/** * Utility class classloader related facilities for Isola Remote Services *  * @author Umut Gokbayrak * @author Alisan Erdemli */public class ClassLoaderHelper {	private static FastMap<String, Object> remoteServices = new FastMap<String, Object>();	private static List<String> omittedPackages = new ArrayList<String>();	private static boolean initComplete = false;	static {		omittedPackages.add("com.sun.");		omittedPackages.add("java.");		omittedPackages.add("javax.");		omittedPackages.add("org.ietf.");		omittedPackages.add("org.jcp.");		omittedPackages.add("org.omg.");		omittedPackages.add("org.w3c.");		omittedPackages.add("org.xml.");		omittedPackages.add("sun.");		omittedPackages.add("sunw.");		omittedPackages.add("org.springframework.");		omittedPackages.add("org.aspectj.");		omittedPackages.add("org.mortbay.");		omittedPackages.add("org.apache.");		omittedPackages.add("freemarker.");		omittedPackages.add("org.springframework.");		omittedPackages.add("org.springframework.");		omittedPackages.add("org.eclipse.");	}		public static List<Class<?>> getClassesForPackage(String pckgname) {		List<Class<?>> classes = new ArrayList<Class<?>>();		try {			ClassLoader cld = Thread.currentThread().getContextClassLoader();			if (cld == null) {				throw new ClassNotFoundException("Can't get class loader.");			}			// Ask for all resources for the path			Enumeration<URL> resources = cld.getResources(pckgname.replace('.', '/'));			while (resources.hasMoreElements()) {				URL res = resources.nextElement();				File f = new File(res.getFile());				// if (f.exists()) {				traverseRemoteServices(f, pckgname);				// }			}		} catch (Throwable ex) {			ex.printStackTrace();		}		return classes;	}		/**	 * Traverses the classpath and finds the classes annotating RemoteService	 * 	 * These are the classes with the remote serving capabilities. Puts them in	 * a ArrayList (static)	 * 	 * @param packageName	 */	public static void findRemoteServices(String packageName) {		if (!initComplete) {			try {				List<Class<?>> classes = getClassesForPackage(packageName);				if (classes != null) {					for (int i = 0; i < classes.size(); i++) {						try {							Class<?> cls = classes.get(i);							parseClass(cls);						} catch (Throwable e) {							e.printStackTrace();						}					}				}			} catch (Exception e) {				e.printStackTrace();			}			initComplete = true;		}	}		/**	 * Recursive algorith to traverse the classpath.	 * 	 * @param dir	 * @param packageName	 */	private static void traverseRemoteServices(File dir, String packageName) {		// check if the package is in the omitted list.		for (int i = 0; i < omittedPackages.size(); i++) {			if (packageName.startsWith(omittedPackages.get(i))) {				return;			}		}		if (dir.isDirectory()) {			String[] children = dir.list();			for (int i = 0; i < children.length; i++) {				traverseRemoteServices(new File(dir, children[i]), packageName);			}		} else {			if (dir.getName().endsWith(".class")) {				try {					String absPath = dir.getAbsolutePath().replace('\\', '/');					String jPackageName = packageName.replace('.', '/');					if (!jPackageName.startsWith("/")) {						jPackageName = "/" + jPackageName;					}					if (absPath.indexOf(jPackageName) >= 0) {						String className = dir.getName();						className = className.substring(0, className.length() - 6);						String pkgTmp = absPath.substring(absPath.indexOf(jPackageName + "/") + 1, absPath.indexOf(dir.getName()) - 1);						pkgTmp = pkgTmp.replace('/', '.');						try {							Class<?> oClass = Class.forName(pkgTmp + "." + className);							parseClass(oClass);							oClass = null;						} catch (Throwable cnfex) {							// System.err.println(cnfex);						}						className = null;						className = null;						pkgTmp = null;					}					absPath = null;					jPackageName = null;				} catch (Throwable e) {					// e.printStackTrace();				}			} else if (dir.getName().endsWith(".jar") || dir.getAbsolutePath().indexOf(".jar!") > 0) {				// Jar file.				try {					if (dir.getAbsolutePath().indexOf("!") > 0) {						dir = new File(dir.getAbsolutePath().substring(0, dir.getAbsolutePath().indexOf("!")));					}					JarFile jfile = new JarFile(dir);					Enumeration<JarEntry> e = jfile.entries();					String jPackageName = packageName.replace('.', '/');					if (!jPackageName.startsWith("/")) {						jPackageName = "/" + jPackageName;					}					while (e.hasMoreElements()) {						try {							ZipEntry entry = e.nextElement();							String entryName = entry.getName();							entryName = entryName.replace('\\', '/');							if (!entryName.startsWith("/")) {								entryName = "/" + entryName;							}							if (entryName.indexOf(jPackageName) >= 0) {								if (entryName.endsWith("class")) {									String className = entryName.substring(entryName.lastIndexOf("/") + 1);									String pkgTmp = entryName.substring(0, entryName.indexOf(className) - 1);									pkgTmp = pkgTmp.replace('/', '.');									if (pkgTmp.startsWith(".")) {										pkgTmp = pkgTmp.substring(1);									}									className = className.substring(0, className.length() - 6);									try {										Class<?> oClass = Class.forName(pkgTmp + "." + className);										parseClass(oClass);										oClass = null;									} catch (Throwable cnfex) {										// System.err.println(cnfex);									}									className = null;									pkgTmp = null;								}							}							entry = null;							entryName = null;						} catch (Throwable e1) {							e1.printStackTrace();						}					}					jfile = null;					e = null;					jPackageName = null;				} catch (Throwable ioex) {					// System.err.println(ioex);				}			}		}	}		/**	 * @param oClass	 * @throws Exception	 */	private static void parseClass(Class<?> oClass) throws Exception {		if (oClass.isAnnotationPresent(RemoteService.class)) {			if (!oClass.isAnonymousClass() && !oClass.isInterface()) {				Object o = oClass.newInstance();				RemoteService rs = oClass.getAnnotation(RemoteService.class);				if (rs.uri() != null && !rs.uri().equals("")) {					remoteServices.put(rs.uri(), o);				}				o = null;			}		}	}		public static FastMap<String, Object> getRemoteServices() {		return remoteServices;	}}
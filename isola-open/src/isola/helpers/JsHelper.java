package isola.helpers;import isola.model.core.JsObject;import isola.model.core.JsRegExp;import isola.utility.Utility;import java.util.Date;import java.util.Iterator;import javolution.text.TextBuilder;import org.apache.commons.lang.StringUtils;/** * @author Umut Gokbayrak */public final class JsHelper {	/**	 * @param object	 * 	 * @return	 */	public static String printJsObject(JsObject object) {		Iterator<String> iter = object.keySet().iterator();		TextBuilder buff = new TextBuilder();		String tmp = null;		Object val = null;		while (iter.hasNext()) {			tmp = iter.next().trim();			val = object.get(tmp);			// if val is null no further processing is necessary			if (val != null) {				if (tmp != null && !tmp.equals("") && !tmp.startsWith("~~~NIL")) {					buff.append(tmp).append(":");				}				// look if it is a String or not.				if (val instanceof String) {					if (!val.equals("") && StringUtils.isNumeric(val.toString()) && !val.toString().startsWith("0")) {						buff.append(val.toString()).append(",");					} else {						// String -> this should be treated special						if (val != null && val.equals("this")) {							buff.append(val).append(",");						} else if (tmp != null && tmp.equals("tpl")) {							buff.append(val).append(",");						} else if (tmp != null && (tmp.trim().equals("height") || tmp.trim().equals("width"))) {							// height and width can have % and px strings so we							// can't be sure							// if it is a String or a Numeric variable.							if (tmp != null) {								tmp = tmp.trim();								if (tmp.endsWith("px")) {									tmp = tmp.substring(0, tmp.length() - 2);								}								if (StringUtils.isNumeric(val.toString())) {									buff.append(val.toString()).append(",");								} else {									if (!val.toString().startsWith("'")) {										buff.append("'").append(val).append("'").append(",");									}								}							}						} else {							// This is an ordinary String							String strVal = Utility.replaceAllOccurances(((String) val).trim(), "'", "\\'");							buff.append("'").append(strVal).append("'").append(",");						}					}				} else if (val instanceof Date) {					long milis = ((Date) val).getTime();					buff.append("new Date(").append(milis).append(")").append(",");				} else if (val instanceof JsRegExp) {					String strVal = Utility.replaceAllOccurances(((JsRegExp) val).toString().trim(), "'", "\\'");					buff.append("new RegExp('").append(strVal).append("'),");				} else {					// this is not a String so we need to have a toString and					// process					// its output.					try {						buff.append(val.toString()).append(",");					} catch (Throwable e) {						buff.append("");					}				}			}		}		// dump the buffer and clean if there is an extra comma at the end.		String txt = buff.toString();		if (txt.endsWith(",")) {			txt = txt.substring(0, txt.length() - 1);		}		if (!txt.startsWith("{")) {			txt = "{" + txt + "}";		}		return txt;	}}
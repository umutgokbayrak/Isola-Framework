package isola.helpers;import isola.annotations.RemoteMethod;import isola.annotations.RemoteService;import isola.constants.JsEventNames;import isola.model.core.LabelValuePair;import isola.model.html.core.ElementInt;import isola.utility.RandomGen;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;/** *  * @author Umut Gokbayrak */@RemoteService(uri = "/jsGen.js")public final class JsGenerator {		/**	 * Appends Element to the parent HTML element as a child.	 * 	 * @param element	 * @param parentElementId	 * @throws Exception	 */	@RemoteMethod	public static String appendChild(ElementInt element, String parentElementId) throws Exception {		if (parentElementId == null) {			throw new Exception("Parent Element ID cannot be null since this method will append child to it.");		} else if (element == null) {			throw new Exception("Element can not be null");		}		List<LabelValuePair> attrs = ElementParserHtml.getAttributeMap(element);		String tag = ElementParserHtml.getTag(element);		String innerHTML = ElementParserHtml.getChildrenOutput(element);		Map<String, Object> dataMap = new HashMap<String, Object>();		dataMap.put("tag", tag);		dataMap.put("attrs", attrs);		dataMap.put("parentId", parentElementId);		if (innerHTML != null && !innerHTML.equals("")) {			dataMap.put("innerHTML", innerHTML);		}		return merge("appendChild.ftl", dataMap);	}		/**	 * 	 * Insert a HTML element referencing another one and inserts it just before	 * it.	 * 	 * 	 * 	 * @param element	 * 	 * @param referenceElementId	 * 	 * @throws Exception	 */	public static String insertBefore(ElementInt element, String referenceElementId) throws Exception {		if (referenceElementId == null) {			throw new Exception("Reference Element ID cannot be null.");		} else if (element == null) {			throw new Exception("Element can not be null");		}		List<LabelValuePair> attrs = ElementParserHtml.getAttributeMap(element);		String tag = ElementParserHtml.getTag(element);		String innerHTML = ElementParserHtml.getChildrenOutput(element);		Map<String, Object> dataMap = new HashMap<String, Object>();		dataMap.put("tag", tag);		dataMap.put("attrs", attrs);		dataMap.put("referenceId", referenceElementId);		if (innerHTML != null && !innerHTML.equals("")) {			dataMap.put("innerHTML", innerHTML);		}		return merge("insertBefore.ftl", dataMap);	}		/**	 * 	 * Replaces HTML element with another one	 * 	 * 	 * 	 * @param oldElementId	 * 	 * @param newElement	 * 	 * @param parentElementId	 * 	 * @throws Exception	 */	public static String replaceChild(String oldElementId, ElementInt newElement, String parentElementId) throws Exception {		if (oldElementId == null) {			throw new Exception("Old Element ID cannot be null.");		} else if (newElement == null) {			throw new Exception("New Element can not be null");		} else if (parentElementId == null) {			throw new Exception("Parent Element ID can not be null");		}		List<LabelValuePair> attrs = ElementParserHtml.getAttributeMap(newElement);		String tag = ElementParserHtml.getTag(newElement);		String innerHTML = ElementParserHtml.getChildrenOutput(newElement);		Map<String, Object> dataMap = new HashMap<String, Object>();		dataMap.put("tag", tag);		dataMap.put("attrs", attrs);		dataMap.put("oldElementId", oldElementId);		dataMap.put("parentId", parentElementId);		if (innerHTML != null && !innerHTML.equals("")) {			dataMap.put("innerHTML", innerHTML);		}		return merge("replaceChild.ftl", dataMap);	}		/**	 * 	 * Removes a child node from its parent HTML node	 * 	 * 	 * 	 * @param elementId	 * 	 * @param parentElementId	 * 	 * @throws Exception	 */	public static String removeChild(String elementId, String parentElementId) throws Exception {		if (parentElementId == null) {			throw new Exception("Parent Element ID cannot be null.");		} else if (elementId == null) {			throw new Exception("Element ID can not be null");		}		Map<String, Object> dataMap = new HashMap<String, Object>();		dataMap.put("parentId", parentElementId);		dataMap.put("elementId", elementId);		return merge("removeChild.ftl", dataMap);	}		/**	 * 	 * Sets the inner HTML of the node	 * 	 * 	 * 	 * @param elementId	 * 	 * @param innerHTML	 * 	 * @throws Exception	 */	public static String setInnerHTML(String elementId, String innerHTML) throws Exception {		if (elementId == null) {			throw new Exception("Element ID can not be null");		}		Map<String, Object> dataMap = new HashMap<String, Object>();		dataMap.put("elementId", elementId);		// dataMap.put("innerHTML",		// commonUtility.replaceAllOccurances(innerHTML, "'", "\\'"));		dataMap.put("innerHTML", innerHTML);		return merge("setInnerHtml.ftl", dataMap);	}		/**	 * 	 * 	 * 	 * @param oldElementId	 * 	 * @param newElement	 * 	 * @throws Exception	 */	public static String replaceElement(String oldElementId, ElementInt newElement) throws Exception {		if (oldElementId == null) {			throw new Exception("Old Element ID cannot be null.");		} else if (newElement == null) {			throw new Exception("New Element can not be null");		}		List<LabelValuePair> attrs = ElementParserHtml.getAttributeMap(newElement);		String tag = ElementParserHtml.getTag(newElement);		String innerHTML = ElementParserHtml.getChildrenOutput(newElement);		Map<String, Object> dataMap = new HashMap<String, Object>();		dataMap.put("tag", tag);		dataMap.put("attrs", attrs);		dataMap.put("oldElementId", oldElementId);		if (innerHTML != null && !innerHTML.equals("")) {			dataMap.put("innerHTML", innerHTML);		}		return merge("replaceElement.ftl", dataMap);	}		/**	 * 	 * Sets or updates a HTML element's attribute	 * 	 * 	 * 	 * @see JsGenerator#removeElementAttribute(Element, String)	 * 	 * @see JsGenerator#removeElementAttribute(String, String)	 * 	 * @param elementId	 * 	 * @param attributeName	 * 	 * @param attributeValue	 * 	 * @throws Exception	 */	public static String setAttribute(String elementId, String attributeName, String attributeValue) throws Exception {		if (elementId == null) {			throw new Exception("Element ID cannot be null.");		} else if (attributeName == null) {			throw new Exception("Attribute Name can not be null");		} else if (attributeValue == null) {			throw new Exception("Attribute Value can not be null. If you want to remove the attribute use removeAttribute");		}		Map<String, Object> dataMap = new HashMap<String, Object>();		dataMap.put("elementId", elementId);		dataMap.put("attributeName", attributeName);		dataMap.put("attributeValue", attributeValue);		return merge("setAttribute.ftl", dataMap);	}		/**	 * 	 * Sets/Updates selected style attribute for the Element	 * 	 * 	 * 	 * @see JsGenerator#removeStyle(String, String)	 * 	 * @see JsGenerator#removeStyle(Element, String)	 * 	 * @param elementId	 * 	 * @param styleName	 * 	 * @param styleValue	 * 	 * @throws Exception	 */	public static String setStyle(String elementId, String styleName, String styleValue) throws Exception {		if (elementId == null) {			throw new Exception("Element ID cannot be null.");		} else if (styleName == null) {			throw new Exception("Style Name can not be null");		} else if (styleValue == null) {			throw new Exception("Style Value can not be null. If you want to remove the attribute use removeStyle");		}		Map<String, Object> dataMap = new HashMap<String, Object>();		dataMap.put("elementId", elementId);		dataMap.put("styleName", styleName);		dataMap.put("styleValue", styleValue);		return merge("setStyle.ftl", dataMap);	}		/**	 * 	 * Removes the given attribute from HTML element	 * 	 * 	 * 	 * @see JsGenerator#setAttribute(Element, String, String)	 * 	 * @see JsGenerator#setAttribute(String, String, String)	 * 	 * @param elementId	 * 	 * @param attributeName	 * 	 * @throws Exception	 */	public static String removeAttribute(String elementId, String attributeName) throws Exception {		if (elementId == null) {			throw new Exception("Element ID cannot be null.");		} else if (attributeName == null) {			throw new Exception("Attribute Name can not be null");		}		Map<String, Object> dataMap = new HashMap<String, Object>();		dataMap.put("elementId", elementId);		dataMap.put("attributeName", attributeName);		return merge("removeAttribute.ftl", dataMap);	}		/**	 * 	 * Removes the given style value from the inline HTML only. It will not	 * effect the css	 * 	 * inherited from the css files.	 * 	 * 	 * 	 * @see JsGenerator#setStyle(Element, String, String)	 * 	 * @see JsGenerator#setAttribute(String, String, String)	 * 	 * @param elementId	 * 	 * @param styleName	 * 	 * @throws Exception	 */	public static String removeStyle(String elementId, String styleName) throws Exception {		return setStyle(elementId, styleName, ";");	}		/**	 * 	 * Hides the element with elementId from the screen. It doesn't remove it	 * 	 * but it only sets its display property to none.	 * 	 * 	 * 	 * @see JsGenerator#show(Element)	 * 	 * @see JsGenerator#show(String)	 * 	 * @param elementId	 * 	 * @throws Exception	 */	public static String hide(String elementId) throws Exception {		return setStyle(elementId, "display", "none");	}		/**	 * 	 * Sets an elements display property to ''	 * 	 * 	 * 	 * @param elementId	 * 	 * @throws Exception	 */	public static String show(String elementId) throws Exception {		return setStyle(elementId, "display", "");	}		/**	 * 	 * Sets the opacity of the HTML node.	 * 	 * 	 * 	 * @param elementId	 * 	 * @param opacity	 *            An integer from 0 to 100. Indicates the percentage of the	 *            opacity.	 * 	 * @throws Exception	 */	public static String setOpacity(String elementId, int opacity) throws Exception {		if (elementId == null) {			throw new Exception("Element ID cannot be null.");		}		Map<String, Object> dataMap = new HashMap<String, Object>();		dataMap.put("elementId", elementId);		dataMap.put("opacity", opacity);		return merge("setOpacity.ftl", dataMap);	}		/**	 * 	 * Removes the given element without needing to specify the parent element	 * 	 * 	 * 	 * @param elementId	 * 	 * @throws Exception	 */	public static String removeElement(String elementId) throws Exception {		if (elementId == null) {			throw new Exception("Element ID cannot be null.");		}		Map<String, Object> dataMap = new HashMap<String, Object>();		dataMap.put("elementId", elementId);		return merge("removeElement.ftl", dataMap);	}		/**	 * 	 * Sets the X, Y absolute position for the selected element. First checks if	 * the HTML	 * 	 * element has a absolute position or not. If not absolute than makes it an	 * absolute	 * 	 * positioned element and than relocates the element to the given position	 * 	 * 	 * 	 * @param elementId	 * 	 * @param posX	 * 	 * @param posY	 * 	 * @throws Exception	 */	public static String setPosition(String elementId, int posX, int posY) throws Exception {		if (elementId == null) {			throw new Exception("Element ID cannot be null.");		}		Map<String, Object> dataMap = new HashMap<String, Object>();		dataMap.put("elementId", elementId);		dataMap.put("posX", posX);		dataMap.put("posY", posY);		return merge("setPosition.ftl", dataMap);	}		/**	 * 	 * Closes the active window. Please note that this Javascript routine will	 * close the windows directly	 * 	 * if it is opened by another window of the same browser instance. Otherwise	 * will do no effect at all	 * 	 * or will display a Javascript warning asking your confirmation to close	 * the window.	 * 	 * 	 * 	 * @throws Exception	 */	public static String closeWindow() throws Exception {		return merge("closeWindow.ftl", null);	}		/**	 * 	 * Attaches an event to an element overriding the previous action registered	 * to the event.	 * 	 * 	 * 	 * @see JsEventNames	 * 	 * @param elementId	 *            The ID of the HTML Element to operate on	 * 	 * @param eventName	 *            Event name like onclick, onresize etc...	 * 	 * @param jsCode	 *            Pure Javascript code to run when this event occurs	 * 	 * @param params	 *            Any number(0 or more) of parameters this JS method will accept	 * 	 * @throws Exception	 */	public static String attachEvent(String elementId, String eventName, String jsCode, String[] params) throws Exception {		if (elementId == null) {			throw new Exception("Element ID cannot be null.");		}		Map<String, Object> dataMap = new HashMap<String, Object>();		dataMap.put("elementId", elementId);		dataMap.put("eventName", eventName);		dataMap.put("params", params);		dataMap.put("jsCode", jsCode);		return merge("attachEventJs.ftl", dataMap);	}		/**	 * 	 * Attaches an event to an element overriding the previous action registered	 * to the event.	 * 	 * 	 * 	 * @see JsEventNames	 * 	 * @param elementId	 *            The ID of the HTML Element to operate on.	 * 	 * @param eventName	 *            Event name like onclick, onresize etc...	 * 	 * @param jsFunction	 *            The name of the javascript function to call when this event	 *            occurs. No paranthesis no parameters. Just the name.	 * 	 * @throws Exception	 */	public static String attachEvent(String elementId, String eventName, String jsFunction) throws Exception {		if (elementId == null) {			throw new Exception("Element ID cannot be null.");		}		Map<String, Object> dataMap = new HashMap<String, Object>();		dataMap.put("elementId", elementId);		dataMap.put("eventName", eventName);		dataMap.put("jsFunct", jsFunction);		return merge("attachEventFunct.ftl", dataMap);	}		/**	 * 	 * Attaches an event to an element overriding the previous action registered	 * to the event.	 * 	 * 	 * 	 * @see JsEventNames	 * 	 * @param elementId	 *            The ID of the HTML Element to operate on	 * 	 * @param eventName	 *            Event name like onclick, onresize etc...	 * 	 * @param jsCode	 *            Pure Javascript code to run when this event occurs	 * 	 * @param params	 *            Any number(0 or more) of parameters this JS method will accept	 * 	 * @throws Exception	 */	public static String appendEvent(String elementId, String eventName, String jsCode, String params) throws Exception {		if (elementId == null) {			throw new Exception("Element ID cannot be null.");		}		Map<String, Object> dataMap = new HashMap<String, Object>();		dataMap.put("elementId", elementId);		dataMap.put("eventName", eventName);		dataMap.put("params", params);		dataMap.put("jsCode", jsCode);		dataMap.put("functName", RandomGen.getRandomText(10));		return merge("appendEventJs.ftl", dataMap);	}		/**	 * 	 * Attaches an event to an element overriding the previous action registered	 * to the event.	 * 	 * 	 * 	 * @see JsEventNames	 * 	 * @param elementId	 *            The ID of the HTML Element to operate on.	 * 	 * @param eventName	 *            Event name like onclick, onresize etc...	 * 	 * @param jsFunction	 *            The name of the javascript function to call when this event	 *            occurs. No paranthesis no parameters. Just the name.	 * 	 * @throws Exception	 */	public static String appendEvent(String elementId, String eventName, String jsFunction) throws Exception {		if (elementId == null) {			throw new Exception("Element ID cannot be null.");		}		Map<String, Object> dataMap = new HashMap<String, Object>();		dataMap.put("elementId", elementId);		dataMap.put("eventName", eventName);		dataMap.put("jsFunct", jsFunction);		return merge("appendEventFunct.ftl", dataMap);	}		/**	 * 	 * Detaches Event from the element.	 * 	 * 	 * 	 * @param elementId	 * 	 * @param eventName	 * 	 * @throws Exception	 */	public static String detachEvent(String elementId, String eventName) throws Exception {		if (elementId == null) {			throw new Exception("Element ID cannot be null.");		} else if (eventName == null) {			throw new Exception("Event Name cannot be null.");		}		Map<String, Object> dataMap = new HashMap<String, Object>();		dataMap.put("elementId", elementId);		dataMap.put("eventName", eventName);		return merge("detachEvent.ftl", dataMap);	}		/**	 * 	 * Uses the Javascript history array to go back one page	 * 	 * 	 * 	 * @throws Exception	 */	public static String goBack() throws Exception {		return merge("goBack.ftl", null);	}		/**	 * 	 * Uses the Javascript history array to go forward one page	 * 	 * 	 * 	 * @throws Exception	 */	public static String goForward() throws Exception {		return merge("goForward.ftl", null);	}		/**	 * 	 * Method to clone an HTML element. This is not a simple cloneNode	 * statement. It can also	 * 	 * set a new id, set any number of attributes and style statements besides	 * assign events to the	 * 	 * cloned HTML element. All is done in a single Push.	 * 	 * 	 * 	 * @param elementId	 *            Element ID of the HTML Element beeing cloned.	 * 	 * @param parentElementId	 *            Required: The parent node's id to append this cloned node.	 * 	 * @param newId	 *            Optional: id for the cloned HTML element. If none is supplied	 *            an auto generated value will be assigned.	 * 	 * @param styles	 *            Optional style to apply to the cloned HTML element. It is a	 *            LabelValueBean array. Label: style name, Value: the value for	 *            the style attribute	 * 	 * @param attributes	 *            Optional attributes to apply to the cloned HTML element. It is	 *            a LabelValueBean array. Label: attribute name, Value: the	 *            value to set to the attribute	 * 	 * @param events	 *            Optional events to apply to the cloned HTML element. It is a	 *            LabelValueBean array. Label: Javascript Event such as onclick,	 *            onresize etc... and Value: the name of the Javascript function	 *            name to operate on the event. Do not put () and ; at the end.	 * 	 * @throws Exception	 */	public static String clone(String elementId, String parentElementId, String newId, LabelValuePair[] styles, LabelValuePair[] attributes, LabelValuePair[] events) throws Exception {		if (elementId == null) {			throw new Exception("Element ID cannot be null.");		} else if (parentElementId == null) {			throw new Exception("Parent Element ID cannot be null.");		}		if (newId == null) {			newId = "clone" + RandomGen.getRandomText(6);		}		Map<String, Object> dataMap = new HashMap<String, Object>();		dataMap.put("elementId", elementId);		dataMap.put("parentId", parentElementId);		dataMap.put("newId", newId);		if (styles != null) {			dataMap.put("styles", styles);		}		if (attributes != null) {			dataMap.put("attributes", attributes);		}		if (events != null) {			dataMap.put("events", events);		}		return merge("cloneNode.ftl", dataMap);	}		/**	 * 	 * Javascript window.open functionality.	 * 	 * 	 * 	 * @param id	 *            The javascript variable name to assign the new opened window.	 * 	 * @param name	 *            The new window also can contain a name. Ex: _blank, _parent,	 *            _self, _top, hebelek	 * 	 * @param url	 *            The url to open in the window	 * 	 * @param height	 *            You can assign the height of the window. Use 0 to use your	 *            browser defaults	 * 	 * @param width	 *            You can assign the width of the window. Use 0 to use your	 *            browser defaults	 * 	 * @param top	 *            IE Only: You can assign the top position of the window. Use 0	 *            to use your browser defaults	 * 	 * @param left	 *            IE Only: You can assign the left side position of the window.	 *            Use 0 to use your browser defaults	 * 	 * @param showFullScreen	 *            IE Only: You can open the new window in full screen	 * 	 * @param showLocationBar	 *            The Location entry field where you enter the URL.	 * 	 * @param showMenuBar	 *            The menu bar of the window	 * 	 * @param isResizable	 *            Lets you choose if the window should be resizable or not.	 * 	 * @param showScrollbars	 *            Enable the scrollbars if the document is bigger than the	 *            window	 * 	 * @param showStatusBar	 *            The status bar at the bottom of the window.	 * 	 * @param showTitleBar	 *            IE Only: Specifies whether to display a Title Bar for the	 *            window. The default is yes. Internet Explorer 5.5 and later.	 *            This feature is no longer supported. The Title Bar remains	 *            visible unless the fullscreen sFeature is active. This	 *            parameter is ignored prior to Internet Explorer 5.5. It	 *            applies only if the calling application is an HTML Application	 *            or a trusted dialog box.	 * 	 * @param showToolBar	 *            The standard browser toolbar, with buttons such as Back and	 *            Forward.	 * 	 * @param showDirectories	 *            The standard browser directory buttons, such as What's New and	 *            What's Cool	 * 	 * @throws Exception	 */	public static String openWindow(String id, String name, String url, int height, int width, int top, int left, boolean showFullScreen, boolean showLocationBar, boolean showMenuBar, boolean isResizable, boolean showScrollbars, boolean showStatusBar, boolean showTitleBar, boolean showToolBar, boolean showDirectories) throws Exception {		Map<String, Object> dataMap = new HashMap<String, Object>();		if (id != null) {			dataMap.put("id", id);		}		if (name != null) {			dataMap.put("name", name);		}		if (url != null) {			dataMap.put("url", url);		}		List<LabelValuePair> features = new ArrayList<LabelValuePair>();		features.add(new LabelValuePair("status", (showStatusBar) ? "1" : "0"));		features.add(new LabelValuePair("toolbar", (showToolBar) ? "1" : "0"));		features.add(new LabelValuePair("location", (showLocationBar) ? "1" : "0"));		features.add(new LabelValuePair("menubar", (showMenuBar) ? "1" : "0"));		features.add(new LabelValuePair("directories", (showDirectories) ? "1" : "0"));		features.add(new LabelValuePair("resizable", (isResizable) ? "1" : "0"));		features.add(new LabelValuePair("scrollbars", (showScrollbars) ? "1" : "0"));		features.add(new LabelValuePair("titlebar", (showTitleBar) ? "1" : "0"));		features.add(new LabelValuePair("fullscreen", (showFullScreen) ? "1" : "0"));		if (height >= 0) {			features.add(new LabelValuePair("height", "" + height));		}		if (width >= 0) {			features.add(new LabelValuePair("width", "" + width));		}		if (left >= 0) {			features.add(new LabelValuePair("left", "" + left));		}		if (top >= 0) {			features.add(new LabelValuePair("top", "" + top));		}		dataMap.put("features", features);		return merge("openWindow.ftl", dataMap);	}		/**	 * 	 * The easiest form of making an object draggable.	 * 	 * 	 * 	 * @param elementId	 * 	 * @throws Exception	 */	public static String makeDraggable(String elementId) throws Exception {		if (elementId == null) {			throw new Exception("Element ID cannot be null.");		}		Map<String, Object> dataMap = new HashMap<String, Object>();		dataMap.put("elementId", elementId);		return merge("makeDraggableSimple.ftl", dataMap);	}		/**	 * 	 * A method to make an HTML object draggable besides adding many user	 * interface enhancements.	 * 	 * 	 * 	 * @param elementId	 *            The element id to make draggable	 * 	 * @param handleElementId	 *            The element to act as the handle for the draggable element.	 *            defaults to the element itself.	 * 	 * @param containerElementId	 *            If set to other than null, it	 * 	 * @param snap	 *            Optional, the distance you have to drag before the element	 *            starts to respond to the drag. Give null to use defaults.	 * 	 * @param grid	 *            Optional, distance in px for snap-to-grid dragging. Give null	 *            to use defaults.	 * 	 * @param modifierX	 *            Optional, the css attribute to change while moving the x axis.	 *            Default is 'left'. You can use width for a resizer and false	 *            to disable. If null is given 'left' will be default.	 * 	 * @param modifierY	 *            Optional, the css attribute to change while moving the y axis.	 *            Default is 'top'. You can use height for a resizer and false	 *            to disable. If null is given 'left' will be default.	 * 	 * @param opacityEffect	 *            If set to true, opacity will be set to 0.50 while dragging.	 * 	 * @throws Exception	 */	public static String makeDraggable(String elementId, String handleElementId, String containerElementId, String snap, String grid, String modifierX, String modifierY, boolean opacityEffect) throws Exception {		if (elementId == null) {			throw new Exception("Element ID cannot be null.");		}		Map<String, Object> dataMap = new HashMap<String, Object>();		dataMap.put("elementId", elementId);		if (handleElementId != null) {			dataMap.put("handleId", handleElementId);		}		if (containerElementId != null) {			dataMap.put("containerId", containerElementId);		}		if (snap == null) {			snap = "6";		}		dataMap.put("snap", snap);		if (grid == null) {			grid = "false";		}		dataMap.put("grid", grid);		if (modifierX == null) {			modifierX = "left";		}		if (modifierY == null) {			modifierY = "top";		}		dataMap.put("modifierX", modifierX);		dataMap.put("modifierY", modifierY);		if (opacityEffect) {			dataMap.put("opacityEffect", opacityEffect);		}		return merge("makeDraggableProps.ftl", dataMap);	}		/**	 * 	 * A method to make an HTML object draggable besides adding many user	 * interface enhancements.	 * 	 * 	 * 	 * @param elementId	 *            The element id to make draggable	 * 	 * @param handleElementId	 *            The element to act as the handle for the draggable element.	 *            defaults to the element itself.	 * 	 * @param containerElementId	 *            If set to other than null, it	 * 	 * @param snap	 *            Optional, the distance you have to drag before the element	 *            starts to respond to the drag. Give null to use defaults.	 * 	 * @param grid	 *            Optional, distance in px for snap-to-grid dragging. Give null	 *            to use defaults.	 * 	 * @param modifierX	 *            Optional, the css attribute to change while moving the x axis.	 *            Default is 'left'. You can use width for a resizer and false	 *            to disable. If null is given 'left' will be default.	 * 	 * @param modifierY	 *            Optional, the css attribute to change while moving the y axis.	 *            Default is 'top'. You can use height for a resizer and false	 *            to disable. If null is given 'left' will be default.	 * 	 * @param onStart	 *            Optional, JS Code to execute when the user starts to drag (on	 *            mousedown); Give null to disable	 * 	 * @param onComplete	 *            Optional, function to execute when the user completes the	 *            drag. Give null to disable.	 * 	 * @param onDrag	 *            Optional, function to execute at every step of the drag. Give	 *            null to disable.	 * 	 * @throws Exception	 */	public static String makeDraggable(String elementId, String handleElementId, String containerElementId, String snap, String grid, String modifierX, String modifierY, String onStart, String onComplete, String onDrag) throws Exception {		if (elementId == null) {			throw new Exception("Element ID cannot be null.");		}		Map<String, Object> dataMap = new HashMap<String, Object>();		dataMap.put("elementId", elementId);		if (handleElementId != null) {			dataMap.put("handleId", handleElementId);		}		if (containerElementId != null) {			dataMap.put("containerId", containerElementId);		}		if (snap == null) {			snap = "6";		}		dataMap.put("snap", snap);		if (grid == null) {			grid = "false";		}		dataMap.put("grid", grid);		if (modifierX == null) {			modifierX = "left";		}		if (modifierY == null) {			modifierY = "top";		}		dataMap.put("modifierX", modifierX);		dataMap.put("modifierY", modifierY);		if (onStart != null) {			dataMap.put("onStart", onStart);		}		if (onComplete != null) {			dataMap.put("onComplete", onComplete);		}		if (onDrag != null) {			dataMap.put("onDrag", onDrag);		}		return merge("makeDraggablePropsJs.ftl", dataMap);	}		/**	 * 	 * A method to make an HTML object draggable besides adding many user	 * interface enhancements. This method	 * 	 * allows to choose drop targets.	 * 	 * 	 * 	 * @param elementId	 *            The element id to make draggable	 * 	 * @param handleElementId	 *            The element to act as the handle for the draggable element.	 *            defaults to the element itself.	 * 	 * @param containerElementId	 *            If set to other than null, it	 * 	 * @param snap	 *            Optional, the distance you have to drag before the element	 *            starts to respond to the drag. Give null to use defaults.	 * 	 * @param grid	 *            Optional, distance in px for snap-to-grid dragging. Give null	 *            to use defaults.	 * 	 * @param modifierX	 *            Optional, the css attribute to change while moving the x axis.	 *            Default is 'left'. You can use width for a resizer and false	 *            to disable. If null is given 'left' will be default.	 * 	 * @param modifierY	 *            Optional, the css attribute to change while moving the y axis.	 *            Default is 'top'. You can use height for a resizer and false	 *            to disable. If null is given 'left' will be default.	 * 	 * @param onStart	 *            Optional, JS Code to execute when the user starts to drag (on	 *            mousedown); Give null to disable	 * 	 * @param onComplete	 *            Optional, function to execute when the user completes the	 *            drag. Give null to disable.	 * 	 * @param onDrag	 *            Optional, function to execute at every step of the drag. Give	 *            null to disable.	 * 	 * @param onOver	 *            Optional, function to execute when element is over one of the	 *            drop targets	 * 	 * @param onLeave	 *            Optional, function to execute when element left the drop	 *            target	 * 	 * @param dropTargets	 *            Optional. An array of elementId's which are drop targets for	 *            this element.	 * 	 * @throws Exception	 */	public static String makeDraggable(String elementId, String handleElementId, String containerElementId, String snap, String grid, String modifierX, String modifierY, String onStart, String onComplete, String onDrag, String onOver, String onLeave, String onDrop, String[] dropTargets) throws Exception {		if (elementId == null) {			throw new Exception("Element ID cannot be null.");		}		Map<String, Object> dataMap = new HashMap<String, Object>();		dataMap.put("elementId", elementId);		if (handleElementId != null) {			dataMap.put("handleId", handleElementId);		}		if (containerElementId != null) {			dataMap.put("containerId", containerElementId);		}		if (snap == null) {			snap = "6";		}		dataMap.put("snap", snap);		if (grid == null) {			grid = "false";		}		dataMap.put("grid", grid);		if (modifierX == null) {			modifierX = "left";		}		if (modifierY == null) {			modifierY = "top";		}		dataMap.put("modifierX", modifierX);		dataMap.put("modifierY", modifierY);		if (onStart != null) {			dataMap.put("onStart", onStart);		}		if (onComplete != null) {			dataMap.put("onComplete", onComplete);		}		if (onDrag != null) {			dataMap.put("onDrag", onDrag);		}		if (onOver != null) {			dataMap.put("onOver", onOver);		}		if (onLeave != null) {			dataMap.put("onLeave", onLeave);		}		if (onDrop != null) {			dataMap.put("onDrop", onDrop);		} else {			dataMap.put("onDrop", "return true;");		}		if (dropTargets != null) {			dataMap.put("droppables", dropTargets);		}		return merge("makeDraggableWithDrops.ftl", dataMap);	}		/**	 * 	 * Simplest form of making an element resizable	 * 	 * 	 * 	 * @param elementId	 * 	 * @param handleId	 * 	 * @throws Exception	 */	public static String makeResizable(String elementId, String handleId) throws Exception {		if (elementId == null) {			throw new Exception("Element ID cannot be null.");		} else if (handleId == null) {			throw new Exception("Handle ID cannot be null.");		}		Map<String, Object> dataMap = new HashMap<String, Object>();		dataMap.put("elementId", elementId);		dataMap.put("handleId", handleId);		return merge("makeResizableSimple.ftl", dataMap);	}		/**	 * 	 * Full featured resize js method.	 * 	 * 	 * 	 * @param elementId	 *            Required. Element to make resizable	 * 	 * @param handleElementId	 *            Required. The handle to resize the element.	 * 	 * @param snap	 *            Optional, the distance you have to drag before the element	 *            starts to respond to the drag. Give null to use defaults.	 * 	 * @param grid	 *            Optional, distance in px for snap-to-grid dragging. Give null	 *            to use defaults.	 * 	 * @param limitX	 *            Optional, an int array of pixels to limit the resizing at the	 *            X axis.	 * 	 * @param limitY	 *            Optional, an int array of pixels to limit the resizing at the	 *            Y sxis.	 * 	 * @param disableX	 *            Optional, used to disable resizing completely at the X axis	 * 	 * @param disableY	 *            Optional, used to disable resizing completely at the Y axis	 * 	 * @param onStart	 *            Optional, JS Code to execute when the user starts to drag (on	 *            mousedown); Give null to disable	 * 	 * @param onComplete	 *            Optional, function to execute when the user completes the	 *            drag. Give null to disable.	 * 	 * @param onDrag	 *            Optional, function to execute at every step of the drag. Give	 *            null to disable.	 * 	 * @throws Exception	 */	public static String makeResizable(String elementId, String handleElementId, String snap, String grid, int[] limitX, int[] limitY, boolean disableX, boolean disableY, String onStart, String onComplete, String onDrag) throws Exception {		if (elementId == null) {			throw new Exception("Element ID cannot be null.");		} else if (handleElementId == null) {			throw new Exception("Handle ID cannot be null.");		}		Map<String, Object> dataMap = new HashMap<String, Object>();		dataMap.put("elementId", elementId);		if (handleElementId != null) {			dataMap.put("handleId", handleElementId);		}		if (snap == null) {			snap = "6";		}		dataMap.put("snap", snap);		if (grid == null) {			grid = "false";		}		dataMap.put("grid", grid);		if (disableX) {			dataMap.put("modifierX", "false");		} else {			dataMap.put("modifierX", "width");		}		if (disableY) {			dataMap.put("modifierY", "false");		} else {			dataMap.put("modifierY", "height");		}		if (limitX != null) {			dataMap.put("limitX", limitX);		}		if (limitY != null) {			dataMap.put("limitY", limitY);		}		if (onStart != null) {			dataMap.put("onStart", onStart);		}		if (onComplete != null) {			dataMap.put("onComplete", onComplete);		}		if (onDrag != null) {			dataMap.put("onDrag", onDrag);		}		return merge("makeDraggablePropsJs.ftl", dataMap);	}		/**	 * 	 * To set the focus on the element. It will only work for form input	 * elements.	 * 	 * 	 * 	 * @param elementId	 * 	 * @throws Exception	 */	public static String focus(String elementId) throws Exception {		if (elementId == null) {			throw new Exception("Element ID cannot be null.");		}		Map<String, Object> dataMap = new HashMap<String, Object>();		dataMap.put("elementId", elementId);		return merge("focus.ftl", dataMap);	}		/**	 * 	 * Opens the Print Dialog Box	 * 	 * 	 * 	 * @throws Exception	 */	public static String print() throws Exception {		return merge("print.ftl", null);	}		/**	 * 	 * Reloads the current page	 * 	 * 	 * 	 * @throws Exception	 */	public static String reload() throws Exception {		return merge("reload.ftl", null);	}		/**	 * 	 * Resizes element to the given Width and Height values	 * 	 * 	 * 	 * @param elementId	 * 	 * @param resizeToWidth	 * 	 * @param resizeToHeight	 * 	 * @throws Exception	 */	public static String resizeTo(String elementId, int resizeToWidth, int resizeToHeight) throws Exception {		if (elementId == null) {			throw new Exception("Element ID cannot be null.");		}		Map<String, Object> dataMap = new HashMap<String, Object>();		dataMap.put("elementId", elementId);		dataMap.put("resizeToWidth", resizeToWidth);		dataMap.put("resizeToHeight", resizeToHeight);		return merge("resizeTo.ftl", dataMap);	}		/**	 * 	 * Scrolls the element to the given X and Y coordinates. To disable	 * scrolling at	 * 	 * an axis give the value 0.	 * 	 * 	 * 	 * @param elementId	 * 	 * @param scrollToX	 * 	 * @param scrollToY	 * 	 * @throws Exception	 */	public static String scrollTo(String elementId, int scrollToX, int scrollToY) throws Exception {		if (elementId == null) {			throw new Exception("Element ID cannot be null.");		}		Map<String, Object> dataMap = new HashMap<String, Object>();		dataMap.put("elementId", elementId);		dataMap.put("posX", scrollToX);		dataMap.put("posY", scrollToY);		return merge("scrollTo.ftl", dataMap);	}		/**	 * 	 * Submits a form element	 * 	 * 	 * 	 * @param formId	 * 	 * @throws Exception	 */	public static String submit(String formId) throws Exception {		if (formId == null) {			throw new Exception("Element ID cannot be null.");		}		Map<String, Object> dataMap = new HashMap<String, Object>();		dataMap.put("formId", formId);		return merge("submit.ftl", dataMap);	}		/**	 * 	 * Redirects the browser window to another page.	 * 	 * 	 * 	 * @param location	 * 	 * @throws Exception	 */	public static String goLocation(String location) throws Exception {		if (location == null) {			throw new Exception("Location cannot be null.");		}		Map<String, Object> dataMap = new HashMap<String, Object>();		dataMap.put("location", location);		return merge("goLocation.ftl", dataMap);	}		/**	 * 	 * Ajax loader. It loads the specified url into the given Html element.	 * 	 * If a loading indicator is wanted to be shown an ajax loader css must be	 * 	 * provided. A sample ajax indicator css is as follows.	 * 	 * <pre>	 * 	 * .ajax-loading {	 * 
	 * 	padding: 20px 0;	 * 
	 * 	background: url(http://demos.mootools.net/demos/Group/spinner.gif) no-repeat center;	 * 
	 * }	 * 	 * </pre>	 * 	 * 	 * 	 * @param elementId	 *            Element ID is the HTML element which the url will be loaded	 *            in.	 * 	 * @param url	 *            The url to load	 * 	 * @param showLoadingProgress	 *            Do we want ajax indicator loader to load	 * 	 * @param ajaxLoaderCss	 *            Ajax loader css to be used.	 * 	 * @throws Exception	 */	public static String ajaxloadInto(String elementId, String url, boolean showLoadingProgress, String ajaxLoaderCss) throws Exception {		if (url == null) {			throw new Exception("Url cannot be null.");		} else if (elementId == null) {			throw new Exception("Element ID cannot be null.");		}		Map<String, Object> dataMap = new HashMap<String, Object>();		dataMap.put("elementId", elementId);		dataMap.put("url", url);		if (showLoadingProgress) {			if (ajaxLoaderCss == null) {				ajaxLoaderCss = "ajax-loading";			}			dataMap.put("ajaxLoader", "true");			dataMap.put("ajaxLoaderCss", ajaxLoaderCss);		}		return merge("ajaxLoadInto.ftl", dataMap);	}		/**	 * 	 * Run a javascript function after the specified delay	 * 	 * 	 * 	 * @param elementId	 *            timeout will be bindedwith this element. In the javascript	 *            function "this" will refer to this element.	 * 	 * @param jsFunction	 * 	 * @param delay	 * 	 * @param args	 * 	 * @return	 * 	 * @throws Exception	 */	public static String setTimeout(String elementId, String jsFunction, int delay, String[] args) throws Exception {		if (jsFunction == null) {			throw new Exception("Javascript function to call cannot be null.");		}		Map<String, Object> dataMap = new HashMap<String, Object>();		dataMap.put("jsFunction", jsFunction);		dataMap.put("delay", delay);		if (elementId != null) {			dataMap.put("bind", elementId);		}		if (args != null) {			dataMap.put("args", args);		}		return merge("setTimeout.ftl", dataMap);	}		/**	 * 	 * Javascript alert method.	 * 	 * 	 * 	 * @param msg	 * 	 * @return	 * 	 * @throws Exception	 */	public static String windowAlert(String msg) throws Exception {		if (msg == null) {			throw new Exception("Message cannot be null.");		}		Map<String, Object> dataMap = new HashMap<String, Object>();		dataMap.put("msg", msg);		return merge("windowAlert.ftl", dataMap);	}		/**	 * 	 * General purpose Javascript merger and publisher	 * 	 * 	 * 	 * @param templateName	 * 	 * @param dataMap	 * 	 * @throws Exception	 */	private static String merge(String templateName, Map<String, Object> dataMap) throws Exception {		TemplateHelper merger = new TemplateHelper("/templates/js/" + templateName, dataMap);		String js = merger.merge();		return js;	}}
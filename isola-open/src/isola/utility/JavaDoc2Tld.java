package isola.utility;import java.io.File;import java.io.FileWriter;import java.io.IOException;import java.util.HashMap;import java.util.List;import java.util.Map;import org.jdom.Document;import org.jdom.Element;import org.jdom.JDOMException;import org.jdom.Namespace;import org.jdom.input.SAXBuilder;import org.jdom.output.XMLOutputter;import com.sun.javadoc.ClassDoc;import com.sun.javadoc.DocErrorReporter;import com.sun.javadoc.MethodDoc;import com.sun.javadoc.RootDoc;/** * This doclet is used for copying javadoc comments from source files to given * tld file. * Usage: javadoc -tldfile pathToTldFile *  * @author Engin Kurtoglu */public class JavaDoc2Tld {		@SuppressWarnings("unchecked")	public static boolean start(RootDoc root) {		String tldFile = getTldFile(root.options());		SAXBuilder builder = new SAXBuilder();		Document document = null;		Namespace namespace = Namespace.getNamespace("http://java.sun.com/xml/ns/j2ee");		File file = new File(tldFile);		if (!file.exists()) {			System.err.println("Tld file does not exist: " + tldFile);			System.exit(-1);		}		try {			document = builder.build(file);		} catch (JDOMException e) {			e.printStackTrace();			System.exit(-1);		} catch (IOException e) {			e.printStackTrace();			System.exit(-1);		}		List<Element> tags = document.getRootElement().getChildren("tag", namespace);		String string = null;		String commentString = null;		Element descriptionElement = null;		for (Element tagElement : tags) {			string = tagElement.getChildText("tag-class", namespace).trim();			ClassDoc classDoc = root.classNamed(string.trim());			commentString = classDoc.commentText().trim();			if (commentString.length() > 0) {				// commentString = commentString.replaceAll("\"", "&amp;");				// commentString = commentString.replaceAll("<", "&lt;");				// commentString = commentString.replaceAll(">", "&gt;");				descriptionElement = tagElement.getChild("description", namespace);				if (descriptionElement == null) {					descriptionElement = new Element("description", namespace);					descriptionElement.setText(commentString);					tagElement.addContent(0, descriptionElement);				} else {					descriptionElement.setText(commentString);				}			}			Map<String, MethodDoc> methods = new HashMap<String, MethodDoc>();			do {				MethodDoc[] methodDocs = classDoc.methods();				for (int i = 0; i < methodDocs.length; i++) {					if (methodDocs[i].name().startsWith("set")) {						methods.put(methodDocs[i].name(), methodDocs[i]);					}				}				classDoc = classDoc.superclass();			} while (classDoc.toString().startsWith("org.turkcell.isola"));			List<Element> attributes = tagElement.getChildren("attribute", namespace);			for (Element attributeElement : attributes) {				String attributeName = attributeElement.getChildText("name", namespace).trim();				char[] cs = attributeName.toCharArray();				cs[0] = Character.toUpperCase(cs[0]);				String methodName = "set" + new String(cs);				MethodDoc doc = methods.get(methodName);				if (doc != null) {					commentString = doc.commentText().trim();					if (commentString.length() > 0) {						// commentString = commentString.replaceAll("\"",						// "&amp;");						// commentString = commentString.replaceAll("<",						// "&lt;");						// commentString = commentString.replaceAll(">",						// "&gt;");						descriptionElement = attributeElement.getChild("description", namespace);						if (descriptionElement == null) {							descriptionElement = new Element("description", namespace);							descriptionElement.setText(commentString);							attributeElement.addContent(0, descriptionElement);						} else {							descriptionElement.setText(commentString);						}					}				}			}		}		try {			writeDocToXmlFile(document, tldFile + ".new.tld");		} catch (IOException e) {			e.printStackTrace();			System.exit(-1);		}		return true;	}		public static void writeDocToXmlFile(Document doc, String fileName) throws IOException {		XMLOutputter out = new XMLOutputter();		FileWriter writer = new FileWriter(fileName);		out.output(doc, writer);		writer.flush();		writer.close();	}		public static int optionLength(String option) {		if (option.equals("-tldfile")) {			return 2;		}		return 0;	}		public static boolean validOptions(String options[][], DocErrorReporter reporter) {		boolean foundTldfileOption = false;		for (int i = 0; i < options.length; i++) {			String[] opt = options[i];			if (opt[0].equals("-tldfile")) {				if (foundTldfileOption) {					reporter.printError("Only one -tldfile option allowed.");					return false;				}				foundTldfileOption = true;			}		}		if (!foundTldfileOption) {			reporter.printError("Usage: javadoc -tldfile myTldfile ... ");		}		return foundTldfileOption;	}		private static String getTldFile(String[][] options) {		String str = null;		for (int i = 0; i < options.length; i++) {			String[] opt = options[i];			if (opt[0].equals("-tldfile")) {				str = opt[1];			}		}		return str;	}}
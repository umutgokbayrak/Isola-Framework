package isola.utility;import java.util.Locale;import java.util.StringTokenizer;import javax.servlet.http.HttpServletRequest;import javax.servlet.jsp.PageContext;import org.apache.commons.beanutils.PropertyUtils;public class Utility {	/**	 * @param attName	 * @return	 */	public static String getGetterMethodNameFromAttribute(String attName) {		if (attName == null || attName.trim().length() < 2) {			return null;		}		StringBuffer out = new StringBuffer();		out.append("get");		out.append(attName.substring(0, 1).toUpperCase(Locale.ENGLISH));		out.append(attName.substring(1));		return out.toString();	}		/**	 * @param str	 * @param from	 * @param to	 * @return	 */	public static String replaceAllOccurances(String str, String from, String to) {		if (str == null || str.length() == 0) {			return str;		} else if (str.length() == 1 && str.equals(from)) {			return to;		} else if (str.length() == 1 && !str.equals(from)) {			return str;		}		int j = -1;		while ((j = str.indexOf(from)) >= 0) {			str = str.substring(0, j) + (char) 5 + str.substring(j + from.length());		}		int i = -1;		while ((i = str.indexOf((char) 5)) >= 0) {			str = str.substring(0, i) + to + str.substring(i + 1);		}		return str;	}		/**	 * @param str	 * @param trimStr	 * @return	 */	public static String extendedTrim(String str, String trimStr) {		if (str == null || trimStr == null || str.length() == 0 || trimStr.length() == 0 || str.length() < trimStr.length()) {			return str;		} else if (str.length() == trimStr.length() && str.equals(trimStr)) {			return "";		} else if (str.length() == trimStr.length() && !str.equals(trimStr)) {			return str;		}		str = str.trim();		while (str != null && !str.equals("") && str.length() >= trimStr.length() && str.substring(0, trimStr.length()).equals(trimStr)) {			str = str.substring(trimStr.length());		}		while (str != null && !str.equals("") && str.length() >= trimStr.length() && str.substring(str.length() - trimStr.length()).equals(trimStr)) {			str = str.substring(0, str.length() - trimStr.length());		}		return str;	}		/**	 * @param input	 * @return	 */	public static String htmlSpecialChars(String input) {		StringBuffer filtered;		try {			filtered = new StringBuffer(input.length());			char c;			for (int i = 0; i < input.length(); i++) {				c = input.charAt(i);				if (c == '<') {					filtered.append("&lt;");				} else if (c == '>') {					filtered.append("&gt;");				} else if (c == '"') {					filtered.append("&quot;");				} else if (c == '&') {					filtered.append("&amp;");				} else {					filtered.append(c);				}			}		} catch (Exception e) {			return input;		}		return (filtered.toString());	}		/**	 * @param bean	 * @param pageContext	 * @param scope	 * @return	 * @throws Exception	 */	public static Object getBeanValue(String bean, PageContext pageContext, String scope) throws Exception {		if (bean == null)			return bean;		int pos = -1;		int posEnd = -1;		String evalStr = null;		String obj = null;		if ((pos = bean.indexOf("${")) >= 0) {			String toPos = bean.substring(0, pos);			posEnd = pos + bean.substring(pos).indexOf("}");			String afterPos = bean.substring(posEnd + 1);			evalStr = bean.substring(pos + 2, posEnd).trim();			StringTokenizer token = new StringTokenizer(evalStr, ".");			obj = token.nextToken();			Object reqVar = null;			if (scope == null) {				reqVar = pageContext.getAttribute(obj);				if (reqVar == null) {					reqVar = pageContext.getRequest().getAttribute(obj);				}				if (reqVar == null) {					reqVar = ((HttpServletRequest) pageContext.getRequest()).getSession().getAttribute(obj);				}			} else if (scope.equals("pageContext")) {				reqVar = pageContext.getAttribute(obj);			} else if (scope.equals("request")) {				reqVar = pageContext.getRequest().getAttribute(obj);			} else if (scope.equals("session")) {				reqVar = ((HttpServletRequest) pageContext.getRequest()).getSession().getAttribute(obj);			}			// Object reqVar = TagUtils.getInstance().lookup(pageContext, obj,			// scope);			if (reqVar == null) {				return null;			}			Object attrVal = reqVar;			if (evalStr.indexOf(".") >= 0) {				while (token.hasMoreTokens()) {					String attr = token.nextToken();					attrVal = PropertyUtils.getProperty(attrVal, attr);				}			}			if (attrVal instanceof String) {				bean = toPos + attrVal + afterPos;				if ((pos = bean.indexOf("${")) >= 0) {					return getBeanValue(bean, pageContext, scope);				}			} else {				return attrVal;			}		}		return bean;	}}
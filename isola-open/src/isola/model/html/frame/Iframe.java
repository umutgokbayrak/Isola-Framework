package isola.model.html.frame;import isola.helpers.ElementParserHtml;import isola.model.html.core.Container;/** *  *  *  * @author Umut Gokbayrak *  *  */public class Iframe extends Container {	private static final String tag = "iframe";	/**	 * 	 * @deprecated This attribute specifies the position of an IMG, OBJECT, or	 *             APPLET with respect to its context.	 * 	 *             The following values for align concern the object's position	 *             with respect to surrounding text:	 * 	 *             <ul>	 * 	 *             <li>bottom: means that the bottom of the object should be	 *             vertically aligned with	 * 	 *             the current baseline. This is the default value.</li>	 * 	 *             <li>middle: means that the center of the object should be	 *             vertically aligned with	 * 	 *             the current baseline.</li>	 * 	 *             <li>top: means that the top of the object should be	 *             vertically aligned with the	 * 	 *             top of the current text line.</li>	 * 	 *             </ul>	 * 	 * 	 * 	 *             Two other values, left and right, cause the image to float to	 *             the current left or right margin.	 */	private String align;	/**	 * 	 * This attribute provides the user agent with information about the frame	 * border. Possible values:	 * 	 * <ul>	 * 	 * <li>1: This value tells the user agent to draw a separator between this	 * frame and	 * 	 * every adjoining frame. This is the default value.</li>	 * 	 * <li>0: This value tells the user agent not to draw a separator between	 * this frame	 * 	 * and every adjoining frame. Note that separators may be drawn next to this	 * frame	 * 	 * nonetheless if specified by other frames.</li>	 * 	 * </ul>	 */	private String frameBorder;	/**	 * 	 * The height of the element.	 */	private String height;	/**	 * 	 * This attribute specifies a link to a long description of the frame. This	 * description	 * 	 * should supplement the short description provided using the title	 * attribute, and may be	 * 	 * particularly useful for non-visual user agents.	 */	private String longDesc;	/**	 * 	 * This attribute specifies the amount of space to be left between the	 * frame's	 * 	 * contents in its top and bottom margins. The value must be greater than	 * zero (pixels).	 * 	 * The default value depends on the user agent.	 */	private String marginHeight;	/**	 * 	 * This attribute specifies the amount of space to be left between the	 * frame's contents in	 * 	 * its left and right margins. The value must be greater than zero (pixels).	 * The default	 * 	 * value depends on the user agent.	 */	private String marginWidth;	/**	 * 	 * This attribute assigns the control name.	 */	private String name;	/**	 * 	 * This attribute specifies scroll information for the frame window.	 * Possible values	 * 	 * <ul>	 * 	 * <li>auto: This value tells the user agent to provide scrolling devices	 * for the frame window	 * 	 * when necessary. This is the default value.</li>	 * 	 * <li>yes: This value tells the user agent to always provide scrolling	 * devices for the	 * 	 * frame window.</li>	 * 	 * <li>no: This value tells the user agent not to provide scrolling devices	 * for the frame	 * 	 * window.</li>	 * 	 * </ul>	 */	private String scrolling;	/**	 * 	 * This attribute specifies the location of the initial contents to be	 * contained in the	 * 	 * frame.	 */	private String src;	/**	 * 	 * The width of the inline frame.	 */	private String width;		public Iframe() {		super();		setId(tag + (Math.random() * 1000));	}		public Iframe(String id) {		super(id);	}		public Iframe(String id, String src, String width, String height) {		super(id);		setSrc(src);		setWidth(width);		setHeight(height);	}		public String getAlign() {		return align;	}		/**	 * 	 * @deprecated This attribute specifies the position of an IMG, OBJECT, or	 *             APPLET with respect to its context.	 * 	 *             The following values for align concern the object's position	 *             with respect to surrounding text:	 * 	 *             <ul>	 * 	 *             <li>bottom: means that the bottom of the object should be	 *             vertically aligned with	 * 	 *             the current baseline. This is the default value.</li>	 * 	 *             <li>middle: means that the center of the object should be	 *             vertically aligned with	 * 	 *             the current baseline.</li>	 * 	 *             <li>top: means that the top of the object should be	 *             vertically aligned with the	 * 	 *             top of the current text line.</li>	 * 	 *             </ul>	 * 	 * 	 * 	 *             Two other values, left and right, cause the image to float to	 *             the current left or right margin.	 * 	 * 	 * 	 * @param align	 */	public void setAlign(String align) {		this.align = align;	}		public String getFrameBorder() {		return frameBorder;	}		/**	 * 	 * This attribute provides the user agent with information about the frame	 * border. Possible values:	 * 	 * <ul>	 * 	 * <li>1: This value tells the user agent to draw a separator between this	 * frame and	 * 	 * every adjoining frame. This is the default value.</li>	 * 	 * <li>0: This value tells the user agent not to draw a separator between	 * this frame	 * 	 * and every adjoining frame. Note that separators may be drawn next to this	 * frame	 * 	 * nonetheless if specified by other frames.</li>	 * 	 * </ul>	 * 	 * 	 * 	 * @param frameBorder	 */	public void setFrameBorder(String frameBorder) {		this.frameBorder = frameBorder;	}		public String getHeight() {		return height;	}		/**	 * 	 * The height of the element.	 * 	 * 	 * 	 * @param height	 */	public void setHeight(String height) {		this.height = height;	}		public String getLongDesc() {		return longDesc;	}		/**	 * 	 * This attribute specifies a link to a long description of the frame. This	 * description	 * 	 * should supplement the short description provided using the title	 * attribute, and may be	 * 	 * particularly useful for non-visual user agents.	 * 	 * 	 * 	 * @param longDesc	 */	public void setLongDesc(String longDesc) {		this.longDesc = longDesc;	}		public String getMarginHeight() {		return marginHeight;	}		/**	 * 	 * This attribute specifies the amount of space to be left between the	 * frame's	 * 	 * contents in its top and bottom margins. The value must be greater than	 * zero (pixels).	 * 	 * The default value depends on the user agent.	 * 	 * 	 * 	 * @param marginHeight	 */	public void setMarginHeight(String marginHeight) {		this.marginHeight = marginHeight;	}		public String getMarginWidth() {		return marginWidth;	}		/**	 * 	 * This attribute specifies the amount of space to be left between the	 * frame's contents in	 * 	 * its left and right margins. The value must be greater than zero (pixels).	 * The default	 * 	 * value depends on the user agent.	 * 	 * 	 * 	 * @param marginWidth	 */	public void setMarginWidth(String marginWidth) {		this.marginWidth = marginWidth;	}		public String getName() {		return name;	}		/**	 * 	 * This attribute assigns the control name.	 * 	 * 	 * 	 * @param name	 */	public void setName(String name) {		this.name = name;	}		public String getScrolling() {		return scrolling;	}		/**	 * 	 * This attribute specifies scroll information for the frame window.	 * Possible values	 * 	 * <ul>	 * 	 * <li>auto: This value tells the user agent to provide scrolling devices	 * for the frame window	 * 	 * when necessary. This is the default value.</li>	 * 	 * <li>yes: This value tells the user agent to always provide scrolling	 * devices for the	 * 	 * frame window.</li>	 * 	 * <li>no: This value tells the user agent not to provide scrolling devices	 * for the frame	 * 	 * window.</li>	 * 	 * </ul>	 * 	 * 	 * 	 * @param scrolling	 */	public void setScrolling(String scrolling) {		this.scrolling = scrolling;	}		public String getSrc() {		return src;	}		/**	 * 	 * This attribute specifies the location of the initial contents to be	 * contained in the	 * 	 * frame.	 * 	 * 	 * 	 * @param src	 */	public void setSrc(String src) {		this.src = src;	}		public String getWidth() {		return width;	}		/**	 * 	 * The width of the inline frame.	 * 	 * 	 * 	 * @param width	 */	public void setWidth(String width) {		this.width = width;	}		@Override	public String toString() {		return ElementParserHtml.getToStringOut(this);	}		public String getTag() {		return tag;	}}
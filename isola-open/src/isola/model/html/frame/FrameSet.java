package isola.model.html.frame;import isola.helpers.ElementParserHtml;import isola.model.html.core.Container;/** *  *  *  * @author Umut Gokbayrak *  *  */public class FrameSet extends Container {	private static final String tag = "frameset";	/**	 * 	 * This attribute specifies the layout of vertical frames. It is a	 * comma-separated	 * 	 * list of pixels, percentages, and relative lengths. The default value is	 * 100%,	 * 	 * meaning one column.	 */	private String cols;	/**	 * 	 * The onload event occurs when the user agent finishes loading a window or	 * all	 * 	 * frames within a FRAMESET. This attribute may be used with BODY and	 * FRAMESET	 * 	 * elements.	 */	private String onLoad;	/**	 * 	 * This attribute specifies the layout of horizontal frames. It is a	 * 	 * comma-separated list of pixels, percentages, and relative lengths. The	 * default	 * 	 * value is 100%, meaning one row.	 */	private String rows;		public FrameSet() {		super();	}		public FrameSet(String rows, String cols) {		setRows(rows);		setCols(cols);	}		public String getCols() {		return cols;	}		/**	 * 	 * This attribute specifies the layout of vertical frames. It is a	 * comma-separated	 * 	 * list of pixels, percentages, and relative lengths. The default value is	 * 100%,	 * 	 * meaning one column.	 * 	 * 	 * 	 * @param cols	 */	public void setCols(String cols) {		this.cols = cols;	}		public String getOnLoad() {		return onLoad;	}		/**	 * 	 * The onload event occurs when the user agent finishes loading a window or	 * all	 * 	 * frames within a FRAMESET. This attribute may be used with BODY and	 * FRAMESET	 * 	 * elements.	 * 	 * 	 * 	 * @param onLoad	 */	public void setOnLoad(String onLoad) {		this.onLoad = onLoad;	}		public String getRows() {		return rows;	}		/**	 * 	 * This attribute specifies the layout of horizontal frames. It is a	 * 	 * comma-separated list of pixels, percentages, and relative lengths. The	 * default	 * 	 * value is 100%, meaning one row.	 * 	 * 	 * 	 * @param rows	 */	public void setRows(String rows) {		this.rows = rows;	}		@Override	public String toString() {		return ElementParserHtml.getToStringOut(this);	}		public String getTag() {		return tag;	}}
package isola.model.html.basic;import isola.helpers.ElementParserHtml;import isola.model.html.core.Container;/** *  *  *  * @author Umut Gokbayrak *  *  */public class Img extends Container {	private static final String tag = "img";	/**	 * 	 * @deprecated This attribute specifies the position of an IMG, OBJECT, or	 *             APPLET with respect to its context.	 * 	 *             The following values for align concern the object's position	 *             with respect to surrounding text:	 * 	 *             <ul>	 * 	 *             <li>bottom: means that the bottom of the object should be	 *             vertically aligned with	 * 	 *             the current baseline. This is the default value.</li>	 * 	 *             <li>middle: means that the center of the object should be	 *             vertically aligned with	 * 	 *             the current baseline.</li>	 * 	 *             <li>top: means that the top of the object should be	 *             vertically aligned with the	 * 	 *             top of the current text line.</li>	 * 	 *             </ul>	 * 	 * 	 * 	 *             Two other values, left and right, cause the image to float to	 *             the current left or right margin.	 */	private String align;	/**	 * 	 * For user agents that cannot display images, forms, or applets, this	 * attribute specifies	 * 	 * alternate text. The language of the alternate text is specified by the	 * lang attribute.	 */	private String alt;	/**	 * 	 * This attributes specifies the width (in pixels only) of the frame around	 * a table.	 */	private String border;	/**	 * 	 * The height of the element.	 */	private String height;	/**	 * 	 * @deprecated This attribute specifies the amount of white space to be	 *             inserted to the left and	 * 	 *             right of an IMG, APPLET, or OBJECT. The default value is not	 *             specified, but is	 * 	 *             generally a small, non-zero length.	 */	private String hSpace;	/**	 * 	 * This attribute specifies a link to a long description of the image. This	 * description	 * 	 * should supplement the short description provided using the alt attribute.	 * When the	 * 	 * image has an associated image map, this attribute should provide	 * information about	 * 	 * the image map's contents. This is particularly important for server-side	 * image maps.	 * 	 * Since an IMG element may be within the content of an A element, the user	 * agent's	 * 	 * mechanism in the user interface for accessing the "longdesc" resource of	 * the former	 * 	 * must be different than the mechanism for accessing the href resource of	 * the latter.	 */	private String longDesc;	/**	 * 	 * This attribute assigns the control name.	 */	private String name;	/**	 * 	 * This attribute specifies the location of the image resource. Examples of	 * widely	 * 	 * recognized image formats include GIF, JPEG, and PNG.	 */	private String src;	/**	 * 	 * This attribute associates an image map with an element. The image map is	 * defined	 * 	 * by a MAP element. The value of usemap must match the value of the name	 * attribute	 * 	 * of the associated MAP element.	 */	private String useMap;	/**	 * 	 * @deprecated This attribute specifies the amount of white space to be	 *             inserted above and below	 * 	 *             an IMG, APPLET, or OBJECT. The default value is not	 *             specified, but is generally	 * 	 *             a small, non-zero length.	 */	private String vSpace;	/**	 * 	 * Image and object width override.	 */	private String width;		public Img() {		super();		setId(tag + (Math.random() * 1000));	}		public Img(String id) {		super(id);	}		public Img(String id, String src, String border) {		super(id);		setSrc(src);		setBorder(border);	}		public String getAlign() {		return align;	}		/**	 * 	 * @deprecated This attribute specifies the position of an IMG, OBJECT, or	 *             APPLET with respect to its context.	 * 	 *             The following values for align concern the object's position	 *             with respect to surrounding text:	 * 	 *             <ul>	 * 	 *             <li>bottom: means that the bottom of the object should be	 *             vertically aligned with	 * 	 *             the current baseline. This is the default value.</li>	 * 	 *             <li>middle: means that the center of the object should be	 *             vertically aligned with	 * 	 *             the current baseline.</li>	 * 	 *             <li>top: means that the top of the object should be	 *             vertically aligned with the	 * 	 *             top of the current text line.</li>	 * 	 *             </ul>	 * 	 * 	 * 	 *             Two other values, left and right, cause the image to float to	 *             the current left or right margin.	 * 	 * 	 * 	 * @param align	 */	public void setAlign(String align) {		this.align = align;	}		public String getAlt() {		return alt;	}		/**	 * 	 * For user agents that cannot display images, forms, or applets, this	 * attribute specifies	 * 	 * alternate text. The language of the alternate text is specified by the	 * lang attribute.	 * 	 * 	 * 	 * @param alt	 */	public void setAlt(String alt) {		this.alt = alt;	}		public String getBorder() {		return border;	}		/**	 * 	 * This attributes specifies the width (in pixels only) of the frame around	 * a table.	 * 	 * 	 * 	 * @param border	 */	public void setBorder(String border) {		this.border = border;	}		public String getHeight() {		return height;	}		/**	 * 	 * The height of the element.	 * 	 * 	 * 	 * @param height	 */	public void setHeight(String height) {		this.height = height;	}		public String getHSpace() {		return hSpace;	}		/**	 * 	 * @deprecated This attribute specifies the amount of white space to be	 *             inserted to the left and	 * 	 *             right of an IMG, APPLET, or OBJECT. The default value is not	 *             specified, but is	 * 	 *             generally a small, non-zero length.	 * 	 * 	 * 	 * @param space	 */	public void setHSpace(String space) {		hSpace = space;	}		public String getLongDesc() {		return longDesc;	}		/**	 * 	 * This attribute specifies a link to a long description of the image. This	 * description	 * 	 * should supplement the short description provided using the alt attribute.	 * When the	 * 	 * image has an associated image map, this attribute should provide	 * information about	 * 	 * the image map's contents. This is particularly important for server-side	 * image maps.	 * 	 * Since an IMG element may be within the content of an A element, the user	 * agent's	 * 	 * mechanism in the user interface for accessing the "longdesc" resource of	 * the former	 * 	 * must be different than the mechanism for accessing the href resource of	 * the latter.	 * 	 * 	 * 	 * @param longDesc	 */	public void setLongDesc(String longDesc) {		this.longDesc = longDesc;	}		public String getName() {		return name;	}		/**	 * 	 * This attribute assigns the control name.	 * 	 * 	 * 	 * @param name	 */	public void setName(String name) {		this.name = name;	}		public String getSrc() {		return src;	}		/**	 * 	 * This attribute specifies the location of the image resource. Examples of	 * widely	 * 	 * recognized image formats include GIF, JPEG, and PNG.	 * 	 * 	 * 	 * @param src	 */	public void setSrc(String src) {		this.src = src;	}		public String getUseMap() {		return useMap;	}		/**	 * 	 * This attribute associates an image map with an element. The image map is	 * defined	 * 	 * by a MAP element. The value of usemap must match the value of the name	 * attribute	 * 	 * of the associated MAP element.	 * 	 * 	 * 	 * @param useMap	 */	public void setUseMap(String useMap) {		this.useMap = useMap;	}		public String getVSpace() {		return vSpace;	}		/**	 * 	 * @deprecated This attribute specifies the amount of white space to be	 *             inserted above and below	 * 	 *             an IMG, APPLET, or OBJECT. The default value is not	 *             specified, but is generally	 * 	 *             a small, non-zero length.	 * 	 * 	 * 	 * @param space	 */	public void setVSpace(String space) {		vSpace = space;	}		public String getWidth() {		return width;	}		/**	 * 	 * Image and object width override.	 * 	 * 	 * 	 * @param width	 */	public void setWidth(String width) {		this.width = width;	}		@Override	public String toString() {		return ElementParserHtml.getToStringOut(this);	}		public String getTag() {		return tag;	}}
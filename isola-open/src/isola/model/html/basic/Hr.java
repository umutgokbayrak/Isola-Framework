package isola.model.html.basic;import isola.helpers.ElementParserHtml;import isola.model.html.core.Element;/** *  *  *  * @author Umut Gokbayrak *  *  */public class Hr extends Element {	private static final String tag = "hr";	/**	 * 	 * @deprecated This attribute specifies the position of an IMG, OBJECT, or	 *             APPLET with respect to its context.	 * 	 *             The following values for align concern the object's position	 *             with respect to surrounding text:	 * 	 *             <ul>	 * 	 *             <li>bottom: means that the bottom of the object should be	 *             vertically aligned with	 * 	 *             the current baseline. This is the default value.</li>	 * 	 *             <li>middle: means that the center of the object should be	 *             vertically aligned with	 * 	 *             the current baseline.</li>	 * 	 *             <li>top: means that the top of the object should be	 *             vertically aligned with the	 * 	 *             top of the current text line.</li>	 * 	 *             </ul>	 * 	 * 	 * 	 *             Two other values, left and right, cause the image to float to	 *             the current left or right margin.	 */	private String align;	/**	 * 	 * @deprecated When set, this boolean attribute requests that the user agent	 *             render the rule in a	 * 	 *             solid color rather than as the traditional two-color	 *             "groove".	 */	private String noShade;	/**	 * 	 * @deprecated This attribute specifies the height of the rule. The default	 *             value for this attribute depends	 * 	 *             on the user agent.	 */	private String size;	/**	 * 	 * @deprecated This attribute specifies the width of the rule. The default	 *             width is 100%,	 * 	 *             i.e., the rule extends across the entire canvas.	 */	private String width;		public Hr() {		super();		setId(tag + (Math.random() * 1000));	}		/**	 * 	 * Constructor with id assigning.	 * 	 * @param id	 */	public Hr(String id) {		super(id);	}		/**	 * 	 * Constructor with and size attributes	 * 	 * 	 * 	 * @param id	 * 	 * @param size	 */	public Hr(String id, String size) {		super(id);		setSize(size);	}		public String getAlign() {		return align;	}		/**	 * 	 * @deprecated This attribute specifies the position of an IMG, OBJECT, or	 *             APPLET with respect to its context.	 * 	 *             The following values for align concern the object's position	 *             with respect to surrounding text:	 * 	 *             <ul>	 * 	 *             <li>bottom: means that the bottom of the object should be	 *             vertically aligned with	 * 	 *             the current baseline. This is the default value.</li>	 * 	 *             <li>middle: means that the center of the object should be	 *             vertically aligned with	 * 	 *             the current baseline.</li>	 * 	 *             <li>top: means that the top of the object should be	 *             vertically aligned with the	 * 	 *             top of the current text line.</li>	 * 	 *             </ul>	 * 	 * 	 * 	 *             Two other values, left and right, cause the image to float to	 *             the current left or right margin.	 * 	 * 	 * 	 * @param align	 */	public void setAlign(String align) {		this.align = align;	}		public String getNoShade() {		return noShade;	}		/**	 * 	 * @deprecated When set, this boolean attribute requests that the user agent	 *             render the rule in a	 * 	 *             solid color rather than as the traditional two-color	 *             "groove".	 * 	 * 	 * 	 * @param noShade	 */	public void setNoShade(String noShade) {		this.noShade = noShade;	}		public String getSize() {		return size;	}		/**	 * 	 * @deprecated This attribute specifies the height of the rule. The default	 *             value for this attribute depends	 * 	 *             on the user agent.	 * 	 * 	 * 	 * @param size	 */	public void setSize(String size) {		this.size = size;	}		public String getWidth() {		return width;	}		/**	 * 	 * @deprecated This attribute specifies the width of the rule. The default	 *             width is 100%,	 * 	 *             i.e., the rule extends across the entire canvas.	 * 	 * 	 * 	 * @param width	 */	public void setWidth(String width) {		this.width = width;	}		@Override	public String toString() {		return ElementParserHtml.getToStringOut(this);	}		public String getTag() {		return tag;	}}
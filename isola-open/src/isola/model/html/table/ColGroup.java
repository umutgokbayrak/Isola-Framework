package isola.model.html.table;import isola.helpers.ElementParserHtml;import isola.model.html.core.Container;/** *  *  *  * @author Umut Gokbayrak *  *  */public class ColGroup extends Container {	private static final String tag = "colgroup";	/**	 * 	 * @deprecated This attribute specifies the position of an IMG, OBJECT, or	 *             APPLET with respect to its context.	 * 	 *             The following values for align concern the object's position	 *             with respect to surrounding text:	 * 	 *             <ul>	 * 	 *             <li>bottom: means that the bottom of the object should be	 *             vertically aligned with	 * 	 *             the current baseline. This is the default value.</li>	 * 	 *             <li>middle: means that the center of the object should be	 *             vertically aligned with	 * 	 *             the current baseline.</li>	 * 	 *             <li>top: means that the top of the object should be	 *             vertically aligned with the	 * 	 *             top of the current text line.</li>	 * 	 *             </ul>	 * 	 * 	 * 	 *             Two other values, left and right, cause the image to float to	 *             the current left or right margin.	 */	private String align;	/**	 * 	 * This attribute, which must be an integer > 0, specifies the number of	 * columns in a column	 * 	 * group. Values mean the following:	 * 	 * <ul>	 * 	 * <li>In the absence of a span attribute, each COLGROUP defines a column	 * group containing	 * 	 * one column.</li>	 * 	 * <li>If the span attribute is set to N > 0, the current COLGROUP element	 * defines a column	 * 	 * group containing N columns.</li>	 * 	 * </ul>	 * 	 * 	 * 	 * User agents must ignore this attribute if the COLGROUP element contains	 * one or more COL elements.	 */	private String span;	/**	 * 	 * This attribute specifies the vertical position of data within a cell.	 * Possible values:	 * 	 * <ul>	 * 	 * <li>top: Cell data is flush with the top of the cell.</li>	 * 	 * <li>middle: Cell data is centered vertically within the cell. This is the	 * default value.</li>	 * 	 * <li>bottom: Cell data is flush with the bottom of the cell.</li>	 * 	 * <li>baseline: All cells in the same row as a cell whose valign attribute	 * has this	 * 	 * value should have their textual data positioned so that the first text	 * line occurs	 * 	 * on a baseline common to all cells in the row. This constraint does not	 * apply to	 * 	 * subsequent text lines in these cells.</li>	 * 	 * </ul>	 */	private String valign;	/**	 * 	 * This attribute specifies a default width for each column in the current	 * column group.	 * 	 * In addition to the standard pixel, percentage, and relative values, this	 * attribute	 * 	 * allows the special form "0*" (zero asterisk) which means that the width	 * of the each	 * 	 * column in the group should be the minimum width necessary to hold the	 * column's contents.	 * 	 * This implies that a column's entire contents must be known before its	 * width may be	 * 	 * correctly computed. Authors should be aware that specifying "0*" will	 * prevent visual	 * 	 * user agents from rendering a table incrementally.	 */	private String width;		public ColGroup() {		super();		setId(tag + (Math.random() * 1000));	}		public ColGroup(String id) {		super(id);	}		public String getAlign() {		return align;	}		/**	 * 	 * @deprecated This attribute specifies the position of an IMG, OBJECT, or	 *             APPLET with respect to its context.	 * 	 *             The following values for align concern the object's position	 *             with respect to surrounding text:	 * 	 *             <ul>	 * 	 *             <li>bottom: means that the bottom of the object should be	 *             vertically aligned with	 * 	 *             the current baseline. This is the default value.</li>	 * 	 *             <li>middle: means that the center of the object should be	 *             vertically aligned with	 * 	 *             the current baseline.</li>	 * 	 *             <li>top: means that the top of the object should be	 *             vertically aligned with the	 * 	 *             top of the current text line.</li>	 * 	 *             </ul>	 * 	 * 	 * 	 *             Two other values, left and right, cause the image to float to	 *             the current left or right margin.	 * 	 * 	 * 	 * @param align	 */	public void setAlign(String align) {		this.align = align;	}		public String getSpan() {		return span;	}		/**	 * 	 * This attribute, which must be an integer > 0, specifies the number of	 * columns in a column	 * 	 * group. Values mean the following:	 * 	 * <ul>	 * 	 * <li>In the absence of a span attribute, each COLGROUP defines a column	 * group containing	 * 	 * one column.</li>	 * 	 * <li>If the span attribute is set to N > 0, the current COLGROUP element	 * defines a column	 * 	 * group containing N columns.</li>	 * 	 * </ul>	 * 	 * 	 * 	 * User agents must ignore this attribute if the COLGROUP element contains	 * one or more COL elements.	 * 	 * 	 * 	 * @param span	 */	public void setSpan(String span) {		this.span = span;	}		public String getValign() {		return valign;	}		/**	 * 	 * This attribute specifies the vertical position of data within a cell.	 * Possible values:	 * 	 * <ul>	 * 	 * <li>top: Cell data is flush with the top of the cell.</li>	 * 	 * <li>middle: Cell data is centered vertically within the cell. This is the	 * default value.</li>	 * 	 * <li>bottom: Cell data is flush with the bottom of the cell.</li>	 * 	 * <li>baseline: All cells in the same row as a cell whose valign attribute	 * has this	 * 	 * value should have their textual data positioned so that the first text	 * line occurs	 * 	 * on a baseline common to all cells in the row. This constraint does not	 * apply to	 * 	 * subsequent text lines in these cells.</li>	 * 	 * </ul>	 * 	 * 	 * 	 * @param align	 */	public void setValign(String align) {		valign = align;	}		public String getWidth() {		return width;	}		/**	 * 	 * This attribute specifies a default width for each column in the current	 * column group.	 * 	 * In addition to the standard pixel, percentage, and relative values, this	 * attribute	 * 	 * allows the special form "0*" (zero asterisk) which means that the width	 * of the each	 * 	 * column in the group should be the minimum width necessary to hold the	 * column's contents.	 * 	 * This implies that a column's entire contents must be known before its	 * width may be	 * 	 * correctly computed. Authors should be aware that specifying "0*" will	 * prevent visual	 * 	 * user agents from rendering a table incrementally.	 * 	 * 	 * 	 * @param width	 */	public void setWidth(String width) {		this.width = width;	}		@Override	public String toString() {		return ElementParserHtml.getToStringOut(this);	}		public String getTag() {		return tag;	}}
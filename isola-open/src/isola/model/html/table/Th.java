package isola.model.html.table;import isola.helpers.ElementParserHtml;import isola.model.html.core.Container;/** *  *  *  * @author Umut Gokbayrak *  *  */public class Th extends Container {	private static final String tag = "th";	/**	 * 	 * This attribute should be used to provide an abbreviated form of	 * 	 * the cell's content, and may be rendered by user agents when appropriate	 * 	 * in place of the cell's content. Abbreviated names should be short	 * 	 * since user agents may render them repeatedly. For instance, speech	 * synthesizers	 * 	 * may render the abbreviated headers relating to a particular cell before	 * 	 * rendering that cell's content.	 */	private String abbr;	/**	 * 	 * @deprecated This attribute specifies the position of an IMG, OBJECT, or	 *             APPLET with respect to its context.	 * 	 *             The following values for align concern the object's position	 *             with respect to surrounding text:	 * 	 *             <ul>	 * 	 *             <li>bottom: means that the bottom of the object should be	 *             vertically aligned with	 * 	 *             the current baseline. This is the default value.</li>	 * 	 *             <li>middle: means that the center of the object should be	 *             vertically aligned with	 * 	 *             the current baseline.</li>	 * 	 *             <li>top: means that the top of the object should be	 *             vertically aligned with the	 * 	 *             top of the current text line.</li>	 * 	 *             </ul>	 * 	 * 	 * 	 *             Two other values, left and right, cause the image to float to	 *             the current left or right margin.	 */	private String align;	/**	 * 	 * This attribute may be used to place a cell into conceptual categories	 * that can	 * 	 * be considered to form axes in an n-dimensional space. User agents may	 * give users	 * 	 * access to these categories (e.g., the user may query the user agent for	 * all cells	 * 	 * that belong to certain categories, the user agent may present a table in	 * the form	 * 	 * of a table of contents, etc.). Please consult the section on categorizing	 * cells	 * 	 * for more information. The value of this attribute is a comma-separated	 * list of	 * 	 * category names.	 */	private String axis;	/**	 * 	 * @deprecated. This attribute sets the background color for the document	 *              body or table cells.	 * 	 *              This attribute sets the background color of the canvas for	 *              the document body (the BODY element) or for	 * 	 *              tables (the TABLE, TR, TH, and TD elements). Additional	 *              attributes for specifying text color	 * 	 *              can be used with the BODY element.	 */	private String bgColor;	/**	 * 	 * This attribute specifies the number of columns spanned by the current	 * cell. The default	 * 	 * value of this attribute is one ("1"). The value zero ("0") means that the	 * cell spans all	 * 	 * columns from the current column to the last column of the column group	 * (COLGROUP) in which	 * 	 * the cell is defined.	 */	private String colSpan;	/**	 * 	 * This attribute specifies the list of header cells that provide header	 * information for the	 * 	 * current data cell. The value of this attribute is a space-separated list	 * of cell names; those	 * 	 * cells must be named by setting their id attribute. Authors generally use	 * the headers attribute	 * 	 * to help non-visual user agents render header information about data cells	 * (e.g., header	 * 	 * information is spoken prior to the cell data), but the attribute may also	 * be used in	 * 	 * conjunction with style sheets. See also the scope attribute.	 * 	 * 	 * 	 * @see Td#scope	 */	private String headers;	/**	 * 	 * The height of the element.	 */	private String height;	/**	 * 	 * Deprecated. When present, this boolean attribute tells visual user agents	 * to disable automatic	 * 	 * text wrapping for this cell. Style sheets should be used instead of this	 * attribute to achieve	 * 	 * wrapping effects. Note. if used carelessly, this attribute may result in	 * excessively wide	 * 	 * cells.	 */	private String noWrap;	/**	 * 	 * This attribute specifies the number of rows spanned by the current cell.	 * The default value	 * 	 * of this attribute is one ("1"). The value zero ("0") means that the cell	 * spans all rows	 * 	 * from the current row to the last row of the table section (THEAD, TBODY,	 * or TFOOT) in which	 * 	 * the cell is defined.	 */	private String rowSpan;	/**	 * 	 * This attribute specifies the vertical position of data within a cell.	 * Possible values:	 * 	 * <ul>	 * 	 * <li>top: Cell data is flush with the top of the cell.</li>	 * 	 * <li>middle: Cell data is centered vertically within the cell. This is the	 * default value.</li>	 * 	 * <li>bottom: Cell data is flush with the bottom of the cell.</li>	 * 	 * <li>baseline: All cells in the same row as a cell whose valign attribute	 * has this	 * 	 * value should have their textual data positioned so that the first text	 * line occurs	 * 	 * on a baseline common to all cells in the row. This constraint does not	 * apply to	 * 	 * subsequent text lines in these cells.</li>	 * 	 * </ul>	 */	private String valign;	/**	 * 	 * @deprecated This attribute supplies user agents with a recommended cell	 *             width.	 */	private String width;		public Th() {		super();		setId(tag + (Math.random() * 1000));	}		public Th(String id) {		super(id);	}		public String getAbbr() {		return abbr;	}		/**	 * 	 * This attribute should be used to provide an abbreviated form of	 * 	 * the cell's content, and may be rendered by user agents when appropriate	 * 	 * in place of the cell's content. Abbreviated names should be short	 * 	 * since user agents may render them repeatedly. For instance, speech	 * synthesizers	 * 	 * may render the abbreviated headers relating to a particular cell before	 * 	 * rendering that cell's content.	 * 	 * 	 * 	 * @param abbr	 */	public void setAbbr(String abbr) {		this.abbr = abbr;	}		public String getAlign() {		return align;	}		/**	 * 	 * @deprecated This attribute specifies the position of an IMG, OBJECT, or	 *             APPLET with respect to its context.	 * 	 *             The following values for align concern the object's position	 *             with respect to surrounding text:	 * 	 *             <ul>	 * 	 *             <li>bottom: means that the bottom of the object should be	 *             vertically aligned with	 * 	 *             the current baseline. This is the default value.</li>	 * 	 *             <li>middle: means that the center of the object should be	 *             vertically aligned with	 * 	 *             the current baseline.</li>	 * 	 *             <li>top: means that the top of the object should be	 *             vertically aligned with the	 * 	 *             top of the current text line.</li>	 * 	 *             </ul>	 * 	 * 	 * 	 *             Two other values, left and right, cause the image to float to	 *             the current left or right margin.	 * 	 * 	 * 	 * @param align	 */	public void setAlign(String align) {		this.align = align;	}		public String getAxis() {		return axis;	}		/**	 * 	 * This attribute may be used to place a cell into conceptual categories	 * that can	 * 	 * be considered to form axes in an n-dimensional space. User agents may	 * give users	 * 	 * access to these categories (e.g., the user may query the user agent for	 * all cells	 * 	 * that belong to certain categories, the user agent may present a table in	 * the form	 * 	 * of a table of contents, etc.). Please consult the section on categorizing	 * cells	 * 	 * for more information. The value of this attribute is a comma-separated	 * list of	 * 	 * category names.	 * 	 * 	 * 	 * @param axis	 */	public void setAxis(String axis) {		this.axis = axis;	}		public String getBgColor() {		return bgColor;	}		/**	 * 	 * @deprecated. This attribute sets the background color for the document	 *              body or table cells.	 * 	 *              This attribute sets the background color of the canvas for	 *              the document body (the BODY element) or for	 * 	 *              tables (the TABLE, TR, TH, and TD elements). Additional	 *              attributes for specifying text color	 * 	 *              can be used with the BODY element.	 * 	 * 	 * 	 * @param bgColor	 */	public void setBgColor(String bgColor) {		this.bgColor = bgColor;	}		public String getColSpan() {		return colSpan;	}		/**	 * 	 * This attribute specifies the number of columns spanned by the current	 * cell. The default	 * 	 * value of this attribute is one ("1"). The value zero ("0") means that the	 * cell spans all	 * 	 * columns from the current column to the last column of the column group	 * (COLGROUP) in which	 * 	 * the cell is defined.	 * 	 * 	 * 	 * @param colSpan	 */	public void setColSpan(String colSpan) {		this.colSpan = colSpan;	}		public String getHeaders() {		return headers;	}		/**	 * 	 * This attribute specifies the list of header cells that provide header	 * information for the	 * 	 * current data cell. The value of this attribute is a space-separated list	 * of cell names; those	 * 	 * cells must be named by setting their id attribute. Authors generally use	 * the headers attribute	 * 	 * to help non-visual user agents render header information about data cells	 * (e.g., header	 * 	 * information is spoken prior to the cell data), but the attribute may also	 * be used in	 * 	 * conjunction with style sheets. See also the scope attribute.	 * 	 * 	 * 	 * @see Th#scope	 * 	 * @param headers	 */	public void setHeaders(String headers) {		this.headers = headers;	}		public String getHeight() {		return height;	}		/**	 * 	 * The height of the element.	 * 	 * 	 * 	 * @param height	 */	public void setHeight(String height) {		this.height = height;	}		public String getNoWrap() {		return noWrap;	}		/**	 * 	 * Deprecated. When present, this boolean attribute tells visual user agents	 * to disable automatic	 * 	 * text wrapping for this cell. Style sheets should be used instead of this	 * attribute to achieve	 * 	 * wrapping effects. Note. if used carelessly, this attribute may result in	 * excessively wide	 * 	 * cells.	 * 	 * 	 * 	 * @param noWrap	 */	public void setNoWrap(String noWrap) {		this.noWrap = noWrap;	}		public String getRowSpan() {		return rowSpan;	}		/**	 * 	 * This attribute specifies the number of rows spanned by the current cell.	 * The default value	 * 	 * of this attribute is one ("1"). The value zero ("0") means that the cell	 * spans all rows	 * 	 * from the current row to the last row of the table section (THEAD, TBODY,	 * or TFOOT) in which	 * 	 * the cell is defined.	 * 	 * 	 * 	 * @param rowSpan	 */	public void setRowSpan(String rowSpan) {		this.rowSpan = rowSpan;	}		public String getValign() {		return valign;	}		/**	 * 	 * This attribute specifies the vertical position of data within a cell.	 * Possible values:	 * 	 * <ul>	 * 	 * <li>top: Cell data is flush with the top of the cell.</li>	 * 	 * <li>middle: Cell data is centered vertically within the cell. This is the	 * default value.</li>	 * 	 * <li>bottom: Cell data is flush with the bottom of the cell.</li>	 * 	 * <li>baseline: All cells in the same row as a cell whose valign attribute	 * has this	 * 	 * value should have their textual data positioned so that the first text	 * line occurs	 * 	 * on a baseline common to all cells in the row. This constraint does not	 * apply to	 * 	 * subsequent text lines in these cells.</li>	 * 	 * </ul>	 * 	 * 	 * 	 * @param valign	 */	public void setValign(String valign) {		this.valign = valign;	}		public String getWidth() {		return width;	}		/**	 * 	 * @deprecated This attribute supplies user agents with a recommended cell	 *             width.	 * 	 * 	 * 	 * @param width	 */	public void setWidth(String width) {		this.width = width;	}		@Override	public String toString() {		return ElementParserHtml.getToStringOut(this);	}		public String getTag() {		return tag;	}}
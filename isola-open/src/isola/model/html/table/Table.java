package isola.model.html.table;import isola.helpers.ElementParserHtml;import isola.model.html.core.Container;/** *  *  *  * @author Umut Gokbayrak *  *  */public class Table extends Container {	private static final String tag = "table";	/**	 * 	 * @deprecated This attribute specifies the position of an IMG, OBJECT, or	 *             APPLET with respect to its context.	 * 	 *             The following values for align concern the object's position	 *             with respect to surrounding text:	 * 	 *             <ul>	 * 	 *             <li>bottom: means that the bottom of the object should be	 *             vertically aligned with	 * 	 *             the current baseline. This is the default value.</li>	 * 	 *             <li>middle: means that the center of the object should be	 *             vertically aligned with	 * 	 *             the current baseline.</li>	 * 	 *             <li>top: means that the top of the object should be	 *             vertically aligned with the	 * 	 *             top of the current text line.</li>	 * 	 *             </ul>	 * 	 * 	 * 	 *             Two other values, left and right, cause the image to float to	 *             the current left or right margin.	 */	private String align;	/**	 * 	 * @deprecated. This attribute sets the background color for the document	 *              body or table cells.	 * 	 *              This attribute sets the background color of the canvas for	 *              the document body (the BODY element) or for	 * 	 *              tables (the TABLE, TR, TH, and TD elements). Additional	 *              attributes for specifying text color	 * 	 *              can be used with the BODY element.	 */	private String bgColor;	/**	 * 	 * This attributes specifies the width (in pixels only) of the frame around	 * a table.	 */	private String border;	/**	 * 	 * This attribute specifies the amount of space between the border of the	 * cell and its	 * 	 * contents. If the value of this attribute is a pixel length, all four	 * margins should	 * 	 * be this distance from the contents. If the value of the attribute is a	 * percentage	 * 	 * length, the top and bottom margins should be equally separated from the	 * content based	 * 	 * on a percentage of the available vertical space, and the left and right	 * margins should	 * 	 * be equally separated from the content based on a percentage of the	 * available horizontal	 * 	 * space.	 */	private String cellpadding;	/**	 * 	 * This attribute specifies how much space the user agent should leave	 * between the left side	 * 	 * of the table and the left-hand side of the leftmost column, the top of	 * the table and the top	 * 	 * side of the topmost row, and so on for the right and bottom of the table.	 * The attribute also	 * 	 * specifies the amount of space to leave between cells.	 */	private String cellspacing;	/**	 * 	 * This attribute specifies which sides of the frame surrounding a table	 * will be visible. Possible values:	 * 	 * <ul>	 * 	 * <li>void: No sides. This is the default value.</li>	 * 	 * <li>above: The top side only.</li>	 * 	 * <li>below: The bottom side only.</li>	 * 	 * <li>hsides: The top and bottom sides only.</li>	 * 	 * <li>vsides: The right and left sides only.</li>	 * 	 * <li>lhs: The left-hand side only.</li>	 * 	 * <li>rhs: The right-hand side only.</li>	 * 	 * <li>box: All four sides.</li>	 * 	 * <li>border: All four sides.</li>	 * 	 * </ul>	 */	private String frame;	/**	 * 	 * This attribute specifies which rules will appear between cells within a	 * table. The rendering of	 * 	 * rules is user agent dependent. Possible values:	 * 	 * 	 * 	 * <ul>	 * 	 * <li>none: No rules. This is the default value.</li>	 * 	 * <li>groups: Rules will appear between row groups (see THEAD, TFOOT, and	 * TBODY) and column groups	 * 	 * (see COLGROUP and COL) only.</li>	 * 	 * <li>rows: Rules will appear between rows only.</li>	 * 	 * <li>cols: Rules will appear between columns only.</li>	 * 	 * <li>all: Rules will appear between all rows and columns.</li>	 * 	 * </ul>	 */	private String rules;	/**	 * 	 * This attribute provides a summary of the table's purpose and structure	 * for user	 * 	 * agents rendering to non-visual media such as speech and Braille.	 */	private String summary;	/**	 * 	 * This attribute specifies the desired width of the entire table and is	 * intended for	 * 	 * visual user agents. When the value is a percentage value, the value is	 * relative to	 * 	 * the user agent's available horizontal space. In the absence of any width	 * 	 * specification, table width is determined by the user agent.	 */	private String width;	/**	 * 	 * This attribute specifies the desired height of the entire table and is	 * intended for	 * 	 * visual user agents. When the value is a percentage value, the value is	 * relative to	 * 	 * the user agent's available horizontal space. In the absence of any height	 * 	 * specification, table width is determined by the user agent.	 */	private String height;		public Table() {		super();		setId(tag + (Math.random() * 1000));	}		public Table(String id) {		super(id);	}		public Table(String id, String width, String cellPadding, String cellSpacing, String border) {		setWidth(width);		setCellpadding(cellPadding);		setCellspacing(cellSpacing);		setBorder(border);		setId(id);	}		public String getAlign() {		return align;	}		/**	 * 	 * @deprecated This attribute specifies the position of an IMG, OBJECT, or	 *             APPLET with respect to its context.	 * 	 *             The following values for align concern the object's position	 *             with respect to surrounding text:	 * 	 *             <ul>	 * 	 *             <li>bottom: means that the bottom of the object should be	 *             vertically aligned with	 * 	 *             the current baseline. This is the default value.</li>	 * 	 *             <li>middle: means that the center of the object should be	 *             vertically aligned with	 * 	 *             the current baseline.</li>	 * 	 *             <li>top: means that the top of the object should be	 *             vertically aligned with the	 * 	 *             top of the current text line.</li>	 * 	 *             </ul>	 * 	 * 	 * 	 *             Two other values, left and right, cause the image to float to	 *             the current left or right margin.	 * 	 * 	 * 	 * @param align	 */	public void setAlign(String align) {		this.align = align;	}		public String getBgColor() {		return bgColor;	}		/**	 * 	 * @deprecated. This attribute sets the background color for the document	 *              body or table cells.	 * 	 *              This attribute sets the background color of the canvas for	 *              the document body (the BODY element) or for	 * 	 *              tables (the TABLE, TR, TH, and TD elements). Additional	 *              attributes for specifying text color	 * 	 *              can be used with the BODY element.	 * 	 * 	 * 	 * @param bgColor	 */	public void setBgColor(String bgColor) {		this.bgColor = bgColor;	}		public String getBorder() {		return border;	}		/**	 * 	 * This attributes specifies the width (in pixels only) of the frame around	 * a table.	 * 	 * 	 * 	 * @param border	 */	public void setBorder(String border) {		this.border = border;	}		public String getCellpadding() {		return cellpadding;	}		/**	 * 	 * This attribute specifies the amount of space between the border of the	 * cell and its	 * 	 * contents. If the value of this attribute is a pixel length, all four	 * margins should	 * 	 * be this distance from the contents. If the value of the attribute is a	 * percentage	 * 	 * length, the top and bottom margins should be equally separated from the	 * content based	 * 	 * on a percentage of the available vertical space, and the left and right	 * margins should	 * 	 * be equally separated from the content based on a percentage of the	 * available horizontal	 * 	 * space.	 * 	 * 	 * 	 * @param cellpadding	 */	public void setCellpadding(String cellpadding) {		this.cellpadding = cellpadding;	}		/**	 * 	 * This attribute specifies how much space the user agent should leave	 * between the left side	 * 	 * of the table and the left-hand side of the leftmost column, the top of	 * the table and the top	 * 	 * side of the topmost row, and so on for the right and bottom of the table.	 * The attribute also	 * 	 * specifies the amount of space to leave between cells.	 * 	 * 	 * 	 * @return	 */	public String getCellspacing() {		return cellspacing;	}		public void setCellspacing(String cellspacing) {		this.cellspacing = cellspacing;	}		public String getFrame() {		return frame;	}		/**	 * 	 * This attribute specifies which sides of the frame surrounding a table	 * will be visible. Possible values:	 * 	 * <ul>	 * 	 * <li>void: No sides. This is the default value.</li>	 * 	 * <li>above: The top side only.</li>	 * 	 * <li>below: The bottom side only.</li>	 * 	 * <li>hsides: The top and bottom sides only.</li>	 * 	 * <li>vsides: The right and left sides only.</li>	 * 	 * <li>lhs: The left-hand side only.</li>	 * 	 * <li>rhs: The right-hand side only.</li>	 * 	 * <li>box: All four sides.</li>	 * 	 * <li>border: All four sides.</li>	 * 	 * </ul>	 * 	 * 	 * 	 * @param frame	 */	public void setFrame(String frame) {		this.frame = frame;	}		public String getRules() {		return rules;	}		/**	 * 	 * This attribute specifies which rules will appear between cells within a	 * table. The rendering of	 * 	 * rules is user agent dependent. Possible values:	 * 	 * 	 * 	 * <ul>	 * 	 * <li>none: No rules. This is the default value.</li>	 * 	 * <li>groups: Rules will appear between row groups (see THEAD, TFOOT, and	 * TBODY) and column groups	 * 	 * (see COLGROUP and COL) only.</li>	 * 	 * <li>rows: Rules will appear between rows only.</li>	 * 	 * <li>cols: Rules will appear between columns only.</li>	 * 	 * <li>all: Rules will appear between all rows and columns.</li>	 * 	 * </ul>	 * 	 * 	 * 	 * @param rules	 */	public void setRules(String rules) {		this.rules = rules;	}		public String getSummary() {		return summary;	}		/**	 * 	 * This attribute provides a summary of the table's purpose and structure	 * for user	 * 	 * agents rendering to non-visual media such as speech and Braille.	 * 	 * 	 * 	 * @param summary	 */	public void setSummary(String summary) {		this.summary = summary;	}		public String getWidth() {		return width;	}		/**	 * 	 * This attribute specifies the desired width of the entire table and is	 * intended for	 * 	 * visual user agents. When the value is a percentage value, the value is	 * relative to	 * 	 * the user agent's available horizontal space. In the absence of any width	 * 	 * specification, table width is determined by the user agent.	 * 	 * 	 * 	 * @param width	 */	public void setWidth(String width) {		this.width = width;	}		@Override	public String toString() {		return ElementParserHtml.getToStringOut(this);	}		public String getTag() {		return tag;	}		public String getHeight() {		return height;	}		public void setHeight(String height) {		this.height = height;	}}
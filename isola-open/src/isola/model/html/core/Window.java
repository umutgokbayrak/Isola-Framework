package isola.model.html.core;import isola.constants.JsEventNames;import isola.helpers.JsGenerator;/** *  *  *  * @author Umut Gokbayrak *  *  */public class Window {	private StringBuilder jsOut = new StringBuilder();		public StringBuilder getJsOut() {		return jsOut;	}		public void setJsOut(StringBuilder jsOut) {		this.jsOut = jsOut;	}		/**	 * 	 * Resets the Javascript output buffer.	 */	public void reset() {		jsOut = new StringBuilder();	}		/**	 * 	 * Sets the X, Y absolute position for the selected element. First checks if	 * the HTML	 * 	 * element has a absolute position or not. If not absolute than makes it an	 * absolute	 * 	 * positioned element and than relocates the element to the given position	 * 	 * 	 * 	 * @param posX	 * 	 * @param posY	 * 	 * @throws Exception	 */	public void setPosition(int posX, int posY) throws Exception {		jsOut.append(JsGenerator.setPosition("$window", posX, posY));	}		/**	 * 	 * Attaches an event to an element overriding the previous action registered	 * to the event.	 * 	 * 	 * 	 * @see JsEventNames	 * 	 * @param eventName	 *            Event name like onclick, onresize etc...	 * 	 * @param jsCode	 *            Pure Javascript code to run when this event occurs	 * 	 * @param params	 *            Any number(0 or more) of parameters this JS method will accept	 * 	 * @throws Exception	 */	public void attachEvent(String eventName, String jsCode, String[] params) throws Exception {		jsOut.append(JsGenerator.attachEvent("$window", eventName, jsCode, params));	}		/**	 * 	 * Attaches an event to an element overriding the previous action registered	 * to the event.	 * 	 * 	 * 	 * @see JsEventNames	 * 	 * @param eventName	 *            Event name like onclick, onresize etc...	 * 	 * @param jsFunction	 *            The name of the javascript function to call when this event	 *            occurs. No paranthesis no parameters. Just the name.	 * 	 * @throws Exception	 */	public void attachEvent(String eventName, String jsFunction) throws Exception {		jsOut.append(JsGenerator.attachEvent("$window", eventName, jsFunction));	}		/**	 * 	 * Attaches an event to an element overriding the previous action registered	 * to the event.	 * 	 * 	 * 	 * @see JsEventNames	 * 	 * @param eventName	 *            Event name like onclick, onresize etc...	 * 	 * @param jsCode	 *            Pure Javascript code to run when this event occurs	 * 	 * @param params	 *            Any number(0 or more) of parameters this JS method will accept	 * 	 * @throws Exception	 */	public void appendEvent(String eventName, String jsCode, String params) throws Exception {		jsOut.append(JsGenerator.appendEvent("$window", eventName, jsCode, params));	}		/**	 * 	 * Attaches an event to an element overriding the previous action registered	 * to the event.	 * 	 * 	 * 	 * @see JsEventNames	 * 	 * @param eventName	 *            Event name like onclick, onresize etc...	 * 	 * @param jsFunction	 *            The name of the javascript function to call when this event	 *            occurs. No paranthesis no parameters. Just the name.	 * 	 * @throws Exception	 */	public void appendEvent(String eventName, String jsFunction) throws Exception {		jsOut.append(JsGenerator.appendEvent("$window", eventName, jsFunction));	}		/**	 * 	 * Detaches Event from the element.	 * 	 * 	 * 	 * @param elementId	 * 	 * @param eventName	 * 	 * @throws Exception	 */	public void detachEvent(String eventName) throws Exception {		jsOut.append(JsGenerator.detachEvent("$window", eventName));	}		/**	 * 	 * Resizes element to the given Width and Height values	 * 	 * 	 * 	 * @param elementId	 * 	 * @param resizeToWidth	 * 	 * @param resizeToHeight	 * 	 * @throws Exception	 */	public void resizeTo(int resizeToWidth, int resizeToHeight) throws Exception {		jsOut.append(JsGenerator.resizeTo("$window", resizeToWidth, resizeToHeight));	}		/**	 * 	 * Scrolls the element to the given X and Y coordinates. To disable	 * scrolling at	 * 	 * an axis give the value 0.	 * 	 * 	 * 	 * @param scrollToX	 * 	 * @param scrollToY	 * 	 * @throws Exception	 */	public void scrollTo(int scrollToX, int scrollToY) throws Exception {		jsOut.append(JsGenerator.scrollTo("$window", scrollToX, scrollToY));	}		/**	 * 	 * Run a javascript function after the specified delay	 * 	 * 	 * 	 * @param jsFunction	 * 	 * @param delay	 * 	 * @param args	 * 	 * @return	 * 	 * @throws Exception	 */	public void setTimeout(String jsFunction, int delay, String[] args) throws Exception {		jsOut.append(JsGenerator.setTimeout(null, jsFunction, delay, args));	}		/**	 * 	 * Closes the active window. Please note that this Javascript routine will	 * close the windows directly	 * 	 * if it is opened by another window of the same browser instance. Otherwise	 * will do no effect at all	 * 	 * or will display a Javascript warning asking your confirmation to close	 * the window.	 * 	 * 	 * 	 * @throws Exception	 */	public void close() throws Exception {		jsOut.append(JsGenerator.closeWindow());	}		/**	 * 	 * Javascript window.open functionality.	 * 	 * 	 * 	 * @param id	 *            The javascript variable name to assign the new opened window.	 * 	 * @param name	 *            The new window also can contain a name. Ex: _blank, _parent,	 *            _self, _top, hebelek	 * 	 * @param url	 *            The url to open in the window	 * 	 * @param height	 *            You can assign the height of the window. Use 0 to use your	 *            browser defaults	 * 	 * @param width	 *            You can assign the width of the window. Use 0 to use your	 *            browser defaults	 * 	 * @param top	 *            IE Only: You can assign the top position of the window. Use 0	 *            to use your browser defaults	 * 	 * @param left	 *            IE Only: You can assign the left side position of the window.	 *            Use 0 to use your browser defaults	 * 	 * @param showFullScreen	 *            IE Only: You can open the new window in full screen	 * 	 * @param showLocationBar	 *            The Location entry field where you enter the URL.	 * 	 * @param showMenuBar	 *            The menu bar of the window	 * 	 * @param isResizable	 *            Lets you choose if the window should be resizable or not.	 * 	 * @param showScrollbars	 *            Enable the scrollbars if the document is bigger than the	 *            window	 * 	 * @param showStatusBar	 *            The status bar at the bottom of the window.	 * 	 * @param showTitleBar	 *            IE Only: Specifies whether to display a Title Bar for the	 *            window. The default is yes. Internet Explorer 5.5 and later.	 *            This feature is no longer supported. The Title Bar remains	 *            visible unless the fullscreen sFeature is active. This	 *            parameter is ignored prior to Internet Explorer 5.5. It	 *            applies only if the calling application is an HTML Application	 *            or a trusted dialog box.	 * 	 * @param showToolBar	 *            The standard browser toolbar, with buttons such as Back and	 *            Forward.	 * 	 * @param showDirectories	 *            The standard browser directory buttons, such as What's New and	 *            What's Cool	 * 	 * @throws Exception	 */	public void open(String id, String name, String url, int height, int width, int top, int left, boolean showFullScreen, boolean showLocationBar, boolean showMenuBar, boolean isResizable, boolean showScrollbars, boolean showStatusBar, boolean showTitleBar, boolean showToolBar, boolean showDirectories) throws Exception {		jsOut.append(JsGenerator.openWindow(id, name, url, height, width, top, left, showFullScreen, showLocationBar, showMenuBar, isResizable, showScrollbars, showStatusBar, showTitleBar, showToolBar, showDirectories));	}		/**	 * 	 * Opens the Print Dialog Box	 * 	 * 	 * 	 * @throws Exception	 */	public void print() throws Exception {		jsOut.append(JsGenerator.print());	}		/**	 * 	 * Javascript alert	 * 	 * 	 * 	 * @throws Exception	 */	public void alert(String msg) throws Exception {		jsOut.append(JsGenerator.windowAlert(msg));	}		/**	 * 	 * To set the focus on the element. It will only work for form input	 * elements.	 * 	 * 	 * 	 * @throws Exception	 */	public void focus(String id) throws Exception {		jsOut.append(JsGenerator.focus(id));	}}
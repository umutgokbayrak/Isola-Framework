package isola.model.html.core;import isola.constants.JsEventNames;import isola.helpers.JsGenerator;import isola.model.core.LabelValuePair;/** *  *  *  * @author Umut Gokbayrak *  *  */public abstract class Container extends ContainerNoEvent implements ElementInt {	private StringBuilder jsOut = new StringBuilder();		public Container() {		super();	}		public Container(String id) {		if (id == null) {			id = "el" + (Math.random() * 1000);		}		this.setId(id);	}		/**	 * 	 * Language information specified via the lang attribute may be used by a	 * user	 * 	 * agent to control rendering in a variety of ways. Some situations where	 * author-supplied	 * 	 * language information may be helpful include:	 * 	 * 	 * 	 * <ul>	 * 	 * <li>Assisting search engines</li>	 * 	 * <li>Assisting speech synthesizers</li>	 * 	 * <li>Helping a user agent select glyph variants for high quality	 * typography</li>	 * 	 * <li>Helping a user agent choose a set of quotation marks</li>	 * 	 * <li>Helping a user agent make decisions about hyphenation, ligatures, and	 * spacing</li>	 * 	 * <li>Assisting spell checkers and grammar checkers</li>	 * 	 * </ul>	 * 	 * 	 * 	 * The lang attribute specifies the language of element content and	 * attribute values;	 * 	 * whether it is relevant for a given attribute depends on the syntax and	 * semantics	 * 	 * of the attribute and the operation involved.	 */	private String lang;	/**	 * 	 * This attribute assigns a class name or set of class names to an element.	 * Any number	 * 	 * of elements may be assigned the same class name or names. Multiple class	 * names	 * 	 * must be separated by white space characters.	 */	private String className;	/**	 * 	 * This attribute specifies the base direction of directionally neutral text	 * 	 * (i.e., text that doesn't have inherent directionality as defined in	 * [UNICODE])	 * 	 * in an element's content and attribute values. It also specifies the	 * directionality	 * 	 * of tables. Possible values:	 * 	 * <ul>	 * 	 * <li>LTR: Left-to-right text or table.</li>	 * 	 * <li>RTL: Right-to-left text or table.</li>	 * 	 * </ul>	 */	private String dir;	/**	 * 	 * The onclick event occurs when the pointing device button is clicked over	 * an element.	 * 	 * This attribute may be used with most elements.	 */	private String onClick;	/**	 * 	 * The ondblclick event occurs when the pointing device button is double	 * clicked over	 * 	 * an element. This attribute may be used with most elements.	 */	private String onDblClick;	/**	 * 	 * The onkeydown event occurs when a key is pressed down over an element.	 * 	 * This attribute may be used with most elements.	 */	private String onKeyDown;	/**	 * 	 * The onkeypress event occurs when a key is pressed and released over an	 * element.	 * 	 * This attribute may be used with most elements.	 */	private String onKeyPress;	/**	 * 	 * The onkeyup event occurs when a key is released over an element. This	 * attribute	 * 	 * may be used with most elements.	 */	private String onKeyUp;	/**	 * 	 * The onmousedown event occurs when the pointing device button is pressed	 * over an	 * 	 * element. This attribute may be used with most elements.	 */	private String onMouseDown;	/**	 * 	 * The onmousemove event occurs when the pointing device is moved while it	 * is over	 * 	 * an element. This attribute may be used with most elements.	 */	private String onMouseMove;	/**	 * 	 * The onmouseout event occurs when the pointing device is moved away from	 * an element.	 * 	 * This attribute may be used with most elements.	 */	private String onMouseOut;	/**	 * 	 * The onmouseover event occurs when the pointing device is moved onto an	 * element.	 * 	 * This attribute may be used with most elements.	 */	private String onMouseOver;	/**	 * 	 * The onmouseup event occurs when the pointing device button is released	 * over an	 * 	 * element. This attribute may be used with most elements.	 */	private String onMouseUp;	/**	 * 	 * This attribute specifies style information for the current element.	 */	private String style;	/**	 * 	 * This attribute offers advisory information about the element for which it	 * is set.	 * 	 * 	 * 	 * Unlike the TITLE element, which provides information about an entire	 * document and	 * 	 * may only appear once, the title attribute may annotate any number of	 * elements. Please	 * 	 * consult an element's definition to verify that it supports this	 * attribute.	 * 	 * 	 * 	 * Values of the title attribute may be rendered by user agents in a variety	 * of ways.	 * 	 * For instance, visual browsers frequently display the title as a	 * "tool tip"	 * 	 * (a short message that appears when the pointing device pauses over an	 * object).	 * 	 * Audio user agents may speak the title information in a similar context.	 * For example,	 * 	 * setting the attribute on a link allows user agents (visual and	 * non-visual) to tell	 * 	 * users about the nature of the linked resource.	 */	private String title;		public String getLang() {		return lang;	}		/**	 * 	 * Language information specified via the lang attribute may be used by a	 * user	 * 	 * agent to control rendering in a variety of ways. Some situations where	 * author-supplied	 * 	 * language information may be helpful include:	 * 	 * 	 * 	 * <ul>	 * 	 * <li>Assisting search engines</li>	 * 	 * <li>Assisting speech synthesizers</li>	 * 	 * <li>Helping a user agent select glyph variants for high quality	 * typography</li>	 * 	 * <li>Helping a user agent choose a set of quotation marks</li>	 * 	 * <li>Helping a user agent make decisions about hyphenation, ligatures, and	 * spacing</li>	 * 	 * <li>Assisting spell checkers and grammar checkers</li>	 * 	 * </ul>	 * 	 * 	 * 	 * The lang attribute specifies the language of element content and	 * attribute values;	 * 	 * whether it is relevant for a given attribute depends on the syntax and	 * semantics	 * 	 * of the attribute and the operation involved.	 * 	 * 	 * 	 * @param lang	 */	public void setLang(String lang) {		this.lang = lang;	}		public String getClassName() {		return className;	}		/**	 * 	 * This attribute assigns a class name or set of class names to an element.	 * Any number	 * 	 * of elements may be assigned the same class name or names. Multiple class	 * names	 * 	 * must be separated by white space characters.	 * 	 * 	 * 	 * @param className	 */	public void setClassName(String className) {		this.className = className;	}		public String getDir() {		return dir;	}		/**	 * 	 * This attribute specifies the base direction of directionally neutral text	 * 	 * (i.e., text that doesn't have inherent directionality as defined in	 * [UNICODE])	 * 	 * in an element's content and attribute values. It also specifies the	 * directionality	 * 	 * of tables. Possible values:	 * 	 * <ul>	 * 	 * <li>LTR: Left-to-right text or table.</li>	 * 	 * <li>RTL: Right-to-left text or table.</li>	 * 	 * </ul>	 * 	 * 	 * 	 * @param dir	 */	public void setDir(String dir) {		this.dir = dir;	}		public String getOnClick() {		return onClick;	}		/**	 * 	 * The onclick event occurs when the pointing device button is clicked over	 * an element.	 * 	 * This attribute may be used with most elements.	 * 	 * 	 * 	 * @param onClick	 */	public void setOnClick(String onClick) {		this.onClick = onClick;	}		public String getOnDblClick() {		return onDblClick;	}		/**	 * 	 * The ondblclick event occurs when the pointing device button is double	 * clicked over	 * 	 * an element. This attribute may be used with most elements.	 * 	 * 	 * 	 * @param onDblClick	 */	public void setOnDblClick(String onDblClick) {		this.onDblClick = onDblClick;	}		public String getOnKeyDown() {		return onKeyDown;	}		/**	 * 	 * The onkeydown event occurs when a key is pressed down over an element.	 * 	 * This attribute may be used with most elements.	 * 	 * 	 * 	 * @param onKeyDown	 */	public void setOnKeyDown(String onKeyDown) {		this.onKeyDown = onKeyDown;	}		public String getOnKeyPress() {		return onKeyPress;	}		/**	 * 	 * The onkeypress event occurs when a key is pressed and released over an	 * element.	 * 	 * This attribute may be used with most elements.	 * 	 * 	 * 	 * @param onKeyPress	 */	public void setOnKeyPress(String onKeyPress) {		this.onKeyPress = onKeyPress;	}		public String getOnKeyUp() {		return onKeyUp;	}		/**	 * 	 * The onkeyup event occurs when a key is released over an element. This	 * attribute	 * 	 * may be used with most elements.	 * 	 * 	 * 	 * @param onKeyUp	 */	public void setOnKeyUp(String onKeyUp) {		this.onKeyUp = onKeyUp;	}		public String getOnMouseDown() {		return onMouseDown;	}		/**	 * 	 * The onmousedown event occurs when the pointing device button is pressed	 * over an	 * 	 * element. This attribute may be used with most elements.	 * 	 * 	 * 	 * @param onMouseDown	 */	public void setOnMouseDown(String onMouseDown) {		this.onMouseDown = onMouseDown;	}		public String getOnMouseMove() {		return onMouseMove;	}		/**	 * 	 * The onmousemove event occurs when the pointing device is moved while it	 * is over	 * 	 * an element. This attribute may be used with most elements.	 * 	 * 	 * 	 * @param onMouseMove	 */	public void setOnMouseMove(String onMouseMove) {		this.onMouseMove = onMouseMove;	}		public String getOnMouseOut() {		return onMouseOut;	}		/**	 * 	 * The onmouseout event occurs when the pointing device is moved away from	 * an element.	 * 	 * This attribute may be used with most elements.	 * 	 * 	 * 	 * @param onMouseOut	 */	public void setOnMouseOut(String onMouseOut) {		this.onMouseOut = onMouseOut;	}		public String getOnMouseOver() {		return onMouseOver;	}		/**	 * 	 * The onmouseover event occurs when the pointing device is moved onto an	 * element.	 * 	 * This attribute may be used with most elements.	 * 	 * 	 * 	 * @param onMouseOver	 */	public void setOnMouseOver(String onMouseOver) {		this.onMouseOver = onMouseOver;	}		public String getOnMouseUp() {		return onMouseUp;	}		/**	 * 	 * The onmouseup event occurs when the pointing device button is released	 * over an	 * 	 * element. This attribute may be used with most elements.	 * 	 * 	 * 	 * @param onMouseUp	 */	public void setOnMouseUp(String onMouseUp) {		this.onMouseUp = onMouseUp;	}		public String getStyle() {		return style;	}		/**	 * 	 * This attribute specifies style information for the current element.	 * 	 * 	 * 	 * @param style	 */	public void setStyle(String style) {		this.style = style;	}		public String getTitle() {		return title;	}		/**	 * 	 * This attribute offers advisory information about the element for which it	 * is set.	 * 	 * 	 * 	 * Unlike the TITLE element, which provides information about an entire	 * document and	 * 	 * may only appear once, the title attribute may annotate any number of	 * elements. Please	 * 	 * consult an element's definition to verify that it supports this	 * attribute.	 * 	 * 	 * 	 * Values of the title attribute may be rendered by user agents in a variety	 * of ways.	 * 	 * For instance, visual browsers frequently display the title as a	 * "tool tip"	 * 	 * (a short message that appears when the pointing device pauses over an	 * object).	 * 	 * Audio user agents may speak the title information in a similar context.	 * For example,	 * 	 * setting the attribute on a link allows user agents (visual and	 * non-visual) to tell	 * 	 * users about the nature of the linked resource.	 * 	 * 	 * 	 * @param title	 */	public void setTitle(String title) {		this.title = title;	}		public StringBuilder getJsOut() {		return jsOut;	}		public void setJsOut(StringBuilder jsOut) {		this.jsOut = jsOut;	}		public void reset() {		jsOut = new StringBuilder();	}		/**	 * 	 * Appends Element to the parent HTML element as a child.	 * 	 * 	 * 	 * @param parentElementId	 * 	 * @throws Exception	 */	public void appendAsChild(String parentElementId) throws Exception {		jsOut.append(JsGenerator.appendChild(this, parentElementId));	}		/**	 * 	 * Insert a HTML element referencing another one and inserts it just before	 * it.	 * 	 * 	 * 	 * @param referenceElementId	 * 	 * @throws Exception	 */	public void insertBefore(String referenceElementId) throws Exception {		jsOut.append(JsGenerator.insertBefore(this, referenceElementId));	}		/**	 * 	 * Replaces HTML child with another element	 * 	 * 	 * 	 * @param oldChildId	 * 	 * @param newChild	 * 	 * @throws Exception	 */	public void replaceChild(String oldChildId, ElementInt newChild) throws Exception {		jsOut.append(JsGenerator.replaceChild(oldChildId, newChild, this.getId()));	}		/**	 * 	 * Removes a child node from the HTML node	 * 	 * 	 * 	 * @param childId	 * 	 * @throws Exception	 */	public void removeChild(String childId) throws Exception {		jsOut.append(JsGenerator.removeChild(childId, this.getId()));	}		/**	 * 	 * Sets the inner HTML of the node	 * 	 * 	 * 	 * @param innerHTML	 * 	 * @throws Exception	 */	public void setInnerHTML(String innerHTML) throws Exception {		jsOut.append(JsGenerator.setInnerHTML(this.getId(), innerHTML));	}		/**	 * 	 * Replaces this element with another one.	 * 	 * 	 * 	 * @param newElement	 * 	 * @throws Exception	 */	public void replaceElement(ElementInt newElement) throws Exception {		jsOut.append(JsGenerator.replaceElement(this.getId(), newElement));	}		/**	 * 	 * Sets or updates a HTML element attribute	 * 	 * 	 * 	 * @see JsGenerator#removeElementAttribute(Element, String)	 * 	 * @see JsGenerator#removeElementAttribute(String, String)	 * 	 * @param attributeName	 * 	 * @param attributeValue	 * 	 * @throws Exception	 */	public void setAttribute(String attributeName, String attributeValue) throws Exception {		jsOut.append(JsGenerator.setAttribute(this.getId(), attributeName, attributeValue));	}		/**	 * 	 * Sets/Updates selected style attribute for the Element	 * 	 * 	 * 	 * @see JsGenerator#removeStyle(String, String)	 * 	 * @see JsGenerator#removeStyle(Element, String)	 * 	 * @param styleName	 * 	 * @param styleValue	 * 	 * @throws Exception	 */	public void setStyle(String styleName, String styleValue) throws Exception {		jsOut.append(JsGenerator.setStyle(this.getId(), styleName, styleValue));	}		/**	 * 	 * Removes the given attribute from HTML element	 * 	 * 	 * 	 * @see JsGenerator#setAttribute(Element, String, String)	 * 	 * @see JsGenerator#setAttribute(String, String, String)	 * 	 * @param attributeName	 * 	 * @throws Exception	 */	public void removeAttribute(String attributeName) throws Exception {		jsOut.append(JsGenerator.removeAttribute(this.getId(), attributeName));	}		/**	 * 	 * Removes the given style value from the inline HTML only. It will not	 * effect the css	 * 	 * inherited from the css files.	 * 	 * 	 * 	 * @see JsGenerator#setStyle(Element, String, String)	 * 	 * @see JsGenerator#setAttribute(String, String, String)	 * 	 * @param styleName	 * 	 * @throws Exception	 */	public void removeStyle(String styleName) throws Exception {		jsOut.append(JsGenerator.removeStyle(this.getId(), styleName));	}		/**	 * 	 * Hides the element with elementId from the screen. It doesn't remove it	 * 	 * but it only sets its display property to none.	 * 	 * 	 * 	 * @see JsGenerator#show(Element)	 * 	 * @see JsGenerator#show(String)	 * 	 * @throws Exception	 */	public void hide() throws Exception {		jsOut.append(JsGenerator.hide(this.getId()));	}		/**	 * 	 * Sets an elements display property to ''	 * 	 * 	 * 	 * @throws Exception	 */	public void show() throws Exception {		jsOut.append(JsGenerator.show(this.getId()));	}		/**	 * 	 * Sets the opacity of the HTML node.	 * 	 * 	 * 	 * @param opacity	 *            An integer from 0 to 100. Indicates the percentage of the	 *            opacity.	 * 	 * @throws Exception	 */	public void setOpacity(int opacity) throws Exception {		jsOut.append(JsGenerator.setOpacity(this.getId(), opacity));	}		/**	 * 	 * Removes the given element without needing to specify the parent element	 * 	 * 	 * 	 * @throws Exception	 */	public void remove() throws Exception {		jsOut.append(JsGenerator.removeElement(this.getId()));	}		/**	 * 	 * Sets the X, Y absolute position for the selected element. First checks if	 * the HTML	 * 	 * element has a absolute position or not. If not absolute than makes it an	 * absolute	 * 	 * positioned element and than relocates the element to the given position	 * 	 * 	 * 	 * @param posX	 * 	 * @param posY	 * 	 * @throws Exception	 */	public void setPosition(int posX, int posY) throws Exception {		jsOut.append(JsGenerator.setPosition(this.getId(), posX, posY));	}		/**	 * 	 * Attaches an event to an element overriding the previous action registered	 * to the event.	 * 	 * 	 * 	 * @see JsEventNames	 * 	 * @param eventName	 *            Event name like onclick, onresize etc...	 * 	 * @param jsCode	 *            Pure Javascript code to run when this event occurs	 * 	 * @param params	 *            Any number(0 or more) of parameters this JS method will accept	 * 	 * @throws Exception	 */	public void attachEvent(String eventName, String jsCode, String[] params) throws Exception {		jsOut.append(JsGenerator.attachEvent(this.getId(), eventName, jsCode, params));	}		/**	 * 	 * Attaches an event to an element overriding the previous action registered	 * to the event.	 * 	 * 	 * 	 * @see JsEventNames	 * 	 * @param eventName	 *            Event name like onclick, onresize etc...	 * 	 * @param jsFunction	 *            The name of the javascript function to call when this event	 *            occurs. No paranthesis no parameters. Just the name.	 * 	 * @throws Exception	 */	public void attachEvent(String eventName, String jsFunction) throws Exception {		jsOut.append(JsGenerator.attachEvent(this.getId(), eventName, jsFunction));	}		/**	 * 	 * Attaches an event to an element overriding the previous action registered	 * to the event.	 * 	 * 	 * 	 * @see JsEventNames	 * 	 * @param eventName	 *            Event name like onclick, onresize etc...	 * 	 * @param jsCode	 *            Pure Javascript code to run when this event occurs	 * 	 * @param params	 *            Any number(0 or more) of parameters this JS method will accept	 * 	 * @throws Exception	 */	public void appendEvent(String eventName, String jsCode, String params) throws Exception {		jsOut.append(JsGenerator.appendEvent(this.getId(), eventName, jsCode, params));	}		/**	 * 	 * Attaches an event to an element overriding the previous action registered	 * to the event.	 * 	 * 	 * 	 * @see JsEventNames	 * 	 * @param eventName	 *            Event name like onclick, onresize etc...	 * 	 * @param jsFunction	 *            The name of the javascript function to call when this event	 *            occurs. No paranthesis no parameters. Just the name.	 * 	 * @throws Exception	 */	public void appendEvent(String eventName, String jsFunction) throws Exception {		jsOut.append(JsGenerator.appendEvent(this.getId(), eventName, jsFunction));	}		/**	 * 	 * Detaches Event from the element.	 * 	 * 	 * 	 * @param elementId	 * 	 * @param eventName	 * 	 * @throws Exception	 */	public void detachEvent(String eventName) throws Exception {		jsOut.append(JsGenerator.detachEvent(this.getId(), eventName));	}		/**	 * 	 * Method to clone an HTML element. This is not a simple cloneNode	 * statement. It can also	 * 	 * set a new id, set any number of attributes and style statements besides	 * assign events to the	 * 	 * cloned HTML element. All is done in a single Push.	 * 	 * 	 * 	 * @param parentElementId	 *            Required: The parent node's id to append this cloned node.	 * 	 * @param newId	 *            Optional: id for the cloned HTML element. If none is supplied	 *            an auto generated value will be assigned.	 * 	 * @param styles	 *            Optional style to apply to the cloned HTML element. It is a	 *            LabelValueBean array. Label: style name, Value: the value for	 *            the style attribute	 * 	 * @param attributes	 *            Optional attributes to apply to the cloned HTML element. It is	 *            a LabelValueBean array. Label: attribute name, Value: the	 *            value to set to the attribute	 * 	 * @param events	 *            Optional events to apply to the cloned HTML element. It is a	 *            LabelValueBean array. Label: Javascript Event such as onclick,	 *            onresize etc... and Value: the name of the Javascript function	 *            name to operate on the event. Do not put () and ; at the end.	 * 	 * @throws Exception	 */	public void clone(String parentElementId, String newId, LabelValuePair[] styles, LabelValuePair[] attributes, LabelValuePair[] events) throws Exception {		jsOut.append(JsGenerator.clone(this.getId(), parentElementId, newId, styles, attributes, events));	}		/**	 * 	 * The easiest form of making an object draggable.	 * 	 * 	 * 	 * @throws Exception	 */	public void makeDraggable() throws Exception {		jsOut.append(JsGenerator.makeDraggable(this.getId()));	}		/**	 * 	 * A method to make an HTML object draggable besides adding many user	 * interface enhancements.	 * 	 * 	 * 	 * @param handleElementId	 *            The element to act as the handle for the draggable element.	 *            defaults to the element itself.	 * 	 * @param containerElementId	 *            If set to other than null, it	 * 	 * @param snap	 *            Optional, the distance you have to drag before the element	 *            starts to respond to the drag. Give null to use defaults.	 * 	 * @param grid	 *            Optional, distance in px for snap-to-grid dragging. Give null	 *            to use defaults.	 * 	 * @param modifierX	 *            Optional, the css attribute to change while moving the x axis.	 *            Default is 'left'. You can use width for a resizer and false	 *            to disable. If null is given 'left' will be default.	 * 	 * @param modifierY	 *            Optional, the css attribute to change while moving the y axis.	 *            Default is 'top'. You can use height for a resizer and false	 *            to disable. If null is given 'left' will be default.	 * 	 * @param opacityEffect	 *            If set to true, opacity will be set to 0.50 while dragging.	 * 	 * @throws Exception	 */	public void makeDraggable(String handleElementId, String containerElementId, String snap, String grid, String modifierX, String modifierY, boolean opacityEffect) throws Exception {		jsOut.append(JsGenerator.makeDraggable(this.getId(), handleElementId, containerElementId, snap, grid, modifierX, modifierY, opacityEffect));	}		/**	 * 	 * A method to make an HTML object draggable besides adding many user	 * interface enhancements.	 * 	 * 	 * 	 * @param handleElementId	 *            The element to act as the handle for the draggable element.	 *            defaults to the element itself.	 * 	 * @param containerElementId	 *            If set to other than null, it	 * 	 * @param snap	 *            Optional, the distance you have to drag before the element	 *            starts to respond to the drag. Give null to use defaults.	 * 	 * @param grid	 *            Optional, distance in px for snap-to-grid dragging. Give null	 *            to use defaults.	 * 	 * @param modifierX	 *            Optional, the css attribute to change while moving the x axis.	 *            Default is 'left'. You can use width for a resizer and false	 *            to disable. If null is given 'left' will be default.	 * 	 * @param modifierY	 *            Optional, the css attribute to change while moving the y axis.	 *            Default is 'top'. You can use height for a resizer and false	 *            to disable. If null is given 'left' will be default.	 * 	 * @param onStart	 *            Optional, JS Code to execute when the user starts to drag (on	 *            mousedown); Give null to disable	 * 	 * @param onComplete	 *            Optional, function to execute when the user completes the	 *            drag. Give null to disable.	 * 	 * @param onDrag	 *            Optional, function to execute at every step of the drag. Give	 *            null to disable.	 * 	 * @throws Exception	 */	public void makeDraggable(String handleElementId, String containerElementId, String snap, String grid, String modifierX, String modifierY, String onStart, String onComplete, String onDrag) throws Exception {		jsOut.append(JsGenerator.makeDraggable(this.getId(), handleElementId, containerElementId, snap, grid, modifierX, modifierY, onStart, onComplete, onDrag));	}		/**	 * 	 * A method to make an HTML object draggable besides adding many user	 * interface enhancements. This method	 * 	 * allows to choose drop targets.	 * 	 * 	 * 	 * @param handleElementId	 *            The element to act as the handle for the draggable element.	 *            defaults to the element itself.	 * 	 * @param containerElementId	 *            If set to other than null, it	 * 	 * @param snap	 *            Optional, the distance you have to drag before the element	 *            starts to respond to the drag. Give null to use defaults.	 * 	 * @param grid	 *            Optional, distance in px for snap-to-grid dragging. Give null	 *            to use defaults.	 * 	 * @param modifierX	 *            Optional, the css attribute to change while moving the x axis.	 *            Default is 'left'. You can use width for a resizer and false	 *            to disable. If null is given 'left' will be default.	 * 	 * @param modifierY	 *            Optional, the css attribute to change while moving the y axis.	 *            Default is 'top'. You can use height for a resizer and false	 *            to disable. If null is given 'left' will be default.	 * 	 * @param onStart	 *            Optional, JS Code to execute when the user starts to drag (on	 *            mousedown); Give null to disable	 * 	 * @param onComplete	 *            Optional, function to execute when the user completes the	 *            drag. Give null to disable.	 * 	 * @param onDrag	 *            Optional, function to execute at every step of the drag. Give	 *            null to disable.	 * 	 * @param onOver	 *            Optional, function to execute when element is over one of the	 *            drop targets	 * 	 * @param onLeave	 *            Optional, function to execute when element left the drop	 *            target	 * 	 * @param dropTargets	 *            Optional. An array of elementId's which are drop targets for	 *            this element.	 * 	 * @throws Exception	 */	public void makeDraggable(String handleElementId, String containerElementId, String snap, String grid, String modifierX, String modifierY, String onStart, String onComplete, String onDrag, String onOver, String onLeave, String onDrop, String[] dropTargets) throws Exception {		jsOut.append(JsGenerator.makeDraggable(this.getId(), handleElementId, containerElementId, snap, grid, modifierX, modifierY, onStart, onComplete, onDrag, onOver, onLeave, onDrop, dropTargets));	}		/**	 * 	 * Simplest form of making an element resizable	 * 	 * 	 * 	 * @param handleElementId	 * 	 * @throws Exception	 */	public void makeResizable(String handleElementId) throws Exception {		jsOut.append(JsGenerator.makeResizable(this.getId(), handleElementId));	}		/**	 * 	 * Full featured resize js method.	 * 	 * 	 * 	 * @param handleElementId	 *            Required. The handle to resize the element.	 * 	 * @param snap	 *            Optional, the distance you have to drag before the element	 *            starts to respond to the drag. Give null to use defaults.	 * 	 * @param grid	 *            Optional, distance in px for snap-to-grid dragging. Give null	 *            to use defaults.	 * 	 * @param limitX	 *            Optional, an int array of pixels to limit the resizing at the	 *            X axis.	 * 	 * @param limitY	 *            Optional, an int array of pixels to limit the resizing at the	 *            Y sxis.	 * 	 * @param disableX	 *            Optional, used to disable resizing completely at the X axis	 * 	 * @param disableY	 *            Optional, used to disable resizing completely at the Y axis	 * 	 * @param onStart	 *            Optional, JS Code to execute when the user starts to drag (on	 *            mousedown); Give null to disable	 * 	 * @param onComplete	 *            Optional, function to execute when the user completes the	 *            drag. Give null to disable.	 * 	 * @param onDrag	 *            Optional, function to execute at every step of the drag. Give	 *            null to disable.	 * 	 * @throws Exception	 */	public void makeResizable(String handleElementId, String snap, String grid, int[] limitX, int[] limitY, boolean disableX, boolean disableY, String onStart, String onComplete, String onDrag) throws Exception {		jsOut.append(JsGenerator.makeResizable(this.getId(), handleElementId, snap, grid, limitX, limitY, disableX, disableY, onStart, onComplete, onDrag));	}		/**	 * 	 * Resizes element to the given Width and Height values	 * 	 * 	 * 	 * @param elementId	 * 	 * @param resizeToWidth	 * 	 * @param resizeToHeight	 * 	 * @throws Exception	 */	public void resizeTo(int resizeToWidth, int resizeToHeight) throws Exception {		jsOut.append(JsGenerator.resizeTo(this.getId(), resizeToWidth, resizeToHeight));	}		/**	 * 	 * Scrolls the element to the given X and Y coordinates. To disable	 * scrolling at	 * 	 * an axis give the value 0.	 * 	 * 	 * 	 * @param scrollToX	 * 	 * @param scrollToY	 * 	 * @throws Exception	 */	public void scrollTo(int scrollToX, int scrollToY) throws Exception {		jsOut.append(JsGenerator.scrollTo(this.getId(), scrollToX, scrollToY));	}		/**	 * 	 * Ajax loader. It loads the specified url into the given Html element.	 * 	 * If a loading indicator is wanted to be shown an ajax loader css must be	 * 	 * provided. A sample ajax indicator css is as follows.	 * 	 * <pre>	 * 	 * 	.ajax-loading {	 * 
	 * 	padding: 20px 0;	 * 
	 * 	background: url(http://demos.mootools.net/demos/Group/spinner.gif) no-repeat center;	 * 
	 * }	 * 	 * </pre>	 * 	 * 	 * 	 * @param url	 *            The url to load	 * 	 * @param showLoadingProgress	 *            Do we want ajax indicator loader to load	 * 	 * @param ajaxLoaderCss	 *            Ajax loader css to be used.	 * 	 * @throws Exception	 */	public void ajaxloadInto(String url, boolean showLoadingProgress, String ajaxLoaderCss) throws Exception {		jsOut.append(JsGenerator.ajaxloadInto(this.getId(), url, showLoadingProgress, ajaxLoaderCss));	}		/**	 * 	 * Run a javascript function after the specified delay	 * 	 * 	 * 	 * @param jsFunction	 * 	 * @param delay	 * 	 * @param args	 * 	 * @return	 * 	 * @throws Exception	 */	public void setTimeout(String jsFunction, int delay, String[] args) throws Exception {		jsOut.append(JsGenerator.setTimeout(this.getId(), jsFunction, delay, args));	}}
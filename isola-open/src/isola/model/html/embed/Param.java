package isola.model.html.embed;import isola.constants.MimeTypes;import isola.helpers.ElementParserHtml;import isola.model.html.core.Element;/** *  *  *  * @author Umut Gokbayrak *  *  */public class Param extends Element {	private static final String tag = "param";		public Param() {		super();	}		public Param(String name, String value) {		super();		setName(name);		setValue(value);	}		/**	 * 	 * This attribute assigns the control name.	 */	private String name;	/**	 * 	 * This attribute specifies the content type of the resource designated by	 * the value	 * 	 * attribute only in the case where valuetype is set to "ref". This	 * attribute thus	 * 	 * specifies for the user agent, the type of values that will be found at	 * the URI	 * 	 * designated by value.	 * 	 * 	 * 	 * @see MimeTypes	 */	private String type;	/**	 * 	 * This attribute specifies the value of a run-time parameter specified by	 * name.	 * 	 * Property values have no meaning to HTML; their meaning is determined by	 * the	 * 	 * object in question.	 */	private String value;	/**	 * 	 * This attribute specifies the type of the value attribute. Possible	 * values:	 * 	 * <ul>	 * 	 * <li>data: This is default value for the attribute. It means that the	 * value specified	 * 	 * by value will be evaluated and passed to the object's implementation as a	 * string.</li>	 * 	 * <li>ref: The value specified by value is a URI that designates a resource	 * where	 * 	 * run-time values are stored. This allows support tools to identify URIs	 * given as	 * 	 * parameters. The URI must be passed to the object as is, i.e., unresolved.	 * </li>	 * 	 * <li>object: The value specified by value is an identifier that refers to	 * an	 * 	 * OBJECT declaration in the same document. The identifier must be the value	 * of	 * 	 * the id attribute set for the declared OBJECT element.</li>	 * 	 * </ul>	 */	private String valueType;		public String getName() {		return name;	}		/**	 * 	 * This attribute assigns the control name.	 * 	 * 	 * 	 * @param name	 */	public void setName(String name) {		this.name = name;	}		public String getType() {		return type;	}		/**	 * 	 * This attribute specifies the content type of the resource designated by	 * the value	 * 	 * attribute only in the case where valuetype is set to "ref". This	 * attribute thus	 * 	 * specifies for the user agent, the type of values that will be found at	 * the URI	 * 	 * designated by value.	 * 	 * 	 * 	 * @see MimeTypes	 * 	 * @param type	 */	public void setType(String type) {		this.type = type;	}		public String getValue() {		return value;	}		/**	 * 	 * This attribute specifies the value of a run-time parameter specified by	 * name.	 * 	 * Property values have no meaning to HTML; their meaning is determined by	 * the	 * 	 * object in question.	 * 	 * 	 * 	 * @param value	 */	public void setValue(String value) {		this.value = value;	}		public String getValueType() {		return valueType;	}		/**	 * 	 * This attribute specifies the type of the value attribute. Possible	 * values:	 * 	 * <ul>	 * 	 * <li>data: This is default value for the attribute. It means that the	 * value specified	 * 	 * by value will be evaluated and passed to the object's implementation as a	 * string.</li>	 * 	 * <li>ref: The value specified by value is a URI that designates a resource	 * where	 * 	 * run-time values are stored. This allows support tools to identify URIs	 * given as	 * 	 * parameters. The URI must be passed to the object as is, i.e., unresolved.	 * </li>	 * 	 * <li>object: The value specified by value is an identifier that refers to	 * an	 * 	 * OBJECT declaration in the same document. The identifier must be the value	 * of	 * 	 * the id attribute set for the declared OBJECT element.</li>	 * 	 * </ul>	 * 	 * 	 * 	 * @param valueType	 */	public void setValueType(String valueType) {		this.valueType = valueType;	}		@Override	public String toString() {		return ElementParserHtml.getToStringOut(this);	}		public String getTag() {		return tag;	}}
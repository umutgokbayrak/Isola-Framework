package isola.model.html.embed;import isola.constants.MimeTypes;import isola.helpers.ElementParserHtml;import isola.model.html.core.Container;/** *  *  *  * @author Umut Gokbayrak *  *  */public class Object extends Container {	private static final String tag = "object";	/**	 * 	 * @deprecated This attribute specifies the position of an IMG, OBJECT, or	 *             APPLET with respect to its context.	 * 	 *             The following values for align concern the object's position	 *             with respect to surrounding text:	 * 	 *             <ul>	 * 	 *             <li>bottom: means that the bottom of the object should be	 *             vertically aligned with	 * 	 *             the current baseline. This is the default value.</li>	 * 	 *             <li>middle: means that the center of the object should be	 *             vertically aligned with	 * 	 *             the current baseline.</li>	 * 	 *             <li>top: means that the top of the object should be	 *             vertically aligned with the	 * 	 *             top of the current text line.</li>	 * 	 *             </ul>	 * 	 * 	 * 	 *             Two other values, left and right, cause the image to float to	 *             the current left or right margin.	 */	private String align;	/**	 * 	 * This attribute specifies a comma-separated list of URIs for archives	 * containing	 * 	 * classes and other resources that will be "preloaded". The classes are	 * loaded using	 * 	 * an instance of an AppletClassLoader with the given codebase. Relative	 * URIs for	 * 	 * archives are interpreted with respect to the applet's codebase.	 * Preloading	 * 	 * resources can significantly improve the performance of applets.	 */	private String archive;	/**	 * 	 * This attributes specifies the width (in pixels only) of the frame around	 * a table.	 */	private String border;	/**	 * 	 * This attribute may be used to specify the location of an object's	 * implementation via a URI.	 * 	 * It may be used together with, or as an alternative to the data attribute,	 * depending on the	 * 	 * type of object involved.	 */	private String classId;	/**	 * 	 * This attribute specifies the base path used to resolve relative URIs	 * specified by the	 * 	 * classid, data, and archive attributes. When absent, its default value is	 * the base URI	 * 	 * of the current document.	 */	private String codeBase;	/**	 * 	 * This attribute specifies the content type of data expected when	 * downloading the object	 * 	 * specified by classid. This attribute is optional but recommended when	 * classid is specified	 * 	 * since it allows the user agent to avoid loading information for	 * unsupported content types.	 * 	 * When absent, it defaults to the value of the type attribute.	 */	private String codeType;	/**	 * 	 * This attribute may be used to specify the location of the object's data,	 * for instance	 * 	 * image data for objects defining images, or more generally, a serialized	 * form of an	 * 	 * object which can be used to recreate it. If given as a relative URI, it	 * should be interpreted	 * 	 * relative to the codebase attribute.	 */	private String data;	/**	 * 	 * When present, this boolean attribute makes the current OBJECT definition	 * a declaration	 * 	 * only. The object must be instantiated by a subsequent OBJECT definition	 * referring to	 * 	 * this declaration.	 */	private String declare;	/**	 * 	 * The height of the element.	 */	private String height;	/**	 * 	 * @deprecated This attribute specifies the amount of white space to be	 *             inserted to the left and	 * 	 *             right of an IMG, APPLET, or OBJECT. The default value is not	 *             specified, but is	 * 	 *             generally a small, non-zero length.	 */	private String hSpace;	/**	 * 	 * This attribute assigns the control name.	 */	private String name;	/**	 * 	 * This attribute specifies a message that a user agent may render while	 * loading the	 * 	 * object's implementation and data.	 */	private String standBy;	/**	 * 	 * This attribute specifies the position of the current element in the	 * tabbing order	 * 	 * for the current document. This value must be a number between 0 and	 * 32767.	 * 	 * User agents should ignore leading zeros.	 */	private String tabIndex;	/**	 * 	 * This attribute specifies the content type for the data specified by data.	 * 	 * This attribute is optional but recommended when data is specified since	 * it allows	 * 	 * the user agent to avoid loading information for unsupported content	 * types. If	 * 	 * the value of this attribute differs from the HTTP Content-Type returned	 * by the	 * 	 * server when the object is retrieved, the HTTP Content-Type takes	 * precedence.	 * 	 * 	 * 	 * @see MimeTypes	 */	private String type;	/**	 * 	 * This attribute associates an image map with an element. The image map is	 * defined	 * 	 * by a MAP element. The value of usemap must match the value of the name	 * attribute	 * 	 * of the associated MAP element.	 */	private String useMap;	/**	 * 	 * @deprecated This attribute specifies the amount of white space to be	 *             inserted above and below	 * 	 *             an IMG, APPLET, or OBJECT. The default value is not	 *             specified, but is generally	 * 	 *             a small, non-zero length.	 */	private String vSpace;	/**	 * 	 * Image and object width override.	 */	private String width;		public Object() {		super();		setId(tag + (Math.random() * 1000));	}		public Object(String id) {		super(id);	}		public Object(String id, String classId, String codeBase, String width, String height, String align) {		super(id);		setClassId(classId);		setCodeBase(codeBase);		setWidth(width);		setHeight(height);		setAlign(align);	}		public String getAlign() {		return align;	}		/**	 * 	 * @deprecated This attribute specifies the position of an IMG, OBJECT, or	 *             APPLET with respect to its context.	 * 	 *             The following values for align concern the object's position	 *             with respect to surrounding text:	 * 	 *             <ul>	 * 	 *             <li>bottom: means that the bottom of the object should be	 *             vertically aligned with	 * 	 *             the current baseline. This is the default value.</li>	 * 	 *             <li>middle: means that the center of the object should be	 *             vertically aligned with	 * 	 *             the current baseline.</li>	 * 	 *             <li>top: means that the top of the object should be	 *             vertically aligned with the	 * 	 *             top of the current text line.</li>	 * 	 *             </ul>	 * 	 * 	 * 	 *             Two other values, left and right, cause the image to float to	 *             the current left or right margin.	 * 	 * 	 * 	 * @param align	 */	public void setAlign(String align) {		this.align = align;	}		public String getArchive() {		return archive;	}		/**	 * 	 * This attribute specifies a comma-separated list of URIs for archives	 * containing	 * 	 * classes and other resources that will be "preloaded". The classes are	 * loaded using	 * 	 * an instance of an AppletClassLoader with the given codebase. Relative	 * URIs for	 * 	 * archives are interpreted with respect to the applet's codebase.	 * Preloading	 * 	 * resources can significantly improve the performance of applets.	 * 	 * 	 * 	 * @param archive	 */	public void setArchive(String archive) {		this.archive = archive;	}		public String getBorder() {		return border;	}		/**	 * 	 * This attributes specifies the width (in pixels only) of the frame around	 * a table.	 * 	 * 	 * 	 * @param border	 */	public void setBorder(String border) {		this.border = border;	}		public String getClassId() {		return classId;	}		/**	 * 	 * This attribute may be used to specify the location of an object's	 * implementation via a URI.	 * 	 * It may be used together with, or as an alternative to the data attribute,	 * depending on the	 * 	 * type of object involved.	 * 	 * 	 * 	 * @param classId	 */	public void setClassId(String classId) {		this.classId = classId;	}		public String getCodeBase() {		return codeBase;	}		/**	 * 	 * This attribute specifies the base path used to resolve relative URIs	 * specified by the	 * 	 * classid, data, and archive attributes. When absent, its default value is	 * the base URI	 * 	 * of the current document.	 * 	 * 	 * 	 * @param codeBase	 */	public void setCodeBase(String codeBase) {		this.codeBase = codeBase;	}		public String getCodeType() {		return codeType;	}		/**	 * 	 * This attribute specifies the content type of data expected when	 * downloading the object	 * 	 * specified by classid. This attribute is optional but recommended when	 * classid is specified	 * 	 * since it allows the user agent to avoid loading information for	 * unsupported content types.	 * 	 * When absent, it defaults to the value of the type attribute.	 * 	 * 	 * 	 * @param codeType	 */	public void setCodeType(String codeType) {		this.codeType = codeType;	}		public String getData() {		return data;	}		/**	 * 	 * This attribute may be used to specify the location of the object's data,	 * for instance	 * 	 * image data for objects defining images, or more generally, a serialized	 * form of an	 * 	 * object which can be used to recreate it. If given as a relative URI, it	 * should be interpreted	 * 	 * relative to the codebase attribute.	 * 	 * 	 * 	 * @param data	 */	public void setData(String data) {		this.data = data;	}		public String getDeclare() {		return declare;	}		/**	 * 	 * When present, this boolean attribute makes the current OBJECT definition	 * a declaration	 * 	 * only. The object must be instantiated by a subsequent OBJECT definition	 * referring to	 * 	 * this declaration.	 * 	 * 	 * 	 * @param declare	 */	public void setDeclare(String declare) {		this.declare = declare;	}		public String getHeight() {		return height;	}		/**	 * 	 * The height of the element.	 * 	 * 	 * 	 * @param height	 */	public void setHeight(String height) {		this.height = height;	}		public String getHSpace() {		return hSpace;	}		/**	 * 	 * @deprecated This attribute specifies the amount of white space to be	 *             inserted to the left and	 * 	 *             right of an IMG, APPLET, or OBJECT. The default value is not	 *             specified, but is	 * 	 *             generally a small, non-zero length.	 * 	 * 	 * 	 * @param space	 */	public void setHSpace(String space) {		hSpace = space;	}		public String getName() {		return name;	}		/**	 * 	 * This attribute assigns the control name.	 * 	 * 	 * 	 * @param name	 */	public void setName(String name) {		this.name = name;	}		public String getStandBy() {		return standBy;	}		/**	 * 	 * This attribute specifies a message that a user agent may render while	 * loading the	 * 	 * object's implementation and data.	 * 	 * 	 * 	 * @param standBy	 */	public void setStandBy(String standBy) {		this.standBy = standBy;	}		public String getTabIndex() {		return tabIndex;	}		/**	 * 	 * This attribute specifies the position of the current element in the	 * tabbing order	 * 	 * for the current document. This value must be a number between 0 and	 * 32767.	 * 	 * User agents should ignore leading zeros.	 * 	 * 	 * 	 * @param tabIndex	 */	public void setTabIndex(String tabIndex) {		this.tabIndex = tabIndex;	}		public String getType() {		return type;	}		/**	 * 	 * This attribute specifies the content type for the data specified by data.	 * 	 * This attribute is optional but recommended when data is specified since	 * it allows	 * 	 * the user agent to avoid loading information for unsupported content	 * types. If	 * 	 * the value of this attribute differs from the HTTP Content-Type returned	 * by the	 * 	 * server when the object is retrieved, the HTTP Content-Type takes	 * precedence.	 * 	 * 	 * 	 * @see MimeTypes	 * 	 * @param type	 */	public void setType(String type) {		this.type = type;	}		public String getUseMap() {		return useMap;	}		/**	 * 	 * This attribute associates an image map with an element. The image map is	 * defined	 * 	 * by a MAP element. The value of usemap must match the value of the name	 * attribute	 * 	 * of the associated MAP element.	 * 	 * 	 * 	 * @param useMap	 */	public void setUseMap(String useMap) {		this.useMap = useMap;	}		public String getVSpace() {		return vSpace;	}		/**	 * 	 * @deprecated This attribute specifies the amount of white space to be	 *             inserted above and below	 * 	 *             an IMG, APPLET, or OBJECT. The default value is not	 *             specified, but is generally	 * 	 *             a small, non-zero length.	 * 	 * 	 * 	 * @param space	 */	public void setVSpace(String space) {		vSpace = space;	}		public String getWidth() {		return width;	}		/**	 * 	 * Image and object width override.	 * 	 * 	 * 	 * @param width	 */	public void setWidth(String width) {		this.width = width;	}		@Override	public String toString() {		return ElementParserHtml.getToStringOut(this);	}		public String getTag() {		return tag;	}}
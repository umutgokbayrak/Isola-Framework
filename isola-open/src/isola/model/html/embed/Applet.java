package isola.model.html.embed;import isola.helpers.ElementParserHtml;import isola.model.html.core.Container;/** *  *  *  * @author Umut Gokbayrak *  *  */public class Applet extends Container {	private static final String tag = "applet";	/**	 * 	 * @deprecated This attribute specifies the position of an IMG, OBJECT, or	 *             APPLET with respect to its context.	 * 	 *             The following values for align concern the object's position	 *             with respect to surrounding text:	 * 	 *             <ul>	 * 	 *             <li>bottom: means that the bottom of the object should be	 *             vertically aligned with	 * 	 *             the current baseline. This is the default value.</li>	 * 	 *             <li>middle: means that the center of the object should be	 *             vertically aligned with	 * 	 *             the current baseline.</li>	 * 	 *             <li>top: means that the top of the object should be	 *             vertically aligned with the	 * 	 *             top of the current text line.</li>	 * 	 *             </ul>	 * 	 * 	 * 	 *             Two other values, left and right, cause the image to float to	 *             the current left or right margin.	 */	private String align;	/**	 * 	 * For user agents that cannot display images, forms, or applets, this	 * attribute specifies	 * 	 * alternate text. The language of the alternate text is specified by the	 * lang attribute.	 */	private String alt;	/**	 * 	 * This attribute specifies a comma-separated list of URIs for archives	 * containing	 * 	 * classes and other resources that will be "preloaded". The classes are	 * loaded using	 * 	 * an instance of an AppletClassLoader with the given codebase. Relative	 * URIs for	 * 	 * archives are interpreted with respect to the applet's codebase.	 * Preloading	 * 	 * resources can significantly improve the performance of applets.	 */	private String archive;	/**	 * 	 * This attribute specifies either the name of the class file that contains	 * the applet's	 * 	 * compiled applet subclass or the path to get the class, including the	 * class file itself. It is	 * 	 * interpreted with respect to the applet's codebase. One of code or object	 * must be present.	 */	private String code;	/**	 * 	 * This attribute specifies the base path used to resolve relative URIs	 * specified by the	 * 	 * classid, data, and archive attributes. When absent, its default value is	 * the base URI	 * 	 * of the current document.	 */	private String codeBase;	/**	 * 	 * The height of the element.	 */	private String height;	/**	 * 	 * @deprecated This attribute specifies the amount of white space to be	 *             inserted to the left and	 * 	 *             right of an IMG, APPLET, or OBJECT. The default value is not	 *             specified, but is	 * 	 *             generally a small, non-zero length.	 */	private String hSpace;	/**	 * 	 * This attribute assigns the control name.	 */	private String name;	/**	 * 	 * This attribute names a resource containing a serialized representation of	 * an	 * 	 * applet's state. It is interpreted relative to the applet's codebase. The	 * serialized	 * 	 * data contains the applet's class name but not the implementation. The	 * class name is	 * 	 * used to retrieve the implementation from a class file or archive.	 * 	 * 	 * 	 * When the applet is "deserialized" the start() method is invoked but not	 * the init()	 * 	 * method. Attributes valid when the original object was serialized are not	 * restored.	 * 	 * Any attributes passed to this APPLET instance will be available to the	 * applet.	 * 	 * Authors should use this feature with extreme caution. An applet should be	 * stopped	 * 	 * before it is serialized.	 * 	 * 	 * 	 * Either code or object must be present. If both code and object are given,	 * it is an	 * 	 * error if they provide different class names.	 */	private String object;	/**	 * 	 * @deprecated This attribute specifies the amount of white space to be	 *             inserted above and below	 * 	 *             an IMG, APPLET, or OBJECT. The default value is not	 *             specified, but is generally	 * 	 *             a small, non-zero length.	 */	private String vSpace;	/**	 * 	 * This attribute specifies the initial width of the applet's display area	 * 	 * (excluding any windows or dialogs that the applet creates).	 */	private String width;		public Applet() {		super();		setId(tag + (Math.random() * 1000));	}		public Applet(String id) {		super(id);	}		public Applet(String id, String code, String width, String height) {		super(id);		setCode(code);		setWidth(width);		setHeight(height);	}		public String getAlign() {		return align;	}		/**	 * 	 * @deprecated This attribute specifies the position of an IMG, OBJECT, or	 *             APPLET with respect to its context.	 * 	 *             The following values for align concern the object's position	 *             with respect to surrounding text:	 * 	 *             <ul>	 * 	 *             <li>bottom: means that the bottom of the object should be	 *             vertically aligned with	 * 	 *             the current baseline. This is the default value.</li>	 * 	 *             <li>middle: means that the center of the object should be	 *             vertically aligned with	 * 	 *             the current baseline.</li>	 * 	 *             <li>top: means that the top of the object should be	 *             vertically aligned with the	 * 	 *             top of the current text line.</li>	 * 	 *             </ul>	 * 	 * 	 * 	 *             Two other values, left and right, cause the image to float to	 *             the current left or right margin.	 * 	 * 	 * 	 * @param align	 */	public void setAlign(String align) {		this.align = align;	}		public String getAlt() {		return alt;	}		/**	 * 	 * For user agents that cannot display images, forms, or applets, this	 * attribute specifies	 * 	 * alternate text. The language of the alternate text is specified by the	 * lang attribute.	 * 	 * 	 * 	 * @param alt	 */	public void setAlt(String alt) {		this.alt = alt;	}		public String getArchive() {		return archive;	}		/**	 * 	 * This attribute specifies a comma-separated list of URIs for archives	 * containing	 * 	 * classes and other resources that will be "preloaded". The classes are	 * loaded using	 * 	 * an instance of an AppletClassLoader with the given codebase. Relative	 * URIs for	 * 	 * archives are interpreted with respect to the applet's codebase.	 * Preloading	 * 	 * resources can significantly improve the performance of applets.	 * 	 * 	 * 	 * @param archive	 */	public void setArchive(String archive) {		this.archive = archive;	}		public String getCode() {		return code;	}		/**	 * 	 * This attribute specifies either the name of the class file that contains	 * the applet's	 * 	 * compiled applet subclass or the path to get the class, including the	 * class file itself. It is	 * 	 * interpreted with respect to the applet's codebase. One of code or object	 * must be present.	 * 	 * 	 * 	 * @param code	 */	public void setCode(String code) {		this.code = code;	}		public String getCodeBase() {		return codeBase;	}		/**	 * 	 * This attribute specifies the base path used to resolve relative URIs	 * specified by the	 * 	 * classid, data, and archive attributes. When absent, its default value is	 * the base URI	 * 	 * of the current document.	 * 	 * 	 * 	 * @param codeBase	 */	public void setCodeBase(String codeBase) {		this.codeBase = codeBase;	}		public String getHeight() {		return height;	}		/**	 * 	 * The height of the element.	 * 	 * 	 * 	 * @param height	 */	public void setHeight(String height) {		this.height = height;	}		public String getHSpace() {		return hSpace;	}		/**	 * 	 * @deprecated This attribute specifies the amount of white space to be	 *             inserted to the left and	 * 	 *             right of an IMG, APPLET, or OBJECT. The default value is not	 *             specified, but is	 * 	 *             generally a small, non-zero length.	 * 	 * 	 * 	 * @param space	 */	public void setHSpace(String space) {		hSpace = space;	}		public String getName() {		return name;	}		/**	 * 	 * This attribute assigns the control name.	 * 	 * 	 * 	 * @param name	 */	public void setName(String name) {		this.name = name;	}		public String getObject() {		return object;	}		/**	 * 	 * This attribute names a resource containing a serialized representation of	 * an	 * 	 * applet's state. It is interpreted relative to the applet's codebase. The	 * serialized	 * 	 * data contains the applet's class name but not the implementation. The	 * class name is	 * 	 * used to retrieve the implementation from a class file or archive.	 * 	 * 	 * 	 * When the applet is "deserialized" the start() method is invoked but not	 * the init()	 * 	 * method. Attributes valid when the original object was serialized are not	 * restored.	 * 	 * Any attributes passed to this APPLET instance will be available to the	 * applet.	 * 	 * Authors should use this feature with extreme caution. An applet should be	 * stopped	 * 	 * before it is serialized.	 * 	 * 	 * 	 * Either code or object must be present. If both code and object are given,	 * it is an	 * 	 * error if they provide different class names.	 * 	 * 	 * 	 * @param object	 */	public void setObject(String object) {		this.object = object;	}		public String getVSpace() {		return vSpace;	}		/**	 * 	 * @deprecated This attribute specifies the amount of white space to be	 *             inserted above and below	 * 	 *             an IMG, APPLET, or OBJECT. The default value is not	 *             specified, but is generally	 * 	 *             a small, non-zero length.	 * 	 * 	 * 	 * @param space	 */	public void setVSpace(String space) {		vSpace = space;	}		public String getWidth() {		return width;	}		/**	 * 	 * This attribute specifies the initial width of the applet's display area	 * 	 * (excluding any windows or dialogs that the applet creates).	 * 	 * 	 * 	 * @param width	 */	public void setWidth(String width) {		this.width = width;	}		@Override	public String toString() {		return ElementParserHtml.getToStringOut(this);	}		public String getTag() {		return tag;	}}
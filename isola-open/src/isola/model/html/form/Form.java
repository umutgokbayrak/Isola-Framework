package isola.model.html.form;import isola.helpers.ElementParserHtml;import isola.helpers.JsGenerator;import isola.model.html.core.Container;/** *  *  *  * @author Umut Gokbayrak *  *  */public class Form extends Container {	private static final String tag = "form";	/**	 * 	 * This attribute specifies the list of character encodings for input data	 * that	 * 	 * is accepted by the server processing this form. The value is a space-	 * and/or	 * 	 * comma-delimited list of charset values. The client must interpret this	 * list	 * 	 * as an exclusive-or list, i.e., the server is able to accept any single	 * 	 * character encoding per entity received.	 * 	 * 	 * 	 * The default value for this attribute is the reserved string "UNKNOWN".	 * User	 * 	 * agents may interpret this value as the character encoding that was used	 * to	 * 	 * transmit the document containing this FORM element.	 */	private String acceptCharset;	/**	 * 	 * This attribute specifies a form processing agent. User agent behavior for	 * a	 * 	 * value other than an HTTP URI is undefined.	 */	private String action;	/**	 * 	 * This attribute specifies the content type used to submit the form to the	 * server	 * 	 * (when the value of method is "post"). The default value for this	 * attribute is	 * 	 * "application/x-www-form-urlencoded". The value "multipart/form-data"	 * should	 * 	 * be used in combination with the INPUT element, type="file".	 */	private String encType;	/**	 * 	 * This attribute specifies which HTTP method will be used to submit the	 * form data	 * 	 * set. Possible (case-insensitive) values are "get" (the default) and	 * "post".	 */	private String method;	/**	 * 	 * This attribute assigns the control name.	 */	private String name;	/**	 * 	 * The onreset event occurs when a form is reset. It only applies to the	 * FORM element.	 */	private String onReset;	/**	 * 	 * The onsubmit event occurs when a form is submitted. It only applies to	 * the FORM	 * 	 * element.	 */	private String onSubmit;	/**	 * 	 * This attribute specifies the name of a frame where a document is to be	 * opened.	 */	private String target;		public Form() {		super();		setId(tag + (Math.random() * 1000));	}		public Form(String id) {		super(id);	}		public Form(String id, String action, String method) {		super(id);		setAction(action);		setMethod(method);	}		public String getAcceptCharset() {		return acceptCharset;	}		/**	 * 	 * This attribute specifies the list of character encodings for input data	 * that	 * 	 * is accepted by the server processing this form. The value is a space-	 * and/or	 * 	 * comma-delimited list of charset values. The client must interpret this	 * list	 * 	 * as an exclusive-or list, i.e., the server is able to accept any single	 * 	 * character encoding per entity received.	 * 	 * 	 * 	 * The default value for this attribute is the reserved string "UNKNOWN".	 * User	 * 	 * agents may interpret this value as the character encoding that was used	 * to	 * 	 * transmit the document containing this FORM element.	 * 	 * 	 * 	 * @param acceptCharset	 */	public void setAcceptCharset(String acceptCharset) {		this.acceptCharset = acceptCharset;	}		public String getAction() {		return action;	}		/**	 * 	 * This attribute specifies a form processing agent. User agent behavior for	 * a	 * 	 * value other than an HTTP URI is undefined.	 * 	 * 	 * 	 * @param action	 */	public void setAction(String action) {		this.action = action;	}		public String getEncType() {		return encType;	}		/**	 * 	 * This attribute specifies the content type used to submit the form to the	 * server	 * 	 * (when the value of method is "post"). The default value for this	 * attribute is	 * 	 * "application/x-www-form-urlencoded". The value "multipart/form-data"	 * should	 * 	 * be used in combination with the INPUT element, type="file".	 * 	 * 	 * 	 * @param encType	 */	public void setEncType(String encType) {		this.encType = encType;	}		public String getMethod() {		return method;	}		/**	 * 	 * This attribute specifies which HTTP method will be used to submit the	 * form data	 * 	 * set. Possible (case-insensitive) values are "get" (the default) and	 * "post".	 * 	 * 	 * 	 * @param method	 */	public void setMethod(String method) {		this.method = method;	}		public String getName() {		return name;	}		/**	 * 	 * This attribute assigns the control name.	 * 	 * 	 * 	 * @param name	 */	public void setName(String name) {		this.name = name;	}		public String getOnReset() {		return onReset;	}		/**	 * 	 * The onreset event occurs when a form is reset. It only applies to the	 * FORM element.	 * 	 * 	 * 	 * @param onReset	 */	public void setOnReset(String onReset) {		this.onReset = onReset;	}		public String getOnSubmit() {		return onSubmit;	}		/**	 * 	 * The onsubmit event occurs when a form is submitted. It only applies to	 * the FORM	 * 	 * element.	 * 	 * 	 * 	 * @param onSubmit	 */	public void setOnSubmit(String onSubmit) {		this.onSubmit = onSubmit;	}		public String getTarget() {		return target;	}		/**	 * 	 * This attribute specifies the name of a frame where a document is to be	 * opened.	 * 	 * 	 * 	 * @param target	 */	public void setTarget(String target) {		this.target = target;	}		@Override	public String toString() {		return ElementParserHtml.getToStringOut(this);	}		public String getTag() {		return tag;	}		/**	 * 	 * Submits a form element	 * 	 * 	 * 	 * @throws Exception	 */	public void submit() throws Exception {		getJsOut().append(JsGenerator.submit(this.getId()));	}}
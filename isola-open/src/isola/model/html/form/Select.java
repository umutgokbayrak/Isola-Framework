package isola.model.html.form;import isola.helpers.ElementParserHtml;import isola.helpers.JsGenerator;import isola.model.html.core.Container;/** *  *  *  * @author Umut Gokbayrak *  *  */public class Select extends Container {	private static final String tag = "select";	/**	 * 	 * When set for a form control, this boolean attribute disables the control	 * for user input.	 */	private String disabled;	/**	 * 	 * If set, this boolean attribute allows multiple selections. If not set,	 * the SELECT	 * 	 * element only permits single selections.	 */	private String multiple;	/**	 * 	 * This attribute assigns the control name.	 */	private String name;	/**	 * 	 * The onblur event occurs when an element loses focus either by the	 * pointing device or	 * 	 * by tabbing navigation. It may be used with the same elements as onfocus.	 */	private String onBlur;	/**	 * 	 * The onchange event occurs when a control loses the input focus and its	 * value	 * 	 * has been modified since gaining focus. This attribute applies to the	 * following elements:	 * 	 * INPUT, SELECT, and TEXTAREA.	 */	private String onChange;	/**	 * 	 * The onfocus event occurs when an element receives focus either by the	 * pointing device	 * 	 * or by tabbing navigation. This attribute may be used with the following	 * elements:	 * 	 * A, AREA, LABEL, INPUT, SELECT, TEXTAREA, and BUTTON.	 */	private String onFocus;	/**	 * 	 * If a SELECT element is presented as a scrolled list box, this attribute	 * specifies the	 * 	 * number of rows in the list that should be visible at the same time.	 * Visual user agents	 * 	 * are not required to present a SELECT element as a list box; they may use	 * any other	 * 	 * mechanism, such as a drop-down menu.	 */	private String size;	/**	 * 	 * This attribute specifies the position of the current element in the	 * tabbing order	 * 	 * for the current document. This value must be a number between 0 and	 * 32767.	 * 	 * User agents should ignore leading zeros.	 */	private String tabIndex;		public Select() {		super();		setId(tag + (Math.random() * 1000));	}		public Select(String id) {		super(id);	}		public Select(String id, String name) {		super(id);		setName(name);	}		public String getDisabled() {		return disabled;	}		/**	 * 	 * When set for a form control, this boolean attribute disables the control	 * for user input.	 * 	 * 	 * 	 * @param disabled	 */	public void setDisabled(String disabled) {		this.disabled = disabled;	}		public String getMultiple() {		return multiple;	}		/**	 * 	 * If set, this boolean attribute allows multiple selections. If not set,	 * the SELECT	 * 	 * element only permits single selections.	 * 	 * 	 * 	 * @param multiple	 */	public void setMultiple(String multiple) {		this.multiple = multiple;	}		public String getName() {		return name;	}		/**	 * 	 * This attribute assigns the control name.	 * 	 * 	 * 	 * @param name	 */	public void setName(String name) {		this.name = name;	}		public String getOnBlur() {		return onBlur;	}		/**	 * 	 * The onblur event occurs when an element loses focus either by the	 * pointing device or	 * 	 * by tabbing navigation. It may be used with the same elements as onfocus.	 * 	 * 	 * 	 * @param onBlur	 */	public void setOnBlur(String onBlur) {		this.onBlur = onBlur;	}		public String getOnChange() {		return onChange;	}		/**	 * 	 * The onchange event occurs when a control loses the input focus and its	 * value	 * 	 * has been modified since gaining focus. This attribute applies to the	 * following elements:	 * 	 * INPUT, SELECT, and TEXTAREA.	 * 	 * 	 * 	 * @param onChange	 */	public void setOnChange(String onChange) {		this.onChange = onChange;	}		public String getOnFocus() {		return onFocus;	}		/**	 * 	 * The onfocus event occurs when an element receives focus either by the	 * pointing device	 * 	 * or by tabbing navigation. This attribute may be used with the following	 * elements:	 * 	 * A, AREA, LABEL, INPUT, SELECT, TEXTAREA, and BUTTON.	 * 	 * 	 * 	 * @param onFocus	 */	public void setOnFocus(String onFocus) {		this.onFocus = onFocus;	}		public String getSize() {		return size;	}		/**	 * 	 * If a SELECT element is presented as a scrolled list box, this attribute	 * specifies the	 * 	 * number of rows in the list that should be visible at the same time.	 * Visual user agents	 * 	 * are not required to present a SELECT element as a list box; they may use	 * any other	 * 	 * mechanism, such as a drop-down menu.	 * 	 * 	 * 	 * @param size	 */	public void setSize(String size) {		this.size = size;	}		public String getTabIndex() {		return tabIndex;	}		/**	 * 	 * This attribute specifies the position of the current element in the	 * tabbing order	 * 	 * for the current document. This value must be a number between 0 and	 * 32767.	 * 	 * User agents should ignore leading zeros.	 * 	 * 	 * 	 * @param tabIndex	 */	public void setTabIndex(String tabIndex) {		this.tabIndex = tabIndex;	}		@Override	public String toString() {		return ElementParserHtml.getToStringOut(this);	}		public String getTag() {		return tag;	}		/**	 * 	 * To set the focus on the element. It will only work for form input	 * elements.	 * 	 * 	 * 	 * @param elementId	 * 	 * @throws Exception	 */	public void focus() throws Exception {		getJsOut().append(JsGenerator.focus(this.getId()));	}}
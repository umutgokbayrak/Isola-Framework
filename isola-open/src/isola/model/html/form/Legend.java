package isola.model.html.form;import isola.helpers.ElementParserHtml;import isola.model.html.core.Container;import isola.model.html.core.TextNode;/** *  *  *  * @author Umut Gokbayrak *  *  */public class Legend extends Container {	private static final String tag = "legend";	/**	 * 	 * This attribute assigns an access key to an element. An access key is a	 * single	 * 	 * character from the document character set. Note. Authors should consider	 * the	 * 	 * input method of the expected reader when specifying an accesskey.	 * 	 * 	 * 	 * This example assigns the access key "U" to a label associated with an	 * INPUT control.	 * 	 * Typing the access key gives focus to the label which in turn gives it to	 * the	 * 	 * associated control. The user may then enter text into the INPUT area.	 * 	 * 	 * 	 * <code>	 * <FORM action="..." method="post">	 * <P>	 * <LABEL for="fuser" accesskey="U">User Name</LABEL>	 * <INPUT type="text" name="user" id="fuser">	 * </P>
	 * </FORM>	 */	private String accessKey;	/**	 * 	 * @deprecated This attribute specifies the position of an IMG, OBJECT, or	 *             APPLET with respect to its context.	 * 	 *             The following values for align concern the object's position	 *             with respect to surrounding text:	 * 	 *             <ul>	 * 	 *             <li>bottom: means that the bottom of the object should be	 *             vertically aligned with	 * 	 *             the current baseline. This is the default value.</li>	 * 	 *             <li>middle: means that the center of the object should be	 *             vertically aligned with	 * 	 *             the current baseline.</li>	 * 	 *             <li>top: means that the top of the object should be	 *             vertically aligned with the	 * 	 *             top of the current text line.</li>	 * 	 *             </ul>	 * 	 * 	 * 	 *             Two other values, left and right, cause the image to float to	 *             the current left or right margin.	 */	private String align;		public Legend() {		super();	}		public Legend(String id) {		super(id);	}		public Legend(String id, String value) {		super(id);		addChild(new TextNode(value));	}		public String getAccessKey() {		return accessKey;	}		/**	 * 	 * This attribute assigns an access key to an element. An access key is a	 * single	 * 	 * character from the document character set. Note. Authors should consider	 * the	 * 	 * input method of the expected reader when specifying an accesskey.	 * 	 * 	 * 	 * This example assigns the access key "U" to a label associated with an	 * INPUT control.	 * 	 * Typing the access key gives focus to the label which in turn gives it to	 * the	 * 	 * associated control. The user may then enter text into the INPUT area.	 * 	 * 	 * 	 * <code>	 * 	 * <FORM action="..." method="post">	 * 	 * <P>	 * 	 * <LABEL for="fuser" accesskey="U">User Name</LABEL>	 * 	 * <INPUT type="text" name="user" id="fuser">	 * 	 * </P>	 * 	 * </FORM>	 * 	 * 	 * 	 * @param accessKey	 */	public void setAccessKey(String accessKey) {		this.accessKey = accessKey;	}		public String getAlign() {		return align;	}		/**	 * 	 * @deprecated This attribute specifies the position of an IMG, OBJECT, or	 *             APPLET with respect to its context.	 * 	 *             The following values for align concern the object's position	 *             with respect to surrounding text:	 * 	 *             <ul>	 * 	 *             <li>bottom: means that the bottom of the object should be	 *             vertically aligned with	 * 	 *             the current baseline. This is the default value.</li>	 * 	 *             <li>middle: means that the center of the object should be	 *             vertically aligned with	 * 	 *             the current baseline.</li>	 * 	 *             <li>top: means that the top of the object should be	 *             vertically aligned with the	 * 	 *             top of the current text line.</li>	 * 	 *             </ul>	 * 	 * 	 * 	 *             Two other values, left and right, cause the image to float to	 *             the current left or right margin.	 * 	 * 	 * 	 * @param align	 */	public void setAlign(String align) {		this.align = align;	}		@Override	public String toString() {		return ElementParserHtml.getToStringOut(this);	}		public String getTag() {		return tag;	}}
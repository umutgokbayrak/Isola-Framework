package isola.model.html.form;import isola.helpers.ElementParserHtml;import isola.helpers.JsGenerator;import isola.model.html.core.Container;/** *  *  *  * @author Umut Gokbayrak *  *  */public class TextArea extends Container {	private static final String tag = "textarea";	/**	 * 	 * This attribute assigns an access key to an element. An access key is a	 * single	 * 	 * character from the document character set. Note. Authors should consider	 * the	 * 	 * input method of the expected reader when specifying an accesskey.	 * 	 * 	 * 	 * This example assigns the access key "U" to a label associated with an	 * INPUT control.	 * 	 * Typing the access key gives focus to the label which in turn gives it to	 * the	 * 	 * associated control. The user may then enter text into the INPUT area.	 * 	 * 	 * 	 * <code>	 * <FORM action="..." method="post">	 * <P>	 * <LABEL for="fuser" accesskey="U">User Name</LABEL>	 * <INPUT type="text" name="user" id="fuser">	 * </P>
	 * </FORM>	 */	private String accessKey;	/**	 * 	 * This attribute specifies the visible width in average character widths.	 * Users should be	 * 	 * able to enter longer lines than this, so user agents should provide some	 * means to	 * 	 * scroll through the contents of the control when the contents extend	 * beyond the visible	 * 	 * area. User agents may wrap visible text lines to keep long lines visible	 * without the	 * 	 * need for scrolling.	 */	private String cols;	/**	 * 	 * When set for a form control, this boolean attribute disables the control	 * for user input.	 */	private String disabled;	/**	 * 	 * This attribute assigns the control name.	 */	private String name;	/**	 * 	 * The onblur event occurs when an element loses focus either by the	 * pointing device or	 * 	 * by tabbing navigation. It may be used with the same elements as onfocus.	 */	private String onBlur;	/**	 * 	 * The onchange event occurs when a control loses the input focus and its	 * value	 * 	 * has been modified since gaining focus. This attribute applies to the	 * following elements:	 * 	 * INPUT, SELECT, and TEXTAREA.	 */	private String onChange;	/**	 * 	 * The onfocus event occurs when an element receives focus either by the	 * pointing device	 * 	 * or by tabbing navigation. This attribute may be used with the following	 * elements:	 * 	 * A, AREA, LABEL, INPUT, SELECT, TEXTAREA, and BUTTON.	 */	private String onFocus;	/**	 * 	 * When set for a form control, this boolean attribute prohibits changes to	 * the control.	 */	private String readOnly;	/**	 * 	 * This attribute specifies the layout of horizontal frames. It is a	 * 	 * comma-separated list of pixels, percentages, and relative lengths. The	 * default	 * 	 * value is 100%, meaning one row.	 */	private String rows;	/**	 * 	 * This attribute specifies the position of the current element in the	 * tabbing order	 * 	 * for the current document. This value must be a number between 0 and	 * 32767.	 * 	 * User agents should ignore leading zeros.	 */	private String tabIndex;		public TextArea() {		super();		setId(tag + (Math.random() * 1000));	}		public TextArea(String id) {		super(id);	}		public TextArea(String id, String name, String cols, String rows) {		super(id);		setName(name);		setCols(cols);		setRows(rows);	}		public String getAccessKey() {		return accessKey;	}		/**	 * 	 * This attribute assigns an access key to an element. An access key is a	 * single	 * 	 * character from the document character set. Note. Authors should consider	 * the	 * 	 * input method of the expected reader when specifying an accesskey.	 * 	 * 	 * 	 * This example assigns the access key "U" to a label associated with an	 * INPUT control.	 * 	 * Typing the access key gives focus to the label which in turn gives it to	 * the	 * 	 * associated control. The user may then enter text into the INPUT area.	 * 	 * 	 * 	 * <code>	 * 	 * <FORM action="..." method="post">	 * 	 * <P>	 * 	 * <LABEL for="fuser" accesskey="U">User Name</LABEL>	 * 	 * <INPUT type="text" name="user" id="fuser">	 * 	 * </P>	 * 	 * </FORM>	 * 	 * 	 * 	 * @param accessKey	 */	public void setAccessKey(String accessKey) {		this.accessKey = accessKey;	}		public String getCols() {		return cols;	}		/**	 * 	 * This attribute specifies the visible width in average character widths.	 * Users should be	 * 	 * able to enter longer lines than this, so user agents should provide some	 * means to	 * 	 * scroll through the contents of the control when the contents extend	 * beyond the visible	 * 	 * area. User agents may wrap visible text lines to keep long lines visible	 * without the	 * 	 * need for scrolling.	 * 	 * 	 * 	 * @param cols	 */	public void setCols(String cols) {		this.cols = cols;	}		public String getDisabled() {		return disabled;	}		/**	 * 	 * When set for a form control, this boolean attribute disables the control	 * for user input.	 * 	 * 	 * 	 * @param disabled	 */	public void setDisabled(String disabled) {		this.disabled = disabled;	}		public String getName() {		return name;	}		/**	 * 	 * This attribute assigns the control name.	 * 	 * 	 * 	 * @param name	 */	public void setName(String name) {		this.name = name;	}		public String getOnBlur() {		return onBlur;	}		/**	 * 	 * The onblur event occurs when an element loses focus either by the	 * pointing device or	 * 	 * by tabbing navigation. It may be used with the same elements as onfocus.	 * 	 * 	 * 	 * @param onBlur	 */	public void setOnBlur(String onBlur) {		this.onBlur = onBlur;	}		public String getOnChange() {		return onChange;	}		/**	 * 	 * The onchange event occurs when a control loses the input focus and its	 * value	 * 	 * has been modified since gaining focus. This attribute applies to the	 * following elements:	 * 	 * INPUT, SELECT, and TEXTAREA.	 * 	 * 	 * 	 * @param onChange	 */	public void setOnChange(String onChange) {		this.onChange = onChange;	}		public String getOnFocus() {		return onFocus;	}		/**	 * 	 * The onfocus event occurs when an element receives focus either by the	 * pointing device	 * 	 * or by tabbing navigation. This attribute may be used with the following	 * elements:	 * 	 * A, AREA, LABEL, INPUT, SELECT, TEXTAREA, and BUTTON.	 * 	 * 	 * 	 * @param onFocus	 */	public void setOnFocus(String onFocus) {		this.onFocus = onFocus;	}		public String getReadOnly() {		return readOnly;	}		/**	 * 	 * When set for a form control, this boolean attribute prohibits changes to	 * the control.	 * 	 * 	 * 	 * @param readOnly	 */	public void setReadOnly(String readOnly) {		this.readOnly = readOnly;	}		public String getRows() {		return rows;	}		/**	 * 	 * This attribute specifies the layout of horizontal frames. It is a	 * 	 * comma-separated list of pixels, percentages, and relative lengths. The	 * default	 * 	 * value is 100%, meaning one row.	 * 	 * 	 * 	 * @param rows	 */	public void setRows(String rows) {		this.rows = rows;	}		public String getTabIndex() {		return tabIndex;	}		/**	 * 	 * This attribute specifies the position of the current element in the	 * tabbing order	 * 	 * for the current document. This value must be a number between 0 and	 * 32767.	 * 	 * User agents should ignore leading zeros.	 * 	 * 	 * 	 * @param tabIndex	 */	public void setTabIndex(String tabIndex) {		this.tabIndex = tabIndex;	}		@Override	public String toString() {		return ElementParserHtml.getToStringOut(this);	}		public String getTag() {		return tag;	}		/**	 * 	 * To set the focus on the element. It will only work for form input	 * elements.	 * 	 * 	 * 	 * @param elementId	 * 	 * @throws Exception	 */	public void focus() throws Exception {		getJsOut().append(JsGenerator.focus(this.getId()));	}}
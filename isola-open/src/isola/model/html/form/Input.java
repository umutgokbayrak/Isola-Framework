package isola.model.html.form;import isola.helpers.ElementParserHtml;import isola.helpers.JsGenerator;import isola.model.html.core.Container;/** *  *  *  * @author Umut Gokbayrak *  *  */public class Input extends Container {	private static final String tag = "input";	/**	 * 	 * This attribute specifies a comma-separated list of mime types that a	 * 	 * server processing this form will handle correctly. User agents may use	 * 	 * this information to filter out non-conforming files when prompting a	 * 	 * user to select files to be sent to the server (cf. the INPUT element	 * 	 * when type="file").	 */	private String accept;	/**	 * 	 * This attribute assigns an access key to an element. An access key is a	 * single	 * 	 * character from the document character set. Note. Authors should consider	 * the	 * 	 * input method of the expected reader when specifying an accesskey.	 * 	 * 	 * 	 * This example assigns the access key "U" to a label associated with an	 * INPUT control.	 * 	 * Typing the access key gives focus to the label which in turn gives it to	 * the	 * 	 * associated control. The user may then enter text into the INPUT area.	 * 	 * 	 * 	 * <code>	 * <FORM action="..." method="post">	 * <P>	 * <LABEL for="fuser" accesskey="U">User Name</LABEL>	 * <INPUT type="text" name="user" id="fuser">	 * </P>
	 * </FORM>	 */	private String accessKey;	/**	 * 	 * @deprecated This attribute specifies the position of an IMG, OBJECT, or	 *             APPLET with respect to its context.	 * 	 *             The following values for align concern the object's position	 *             with respect to surrounding text:	 * 	 *             <ul>	 * 	 *             <li>bottom: means that the bottom of the object should be	 *             vertically aligned with	 * 	 *             the current baseline. This is the default value.</li>	 * 	 *             <li>middle: means that the center of the object should be	 *             vertically aligned with	 * 	 *             the current baseline.</li>	 * 	 *             <li>top: means that the top of the object should be	 *             vertically aligned with the	 * 	 *             top of the current text line.</li>	 * 	 *             </ul>	 * 	 * 	 * 	 *             Two other values, left and right, cause the image to float to	 *             the current left or right margin.	 */	private String align;	/**	 * 	 * For user agents that cannot display images, forms, or applets, this	 * attribute specifies	 * 	 * alternate text. The language of the alternate text is specified by the	 * lang attribute.	 */	private String alt;	/**	 * 	 * When the type attribute has the value "radio" or "checkbox", this boolean	 * attribute specifies	 * 	 * that the button is on. User agents must ignore this attribute for other	 * control types.	 */	private String checked;	/**	 * 	 * When set for a form control, this boolean attribute disables the control	 * for user input.	 */	private String disabled;	/**	 * 	 * When the type attribute has the value "text" or "password", this	 * attribute specifies the	 * 	 * maximum number of characters the user may enter. This number may exceed	 * the specified	 * 	 * size, in which case the user agent should offer a scrolling mechanism.	 * The default value	 * 	 * for this attribute is an unlimited number.	 */	private String maxLength;	/**	 * 	 * This attribute assigns the control name.	 */	private String name;	/**	 * 	 * The onblur event occurs when an element loses focus either by the	 * pointing device or	 * 	 * by tabbing navigation. It may be used with the same elements as onfocus.	 */	private String onBlur;	/**	 * 	 * The onchange event occurs when a control loses the input focus and its	 * value	 * 	 * has been modified since gaining focus. This attribute applies to the	 * following elements:	 * 	 * INPUT, SELECT, and TEXTAREA.	 */	private String onChange;	/**	 * 	 * The onfocus event occurs when an element receives focus either by the	 * pointing device	 * 	 * or by tabbing navigation. This attribute may be used with the following	 * elements:	 * 	 * A, AREA, LABEL, INPUT, SELECT, TEXTAREA, and BUTTON.	 */	private String onFocus;	/**	 * 	 * The onselect event occurs when a user selects some text in a text field.	 * This attribute	 * 	 * may be used with the INPUT and TEXTAREA elements.	 */	private String onSelect;	/**	 * 	 * When set for a form control, this boolean attribute prohibits changes to	 * the control.	 */	private String readOnly;	/**	 * 	 * This attribute tells the user agent the initial width of the control. The	 * width is	 * 	 * given in pixels except when type attribute has the value "text" or	 * "password". In that	 * 	 * case, its value refers to the (integer) number of characters.	 */	private String size;	/**	 * 	 * When the type attribute has the value "image", this attribute specifies	 * the location	 * 	 * of the image to be used to decorate the graphical submit button.	 */	private String src;	/**	 * 	 * This attribute specifies the position of the current element in the	 * tabbing order	 * 	 * for the current document. This value must be a number between 0 and	 * 32767.	 * 	 * User agents should ignore leading zeros.	 */	private String tabIndex;	/**	 * 	 * This attribute specifies the type of control to create. The default value	 * for this	 * 	 * attribute is "text".	 */	private String type;	/**	 * 	 * This attribute associates an image map with an element. The image map is	 * defined	 * 	 * by a MAP element. The value of usemap must match the value of the name	 * attribute	 * 	 * of the associated MAP element.	 */	private String useMap;	/**	 * 	 * This attribute specifies the initial value of the control. It is optional	 * except	 * 	 * when the type attribute has the value "radio" or "checkbox".	 */	private String value;		public Input() {		super();		setId(tag + (Math.random() * 1000));	}		public Input(String id) {		super(id);	}		public Input(String id, String name, String type) {		super(id);		setName(name);		setType(type);	}		public String getAccept() {		return accept;	}		/**	 * 	 * This attribute specifies a comma-separated list of mime types that a	 * 	 * server processing this form will handle correctly. User agents may use	 * 	 * this information to filter out non-conforming files when prompting a	 * 	 * user to select files to be sent to the server (cf. the INPUT element	 * 	 * when type="file").	 * 	 * 	 * 	 * @param accept	 */	public void setAccept(String accept) {		this.accept = accept;	}		public String getAccessKey() {		return accessKey;	}		/**	 * 	 * This attribute assigns an access key to an element. An access key is a	 * single	 * 	 * character from the document character set. Note. Authors should consider	 * the	 * 	 * input method of the expected reader when specifying an accesskey.	 * 	 * 	 * 	 * This example assigns the access key "U" to a label associated with an	 * INPUT control.	 * 	 * Typing the access key gives focus to the label which in turn gives it to	 * the	 * 	 * associated control. The user may then enter text into the INPUT area.	 * 	 * 	 * 	 * <code>	 * 	 * <FORM action="..." method="post">	 * 	 * <P>	 * 	 * <LABEL for="fuser" accesskey="U">User Name</LABEL>	 * 	 * <INPUT type="text" name="user" id="fuser">	 * 	 * </P>	 * 	 * </FORM>	 * 	 * 	 * 	 * @param accessKey	 */	public void setAccessKey(String accessKey) {		this.accessKey = accessKey;	}		public String getAlign() {		return align;	}		/**	 * 	 * @deprecated This attribute specifies the position of an IMG, OBJECT, or	 *             APPLET with respect to its context.	 * 	 *             The following values for align concern the object's position	 *             with respect to surrounding text:	 * 	 *             <ul>	 * 	 *             <li>bottom: means that the bottom of the object should be	 *             vertically aligned with	 * 	 *             the current baseline. This is the default value.</li>	 * 	 *             <li>middle: means that the center of the object should be	 *             vertically aligned with	 * 	 *             the current baseline.</li>	 * 	 *             <li>top: means that the top of the object should be	 *             vertically aligned with the	 * 	 *             top of the current text line.</li>	 * 	 *             </ul>	 * 	 * 	 * 	 *             Two other values, left and right, cause the image to float to	 *             the current left or right margin.	 * 	 * 	 * 	 * @param align	 */	public void setAlign(String align) {		this.align = align;	}		public String getAlt() {		return alt;	}		/**	 * 	 * For user agents that cannot display images, forms, or applets, this	 * attribute specifies	 * 	 * alternate text. The language of the alternate text is specified by the	 * lang attribute.	 * 	 * 	 * 	 * @param alt	 */	public void setAlt(String alt) {		this.alt = alt;	}		public String getChecked() {		return checked;	}		/**	 * 	 * When the type attribute has the value "radio" or "checkbox", this boolean	 * attribute specifies	 * 	 * that the button is on. User agents must ignore this attribute for other	 * control types.	 * 	 * 	 * 	 * @param checked	 */	public void setChecked(String checked) {		this.checked = checked;	}		public String getDisabled() {		return disabled;	}		/**	 * 	 * When set for a form control, this boolean attribute disables the control	 * for user input.	 * 	 * 	 * 	 * @param disabled	 */	public void setDisabled(String disabled) {		this.disabled = disabled;	}		public String getMaxLength() {		return maxLength;	}		/**	 * 	 * When the type attribute has the value "text" or "password", this	 * attribute specifies the	 * 	 * maximum number of characters the user may enter. This number may exceed	 * the specified	 * 	 * size, in which case the user agent should offer a scrolling mechanism.	 * The default value	 * 	 * for this attribute is an unlimited number.	 * 	 * 	 * 	 * @param maxLength	 */	public void setMaxLength(String maxLength) {		this.maxLength = maxLength;	}		public String getName() {		return name;	}		/**	 * 	 * This attribute assigns the control name.	 * 	 * 	 * 	 * @param name	 */	public void setName(String name) {		this.name = name;	}		public String getOnBlur() {		return onBlur;	}		/**	 * 	 * The onblur event occurs when an element loses focus either by the	 * pointing device or	 * 	 * by tabbing navigation. It may be used with the same elements as onfocus.	 * 	 * 	 * 	 * @param onBlur	 */	public void setOnBlur(String onBlur) {		this.onBlur = onBlur;	}		public String getOnChange() {		return onChange;	}		/**	 * 	 * The onchange event occurs when a control loses the input focus and its	 * value	 * 	 * has been modified since gaining focus. This attribute applies to the	 * following elements:	 * 	 * INPUT, SELECT, and TEXTAREA.	 * 	 * 	 * 	 * @param onChange	 */	public void setOnChange(String onChange) {		this.onChange = onChange;	}		public String getOnFocus() {		return onFocus;	}		/**	 * 	 * The onfocus event occurs when an element receives focus either by the	 * pointing device	 * 	 * or by tabbing navigation. This attribute may be used with the following	 * elements:	 * 	 * A, AREA, LABEL, INPUT, SELECT, TEXTAREA, and BUTTON.	 * 	 * 	 * 	 * @param onFocus	 */	public void setOnFocus(String onFocus) {		this.onFocus = onFocus;	}		public String getOnSelect() {		return onSelect;	}		/**	 * 	 * The onselect event occurs when a user selects some text in a text field.	 * This attribute	 * 	 * may be used with the INPUT and TEXTAREA elements.	 * 	 * 	 * 	 * @param onSelect	 */	public void setOnSelect(String onSelect) {		this.onSelect = onSelect;	}		public String getReadOnly() {		return readOnly;	}		/**	 * 	 * When set for a form control, this boolean attribute prohibits changes to	 * the control.	 * 	 * 	 * 	 * @param readOnly	 */	public void setReadOnly(String readOnly) {		this.readOnly = readOnly;	}		public String getSize() {		return size;	}		/**	 * 	 * This attribute tells the user agent the initial width of the control. The	 * width is	 * 	 * given in pixels except when type attribute has the value "text" or	 * "password". In that	 * 	 * case, its value refers to the (integer) number of characters.	 * 	 * 	 * 	 * @param size	 */	public void setSize(String size) {		this.size = size;	}		public String getSrc() {		return src;	}		/**	 * 	 * When the type attribute has the value "image", this attribute specifies	 * the location	 * 	 * of the image to be used to decorate the graphical submit button.	 * 	 * 	 * 	 * @param src	 */	public void setSrc(String src) {		this.src = src;	}		public String getTabIndex() {		return tabIndex;	}		/**	 * 	 * This attribute specifies the position of the current element in the	 * tabbing order	 * 	 * for the current document. This value must be a number between 0 and	 * 32767.	 * 	 * User agents should ignore leading zeros.	 * 	 * 	 * 	 * @param tabIndex	 */	public void setTabIndex(String tabIndex) {		this.tabIndex = tabIndex;	}		public String getType() {		return type;	}		/**	 * 	 * This attribute specifies the type of control to create. The default value	 * for this	 * 	 * attribute is "text".	 * 	 * 	 * 	 * @param type	 */	public void setType(String type) {		this.type = type;	}		public String getUseMap() {		return useMap;	}		/**	 * 	 * This attribute associates an image map with an element. The image map is	 * defined	 * 	 * by a MAP element. The value of usemap must match the value of the name	 * attribute	 * 	 * of the associated MAP element.	 * 	 * 	 * 	 * @param useMap	 */	public void setUseMap(String useMap) {		this.useMap = useMap;	}		public String getValue() {		return value;	}		/**	 * 	 * This attribute specifies the initial value of the control. It is optional	 * except	 * 	 * when the type attribute has the value "radio" or "checkbox".	 * 	 * 	 * 	 * @param value	 */	public void setValue(String value) {		this.value = value;	}		@Override	public String toString() {		return ElementParserHtml.getToStringOut(this);	}		public String getTag() {		return tag;	}		/**	 * 	 * To set the focus on the element. It will only work for form input	 * elements.	 * 	 * 	 * 	 * @param elementId	 * 	 * @throws Exception	 */	public void focus() throws Exception {		getJsOut().append(JsGenerator.focus(this.getId()));	}}
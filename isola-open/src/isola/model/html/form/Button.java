package isola.model.html.form;import isola.helpers.ElementParserHtml;import isola.helpers.JsGenerator;import isola.model.html.core.Container;/** *  *  *  * @author Umut Gokbayrak *  *  */public class Button extends Container {	private static final String tag = "button";	/**	 * 	 * This attribute assigns an access key to an element. An access key is a	 * single	 * 	 * character from the document character set. Note. Authors should consider	 * the	 * 	 * input method of the expected reader when specifying an accesskey.	 * 	 * 	 * 	 * This example assigns the access key "U" to a label associated with an	 * INPUT control.	 * 	 * Typing the access key gives focus to the label which in turn gives it to	 * the	 * 	 * associated control. The user may then enter text into the INPUT area.	 * 	 * 	 * 	 * <code>	 * <FORM action="..." method="post">	 * <P>	 * <LABEL for="fuser" accesskey="U">User Name</LABEL>	 * <INPUT type="text" name="user" id="fuser">	 * </P>
	 * </FORM>	 * 	 * 	 */	private String accessKey;	/**	 * 	 * When set for a form control, this boolean attribute disables the control	 * for user input.	 */	private String disabled;	/**	 * 	 * This attribute assigns the control name.	 */	private String name;	/**	 * 	 * The onblur event occurs when an element loses focus either by the	 * pointing device or	 * 	 * by tabbing navigation. It may be used with the same elements as onfocus.	 */	private String onBlur;	/**	 * 	 * The onfocus event occurs when an element receives focus either by the	 * pointing device	 * 	 * or by tabbing navigation. This attribute may be used with the following	 * elements:	 * 	 * A, AREA, LABEL, INPUT, SELECT, TEXTAREA, and BUTTON.	 */	private String onFocus;	/**	 * 	 * This attribute specifies the position of the current element in the	 * tabbing order	 * 	 * for the current document. This value must be a number between 0 and	 * 32767.	 * 	 * User agents should ignore leading zeros.	 */	private String tabIndex;	/**	 * 	 * This attribute declares the type of the button. Possible values:	 * 	 * <ul>	 * 	 * <li>submit: Creates a submit button. This is the default value.</li>	 * 	 * <li>reset: Creates a reset button.</li>	 * 	 * <li>button: Creates a push button.</li>	 * 	 * </ul>	 */	private String type;	/**	 * 	 * This attribute assigns the initial value to the button.	 */	private String value;		public Button() {		super();		setId(tag + (Math.random() * 1000));	}		public Button(String id) {		super(id);	}		public Button(String id, String name, String type, String value) {		super(id);		setName(name);		setType(type);		setValue(value);	}		public String getAccessKey() {		return accessKey;	}		/**	 * 	 * This attribute assigns an access key to an element. An access key is a	 * single	 * 	 * character from the document character set. Note. Authors should consider	 * the	 * 	 * input method of the expected reader when specifying an accesskey.	 * 	 * 	 * 	 * This example assigns the access key "U" to a label associated with an	 * INPUT control.	 * 	 * Typing the access key gives focus to the label which in turn gives it to	 * the	 * 	 * associated control. The user may then enter text into the INPUT area.	 * 	 * 	 * 	 * <code>	 * 	 * <FORM action="..." method="post">	 * 	 * <P>	 * 	 * <LABEL for="fuser" accesskey="U">User Name</LABEL>	 * 	 * <INPUT type="text" name="user" id="fuser">	 * 	 * </P>	 * 	 * </FORM>	 * 	 * 	 * 	 * @param accessKey	 */	public void setAccessKey(String accessKey) {		this.accessKey = accessKey;	}		public String getDisabled() {		return disabled;	}		/**	 * 	 * When set for a form control, this boolean attribute disables the control	 * for user input.	 * 	 * 	 * 	 * @param disabled	 */	public void setDisabled(String disabled) {		this.disabled = disabled;	}		public String getName() {		return name;	}		/**	 * 	 * This attribute assigns the control name.	 * 	 * 	 * 	 * @param name	 */	public void setName(String name) {		this.name = name;	}		public String getOnBlur() {		return onBlur;	}		/**	 * 	 * The onblur event occurs when an element loses focus either by the	 * pointing device or	 * 	 * by tabbing navigation. It may be used with the same elements as onfocus.	 * 	 * 	 * 	 * @param onBlur	 */	public void setOnBlur(String onBlur) {		this.onBlur = onBlur;	}		public String getOnFocus() {		return onFocus;	}		/**	 * 	 * The onfocus event occurs when an element receives focus either by the	 * pointing device	 * 	 * or by tabbing navigation. This attribute may be used with the following	 * elements:	 * 	 * A, AREA, LABEL, INPUT, SELECT, TEXTAREA, and BUTTON.	 * 	 * 	 * 	 * @param onFocus	 */	public void setOnFocus(String onFocus) {		this.onFocus = onFocus;	}		public String getTabIndex() {		return tabIndex;	}		/**	 * 	 * This attribute specifies the position of the current element in the	 * tabbing order	 * 	 * for the current document. This value must be a number between 0 and	 * 32767.	 * 	 * User agents should ignore leading zeros.	 * 	 * 	 * 	 * @param tabIndex	 */	public void setTabIndex(String tabIndex) {		this.tabIndex = tabIndex;	}		public String getType() {		return type;	}		/**	 * 	 * This attribute declares the type of the button. Possible values:	 * 	 * <ul>	 * 	 * <li>submit: Creates a submit button. This is the default value.</li>	 * 	 * <li>reset: Creates a reset button.</li>	 * 	 * <li>button: Creates a push button.</li>	 * 	 * </ul>	 * 	 * 	 * 	 * @param type	 */	public void setType(String type) {		this.type = type;	}		public String getValue() {		return value;	}		/**	 * 	 * This attribute assigns the initial value to the button.	 * 	 * 	 * 	 * @param value	 */	public void setValue(String value) {		this.value = value;	}		@Override	public String toString() {		return ElementParserHtml.getToStringOut(this);	}		public String getTag() {		return tag;	}		/**	 * 	 * To set the focus on the element. It will only work for form input	 * elements.	 * 	 * 	 * 	 * @param elementId	 * 	 * @throws Exception	 */	public void focus() throws Exception {		getJsOut().append(JsGenerator.focus(this.getId()));	}}
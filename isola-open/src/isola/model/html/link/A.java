package isola.model.html.link;import isola.constants.MimeTypes;import isola.helpers.ElementParserHtml;import isola.helpers.JsGenerator;import isola.model.html.core.Container;/** *  *  *  * @author Umut Gokbayrak *  *  */public class A extends Container {	private static final String tag = "a";	/**	 * 	 * This attribute assigns an access key to an element. An access key is a	 * single	 * 	 * character from the document character set. Note. Authors should consider	 * the	 * 	 * input method of the expected reader when specifying an accesskey.	 * 	 * 	 * 	 * This example assigns the access key "U" to a label associated with an	 * INPUT control.	 * 	 * Typing the access key gives focus to the label which in turn gives it to	 * the	 * 	 * associated control. The user may then enter text into the INPUT area.	 * 	 * 	 * 	 * <code>	 * <FORM action="..." method="post">	 * <P>	 * <LABEL for="fuser" accesskey="U">User Name</LABEL>	 * <INPUT type="text" name="user" id="fuser">	 * </P>
	 * </FORM>	 */	private String accessKey;	/**	 * 	 * This attribute specifies the character encoding of the resource	 * designated by the link.	 */	private String charset;	/**	 * 	 * This attribute specifies the position and shape on the screen. The number	 * and order of	 * 	 * values depends on the shape being defined. Possible combinations:	 * 	 * <ul>	 * 	 * <li>rect: left-x, top-y, right-x, bottom-y.</li>	 * 	 * <li>circle: center-x, center-y, radius. Note. When the radius value is a	 * percentage value,	 * 	 * user agents should calculate the final radius value based on the	 * associated object's	 * 	 * width and height. The radius should be the smaller value of the two.</li>	 * 	 * <li>poly: x1, y1, x2, y2, ..., xN, yN. The first x and y coordinate pair	 * and the last	 * 	 * should be the same to close the polygon. When these coordinate values are	 * not the same,	 * 	 * user agents should infer an additional coordinate pair to close the	 * polygon.</li>	 * 	 * </ul>	 * 	 * 	 * 	 * Coordinates are relative to the top, left corner of the object. All	 * values are lengths.	 * 	 * All values are separated by commas.	 */	private String coords;	/**	 * 	 * This attribute specifies the location of a Web resource, thus defining a	 * link between	 * 	 * the current element (the source anchor) and the destination anchor	 * defined by	 * 	 * this attribute.	 */	private String href;	/**	 * 	 * This attribute specifies the base language of the resource designated by	 * href and may	 * 	 * only be used when href is specified.	 */	private String hrefLang;	/**	 * 	 * This attribute assigns the control name.	 */	private String name;	/**	 * 	 * The onblur event occurs when an element loses focus either by the	 * pointing device or	 * 	 * by tabbing navigation. It may be used with the same elements as onfocus.	 */	private String onBlur;	/**	 * 	 * The onfocus event occurs when an element receives focus either by the	 * pointing device	 * 	 * or by tabbing navigation. This attribute may be used with the following	 * elements:	 * 	 * A, AREA, LABEL, INPUT, SELECT, TEXTAREA, and BUTTON.	 */	private String onFocus;	/**	 * 	 * This attribute describes the relationship from the current document to	 * the anchor	 * 	 * specified by the href attribute. The value of this attribute is a	 * space-separated	 * 	 * list of link types.	 */	private String rel;	/**	 * 	 * This attribute is used to describe a reverse link from the anchor	 * specified by the	 * 	 * href attribute to the current document. The value of this attribute is a	 * 	 * space-separated list of link types.	 */	private String rev;	/**	 * 	 * This attribute specifies the shape of a region. Possible values:	 * 	 * <ul>	 * 	 * <li>default: Specifies the entire region.</li>	 * 	 * <li>rect: Define a rectangular region.</li>	 * 	 * <li>circle: Define a circular region.</li>	 * 	 * <li>poly: Define a polygonal region.</li>	 * 	 * </ul>	 */	private String shape;	/**	 * 	 * This attribute specifies the position of the current element in the	 * tabbing order	 * 	 * for the current document. This value must be a number between 0 and	 * 32767.	 * 	 * User agents should ignore leading zeros.	 */	private String tabIndex;	/**	 * 	 * This attribute specifies the name of a frame where a document is to be	 * opened.	 */	private String target;	/**	 * 	 * This attribute gives an advisory hint as to the content type of the	 * content	 * 	 * available at the link target address. It allows user agents to opt to use	 * a	 * 	 * fallback mechanism rather than fetch the content if they are advised that	 * 	 * they will get content in a content type they do not support.	 * 	 * 	 * 	 * Authors who use this attribute take responsibility to manage the risk	 * that	 * 	 * it may become inconsistent with the content available at the link target	 * 	 * address.	 * 	 * 	 * 	 * For the current list of registered content types, please consult	 * [MIMETYPES].	 * 	 * 	 * 	 * @see MimeTypes	 */	private String type;		public A() {		super();		setId(tag + (Math.random() * 1000));	}		public A(String id) {		super(id);	}		public A(String id, String href) {		super(id);		setHref(href);	}		public String getAccessKey() {		return accessKey;	}		/**	 * 	 * This attribute assigns an access key to an element. An access key is a	 * single	 * 	 * character from the document character set. Note. Authors should consider	 * the	 * 	 * input method of the expected reader when specifying an accesskey.	 * 	 * 	 * 	 * This example assigns the access key "U" to a label associated with an	 * INPUT control.	 * 	 * Typing the access key gives focus to the label which in turn gives it to	 * the	 * 	 * associated control. The user may then enter text into the INPUT area.	 * 	 * 	 * 	 * <code>	 * 	 * <FORM action="..." method="post">	 * 	 * <P>	 * 	 * <LABEL for="fuser" accesskey="U">User Name</LABEL>	 * 	 * <INPUT type="text" name="user" id="fuser">	 * 	 * </P>	 * 	 * </FORM>	 * 	 * 	 * 	 * @param accessKey	 */	public void setAccessKey(String accessKey) {		this.accessKey = accessKey;	}		public String getCharset() {		return charset;	}		/**	 * 	 * This attribute specifies the character encoding of the resource	 * designated by the link.	 * 	 * 	 * 	 * @param charset	 */	public void setCharset(String charset) {		this.charset = charset;	}		public String getCoords() {		return coords;	}		/**	 * 	 * This attribute specifies the position and shape on the screen. The number	 * and order of	 * 	 * values depends on the shape being defined. Possible combinations:	 * 	 * <ul>	 * 	 * <li>rect: left-x, top-y, right-x, bottom-y.</li>	 * 	 * <li>circle: center-x, center-y, radius. Note. When the radius value is a	 * percentage value,	 * 	 * user agents should calculate the final radius value based on the	 * associated object's	 * 	 * width and height. The radius should be the smaller value of the two.</li>	 * 	 * <li>poly: x1, y1, x2, y2, ..., xN, yN. The first x and y coordinate pair	 * and the last	 * 	 * should be the same to close the polygon. When these coordinate values are	 * not the same,	 * 	 * user agents should infer an additional coordinate pair to close the	 * polygon.</li>	 * 	 * </ul>	 * 	 * 	 * 	 * Coordinates are relative to the top, left corner of the object. All	 * values are lengths.	 * 	 * All values are separated by commas.	 * 	 * 	 * 	 * @param coords	 */	public void setCoords(String coords) {		this.coords = coords;	}		public String getHref() {		return href;	}		/**	 * 	 * This attribute specifies the location of a Web resource, thus defining a	 * link between	 * 	 * the current element (the source anchor) and the destination anchor	 * defined by	 * 	 * this attribute.	 * 	 * 	 * 	 * @param href	 */	public void setHref(String href) {		this.href = href;	}		public String getHrefLang() {		return hrefLang;	}		/**	 * 	 * This attribute specifies the base language of the resource designated by	 * href and may	 * 	 * only be used when href is specified.	 * 	 * 	 * 	 * @param hrefLang	 */	public void setHrefLang(String hrefLang) {		this.hrefLang = hrefLang;	}		public String getName() {		return name;	}		/**	 * 	 * This attribute assigns the control name.	 * 	 * 	 * 	 * @param name	 */	public void setName(String name) {		this.name = name;	}		public String getOnBlur() {		return onBlur;	}		/**	 * 	 * The onblur event occurs when an element loses focus either by the	 * pointing device or	 * 	 * by tabbing navigation. It may be used with the same elements as onfocus.	 * 	 * 	 * 	 * @param onBlur	 */	public void setOnBlur(String onBlur) {		this.onBlur = onBlur;	}		public String getOnFocus() {		return onFocus;	}		/**	 * 	 * The onfocus event occurs when an element receives focus either by the	 * pointing device	 * 	 * or by tabbing navigation. This attribute may be used with the following	 * elements:	 * 	 * A, AREA, LABEL, INPUT, SELECT, TEXTAREA, and BUTTON.	 * 	 * 	 * 	 * @param onFocus	 */	public void setOnFocus(String onFocus) {		this.onFocus = onFocus;	}		public String getRel() {		return rel;	}		/**	 * 	 * This attribute describes the relationship from the current document to	 * the anchor	 * 	 * specified by the href attribute. The value of this attribute is a	 * space-separated	 * 	 * list of link types.	 * 	 * 	 * 	 * @param rel	 */	public void setRel(String rel) {		this.rel = rel;	}		public String getRev() {		return rev;	}		/**	 * 	 * This attribute is used to describe a reverse link from the anchor	 * specified by the	 * 	 * href attribute to the current document. The value of this attribute is a	 * 	 * space-separated list of link types.	 * 	 * 	 * 	 * @param rev	 */	public void setRev(String rev) {		this.rev = rev;	}		public String getShape() {		return shape;	}		/**	 * 	 * This attribute specifies the shape of a region. Possible values:	 * 	 * <ul>	 * 	 * <li>default: Specifies the entire region.</li>	 * 	 * <li>rect: Define a rectangular region.</li>	 * 	 * <li>circle: Define a circular region.</li>	 * 	 * <li>poly: Define a polygonal region.</li>	 * 	 * </ul>	 * 	 * 	 * 	 * @param shape	 */	public void setShape(String shape) {		this.shape = shape;	}		public String getTabIndex() {		return tabIndex;	}		/**	 * 	 * This attribute specifies the position of the current element in the	 * tabbing order	 * 	 * for the current document. This value must be a number between 0 and	 * 32767.	 * 	 * User agents should ignore leading zeros.	 * 	 * 	 * 	 * @param tabIndex	 */	public void setTabIndex(String tabIndex) {		this.tabIndex = tabIndex;	}		public String getTarget() {		return target;	}		/**	 * 	 * This attribute specifies the name of a frame where a document is to be	 * opened.	 * 	 * 	 * 	 * @param target	 */	public void setTarget(String target) {		this.target = target;	}		public String getType() {		return type;	}		/**	 * 	 * This attribute gives an advisory hint as to the content type of the	 * content	 * 	 * available at the link target address. It allows user agents to opt to use	 * a	 * 	 * fallback mechanism rather than fetch the content if they are advised that	 * 	 * they will get content in a content type they do not support.	 * 	 * 	 * 	 * Authors who use this attribute take responsibility to manage the risk	 * that	 * 	 * it may become inconsistent with the content available at the link target	 * 	 * address.	 * 	 * 	 * 	 * For the current list of registered content types, please consult	 * [MIMETYPES].	 * 	 * 	 * 	 * @see MimeTypes	 * 	 * @param type	 */	public void setType(String type) {		this.type = type;	}		@Override	public String toString() {		return ElementParserHtml.getToStringOut(this);	}		public String getTag() {		return tag;	}		/**	 * 	 * To set the focus on the element. It will only work for form input	 * elements.	 * 	 * 	 * 	 * @throws Exception	 */	public void focus() throws Exception {		getJsOut().append(JsGenerator.focus(this.getId()));	}}
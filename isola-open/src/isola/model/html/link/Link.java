package isola.model.html.link;import isola.constants.MimeTypes;import isola.helpers.ElementParserHtml;import isola.model.html.core.Element;/** *  * This element defines a link. Unlike A, it may only appear in the HEAD section * of a document, *  * although it may appear any number of times. Although LINK has no content, it * conveys relationship *  * information that may be rendered by user agents in a variety of ways (e.g., a * tool-bar with a *  * drop-down menu of links). *  *  *  * @author Umut Gokbayrak *  *  */public class Link extends Element {	private static final String tag = "link";	/**	 * 	 * This attribute specifies the character encoding of the resource	 * designated by the link.	 */	private String charset;	/**	 * 	 * This attribute specifies the location of a Web resource, thus defining a	 * link between	 * 	 * the current element (the source anchor) and the destination anchor	 * defined by	 * 	 * this attribute.	 */	private String href;	/**	 * 	 * This attribute specifies the base language of the resource designated by	 * href and may	 * 	 * only be used when href is specified.	 */	private String hrefLang;	/**	 * 	 * This attribute specifies the intended destination medium for style	 * information.	 * 	 * It may be a single media descriptor or a comma-separated list. The	 * default	 * 	 * value for this attribute is "screen".	 */	private String media;	/**	 * 	 * This attribute describes the relationship from the current document to	 * the anchor	 * 	 * specified by the href attribute. The value of this attribute is a	 * space-separated	 * 	 * list of link types.	 */	private String rel;	/**	 * 	 * This attribute is used to describe a reverse link from the anchor	 * specified by the	 * 	 * href attribute to the current document. The value of this attribute is a	 * 	 * space-separated list of link types.	 */	private String rev;	/**	 * 	 * This attribute specifies the name of a frame where a document is to be	 * opened.	 */	private String target;	/**	 * 	 * This attribute gives an advisory hint as to the content type of the	 * content	 * 	 * available at the link target address. It allows user agents to opt to use	 * a	 * 	 * fallback mechanism rather than fetch the content if they are advised that	 * 	 * they will get content in a content type they do not support.	 * 	 * 	 * 	 * Authors who use this attribute take responsibility to manage the risk	 * that	 * 	 * it may become inconsistent with the content available at the link target	 * 	 * address.	 * 	 * 	 * 	 * For the current list of registered content types, please consult	 * [MIMETYPES].	 * 	 * 	 * 	 * @see MimeTypes	 */	private String type;		public Link() {		super();	}		public Link(String href) {		setRel("stylesheet");		setType(MimeTypes.text_css);		setHref(href);	}		public String getCharset() {		return charset;	}		/**	 * 	 * This attribute specifies the character encoding of the resource	 * designated by the link.	 * 	 * 	 * 	 * @param charset	 */	public void setCharset(String charset) {		this.charset = charset;	}		public String getHref() {		return href;	}		/**	 * 	 * This attribute specifies the location of a Web resource, thus defining a	 * link between	 * 	 * the current element (the source anchor) and the destination anchor	 * defined by	 * 	 * this attribute.	 * 	 * 	 * 	 * @param href	 */	public void setHref(String href) {		this.href = href;	}		public String getHrefLang() {		return hrefLang;	}		/**	 * 	 * This attribute specifies the base language of the resource designated by	 * href and may	 * 	 * only be used when href is specified.	 * 	 * 	 * 	 * @param hrefLang	 */	public void setHrefLang(String hrefLang) {		this.hrefLang = hrefLang;	}		public String getMedia() {		return media;	}		/**	 * 	 * This attribute specifies the intended destination medium for style	 * information.	 * 	 * It may be a single media descriptor or a comma-separated list. The	 * default	 * 	 * value for this attribute is "screen".	 * 	 * 	 * 	 * @param media	 */	public void setMedia(String media) {		this.media = media;	}		public String getRel() {		return rel;	}		/**	 * 	 * This attribute describes the relationship from the current document to	 * the anchor	 * 	 * specified by the href attribute. The value of this attribute is a	 * space-separated	 * 	 * list of link types.	 * 	 * 	 * 	 * @param rel	 */	public void setRel(String rel) {		this.rel = rel;	}		public String getRev() {		return rev;	}		/**	 * 	 * This attribute is used to describe a reverse link from the anchor	 * specified by the	 * 	 * href attribute to the current document. The value of this attribute is a	 * 	 * space-separated list of link types.	 * 	 * 	 * 	 * @param rev	 */	public void setRev(String rev) {		this.rev = rev;	}		public String getTarget() {		return target;	}		/**	 * 	 * This attribute specifies the name of a frame where a document is to be	 * opened.	 * 	 * 	 * 	 * @param target	 */	public void setTarget(String target) {		this.target = target;	}		public String getType() {		return type;	}		/**	 * 	 * This attribute gives an advisory hint as to the content type of the	 * content	 * 	 * available at the link target address. It allows user agents to opt to use	 * a	 * 	 * fallback mechanism rather than fetch the content if they are advised that	 * 	 * they will get content in a content type they do not support.	 * 	 * 	 * 	 * Authors who use this attribute take responsibility to manage the risk	 * that	 * 	 * it may become inconsistent with the content available at the link target	 * 	 * address.	 * 	 * 	 * 	 * For the current list of registered content types, please consult	 * [MIMETYPES].	 * 	 * 	 * 	 * @see MimeTypes	 * 	 * 	 * 	 * @param type	 */	public void setType(String type) {		this.type = type;	}		@Override	public String toString() {		return ElementParserHtml.getToStringOut(this);	}		public String getTag() {		return tag;	}}
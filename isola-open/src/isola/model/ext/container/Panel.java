package isola.model.ext.container;import isola.helpers.JsHelper;import isola.model.core.JsArray;import isola.model.core.JsObject;import isola.model.ext.base.Component;import isola.model.ext.base.Container;import isola.model.ext.constants.XTypes;/** *  * Panel is a container that has specific functionality and structural * components *  * that make it the perfect building block for application-oriented user * interfaces. *  * The Panel contains bottom and top toolbars, along with separate header, * footer *  * and body sections. It also provides built-in expandable and collapsible *  * behavior, along with a variety of prebuilt tool buttons that can be wired up * to *  * provide other customized behavior. Panels can be easily dropped into any *  * Container or layout, and the layout and rendering pipeline is completely * managed *  * by the framework. *  *  *  * @author Umut Gokbayrak *  *  */public class Panel extends Container {	private static final long serialVersionUID = 6886794135759493847L;	private static final String TAG = "Ext.Panel";	/**	 * 	 * True to animate the transition when the panel is collapsed, false to skip	 * 	 * the animation (defaults to true if the Ext.Fx class is available,	 * otherwise	 * 	 * false).	 */	public boolean animCollapse = true;	/**	 * 	 * <p>	 * A valid url spec according to the Updater Ext.Updater.update method. If	 * 	 * autoLoad is not null, the panel will attempt to load its contents	 * immediately	 * 	 * upon render.	 * </p>	 * 	 * <p>	 * The URL will become the default URL for this panel's body element, so	 * 	 * it may be refreshed at any time.	 * </p>	 */	public JsObject autoLoad;	/**	 * 	 * True to use overflow:'auto' on the panel's body element and show scroll	 * bars	 * 	 * automatically when necessary, false to clip any overflowing content	 * 	 * (defaults to false).	 */	public boolean autoScroll = false;	/**	 * 	 * The base CSS class to apply to this panel's element (defaults to	 * 'x-panel').	 */	public String baseCls;	/**	 * 	 * The bottom toolbar of the panel. This can be a Ext.Toolbar object, a	 * toolbar	 * 	 * config, or an array of buttons/button configs to be added to the toolbar.	 * 	 * Note that this is not available as a property after render. To access the	 * 	 * bottom toolbar after render, use getBottomToolbar.	 */	public JsObject bbar;	/**	 * 	 * True to display an interior border on the body element of the panel,	 * false	 * 	 * to hide it (defaults to true). This only applies when border == true. If	 * 	 * border == true and bodyBorder == false, the border will display as a 1px	 * 	 * wide inset border, giving the entire body element an inset appearance.	 */	public boolean bodyBorder = true;	/**	 * 	 * Custom CSS styles to be applied to the body element in the format	 * expected	 * 	 * by Ext.Element.applyStyles (defaults to null).	 */	public String bodyStyle;	/**	 * 	 * True to display the borders of the panel's body element, false to hide	 * them	 * 	 * (defaults to true). By default, the border is a 2px wide inset border,	 * but	 * 	 * this can be further altered by setting bodyBorder to false.	 */	public boolean border = true;	/**	 * 	 * When set to true (100 milliseconds) or a number of milliseconds, the	 * layout	 * 	 * assigned for this container will buffer the frequency it calculates and	 * does	 * 	 * a re-layout of components. This is useful for heavy containers or	 * 	 * containers with a large amount of sub components that frequent calls to	 * 	 * layout are expensive.	 */	public int bufferResize = 100;	/**	 * 	 * The alignment of any buttons added to this panel. Valid values are	 * 'right,'	 * 	 * 'left' and 'center' (defaults to 'right').	 */	public String buttonAlign;	/**	 * 	 * An array of Ext.Button configs used to add buttons to the footer of this	 * panel.	 */	public JsArray buttons;	/**	 * 	 * True to make sure the collapse/expand toggle button always renders first	 * (to	 * 	 * the left of) any other tools in the panel's title bar, false to render it	 * 	 * last (defaults to true).	 */	public boolean collapseFirst = true;	/**	 * 	 * True to render the panel collapsed, false to render it expanded (defaults	 * to false).	 */	public boolean collapsed = false;	/**	 * 	 * A CSS class to add to the panel's element after it has been collapsed	 * (defaults	 * 	 * to 'x-panel-collapsed').	 */	public String collapsedCls;	/**	 * 	 * True to make the panel collapsible and have the expand/collapse toggle	 * button	 * 	 * automatically rendered into the header tool button area, false to keep	 * the	 * 	 * panel statically sized with no button (defaults to false).	 */	public boolean collapsible = false;	/**	 * 	 * The id of an existing HTML node to use as the panel's body content	 * (defaults to '').	 */	public String contentEl;	/**	 * 	 * True to enable dragging of this Panel (defaults to false). For custom	 * drag/drop	 * 	 * implementations, an Ext.Panel.DD config could also be passed in this	 * config	 * 	 * instead of true, although Ext.Panel.DD is an internal, undocumented	 * class.	 */	public boolean draggable = false;	/**	 * 	 * A comma-delimited list of panel elements to initialize when the panel is	 * 	 * rendered. Normally, this list will be generated automatically based on	 * the items	 * 	 * added to the panel at config time, but sometimes it might be useful to	 * make	 * 	 * sure a structural element is rendered even if not specified at config	 * time	 * 	 * (for example, you may want to add a button or toolbar dynamically after	 * the	 * 	 * panel has been rendered). Adding those elements to this list will	 * allocate	 * 	 * the required placeholders in the panel when it is rendered.	 * 	 * Valid values are	 * 	 * <ul>	 * 	 * <li>header</li>	 * 	 * <li>tbar (top bar)</li>	 * 	 * <li>body</li>	 * 	 * <li>bbar (bottom bar)</li>	 * 	 * <li>footer</li>	 * 	 * </ul>	 * 	 * Defaults to 'body'.	 */	public String elements;	/**	 * 	 * True to float the panel (absolute position it with automatic shimming and	 * shadow),	 * 	 * false to display it inline where it is rendered (defaults to false). Note	 * that	 * 	 * by default, setting floating to true will cause the panel to display at	 * negative	 * 	 * offsets so that it is hidden -- because the panel is absolute positioned,	 * the	 * 	 * position must be set explicitly after render (e.g.,	 * myPanel.setPosition(100,100);).	 * 	 * Also, when floating a panel you should always assign a fixed width,	 * otherwise it	 * 	 * will be auto width and will expand to fill to the right edge of the	 * viewport.	 */	public boolean floating = false;	/**	 * 	 * True to create the footer element explicitly, false to skip creating it.	 * By	 * 	 * default, when footer is not specified, if one or more buttons have been	 * added	 * 	 * to the panel the footer will be created automatically, otherwise it will	 * not.	 */	public boolean footer = false;	/**	 * 	 * Shows a nice rounded corner with a thick border around the panel.	 */	public boolean frame = false;	/**	 * 	 * True to create the header element explicitly, false to skip creating it.	 * By	 * 	 * default, when header is not specified, if a title is set the header will	 * be	 * 	 * created automatically, otherwise it will not. If a title is set but	 * header is	 * 	 * explicitly set to false, the header will not be rendered.	 */	public boolean header = false;	/**	 * 	 * True to display the panel title in the header, false to hide it (defaults	 * to true).	 */	public boolean headerAsText = true;	/**	 * 	 * True to hide the expand/collapse toggle button when collapsible = true,	 * false	 * 	 * to display it (defaults to false).	 */	public boolean hideCollapseTool = false;	/**	 * 	 * An HTML fragment, or a DomHelper specification to use as the panel's body	 * 	 * content (defaults to '').	 */	public String html;	/**	 * 	 * A CSS class that will provide a background image to be used as the panel	 * header	 * 	 * icon (defaults to '').	 */	public String iconCls;	/**	 * 	 * A KeyMap config object (in the format expected by Ext.KeyMap.addBinding	 * used	 * 	 * to assign custom key handling to this panel (defaults to null).	 */	public JsArray keys;	/**	 * 	 * True to mask the panel when it is disabled, false to not mask it	 * (defaults	 * 	 * to true). Either way, the panel will always tell its contained elements	 * to	 * 	 * disable themselves when it is disabled, but masking the panel can provide	 * an	 * 	 * additional visual cue that the panel is disabled.	 */	public boolean maskDisabled = true;	/**	 * 	 * Minimum width in pixels of all buttons in this panel (defaults to 75)	 */	public int minButtonWidth = 75;	/**	 * 	 * True (or a valid Ext.Shadow Ext.Shadow.mode value) to display a shadow	 * behind	 * 	 * the panel, false to display no shadow (defaults to 'sides'). Note that	 * this	 * 	 * option only applies when floating = true.	 */	public boolean shadow = true;	/**	 * 	 * The number of pixels to offset the shadow if displayed (defaults to 4).	 * Note	 * 	 * that this option only applies when floating = true.	 */	public int shadowOffset = 4;	/**	 * 	 * False to disable the iframe shim in browsers which need one (defaults to	 * true).	 * 	 * Note that this option only applies when floating = true.	 */	public boolean shim = true;	/**	 * 	 * Adds a tooltip when mousing over the tab of a Ext.Panel which is an item	 * of a	 * 	 * Ext.TabPanel. Ext.QuickTips.init() must be called in order for the tips	 * to render.	 */	public String tabTip;	/**	 * 	 * The top toolbar of the panel. This can be either an Ext.Toolbar object or	 * an	 * 	 * array of buttons/button configs to be added to the toolbar. Note that	 * this	 * 	 * is not available as a property after render. To access the top toolbar	 * after	 * 	 * render, use getTopToolbar.	 */	public JsObject tbar;	/**	 * 	 * The title text to display in the panel header (defaults to ''). When a	 * title	 * 	 * is specified the header element will automatically be created and	 * displayed	 * 	 * unless header is explicitly set to false. If you don't want to specify a	 * title	 * 	 * at config time, but you may want one later, you must either specify a	 * non-empty	 * 	 * title (a blank space ' ' will do) or header:true so that the container	 * element	 * 	 * will get created.	 */	public String title;	/**	 * 	 * True to allow expanding and collapsing the panel (when collapsible =	 * true)	 * 	 * by clicking anywhere in the header bar, false to allow it only by	 * clicking to	 * 	 * tool button (defaults to false).	 */	public boolean titleCollapse = false;	/**	 * 	 * An array of tool button configs to be added to the header tool area. Each	 * tool	 * 	 * config may contain the following properties:	 * 	 * <ul>	 * 	 * <li><strong>id :</strong> String - <strong>Required</strong>. The type of	 * tool to create. Values may be	 * 	 * <ul>	 * 	 * <li>toggle (Created by default when collapsible is true)</li>	 * 	 * <li>close</li>	 * 	 * <li>minimize</li>	 * 	 * <li>maximize</li>	 * 	 * <li>restore</li>	 * 	 * <li>gear</li>	 * 	 * <li>pin</li>	 * 	 * <li>unpin</li>	 * 	 * <li>right</li>	 * 	 * <li>left</li>	 * 	 * <li>up</li>	 * 	 * <li>down</li>	 * 	 * <li>refresh</li>	 * 	 * <li>minus</li>	 * 	 * <li>plus</li>	 * 	 * <li>help</li>	 * 	 * <li>search</li>	 * 	 * <li>save</li>	 * 	 * </ul>	 * 	 * </li>	 * 	 * <li><strong>handler</strong> : Function - Required. The function to call	 * when clicked. Arguments passed are:	 * 	 * <ul>	 * 	 * <li><strong><i>event</i></strong>: Ext.EventObject The click event.</li>	 * 	 * <li><strong><i>toolEl</i></strong> : Ext.Element The tool Element.</li>	 * 	 * <li><strong><i>Panel</i></strong> : Ext.Panel The host Panel</li>	 * 	 * </ul>	 * 	 * </li>	 * 	 * <li><strong>scope</strong>:scope : Object - The scope in which to call	 * the handler.</li>	 * 	 * <li><strong>qtip</strong> : String/Object - A tip string, or a config	 * argument to Ext.QuickTip.register</li>	 * 	 * <li><strong>hidden</strong> : hidden : Boolean - True to initially render	 * hidden.</li>	 * 	 * <li><strong>on</strong> : Object - A listener config object specifiying	 * event listeners in the format of an argument to addListener</li>	 * 	 * </ul>	 * 	 * <pre>	 * &lt;code&gt;	 * 
	 * 	tools:[{	 * 
	 * 		id:'refresh',	 * 
	 * 		// hidden:true,	 * 
	 * 		handler: function(event, toolEl, panel){	 * 
	 * 		// refresh logic	 * 
	 * 		}	 * 
	 * }]	 * 
	 * &lt;/code&gt;	 * </pre>	 * 	 * Note that apart from the toggle tool which is provided when a panel is	 * collapsible, these tools only	 * 	 * provide the visual button. Any required functionality must be provided by	 * adding handlers that	 * 	 * implement the necessary behavior.	 */	public JsArray tools;	/**	 * 	 * <p>	 * The registered xtype to create. This config option is not used when	 * passing a	 * 	 * config object into a constructor. This config option is used only when	 * lazy	 * 	 * instantiation is being used, and a child item of a Container is being	 * 	 * specified not as a fully instantiated Component, but as a Component	 * config	 * 	 * object. The xtype will be looked up at render time up to determine what	 * 	 * type of child Component to create.	 * </p>	 * 	 * 	 * 	 * @see XTypes <p>	 *      If you subclass Components to create your own Components, you may	 *      register	 * 	 *      them using Ext.ComponentMgr.registerType in order to be able to take	 *      advantage	 * 	 *      of lazy instantiation and rendering.	 *      </p>	 */	public String xtype = XTypes.panel;	private boolean printWithNoTags = false;		public Panel() {		super();	}		public Panel(boolean printWithNoTags) {		super();		this.printWithNoTags = printWithNoTags;	}		/**	 * 	 * <p>	 * Adds a component to this container. Fires the beforeadd event before	 * adding, then fires the add	 * 	 * event after the component has been added. If the container is already	 * rendered when add is	 * 	 * called, you may need to call doLayout to refresh the view. This is	 * required so that you can add	 * 	 * multiple child components if needed while only refreshing the layout	 * once.	 * </p>	 * 	 * <p>	 * Ext uses lazy rendering, and will only render the added Component should	 * it become necessary.	 * </p>	 * 	 * <p>	 * A Component config object may be passed in order to avoid the overhead of	 * constructing a real	 * 	 * Component object if lazy rendering might mean that the added Component	 * will not be rendered	 * 	 * immediately. To take advantage of this "lazy instantiation", set the	 * Ext.Component.xtype	 * 	 * config property to the registered type of the Component wanted.	 * </p>	 * 	 * 	 * 	 * @see XTypes	 * 	 * @param component	 *            The component to add.	 */	public void addButton(Component component) {		if (buttons == null) {			buttons = new JsArray();		}		buttons.add(component);	}		/**	 * 	 * Returns the toolbar from the bottom (bbar) section of the panel.	 * 	 * 	 * 	 * @return	 */	public JsObject getBottomToolbar() {		return bbar;	}		/**	 * 	 * Sets the CSS class that provides the icon image for this panel. This	 * method will replace any existing	 * 	 * icon class if one has already been set.	 * 	 * 	 * 	 * @param cls	 */	public void setIconClass(String cls) {		this.iconCls = cls;	}		/**	 * 	 * Returns the toolbar from the top (tbar) section of the panel.	 * 	 * 	 * 	 * @return	 */	public JsObject getTopToolbar() {		return tbar;	}		protected void _postProcessToString() {		super._postProcessToString();		if (!animCollapse)			put("animCollapse", animCollapse);		if (autoLoad != null)			put("autoLoad", autoLoad);		if (autoScroll)			put("autoScroll", autoScroll);		if (baseCls != null)			put("baseCls", baseCls);		if (bbar != null)			put("bbar", bbar);		if (!bodyBorder)			put("bodyBorder", bodyBorder);		if (bodyStyle != null)			put("bodyStyle", bodyStyle);		if (!border)			put("border", border);		if (bufferResize != 100)			put("bufferResize", bufferResize);		if (buttonAlign != null)			put("buttonAlign", buttonAlign);		if (buttons != null)			put("buttons", buttons);		if (collapsed)			put("collapsed", collapsed);		if (collapsedCls != null)			put("collapsedCls", collapsedCls);		if (!collapseFirst)			put("collapseFirst", collapseFirst);		if (collapsible)			put("collapsible", collapsible);		if (contentEl != null)			put("contentEl", contentEl);		if (draggable)			put("draggable", draggable);		if (elements != null)			put("elements", elements);		if (floating)			put("floating", floating);		if (footer)			put("footer", footer);		if (frame)			put("frame", frame);		if (header)			put("header", header);		if (!headerAsText)			put("headerAsText", headerAsText);		if (hideCollapseTool)			put("hideCollapseTool", hideCollapseTool);		if (html != null)			put("html", html);		if (iconCls != null)			put("iconCls", iconCls);		if (keys != null)			put("keys", keys);		if (!maskDisabled)			put("maskDisabled", maskDisabled);		if (minButtonWidth != 75)			put("minButtonWidth", minButtonWidth);		if (!shadow)			put("shadow", shadow);		if (shadowOffset != 4)			put("shadowOffset", shadowOffset);		if (!shim)			put("shim", shim);		if (tabTip != null)			put("tabTip", tabTip);		if (tbar != null)			put("tbar", tbar);		if (title != null)			put("title", title);		if (titleCollapse)			put("titleCollapse", titleCollapse);		if (tools != null)			put("tools", tools);		// if (xtype != null) put("xtype", xtype);		if (xtype != null)			put("xtype", null);	}		@Override	public String toString() {		_postProcessToString();		if (printWithNoTags) {			return JsHelper.printJsObject(this);		}		return "new " + TAG + "(" + JsHelper.printJsObject(this) + ")";	}		public void setPrintWithNoTags(boolean printWithNoTags) {		this.printWithNoTags = printWithNoTags;	}}
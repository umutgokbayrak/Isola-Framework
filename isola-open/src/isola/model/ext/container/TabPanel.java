package isola.model.ext.container;import isola.helpers.JsHelper;import isola.model.ext.constants.XTypes;/** *  * <p> * A basic tab container. Tab panels can be used exactly like a standard * Ext.Panel for layout purposes, *  * but also have special support for containing child Panels that get * automatically converted into tabs. * </p> *  *  *  * <p> * There is no actual tab class — each tab is simply an Ext.Panel. However, when * rendered in a TabPanel, *  * each child Panel can fire additional events that only exist for tabs and are * not available to other *  * Panels. These are: * </p> *  *  *  * <ul> *  * <li><strong>activate</strong>Fires when this Panel becomes the active tab. * Listeners will be called *  * with the (tab : Panel) attribute. *  * </li> *  * <li><strong>deactivate</strong>Fires when this Panel that was the active tab * becomes deactivated. *  * Listeners will be called with the (tab : Panel) attribute. *  * </li> *  * </ul> *  *  *  * <p> * There are several methods available for creating TabPanels. The output of the * following examples *  * should be exactly the same. The tabs can be created and rendered completely * in code, as in this *  * example: * </p> *  *  *  * <pre> * &lt;code&gt; * 
 * var tabs = new Ext.TabPanel({ * 
 *     renderTo: Ext.getBody(), * 
 *     activeTab: 0, * 
 *     items: [{ * 
 *         title: 'Tab 1', * 
 *         html: 'A simple tab' * 
 *     },{ * 
 *         title: 'Tab 2', * 
 *         html: 'Another one' * 
 *     }] * 
 * }); * 
 * &lt;/code&gt; * </pre> *  *  *  * <p> * TabPanels can also be rendered from markup in a couple of ways. See the * autoTabs example for *  * rendering entirely from markup that is already structured correctly as a * TabPanel (a container div *  * with one or more nested tab divs with class 'x-tab'). You can also render * from markup that is not *  * strictly structured by simply specifying by id which elements should be the * container and the tabs. *  * Using this method, tab content can be pulled from different elements within * the page by id *  * regardless of page structure. Note that the tab divs in this example contain * the class *  *'x-hide-display' so that they can be rendered deferred without displaying * outside the tabs. *  * You could alternately set deferredRender to false to render all content tabs * on page load. *  * For example: * </p> *  *  *  * <pre> * &lt;code&gt; * 
 * var tabs = new Ext.TabPanel({ * 
 *     renderTo: 'my-tabs', * 
 *     activeTab: 0, * 
 *     items:[ * 
 *         {contentEl:'tab1', title:'Tab 1'}, * 
 *         {contentEl:'tab2', title:'Tab 2'} * 
 *     ] * 
 * }); * 
 * // Note that the tabs do not have to be nested within the container (although they can be) * 
 * &lt;div id=&quot;my-tabs&quot;&gt;&lt;/div&gt; * 
 * &lt;div id=&quot;tab1&quot; class=&quot;x-hide-display&quot;&gt;A simple tab&lt;/div&gt; * 
 * &lt;div id=&quot;tab2&quot; class=&quot;x-hide-display&quot;&gt;Another one&lt;/div&gt; * 
 * &lt;/code&gt; * </pre> *  *  *  * @author Umut Gokbayrak *  *  */public class TabPanel extends Panel {	private static final long serialVersionUID = 3092317131157517320L;	private static final String TAG = "Ext.TabPanel";	/**	 * 	 * Numeric index(0 based) of the tab that should be initially activated on	 * render	 * 	 * (defaults to none).	 */	public int activeTab = 0;	/**	 * 	 * True to animate tab scrolling so that hidden tabs slide smoothly into	 * view	 * 	 * (defaults to true). Only applies when enableTabScroll = true.	 */	public boolean animScroll = true;	/**	 * 	 * The CSS selector used to search for tabs in existing markup when autoTabs	 * = true	 * 	 * (defaults to 'div.x-tab'). This can be any valid selector supported by	 * 	 * Ext.DomQuery.select. Note that the query will be executed within the	 * scope of this tab	 * 	 * panel only (so that multiple tab panels from markup can be supported on a	 * page).	 */	public String autoTabSelector;	/**	 * 	 * <p>	 * True to query the DOM for any divs with a class of 'x-tab' to be	 * automatically	 * 	 * converted to tabs and added to this panel (defaults to false). Note that	 * the query	 * 	 * will be executed within the scope of the container element only (so that	 * multiple	 * 	 * tab panels from markup can be supported via this method).	 * </p>	 * 	 * 	 * 	 * <p>	 * This method is only possible when the markup is structured correctly as a	 * 	 * container with nested divs containing the class 'x-tab'. To create	 * TabPanels without	 * 	 * these limitations, or to pull tab content from other elements on the	 * page, see the	 * 	 * example at the top of the class for generating tabs from markup.	 * </p>	 * 	 * 	 * 	 * <p>	 * There are a couple of things to note when using this method:	 * </p>	 * 	 * 	 * 	 * <p>	 * When using the autoTabs config (as opposed to passing individual tab	 * configs in the	 * 	 * TabPanel's items collection), you must use applyTo to correctly use the	 * specified id	 * 	 * as the tab container. The autoTabs method replaces existing content with	 * the TabPanel	 * 	 * components.	 * </p>	 * 	 * 	 * 	 * <p>	 * Make sure that you set deferredRender to false so that the content	 * elements for	 * 	 * each tab will be rendered into the TabPanel immediately upon page load,	 * otherwise they	 * 	 * will not be transformed until each tab is activated and will be visible	 * outside the	 * 	 * TabPanel.	 * </p>	 * 	 * 	 * 	 * <p>	 * Example usage:	 * </p>	 * 	 * 	 * 	 * <pre>	 * &lt;code&gt;	 * 
	 * var tabs = new Ext.TabPanel({	 * 
	 *     applyTo: 'my-tabs',	 * 
	 *     activeTab: 0,	 * 
	 *     deferredRender: false,	 * 
	 *     autoTabs: true	 * 
	 * });	 * 
	 * 	 * 
	 * // This markup will be converted to a TabPanel from the code above	 * 
	 * &lt;div id=&quot;my-tabs&quot;&gt;	 * 
	 *     &lt;div class=&quot;x-tab&quot; title=&quot;Tab 1&quot;&gt;A simple tab&lt;/div&gt;	 * 
	 *     &lt;div class=&quot;x-tab&quot; title=&quot;Tab 2&quot;&gt;Another one&lt;/div&gt;	 * 
	 * &lt;/div&gt;	 * 
	 * &lt;/code&gt;	 * </pre>	 */	public boolean autoTabs = false;	/**	 * 	 * The base CSS class applied to the panel (defaults to 'x-tab-panel').	 */	public String baseCls;	/**	 * 	 * Internally, the TabPanel uses a Ext.layout.CardLayout to manage its tabs.	 * This property will	 * 	 * be passed on to the layout as its Ext.layout.CardLayout.deferredRender	 * config value,	 * 	 * determining whether or not each tab is rendered only when first accessed	 * (defaults to true).	 */	public boolean deferredRender = true;	/**	 * 	 * Set to true to do a layout of tab items as tabs are changed.	 */	public boolean layoutOnTabChange = false;	/**	 * 	 * The minimum width in pixels for each tab when resizeTabs = true (defaults	 * to 30).	 */	public int minTabWidth = 30;	/**	 * 	 * True to render the tab strip without a background container image	 * (defaults to false).	 */	public boolean plain = false;	/**	 * 	 * True to automatically resize each tab so that the tabs will completely	 * fill the tab	 * 	 * strip (defaults to false). Setting this to true may cause specific widths	 * that might	 * 	 * be set per tab to be overridden in order to fit them all into view	 * (although minTabWidth	 * 	 * will always be honored).	 */	public boolean resizeTabs = false;	/**	 * 	 * The number of milliseconds that each scroll animation should last	 * (defaults to .35). Only	 * 	 * applies when animScroll = true.	 */	public float scrollDuration = (float) 0.35;	/**	 * 	 * The number of pixels to scroll each time a tab scroll button is pressed	 * (defaults to	 * 	 * 100, or if resizeTabs = true, the calculated tab width). Only applies	 * when	 * 	 * enableTabScroll = true.	 */	public int scrollIncrement = 100;	/**	 * 	 * Number of milliseconds between each scroll while a tab scroll button is	 * continuously pressed	 * 	 * (defaults to 400).	 */	public int scrollRepeatInterval = 400;	/**	 * 	 * The number of pixels of space to calculate into the sizing and scrolling	 * of tabs. If you	 * 	 * change the margin in CSS, you will need to update this value so	 * calculations are correct with	 * 	 * either resizeTabs or scrolling tabs. (defaults to 2)	 */	public int tabMargin = 2;	/**	 * 	 * The position where the tab strip should be rendered (defaults to 'top').	 * The only other supported	 * 	 * value is 'bottom'. Note that tab scrolling is only supported for position	 * 'top'.	 */	public String tabPosition;	/**	 * 	 * The initial width in pixels of each new tab (defaults to 120).	 */	public int tabWidth = 120;	/**	 * 	 * For scrolling tabs, the number of pixels to increment on mouse wheel	 * scrolling (defaults to 20).	 */	public int wheelIncrement = 20;	/**	 * 	 * <p>	 * The registered xtype to create. This config option is not used when	 * passing a	 * 	 * config object into a constructor. This config option is used only when	 * lazy	 * 	 * instantiation is being used, and a child item of a Container is being	 * 	 * specified not as a fully instantiated Component, but as a Component	 * config	 * 	 * object. The xtype will be looked up at render time up to determine what	 * 	 * type of child Component to create.	 * </p>	 * 	 * 	 * 	 * @see XTypes <p>	 *      If you subclass Components to create your own Components, you may	 *      register	 * 	 *      them using Ext.ComponentMgr.registerType in order to be able to take	 *      advantage	 * 	 *      of lazy instantiation and rendering.	 *      </p>	 */	public String xtype = XTypes.tabpanel;		public TabPanel() {		super();	}		@Override	protected void _postProcessToString() {		super._postProcessToString();		if (activeTab >= 0)			put("activeTab", activeTab);		if (!animScroll)			put("animScroll", animScroll);		if (autoTabs)			put("autoTabs", autoTabs);		if (autoTabSelector != null)			put("autoTabSelector", autoTabSelector);		if (baseCls != null)			put("baseCls", baseCls);		if (!deferredRender)			put("deferredRender", deferredRender);		if (layoutOnTabChange)			put("layoutOnTabChange", layoutOnTabChange);		if (minTabWidth != 30)			put("minTabWidth", minTabWidth);		if (plain)			put("plain", plain);		if (resizeTabs)			put("resizeTabs", resizeTabs);		if (scrollDuration != (float) 0.35)			put("scrollDuration", scrollDuration);		if (scrollIncrement != 100)			put("scrollIncrement", scrollIncrement);		if (scrollRepeatInterval != 400)			put("scrollRepeatInterval", scrollRepeatInterval);		if (tabMargin != 2)			put("tabMargin", tabMargin);		if (tabPosition != null)			put("tabPosition", tabPosition);		if (tabWidth != 120)			put("tabWidth", tabWidth);		if (wheelIncrement != 20)			put("wheelIncrement", wheelIncrement);		if (xtype != null)			put("xtype", xtype);	}		@Override	public String toString() {		_postProcessToString();		return "new " + TAG + "(" + JsHelper.printJsObject(this) + ")";	}}
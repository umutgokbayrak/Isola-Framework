package isola.model.ext.container;import isola.helpers.JsHelper;import isola.model.ext.base.Component;import isola.model.ext.constants.XTypes;/** *  * Base class for any visual Ext.Component that uses a box container. *  * BoxComponent provides automatic box model adjustments for sizing and *  * positioning and will work correctly withnin the Component rendering model. *  * All container classes should subclass BoxComponent so that they will work *  * consistently when nested within other Ext layout containers. *  *  *  * @author Umut Gokbayrak *  *  */public class BoxComponent extends Component {	private static final long serialVersionUID = 204419636943525809L;	private static final String TAG = "Ext.BoxComponent";	/**	 * 	 * True to use height:'auto', false to use fixed height (defaults to false).	 */	public boolean autoHeight = false;	/**	 * 	 * True to use width:'auto', false to use fixed width (defaults to false).	 */	public boolean autoWidth = false;	/**	 * 	 * The height of this component in pixels (defaults to auto).	 */	public String height;	/**	 * 	 * How this component should hidden. Supported values are "visibility"	 * 	 * (css visibility), "offsets" (negative offset position) and "display"	 * 	 * (css display) - defaults to "display".	 */	public String hideMode;	/**	 * 	 * The width of this component in pixels (defaults to auto).	 */	public String width;	/**	 * 	 * <p>	 * The registered xtype to create. This config option is not used when	 * passing a	 * 	 * config object into a constructor. This config option is used only when	 * lazy	 * 	 * instantiation is being used, and a child item of a Container is being	 * 	 * specified not as a fully instantiated Component, but as a Component	 * config	 * 	 * object. The xtype will be looked up at render time up to determine what	 * 	 * type of child Component to create.	 * </p>	 * 	 * 	 * 	 * @see XTypes <p>	 *      If you subclass Components to create your own Components, you may	 *      register	 * 	 *      them using Ext.ComponentMgr.registerType in order to be able to take	 *      advantage	 * 	 *      of lazy instantiation and rendering.	 *      </p>	 */	public String xtype = XTypes.box;		public BoxComponent() {		super();	}		/**
	 * 
	 */	protected void _postProcessToString() {		super._postProcessToString();		if (autoHeight)			put("autoHeight", autoHeight);		if (autoWidth)			put("autoWidth", autoWidth);		if (height != null)			put("height", height);		if (width != null)			put("width", width);		if (hideMode != null)			put("hideMode", hideMode);		if (xtype != null)			put("xtype", xtype);	}		@Override	public String toString() {		_postProcessToString();		return "new " + TAG + "(" + JsHelper.printJsObject(this) + ")";	}}
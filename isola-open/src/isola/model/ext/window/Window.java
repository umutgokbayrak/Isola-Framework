package isola.model.ext.window;import isola.helpers.JsHelper;import isola.model.core.JsFunction;import isola.model.ext.constants.XTypes;import isola.model.ext.container.Panel;/** *  * A specialized panel intended for use as an application window. Windows are * floated and *  * draggable by default, and also provide specific behavior like the ability to * maximize and *  * restore (with an event for minimizing, since the minimize behavior is *  * application-specific). Windows can also be linked to a Ext.WindowGroup or * managed by the *  * Ext.WindowManager to provide grouping, activation, to front/back and other *  * application-specific behavior. *  *  *  * @author Umut Gokbayrak */public class Window extends Panel {	private static final long serialVersionUID = 6305644725905263485L;	private static final String TAG = "Ext.Window";	/**	 * 	 * Id or element from which the window should animate while opening	 * (defaults to null	 * 	 * with no animation).	 */	public String animateTarget;	/**	 * 	 * The base CSS class to apply to this panel's element (defaults to	 * 'x-window').	 */	public String baseCls;	/**	 * 	 * True to display the 'close' tool button and allow the user to close the	 * window, false to hide	 * 	 * the button and disallow closing the window (default to true).	 */	public boolean closable = true;	/**	 * 	 * The action to take when the close button is clicked. The default action	 * is 'close'	 * 	 * which will actually remove the window from the DOM and destroy it. The	 * other valid	 * 	 * option is 'hide' which will simply hide the window by setting visibility	 * to hidden and	 * 	 * applying negative offsets, keeping the window available to be redisplayed	 * via the show	 * 	 * method.	 */	public String closeAction;	/**	 * 	 * True to constrain the window to the viewport, false to allow it to fall	 * outside of the	 * 	 * viewport (defaults to false). Optionally the header only can be	 * constrained using	 * 	 * constrainHeader.	 */	public boolean constrain = false;	/**	 * 	 * True to constrain the window header to the viewport, allowing the window	 * body to fall	 * 	 * outside of the viewport, false to allow the header to fall outside the	 * viewport	 * 	 * (defaults to false). Optionally the entire window can be constrained	 * using constrain.	 */	public boolean constrainHeader = false;	/**	 * 	 * The id / index of a button or a button instance to focus when this window	 * received the focus.	 */	public String defaultButton;	/**	 * 	 * True to allow the window to be dragged by the header bar, false to	 * disable dragging	 * 	 * (defaults to true). Note that by default the window will be centered in	 * the viewport,	 * 	 * so if dragging is disabled the window may need to be positioned	 * programmatically after	 * 	 * render (e.g., myWindow.setPosition(100, 100);).	 */	public boolean draggable = true;	/**	 * 	 * True to always expand the window when it is displayed, false to keep it	 * in its current	 * 	 * state (which may be collapsed) when displayed (defaults to true).	 */	public boolean expandOnShow = true;	/**	 * 	 * A reference to the WindowGroup that should manage this window (defaults	 * to Ext.WindowMgr).	 */	public WindowGroup manager;	/**	 * 	 * True to display the 'maximize' tool button and allow the user to maximize	 * the window,	 * 	 * false to hide the button and disallow maximizing the window (defaults to	 * false). Note	 * 	 * that when a window is maximized, the tool button will automatically	 * change to a	 * 	 * 'restore' button with the appropriate behavior already built-in that will	 * restore the	 * 	 * window to its previous size.	 */	public boolean maximizable = false;	/**	 * 	 * The minimum height in pixels allowed for this window (defaults to 100).	 * Only applies	 * 	 * when resizable = true.	 */	public int minHeight = 100;	/**	 * 	 * The minimum width in pixels allowed for this window (defaults to 200).	 * Only applies when	 * 	 * resizable = true.	 */	public int minWidth = 200;	/**	 * 	 * True to display the 'minimize' tool button and allow the user to minimize	 * the window,	 * 	 * false to hide the button and disallow minimizing the window (defaults to	 * false). Note	 * 	 * that this button provides no implementation -- the behavior of minimizing	 * a window is	 * 	 * implementation-specific, so the minimize event must be handled and a	 * custom minimize	 * 	 * behavior implemented for this option to be useful.	 */	public boolean minimizable = false;	/**	 * 	 * True to make the window modal and mask everything behind it when	 * displayed, false to	 * 	 * display it without restricting access to other UI elements (defaults to	 * false).	 */	public boolean modal = false;	/**	 * 	 * Allows override of the built-in processing for the escape key. Default	 * action is to	 * 	 * close the Window (performing whatever action is specified in closeAction.	 * To prevent	 * 	 * the Window closing when the escape key is pressed, specify this as	 * Ext.emptyFn	 * 	 * (See Ext.emptyFn).	 */	public JsFunction onEsc;	/**	 * 	 * True to render the window body with a transparent background so that it	 * will blend	 * 	 * into the framing elements, false to add a lighter background color to	 * visually highlight	 * 	 * the body element and separate it more distinctly from the surrounding	 * frame	 * 	 * (defaults to false).	 */	public boolean plain = false;	/**	 * 	 * True to allow user resizing at each edge and corner of the window, false	 * to disable	 * 	 * resizing (defaults to true).	 */	public boolean resizable = true;	/**	 * 	 * A valid Ext.Resizable handles config string (defaults to 'all'). Only	 * applies when	 * 	 * resizable = true. Possible values:	 * 	 * <ul>	 * 	 * <li>'n': north</li>	 * 	 * <li>'s': south</li>	 * 	 * <li>'e': east</li>	 * 	 * <li>'w': west</li>	 * 	 * <li>'nw': northwest</li>	 * 	 * <li>'sw': southwest</li>	 * 	 * <li>'se': southeast</li>	 * 	 * <li>'ne': northeast</li>	 * 	 * <li>'all': all</li>	 * 	 * </ul>	 */	public String resizeHandles;	/**	 * 	 * <p>	 * The registered xtype to create. This config option is not used when	 * passing a	 * 	 * config object into a constructor. This config option is used only when	 * lazy	 * 	 * instantiation is being used, and a child item of a Container is being	 * 	 * specified not as a fully instantiated Component, but as a Component	 * config	 * 	 * object. The xtype will be looked up at render time up to determine what	 * 	 * type of child Component to create.	 * </p>	 * 	 * 	 * 	 * @see XTypes <p>	 *      If you subclass Components to create your own Components, you may	 *      register	 * 	 *      them using Ext.ComponentMgr.registerType in order to be able to take	 *      advantage	 * 	 *      of lazy instantiation and rendering.	 *      </p>	 */	public String xtype = XTypes.window;		public Window() {		super();	}		@Override	protected void _postProcessToString() {		super._postProcessToString();		if (animateTarget != null)			put("animateTarget", animateTarget);		if (baseCls != null)			put("baseCls", baseCls);		if (!closable)			put("closable", closable);		if (closeAction != null)			put("closeAction", closeAction);		if (constrain)			put("constrain", constrain);		if (constrainHeader)			put("constrainHeader", constrainHeader);		if (defaultButton != null)			put("defaultButton", defaultButton);		if (!draggable)			put("draggable", draggable);		if (!expandOnShow)			put("expandOnShow", expandOnShow);		if (manager != null)			put("manager", manager);		if (maximizable)			put("maximizable", maximizable);		if (minHeight != 100)			put("minHeight", minHeight);		if (minimizable)			put("minimizable", minimizable);		if (minWidth != 200)			put("minWidth", minWidth);		if (modal)			put("modal", modal);		if (onEsc != null)			put("onEsc", onEsc);		if (plain)			put("plain", plain);		if (!resizable)			put("resizable", resizable);		if (resizeHandles != null)			put("resizeHandles", resizeHandles);		if (xtype != null)			put("xtype", xtype);	}		@Override	public String toString() {		_postProcessToString();		return "new " + TAG + "(" + JsHelper.printJsObject(this) + ")";	}}
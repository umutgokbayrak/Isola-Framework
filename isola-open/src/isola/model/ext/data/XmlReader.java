package isola.model.ext.data;import isola.helpers.JsHelper;/** *  * <p> * Data reader class to create an Array of Ext.data.Record objects from an XML * document *  * based on mappings in a provided Ext.data.Record constructor. * </p> *  *  *  * <p> * Note that in order for the browser to parse a returned XML document, the * Content-Type *  * header in the HTTP response must be set to "text/xml". * </p> *  *  *  * <p> * Example code: * </p> *  *  *  * <pre> * &lt;code&gt; * 
 *  var Employee = Ext.data.Record.create([ * 
 *  {name: 'name', mapping: 'name'},     // &quot;mapping&quot; property not needed if it's the same as &quot;name&quot; * 
 *  {name: 'occupation'}                 // This field will use &quot;occupation&quot; as the mapping. * 
 * ]); * 
 *  * 
 * var myReader = new Ext.data.XmlReader({ * 
 *  totalRecords: &quot;results&quot;, // The element which contains the total dataset size (optional) * 
 *  record: &quot;row&quot;,           // The repeated element which contains row information * 
 *  id: &quot;id&quot;                 // The element within the row that provides an ID for the record (optional) * 
 * }, Employee); * 
 * &lt;/code&gt; * </pre> *  *  *  * <p> * This would consume an XML file like this: * </p> *  *  *  * <pre><code> *  *  *  * @author Umut Gokbayrak */public class XmlReader extends DataReader {	private static final long serialVersionUID = 207463505627164208L;	private static final String TAG = "Ext.data.XmlReader";	/**	 * 	 * The DomQuery path relative from the record element to the element that	 * contains a record	 * 	 * identifier value.	 */	public String id;	/**	 * 	 * The DomQuery path to the repeated element which contains record	 * information.	 */	public String record;	/**	 * 	 * The DomQuery path to the success attribute used by forms.	 */	public String success;	/**	 * 	 * The DomQuery path from which to retrieve the total number of records in	 * the dataset. This	 * 	 * is only needed if the whole dataset is not passed in one go, but is being	 * paged from the	 * 	 * remote server.	 */	public String totalRecords;		@Override	protected void _postProcessToString() {		super._postProcessToString();		if (id != null)			put("id", id);		if (record != null)			put("record", record);		if (success != null)			put("success", success);		if (totalRecords != null)			put("totalRecords", totalRecords);	}		@Override	public String toString() {		_postProcessToString();		return "new " + TAG + "(" + JsHelper.printJsObject(this) + ")";	}}
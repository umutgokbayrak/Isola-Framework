package isola.model.ext.data;import isola.helpers.JsHelper;import isola.model.core.JsObject;import isola.model.ext.base.Observable;/** *  * <p> * The class encapsulates a connection to the page's originating domain, * allowing *  * requests to be made either to a configured URL, or to a URL specified at * request *  * time. * </p> *  *  *  * <p> * Requests made by this class are asynchronous, and will return immediately. No *  * data from the server will be available to the statement immediately following * the *  * request call. To process returned data, use a callback in the request options *  * object, or an event listener. * </p> *  *  *  * <p> * <i>Note:</i> If you are doing a file upload, you will not get a normal * response *  * object sent back to your callback or event handler. Since the upload is * handled *  * via in IFRAME, there is no XMLHttpRequest. The response object is created * using *  * the innerHTML of the IFRAME's document as the responseText property and, if * present, *  * the IFRAME's XML document as the responseXML property. * </p> *  *  *  * <p> * This means that a valid XML or HTML document must be returned. If JSON data * is *  * required, it is suggested that it be placed either inside a <textarea> in an * HTML *  * document and retrieved from the responseText using a regex, or inside a CDATA *  * section in an XML document and retrieved from the responseXML using standard * DOM *  * methods. * </p> *  *  *  * @author Umut Gokbayrak */public class Connection extends Observable {	private static final long serialVersionUID = 4801081086452853285L;	private static final String TAG = "Ext.data.Connection";	/**	 * 	 * (Optional) Whether this request should abort any pending requests.	 * (defaults to false)	 */	public boolean autoAbort = false;	/**	 * 	 * (Optional) An object containing request headers which are added to each	 * request	 * 	 * made by this object. (defaults to undefined)	 */	public JsObject defaultHeaders;	/**	 * 	 * (Optional) True to add a unique cache-buster param to GET requests.	 * (defaults to true)	 */	public boolean disableCaching = true;	/**	 * 	 * (Optional) An object containing properties which are used as extra	 * parameters to each	 * 	 * request made by this object. (defaults to undefined)	 */	public JsObject extraParams;	/**	 * 	 * (Optional) The default HTTP method to be used for requests. (defaults to	 * undefined; if	 * 	 * not set but parms are present will use POST, otherwise GET)	 */	public String method;	/**	 * 	 * (Optional) The timeout in milliseconds to be used for requests. (defaults	 * to 30000)	 */	public int timeout = 30000;	/**	 * 	 * (Optional) The default URL to be used for requests to the server.	 * (defaults to undefined)	 */	public String url;		@Override	protected void _postProcessToString() {		super._postProcessToString();		if (autoAbort)			put("autoAbort", autoAbort);		if (defaultHeaders != null)			put("defaultHeaders", defaultHeaders);		if (!disableCaching)			put("disableCaching", disableCaching);		if (extraParams != null)			put("extraParams", extraParams);		if (method != null)			put("method", method);		if (timeout != 30000)			put("timeout", timeout);		if (url != null)			put("url", url);	}		@Override	public String toString() {		_postProcessToString();		return "new " + TAG + "(" + JsHelper.printJsObject(this) + ")";	}}
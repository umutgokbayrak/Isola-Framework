package isola.model.ext.data;import isola.helpers.JsHelper;import isola.model.core.JsObject;/** *  * <p> * Instances of this class encapsulate both record definition information, and * record *  * value information for use in Ext.data.Store objects, or any code which needs * to access *  * Records cached in an Ext.data.Store object. * </p> *  *  *  * <p> * Constructors for this class are generated by passing an Array of field * definition *  * objects to create. Instances are usually only created by Ext.data.Reader * implementations *  * when processing unformatted data objects. * </p> *  *  *  * <p> * Record objects generated by this constructor inherit all the methods of * Ext.data.Record *  * listed below. * </p> *  *  *  * @author Umut Gokbayrak */public class Record extends JsObject {	private static final long serialVersionUID = -8831786091423882029L;	private static final String TAG = "Ext.data.Record";	/**	 * 	 * The data for this record an object hash.	 */	public JsObject data;	/**	 * 	 * Readonly flag - true if this record has been modified.	 */	public boolean dirty = false;	/**	 * 	 * The unique ID of the record as specified at construction time.	 */	public String id;	/**	 * 	 * This object contains a key and value storing the original values of all	 * modified fields	 * 	 * or is null if no fields have been modified.	 */	public JsObject modified;		@Override	protected void _postProcessToString() {		super._postProcessToString();		if (data != null)			put("data", data);		if (dirty)			put("dirty", dirty);		if (id != null)			put("id", id);		if (modified != null)			put("modified", modified);	}		@Override	public String toString() {		_postProcessToString();		return "new " + TAG + "(" + JsHelper.printJsObject(this) + ")";	}}
package isola.model.ext.data;import isola.helpers.JsHelper;/** *  * <p> * An implementation of Ext.data.DataProxy that reads a data object from a * Connection *  * object configured to reference a certain URL. * </p> *  *  *  * <p> * Note that this class cannot be used to retrieve data from a domain other than * the *  * domain from which the running page was served. * </p> *  *  *  * <p> * For cross-domain access to remote data, use a ScriptTagProxy. * </p> *  *  *  * <p> * Be aware that to enable the browser to parse an XML document, the server must * set *  * the Content-Type header in the HTTP response to "text/xml". * </p> *  *  *  * @author Umut Gokbayrak */public class HttpProxy extends DataProxy {	private static final long serialVersionUID = -2997849291650185741L;	private static final String TAG = "Ext.data.HttpProxy";	private Connection conn;		/**	 * The timeout for the http proxy	 */	public Integer timeout = 30000;		public HttpProxy() {		super();	}		public HttpProxy(Connection conn) {		this.conn = conn;	}		@Override	protected void _postProcessToString() {		super._postProcessToString();		if (timeout != 30000)			put("timeout", timeout);	}		@Override	public String toString() {		_postProcessToString();		if (conn == null) {			return "new " + TAG + "(" + JsHelper.printJsObject(this) + ")";		}		return "new " + TAG + "(" + conn.toString() + ")";	}}
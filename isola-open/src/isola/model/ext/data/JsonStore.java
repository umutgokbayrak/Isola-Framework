package isola.model.ext.data;import isola.helpers.JsHelper;import isola.model.core.JsArray;import isola.model.core.JsObject;/** *  * Small helper class to make creating Stores for JSON data easier. *  *  *  * <pre> * &lt;code&gt; * 
 * var store = new Ext.data.JsonStore({ * 
 *   url: 'get-images.php', * 
 *   root: 'images', * 
 *   fields: ['name', 'url', {name:'size', type: 'float'}, {name:'lastmod', type:'date'}] * 
 * }); * 
 * &lt;/code&gt; * </pre> *  *  *  * This would consume a returned object of the form: *  *  *  * <pre> * &lt;code&gt; * 
 * { * 
 *   images: [ * 
 *       {name: 'Image one', url:'/GetImage.php?id=1', size:46.5, lastmod: new Date(2007, 10, 29)}, * 
 *       {name: 'Image Two', url:'/GetImage.php?id=2', size:43.2, lastmod: new Date(2007, 10, 30)} * 
 *   ] * 
 * } * 
 * &lt;/code&gt; * </pre> *  *  *  * An object literal of this form could also be used as the data config option. * Note: *  * Although they are not listed, this class inherits all of the config options * of *  * Store, JsonReader. *  *  *  * @author Umut Gokbayrak */public class JsonStore extends Store {	private static final long serialVersionUID = -1101245476460714115L;	private static final String TAG = "Ext.data.JsonStore";	/**	 * 	 * Name of the property within a row object that contains a record	 * identifier value.	 */	public String id;	/**	 * 	 * name of the property which contains the Array of row objects.	 */	public String root;	/**	 * 	 * Name of the property from which to retrieve the success attribute used by	 * forms.	 */	public String successProperty;	/**	 * 	 * Name of the property from which to retrieve the total number of records	 * in the	 * 	 * dataset. This is only needed if the whole dataset is not passed in one	 * go, but	 * 	 * is being paged from the remote server.	 */	public String totalProperty;	/**	 * 	 * A data object readable this object's JsonReader. Either this option, or	 * the url option	 * 	 * must be specified.	 */	public JsObject data;	/**	 * 	 * Either an Array of field definition objects as passed to	 * Ext.data.Record.create, or a	 * 	 * Record constructor created using Ext.data.Record.create.	 */	public JsArray fields;	/**	 * 	 * The URL from which to load data through an HttpProxy. Either this option,	 * or the data	 * 	 * option must be specified.	 */	public String url;		@Override	protected void _postProcessToString() {		super._postProcessToString();		if (id != null)			put("id", id);		if (root != null)			put("root", root);		if (successProperty != null)			put("successProperty", successProperty);		if (totalProperty != null)			put("totalProperty", totalProperty);		if (data != null)			put("data", data);		if (fields != null)			put("fields", fields);		if (url != null)			put("url", url);	}		@Override	public String toString() {		_postProcessToString();		return "new " + TAG + "(" + JsHelper.printJsObject(this) + ")";	}}
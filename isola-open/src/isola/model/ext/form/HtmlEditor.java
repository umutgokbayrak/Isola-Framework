package isola.model.ext.form;import isola.helpers.JsHelper;import isola.model.core.JsArray;import isola.model.ext.constants.XTypes;/** *  * <p> * Provides a lightweight HTML Editor component. * </p> *  *  *  * <p> * Note: The focus/blur and validation marking functionality inherited from * Ext.form.Field *  * is NOT supported by this editor. An Editor is a sensitive component that * can't be used in *  * all spots standard fields can be used. Putting an Editor within any element * that has display *  * set to 'none' can cause problems in Safari and Firefox due to their default * iframe reloading *  * bugs. * </p> *  *  *  * @author Umut Gokbayrak */public class HtmlEditor extends Field {	private static final long serialVersionUID = 6815738608541329112L;	private static final String TAG = "Ext.form.HtmlEditor";	/**	 * 	 * The default text for the create link prompt	 */	public String createLinkText;	/**	 * 	 * The default value for the create link prompt (defaults to http://)	 */	public String defaultLinkValue;	/**	 * 	 * Enable the left, center, right alignment buttons (defaults to true)	 */	public boolean enableAlignments = true;	/**	 * 	 * Enable the fore/highlight color buttons (defaults to true)	 */	public boolean enableColors = true;	/**	 * 	 * Enable font selection. Not available in Safari. (defaults to true)	 */	public boolean enableFont = true;	/**	 * 	 * Enable the increase/decrease font size buttons (defaults to true)	 */	public boolean enableFontSize = true;	/**	 * 	 * Enable the bold, italic and underline buttons (defaults to true)	 */	public boolean enableFormat = true;	/**	 * 	 * Enable the create link button. Not available in Safari. (defaults to	 * true)	 */	public boolean enableLinks = true;	/**	 * 	 * Enable the bullet and numbered list buttons. Not available in Safari.	 * (defaults to true)	 */	public boolean enableLists = true;	/**	 * 	 * Enable the switch to source edit button. Not available in Safari.	 * (defaults to true)	 */	public boolean enableSourceEdit = true;	/**	 * 	 * An array of available font families	 */	public JsArray fontFamilies;	/**	 * 	 * Width of the object	 */	public String width;	/**	 * 	 * Height of the object	 */	public String height;	/**	 * 	 * <p>	 * The registered xtype to create. This config option is not used when	 * passing a	 * 	 * config object into a constructor. This config option is used only when	 * lazy	 * 	 * instantiation is being used, and a child item of a Container is being	 * 	 * specified not as a fully instantiated Component, but as a Component	 * config	 * 	 * object. The xtype will be looked up at render time up to determine what	 * 	 * type of child Component to create.	 * </p>	 * 	 * 	 * 	 * @see XTypes <p>	 *      If you subclass Components to create your own Components, you may	 *      register	 * 	 *      them using Ext.ComponentMgr.registerType in order to be able to take	 *      advantage	 * 	 *      of lazy instantiation and rendering.	 *      </p>	 */	public String xtype = XTypes.htmleditor;		@Override	protected void _postProcessToString() {		super._postProcessToString();		if (createLinkText != null)			put("createLinkText", createLinkText);		if (defaultLinkValue != null)			put("defaultLinkValue", defaultLinkValue);		if (!enableAlignments)			put("enableAlignments", enableAlignments);		if (!enableColors)			put("enableColors", enableColors);		if (!enableFont)			put("enableFont", enableFont);		if (!enableFontSize)			put("enableFontSize", enableFontSize);		if (!enableFormat)			put("enableFormat", enableFormat);		if (!enableLinks)			put("enableLinks", enableLinks);		if (!enableLists)			put("enableLists", enableLists);		if (!enableSourceEdit)			put("enableSourceEdit", enableSourceEdit);		if (fontFamilies != null)			put("fontFamilies", fontFamilies);		if (width != null)			put("width", width);		if (height != null)			put("height", height);		if (xtype != null)			put("xtype", xtype);	}		@Override	public String toString() {		_postProcessToString();		return "new " + TAG + "(" + JsHelper.printJsObject(this) + ")";	}}
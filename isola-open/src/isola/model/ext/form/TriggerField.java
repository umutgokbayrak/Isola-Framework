package isola.model.ext.form;import isola.helpers.JsHelper;import isola.model.core.JsObject;import isola.model.ext.constants.XTypes;/** *  * <p> * Provides a convenient wrapper for TextFields that adds a clickable trigger * button *  * (looks like a combobox by default). The trigger has no default action, so you * must *  * assign a function to implement the trigger click handler by overriding * onTriggerClick. *  * You can create a TriggerField directly, as it renders exactly like a combobox * for *  * which you can provide a custom implementation. For example: * </p> *  *  *  * <pre> * &lt;code&gt; * 
 * var trigger = new Ext.form.TriggerField(); * 
 * trigger.onTriggerClick = myTriggerFn; * 
 * trigger.applyToMarkup('my-field'); * 
 * &lt;/code&gt; * </pre> *  *  *  * However, in general you will most likely want to use TriggerField as the base * class *  * for a reusable component. Ext.form.DateField and Ext.form.ComboBox are * perfect *  * examples of this. *  *  *  * @author Umut Gokbayrak */public class TriggerField extends TextField {	private static final long serialVersionUID = 342733731138403120L;	private static final String TAG = "Ext.form.TriggerField";	/**	 * 	 * A DomHelper element spec, or true for a default element spec (defaults to	 * 	 * {tag: "input", type: "text", size: "16", autocomplete: "off"})	 */	public JsObject autoCreate;	/**	 * 	 * True to hide the trigger element and display only the base text field	 * (defaults	 * 	 * to false)	 */	public boolean hideTrigger = false;	/**	 * 	 * A CSS class to apply to the trigger	 */	public String triggerClass;		public TriggerField() {		super();	}		/**	 * 	 * <p>	 * The registered xtype to create. This config option is not used when	 * passing a	 * 	 * config object into a constructor. This config option is used only when	 * lazy	 * 	 * instantiation is being used, and a child item of a Container is being	 * 	 * specified not as a fully instantiated Component, but as a Component	 * config	 * 	 * object. The xtype will be looked up at render time up to determine what	 * 	 * type of child Component to create.	 * </p>	 * 	 * 	 * 	 * @see XTypes <p>	 *      If you subclass Components to create your own Components, you may	 *      register	 * 	 *      them using Ext.ComponentMgr.registerType in order to be able to take	 *      advantage	 * 	 *      of lazy instantiation and rendering.	 *      </p>	 */	public String xtype = XTypes.trigger;		@Override	protected void _postProcessToString() {		super._postProcessToString();		if (autoCreate != null)			put("autoCreate", autoCreate);		if (hideTrigger)			put("hideTrigger", hideTrigger);		if (triggerClass != null)			put("triggerClass", triggerClass);		if (xtype != null)			put("xtype", xtype);	}		@Override	public String toString() {		_postProcessToString();		return "new " + TAG + "(" + JsHelper.printJsObject(this) + ")";	}}
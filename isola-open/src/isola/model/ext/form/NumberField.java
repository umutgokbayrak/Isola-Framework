package isola.model.ext.form;import isola.helpers.JsHelper;import isola.model.ext.constants.XTypes;/** *  * Numeric text field that provides automatic keystroke filtering and numeric * validation. *  *  *  * @author Umut Gokbayrak */public class NumberField extends TextField {	private static final long serialVersionUID = -4156413976250495370L;	private static final String TAG = "Ext.form.NumberField";	/**	 * 	 * False to disallow decimal values (defaults to true)	 */	public boolean allowDecimals = true;	/**	 * 	 * False to prevent entering a negative sign (defaults to true)	 */	public boolean allowNegative = true;	/**	 * 	 * The base set of characters to evaluate as valid numbers (defaults to	 * '0123456789').	 */	public String baseChars;	/**	 * 	 * The maximum precision to display after the decimal separator (defaults to	 * 2)	 */	public int decimalPrecision = 2;	/**	 * 	 * Character(s) to allow as the decimal separator (defaults to '.')	 */	public String decimalSeparator;	/**	 * 	 * The default CSS class for the field (defaults to	 * "x-form-field x-form-num-field")	 */	public String fieldClass;	/**	 * 	 * Error text to display if the maximum value validation fails (defaults to	 * "The maximum value	 * 	 * for this field is {maxValue}")	 */	public String maxText;	/**	 * 	 * The maximum allowed value (defaults to Number.MAX_VALUE)	 */	public int maxValue = 0;	/**	 * 	 * Error text to display if the minimum value validation fails (defaults to	 * "The	 * 	 * minimum value for this field is {minValue}")	 */	public String minText;	/**	 * 	 * The minimum allowed value (defaults to Number.NEGATIVE_INFINITY)	 */	public int minValue = 0;	/**	 * 	 * Error text to display if the value is not a valid number. For example,	 * this can	 * 	 * happen if a valid character like '.' or '-' is left in the field with no	 * number	 * 	 * (defaults to "{value} is not a valid number")	 */	public String nanText;	/**	 * 	 * <p>	 * The registered xtype to create. This config option is not used when	 * passing a	 * 	 * config object into a constructor. This config option is used only when	 * lazy	 * 	 * instantiation is being used, and a child item of a Container is being	 * 	 * specified not as a fully instantiated Component, but as a Component	 * config	 * 	 * object. The xtype will be looked up at render time up to determine what	 * 	 * type of child Component to create.	 * </p>	 * 	 * 	 * 	 * @see XTypes <p>	 *      If you subclass Components to create your own Components, you may	 *      register	 * 	 *      them using Ext.ComponentMgr.registerType in order to be able to take	 *      advantage	 * 	 *      of lazy instantiation and rendering.	 *      </p>	 */	public String xtype = XTypes.numberfield;		public NumberField() {		super();	}		protected void _postProcessToString() {		super._postProcessToString();		if (!allowDecimals)			put("allowDecimals", allowDecimals);		if (!allowNegative)			put("allowNegative", allowNegative);		if (baseChars != null)			put("baseChars", baseChars);		if (decimalPrecision != 2)			put("decimalPrecision", decimalPrecision);		if (decimalSeparator != null)			put("decimalSeparator", decimalSeparator);		if (fieldClass != null)			put("fieldClass", fieldClass);		if (maxText != null)			put("maxText", maxText);		if (maxValue != 0)			put("maxValue", maxValue);		if (minText != null)			put("minText", minText);		if (minValue != 0)			put("minValue", minValue);		if (nanText != null)			put("nanText", nanText);		if (xtype != null)			put("xtype", xtype);	}		@Override	public String toString() {		_postProcessToString();		return "new " + TAG + "(" + JsHelper.printJsObject(this) + ")";	}}
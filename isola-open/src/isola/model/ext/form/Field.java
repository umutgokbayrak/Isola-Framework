package isola.model.ext.form;import isola.helpers.JsHelper;import isola.model.core.JsObject;import isola.model.ext.constants.XTypes;import isola.model.ext.container.BoxComponent;/** *  * Base class for form fields that provides default event handling, sizing, * value handling *  * and other functionality. *  *  *  * @author Umut Gokbayrak */public class Field extends BoxComponent {	private static final long serialVersionUID = -599120976414935963L;	private static final String TAG = "Ext.form.Field";	/**	 * 	 * A DomHelper element spec, or true for a default element spec (defaults to	 * 	 * {tag: "input", type: "text", size: "20", autocomplete: "off"})	 */	public JsObject autoCreate;	/**	 * 	 * The CSS class used to provide field clearing (defaults to	 * 'x-form-clear-left')	 */	public String clearCls;	/**	 * 	 * True to disable the field (defaults to false).	 */	public boolean disabled = false;	/**	 * 	 * The default CSS class for the field (defaults to "x-form-field")	 */	public String fieldClass;	/**	 * 	 * The label text to display next to this field (defaults to '')	 */	public String fieldLabel;	/**	 * 	 * The CSS class to use when the field receives focus (defaults to	 * "x-form-focus")	 */	public String focusClass;	/**	 * 	 * True to completely hide the label element (defaults to false)	 */	public boolean hideLabel = false;	/**	 * 	 * The type attribute for input fields -- e.g. radio, text, password	 * (defaults to "text").	 */	public String inputType;	/**	 * 	 * The CSS class to use when marking a field invalid (defaults to	 * "x-form-invalid")	 */	public String invalidClass;	/**	 * 	 * The error text to use when marking a field invalid and no message is	 * provided	 * 	 * (defaults to "The value in this field is invalid")	 */	public String invalidText;	/**	 * 	 * <p>	 * An additional CSS class to apply to the wrapper element of this field	 * (defaults	 * 	 * to the container's itemCls value if set, or ''). Since it is applied to	 * the	 * 	 * wrapper, it allows you to write standard CSS rules that can apply to the	 * field,	 * 	 * the label (if specified) or any other element within the markup for the	 * field.	 * 	 * Example use:	 * </p>	 * 	 * 	 * 	 * <pre>	 * &lt;code&gt;	 * 
	 * // Apply a style to the field's label:	 * 
	 * &lt;style&gt;	 * 
	 *     .required .x-form-item-label {font-weight:bold;color:red;}	 * 
	 * &lt;/style&gt;	 * 
	 * 	 * 
	 * new Ext.FormPanel({	 * 
	 * 	height: 100,	 * 
	 * 	renderTo: document.body,	 * 
	 * 	items: [{	 * 
	 * 		xtype: 'textfield',	 * 
	 * 		fieldLabel: 'Name',	 * 
	 * 		itemCls: 'required' //this label will be styled	 * 
	 * 	},{	 * 
	 * 		xtype: 'textfield',	 * 
	 * 		fieldLabel: 'Favorite Color'	 * 
	 * 	}]	 * 
	 * });	 * 
	 * &lt;/code&gt;	 * </pre>	 */	public String itemCls;	/**	 * 	 * The standard separator to display after the text of each form label	 * (defaults to the	 * 	 * value of Ext.layout.FormLayout.labelSeparator, which is a colon ':' by	 * default).	 * 	 * To display no separator for this field's label specify empty string ''.	 */	public String labelSeparator;	/**	 * 	 * A CSS style specification to apply directly to this field's label	 * (defaults to the	 * 	 * container's labelStyle value if set, or ''). For example, labelStyle:	 * 'font-weight:bold;'.	 */	public String labelStyle;	/**	 * 	 * The effect used when displaying a validation message under the field	 * (defaults to 'normal').	 */	public String msgFx;	/**	 * 	 * The location where error text should display. Should be one of the	 * following values	 * 	 * (defaults to 'qtip'):	 * 	 * <pre>	 * 	 * Value         Description	 * 
	 * -----------   ----------------------------------------------------------------------	 * 
	 * qtip          Display a quick tip when the user hovers over the field	 * 
	 * title         Display a default browser title attribute popup	 * 
	 * under         Add a block div beneath the field containing the error text	 * 
	 * side          Add an error icon to the right of the field with a popup on hover	 * 
	 * [element id]  Add the error text directly to the innerHTML of the specified element	 * 	 * </pre>	 */	public String msgTarget;	/**	 * 	 * The field's HTML name attribute.	 */	public String name;	/**	 * 	 * True to mark the field as readOnly in HTML (defaults to false) -- Note:	 * this only sets	 * 	 * the element's readOnly DOM attribute.	 */	public boolean readOnly;	/**	 * 	 * The tabIndex for this field. Note this only applies to fields that are	 * rendered, not those	 * 	 * which are built via applyTo (defaults to undefined).	 */	public int tabIndex = 0;	/**	 * 	 * Whether the field should validate when it loses focus (defaults to true).	 */	public boolean validateOnBlur = true;	/**	 * 	 * The length of time in milliseconds after user input begins until	 * validation is initiated	 * 	 * (defaults to 250)	 */	public int validationDelay = 250;	/**	 * 	 * The event that should initiate field validation. Set to false to disable	 * automatic	 * 	 * validation (defaults to "keyup").	 */	public String validationEvent;	/**	 * 	 * A value to initialize this field with.	 */	public String value;	/**	 * 	 * To use onKeyXXX events this must be set to true	 */	public boolean enableKeyEvents;	/**	 * 	 * <p>	 * The registered xtype to create. This config option is not used when	 * passing a	 * 	 * config object into a constructor. This config option is used only when	 * lazy	 * 	 * instantiation is being used, and a child item of a Container is being	 * 	 * specified not as a fully instantiated Component, but as a Component	 * config	 * 	 * object. The xtype will be looked up at render time up to determine what	 * 	 * type of child Component to create.	 * </p>	 * 	 * 	 * 	 * @see XTypes <p>	 *      If you subclass Components to create your own Components, you may	 *      register	 * 	 *      them using Ext.ComponentMgr.registerType in order to be able to take	 *      advantage	 * 	 *      of lazy instantiation and rendering.	 *      </p>	 */	public String xtype = XTypes.field;		public Field() {		super();	}		protected void _postProcessToString() {		super._postProcessToString();		if (enableKeyEvents)			put("enableKeyEvents", enableKeyEvents);		if (autoCreate != null)			put("autoCreate", autoCreate);		if (clearCls != null)			put("clearCls", clearCls);		if (disabled)			put("disabled", disabled);		if (fieldClass != null)			put("fieldClass", fieldClass);		if (fieldLabel != null)			put("fieldLabel", fieldLabel);		if (focusClass != null)			put("focusClass", focusClass);		if (hideLabel)			put("hideLabel", hideLabel);		if (inputType != null)			put("inputType", inputType);		if (invalidClass != null)			put("invalidClass", invalidClass);		if (invalidText != null)			put("invalidText", invalidText);		if (itemCls != null)			put("itemCls", itemCls);		if (labelSeparator != null)			put("labelSeparator", labelSeparator);		if (labelStyle != null)			put("labelStyle", labelStyle);		if (msgFx != null)			put("msgFx", msgFx);		if (msgTarget != null)			put("msgTarget", msgTarget);		if (name != null) {			put("name", name);			if (id == null) {				put("id", name);			}		}		if (readOnly)			put("readOnly", readOnly);		if (tabIndex != 0)			put("tabIndex", tabIndex);		if (!validateOnBlur)			put("validateOnBlur", validateOnBlur);		if (validationDelay != 250)			put("validationDelay", validationDelay);		if (value != null)			put("value", value);		if (xtype != null)			put("xtype", xtype);	}		@Override	public String toString() {		_postProcessToString();		return "new " + TAG + "(" + JsHelper.printJsObject(this) + ")";	}}
package isola.model.ext.form;import isola.helpers.JsHelper;import isola.model.core.JsArray;import isola.model.ext.base.Component;import isola.model.ext.constants.XTypes;import java.util.Date;/** *  * Simple date picker class. *  *  *  * @author Umut Gokbayrak */public class DatePicker extends Component {	private static final long serialVersionUID = -7409393602539322125L;	private static final String TAG = "Ext.DatePicker";	/**	 * 	 * The text to display on the cancel button	 */	public String cancelText;	/**	 * 	 * True to constrain the date picker to the viewport (defaults to true)	 */	public boolean constrainToViewport = true;	/**	 * 	 * An array of textual day names which can be overriden for localization	 * 	 * support (defaults to Date.dayNames)	 */	public JsArray dayNames;	/**	 * 	 * The tooltip text to display when the date falls on a disabled date	 * 	 * (defaults to "")	 */	public String disabledDatesText;	/**	 * 	 * The default date format string which can be overriden for localization	 * 	 * support. The format must be valid according to Date.parseDate (defaults	 * to 'm/d/y').	 */	public String format;	/**	 * 	 * Maximum allowable date (JavaScript date object, defaults to null)	 */	public Date maxDate;	/**	 * 	 * The error text to display if the maxDate validation fails (defaults to	 * "This date	 * 	 * is after the maximum date")	 */	public String maxText;	/**	 * 	 * Minimum allowable date (JavaScript date object, defaults to null)	 */	public Date minDate;	/**	 * 	 * The error text to display if the minDate validation fails (defaults to	 * "This date is	 * 	 * before the minimum date")	 */	public String minText;	/**	 * 	 * An array of textual month names which can be overriden for localization	 * support (defaults to Date.monthNames)	 */	public JsArray monthNames;	/**	 * 	 * The header month selector tooltip (defaults to 'Choose a month	 * (Control+Up/Down to move years)')	 */	public String monthYearText;	/**	 * 	 * The next month navigation button tooltip (defaults to 'Next Month	 * (Control+Right)')	 */	public String nextText;	/**	 * 	 * The text to display on the ok button	 */	public String okText;	/**	 * 	 * The previous month navigation button tooltip (defaults to 'Previous Month	 * (Control+Left)')	 */	public String prevText;	/**	 * 	 * Day index at which the week should begin, 0-based (defaults to 0, which	 * is Sunday)	 */	public int startDay = 1;	/**	 * 	 * The text to display on the button that selects the current date (defaults	 * to "Today")	 */	public String todayText;	/**	 * 	 * The tooltip to display for the button that selects the current date	 * (defaults to	 * 	 * "{current date} (Spacebar)")	 */	public String todayTip;	/**	 * 	 * <p>	 * The registered xtype to create. This config option is not used when	 * passing a	 * 	 * config object into a constructor. This config option is used only when	 * lazy	 * 	 * instantiation is being used, and a child item of a Container is being	 * 	 * specified not as a fully instantiated Component, but as a Component	 * config	 * 	 * object. The xtype will be looked up at render time up to determine what	 * 	 * type of child Component to create.	 * </p>	 * 	 * 	 * 	 * @see XTypes <p>	 *      If you subclass Components to create your own Components, you may	 *      register	 * 	 *      them using Ext.ComponentMgr.registerType in order to be able to take	 *      advantage	 * 	 *      of lazy instantiation and rendering.	 *      </p>	 */	public String xtype = XTypes.datepicker;		public DatePicker() {		super();	}		protected void _postProcessToString() {		super._postProcessToString();		if (cancelText != null)			put("cancelText", cancelText);		if (!constrainToViewport)			put("constrainToViewport", constrainToViewport);		if (dayNames != null)			put("dayNames", dayNames);		if (disabledDatesText != null)			put("disabledDatesText", disabledDatesText);		if (format != null)			put("format", format);		if (maxDate != null)			put("maxDate", maxDate);		if (maxText != null)			put("maxText", maxText);		if (minDate != null)			put("minDate", maxDate);		if (minText != null)			put("minText", maxText);		if (monthNames != null)			put("monthNames", monthNames);		if (monthYearText != null)			put("monthYearText", monthYearText);		if (nextText != null)			put("nextText", nextText);		if (okText != null)			put("okText", okText);		if (prevText != null)			put("prevText", prevText);		if (startDay != 0)			put("startDay", startDay);		if (todayText != null)			put("todayText", todayText);		if (todayTip != null)			put("todayTip", todayTip);		if (xtype != null)			put("xtype", xtype);	}		@Override	public String toString() {		_postProcessToString();		return "new " + TAG + "(" + JsHelper.printJsObject(this) + ")";	}}
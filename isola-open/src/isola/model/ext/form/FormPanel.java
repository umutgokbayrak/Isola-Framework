package isola.model.ext.form;import isola.helpers.JsHelper;import isola.model.core.JsObject;import isola.model.ext.constants.XTypes;import isola.model.ext.container.Panel;import isola.model.ext.data.DataReader;/** *  * <p> * FormPanel uses a Ext.layout.FormLayout internally, and that is required for * fields and labels to *  * work correctly within the FormPanel's layout. To nest additional layout * styles within a FormPanel, *  * you should nest additional Panels or other containers that can provide * additional layout *  * functionality. You should not override FormPanel's layout. * </p> *  *  *  * <p> * By default, Ext Forms are submitted through Ajax, using Ext.form.Action. To * enable normal *  * browser submission of the Ext Form contained in this FormPanel, override the * Form's onSubmit, *  * and submit methods: * </p> *  *  *  * <pre><code>
 * var myForm = new Ext.form.FormPanel({
 *        onSubmit: Ext.emptyFn,
 *       submit: function() {
 *           this.getForm().getEl().dom.submit();
 *       }
 * }); *  *  *  * @author Umut Gokbayrak */public class FormPanel extends Panel {	private static final long serialVersionUID = 3528421289343346317L;	private static final String TAG = "Ext.form.FormPanel";	/**	 * 	 * Valid values are "left," "center" and "right" (defaults to "center")	 */	public String buttonAlign;	/**	 * 	 * (optional) The id of the FORM tag (defaults to an auto-generated id).	 */	public String formId;	/**	 * 	 * A css class to apply to the x-form-item of fields. This property cascades	 * 	 * to child containers.	 */	public String itemCls;	/**	 * 	 * Valid values are "left," "top" and "right" (defaults to "left"). This	 * property	 * 	 * cascades to child containers if not set.	 */	public String labelAlign;	/**	 * 	 * The width of labels. This property cascades to child containers.	 */	public int labelWidth = 0;	/**	 * 	 * Minimum width of all buttons in pixels (defaults to 75)	 */	public int minButtonWidth = 75;	/**	 * 	 * The milliseconds to poll valid state, ignored if monitorValid is not true	 * (defaults to	 * 	 * 200)	 */	public int monitorPoll = 200;	/**	 * 	 * If true the form monitors its valid state client-side and fires a looping	 * event with	 * 	 * that state. This is required to bind buttons to the valid state using the	 * config value	 * 	 * formBind:true on the button.	 */	public boolean monitorValid = true;	/**	 * 	 * Parameters to pass with all requests. e.g. baseParams: {id: '123', foo:	 * 'bar'}.	 */	public JsObject baseParams;	/**	 * 	 * Set to true if this form is a file upload.	 */	public boolean fileUpload = false;	/**	 * 	 * The request method to use (GET or POST) for form actions if one isn't	 * supplied in	 * 	 * the action options.	 */	public String method;	/**	 * 	 * An Ext.data.DataReader (e.g. Ext.data.XmlReader) to be used to read data	 * when executing "load" actions.	 * 	 * This is optional as there is built-in support for processing JSON.	 */	public DataReader reader;	/**	 * 	 * An Ext.data.DataReader (e.g. Ext.data.XmlReader) to be used to read data	 * when	 * 	 * reading validation errors on "submit" actions. This is completely	 * optional as	 * 	 * there is built-in support for processing JSON.	 */	public DataReader errorReader;	/**	 * 	 * Timeout for form actions in seconds (default is 30 seconds).	 */	public int timeout = 30;	/**	 * 	 * If set to true, form.reset() resets to the last loaded or setValues()	 * data instead	 * 	 * of when the form was first created.	 */	public boolean trackResetOnLoad = false;	/**	 * 	 * The URL to use for form actions if one isn't supplied in the action	 * options.	 */	public String url;	/**	 * 	 * If set to true, standard HTML form submits are used instead of XHR (Ajax)	 * 	 * style form submissions. (defaults to false)	 */	public boolean standardSubmit = false;	/**	 * 	 * <p>The registered xtype to create. This config option is not used when	 * passing a	 * 	 * config object into a constructor. This config option is used only when	 * lazy	 * 	 * instantiation is being used, and a child item of a Container is being	 * 	 * specified not as a fully instantiated Component, but as a Component	 * config	 * 	 * object. The xtype will be looked up at render time up to determine what	 * 	 * type of child Component to create.</p>	 * 	 * 	 * 	 * @see XTypes <p>If you subclass Components to create your own Components,	 *      you may register	 * 	 *      them using Ext.ComponentMgr.registerType in order to be able to take	 *      advantage	 * 	 *      of lazy instantiation and rendering.</p>	 */	public String xtype = XTypes.form;		public FormPanel() {		super();	}		protected void _postProcessToString() {		super._postProcessToString();		if (baseParams != null)			put("baseParams", baseParams);		if (buttonAlign != null)			put("buttonAlign", buttonAlign);		if (errorReader != null)			put("errorReader", errorReader);		if (fileUpload)			put("fileUpload", fileUpload);		if (formId != null)			put("formId", formId);		if (itemCls != null)			put("itemCls", itemCls);		if (labelAlign != null)			put("labelAlign", labelAlign);		if (labelWidth != 0)			put("labelWidth", labelWidth);		if (method != null)			put("method", method);		if (minButtonWidth != 75)			put("minButtonWidth", minButtonWidth);		if (monitorPoll != 200)			put("monitorPoll", monitorPoll);		if (!monitorValid)			put("monitorValid", monitorValid);		if (reader != null)			put("reader", reader);		if (timeout != 30)			put("timeout", timeout);		if (trackResetOnLoad)			put("trackResetOnLoad", trackResetOnLoad);		if (url != null)			put("url", url);		put("standardSubmit", standardSubmit);		if (xtype != null)			put("xtype", xtype);	}		@Override	public String toString() {		_postProcessToString();		return "new " + TAG + "(" + JsHelper.printJsObject(this) + ")";	}}
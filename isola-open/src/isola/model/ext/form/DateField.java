package isola.model.ext.form;import isola.helpers.JsHelper;import isola.model.core.JsArray;import isola.model.core.JsObject;import isola.model.ext.constants.XTypes;import java.util.Date;/** *  * Provides a date input field with a Ext.DatePicker dropdown and automatic date * validation. *  *  *  * @author Umut Gokbayrak */public class DateField extends TriggerField {	private static final long serialVersionUID = 3782764221843692300L;	private static final String TAG = "Ext.form.DateField";	/**	 * 	 * Multiple date formats separated by "|" to try when parsing a user input	 * value and	 * 	 * it doesn't match the defined format (defaults to	 * 'm/d/Y|m-d-y|m-d-Y|m/d|m-d|d').	 */	public String altFormats;	/**	 * 	 * A DomHelper element spec, or true for a default element spec (defaults to	 * 	 * {tag: "input", type: "text", size: "10", autocomplete: "off"})	 */	public JsObject autoCreate;	/**	 * 	 * <p>	 * An array of "dates" to disable, as strings. These strings will be used to	 * build a dynamic	 * 	 * regular expression so they are very powerful. Some examples:	 * </p>	 * 	 * ["03/08/2003", "09/16/2003"] would disable those exact dates<br/>	 * 	 * ["03/08", "09/16"] would disable those days for every year<br/>	 * 	 * ["^03/08"] would only match the beginning (useful if you are using short	 * years)<br/>	 * 	 * ["03/../2006"] would disable every day in March 2006<br/>	 * 	 * ["^03"] would disable every day in every March<br/>	 * 	 * <p>	 * In order to support regular expressions, if you are using a date format	 * that has "."	 * 	 * in it, you will have to escape the dot when restricting dates.	 * 	 * For example: ["03\\.08\\.03"].	 * </p>	 */	public JsArray disabledDates;	/**	 * 	 * The tooltip text to display when the date falls on a disabled date	 * (defaults to 'Disabled')	 */	public String disabledDatesText;	/**	 * 	 * An array of days to disable, 0 based. For example, [0, 6] disables Sunday	 * and Saturday	 * 	 * (defaults to null).	 */	public JsArray disabledDays;	/**	 * 	 * The tooltip to display when the date falls on a disabled day (defaults to	 * 'Disabled')	 */	public String disabledDaysText;	/**	 * 	 * The default date format string which can be overriden for localization	 * support. The format	 * 	 * must be valid according to Date.parseDate (defaults to 'm/d/y').	 */	public String format;	/**	 * 	 * The error text to display when the date in the field is invalid (defaults	 * to '{value}	 * 	 * is not a valid date - it must be in the format {format}').	 */	public String invalidText;	/**	 * 	 * The error text to display when the date in the cell is after maxValue	 * (defaults to 'The	 * 	 * date in this field must be before {maxValue}').	 */	public String maxText;	/**	 * 	 * The maximum allowed date. Can be either a Javascript date object or a	 * string date in a	 * 	 * valid format (defaults to null).	 */	public Date maxValue;	/**	 * 	 * The error text to display when the date in the cell is before minValue	 * (defaults to 'The	 * 	 * date in this field must be after {minValue}').	 */	public String minText;	/**	 * 	 * The minimum allowed date. Can be either a Javascript date object or a	 * string date in a	 * 	 * valid format (defaults to null).	 */	public Date minValue;	/**	 * 	 * An additional CSS class used to style the trigger button. The trigger	 * will always get	 * 	 * the class 'x-form-trigger' and triggerClass will be appended if specified	 * (defaults to	 * 	 * 'x-form-date-trigger' which displays a calendar icon).	 */	public String triggerClass;		public DateField() {		super();	}		/**	 * 	 * <p>	 * The registered xtype to create. This config option is not used when	 * passing a	 * 	 * config object into a constructor. This config option is used only when	 * lazy	 * 	 * instantiation is being used, and a child item of a Container is being	 * 	 * specified not as a fully instantiated Component, but as a Component	 * config	 * 	 * object. The xtype will be looked up at render time up to determine what	 * 	 * type of child Component to create.	 * </p>	 * 	 * 	 * 	 * @see XTypes <p>	 *      If you subclass Components to create your own Components, you may	 *      register	 * 	 *      them using Ext.ComponentMgr.registerType in order to be able to take	 *      advantage	 * 	 *      of lazy instantiation and rendering.	 *      </p>	 */	public String xtype = XTypes.datefield;		@Override	protected void _postProcessToString() {		super._postProcessToString();		if (altFormats != null)			put("altFormats", altFormats);		if (autoCreate != null)			put("autoCreate", autoCreate);		if (disabledDates != null)			put("disabledDates", disabledDates);		if (disabledDatesText != null)			put("disabledDatesText", disabledDatesText);		if (disabledDays != null)			put("disabledDays", disabledDays);		if (disabledDaysText != null)			put("disabledDaysText", disabledDaysText);		if (format != null)			put("format", format);		if (invalidText != null)			put("invalidText", invalidText);		if (maxText != null)			put("maxText", maxText);		if (maxValue != null)			put("maxValue", maxValue);		if (minText != null)			put("minText", minText);		if (minValue != null)			put("minValue", minValue);		if (triggerClass != null)			put("triggerClass", triggerClass);		if (xtype != null)			put("xtype", xtype);	}		@Override	public String toString() {		_postProcessToString();		return "new " + TAG + "(" + JsHelper.printJsObject(this) + ")";	}}
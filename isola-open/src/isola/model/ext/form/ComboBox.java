package isola.model.ext.form;import isola.helpers.JsHelper;import isola.model.core.JsObject;import isola.model.ext.constants.XTypes;import isola.model.ext.data.Store;/** *  * A combobox control with support for autocomplete, remote-loading, paging and * many other *  * features. *  *  *  * @author Umut Gokbayrak */public class ComboBox extends TriggerField {	private static final long serialVersionUID = -4459940981543599412L;	private static final String TAG = "Ext.form.ComboBox";	/**	 * 	 * The text query to send to the server to return all records for the list	 * with no	 * 	 * filtering (defaults to '')	 */	public String allQuery;	/**	 * 	 * A DomHelper element spec, or true for a default element spec (defaults	 * to:	 * 	 * {tag: "input", type: "text", size: "24", autocomplete: "off"})	 */	public JsObject autoCreate;	/**	 * 	 * The underlying data field name to bind to this ComboBox (defaults to	 * undefined if	 * 	 * mode = 'remote' or 'text' if transforming a select)	 */	public String displayField;	/**	 * 	 * False to prevent the user from typing text directly into the field, just	 * like a	 * 	 * traditional select (defaults to true)	 */	public boolean editable = true;	/**	 * 	 * True to restrict the selected value to one of the values in the list,	 * false to	 * 	 * allow the user to set arbitrary text into the field (defaults to false)	 */	public boolean forceSelection = false;	/**	 * 	 * The height in pixels of the dropdown list resize handle if resizable =	 * true	 * 	 * (defaults to 8)	 */	public int handleHeight = 8;	/**	 * 	 * If hiddenName is specified, hiddenId can also be provided to give the	 * hidden	 * 	 * field a unique id (defaults to the hiddenName). The hiddenId and combo id	 * 	 * should be different, since no two DOM nodes should share the same id.	 */	public String hiddenId;	/**	 * 	 * If specified, a hidden form field with this name is dynamically generated	 * to	 * 	 * store the field's data value (defaults to the underlying DOM element's	 * name).	 * 	 * Required for the combo's value to automatically post during a form	 * submission.	 */	public String hiddenName;	/**	 * 	 * True to not initialize the list for this combo until the field is	 * focused.	 * 	 * (defaults to true)	 */	public boolean lazyInit = true;	/**	 * 	 * True to prevent the ComboBox from rendering until requested (should	 * always be	 * 	 * used when rendering into an Ext.Editor, defaults to false).	 */	public boolean lazyRender = false;	/**	 * 	 * A valid anchor position value. See Ext.Element.alignTo for details on	 * supported	 * 	 * anchor positions (defaults to 'tl-bl')	 */	public String listAlign;	/**	 * 	 * CSS class to apply to the dropdown list element (defaults to '')	 */	public String listClass;	/**	 * 	 * The width in pixels of the dropdown list (defaults to the width of the	 * ComboBox	 * 	 * field)	 */	public int listWidth = 0;	/**	 * 	 * The text to display in the dropdown list while data is loading. Only	 * applies	 * 	 * when mode = 'remote' (defaults to 'Loading...')	 */	public String loadingText;	/**	 * 	 * The maximum height in pixels of the dropdown list before scrollbars are	 * shown	 * 	 * (defaults to 300)	 */	public int maxHeight = 300;	/**	 * 	 * The minimum number of characters the user must type before autocomplete	 * and	 * 	 * typeahead activate (defaults to 4 if remote or 0 if local, does not apply	 * if editable = false)	 */	public int minChars = 0;	/**	 * 	 * The minimum width of the dropdown list in pixels (defaults to 70, will be	 * ignored if	 * 	 * listWidth has a higher value)	 */	public int minListWidth = 70;	/**	 * 	 * Set to 'local' if the ComboBox loads local data (defaults to 'remote'	 * which loads	 * 	 * from the server)	 */	public String mode;	/**	 * 	 * If greater than 0, a paging toolbar is displayed in the footer of the	 * dropdown list	 * 	 * and the filter queries will execute with page start and limit parameters.	 * Only	 * 	 * applies when mode = 'remote' (defaults to 0)	 */	public int pageSize = 0;	/**	 * 	 * The length of time in milliseconds to delay between the start of typing	 * and sending	 * 	 * the query to filter the dropdown list (defaults to 500 if mode = 'remote'	 * or 10	 * 	 * if mode = 'local')	 */	public int queryDelay = 0;	/**	 * 	 * Name of the query as it will be passed on the querystring (defaults to	 * 'query')	 */	public String queryParam;	/**	 * 	 * True to add a resize handle to the bottom of the dropdown list (defaults	 * to false)	 */	public boolean resizable = false;	/**	 * 	 * True to select any existing text in the field immediately on focus. Only	 * applies	 * 	 * when editable = true (defaults to false)	 */	public boolean selectOnFocus = false;	/**	 * 	 * CSS class to apply to the selected item in the dropdown list (defaults to	 * 	 * 'x-combo-selected')	 */	public String selectedClass;	/**	 * 	 * True or "sides" for the default effect, "frame" for 4-way shadow, and	 * "drop"	 * 	 * for bottom-right	 */	public String shadow;	/**	 * 	 * The data store to which this combo is bound (defaults to undefined)	 */	public Store store;	/**	 * 	 * If supplied, a header element is created containing this text and	 * 	 * added into the top of the dropdown list (defaults to undefined, with no	 * header	 * 	 * element)	 */	public String title;	/**	 * 	 * <p>	 * The template string, or Ext.XTemplate instance to use to display each	 * item in the	 * 	 * dropdown list. Use this to create custom UI layouts for items in the	 * list.	 * </p>	 * 	 * 	 * 	 * <p>	 * If you wish to preserve the default visual look of list items, add the	 * CSS class	 * 	 * name.	 * </p>	 * 	 * 	 * 	 * <code><pre>	 * 	x-combo-list-item	 * </pre></code>	 * 	 * 	 * 	 * <p>	 * to the template's container element. The template must contain one or	 * more substitution	 * 	 * parameters using field names from the Combo's Store. An example of a	 * custom template	 * 	 * would be adding an	 * </p>	 * 	 * 	 * 	 * <code><pre>ext:qtip</pre></code>	 * 	 * attribute which might display other fields from the Store. The dropdown	 * list is	 * 	 * displayed in a DataView. See Ext.DataView for details.	 */	public String tpl;	/**	 * 	 * The id, DOM node or element of an existing HTML SELECT to convert to a	 * ComboBox.	 * 	 * Note that if you specify this and the combo is going to be in a	 * Ext.form.BasicForm or	 * 	 * Ext.form.FormPanel, you must also set lazyRender = true.	 */	public String transform;	/**	 * 	 * The action to execute when the trigger field is activated. Use 'all' to	 * run the query	 * 	 * specified by the allQuery config option (defaults to 'query')	 */	public String triggerAction;	/**	 * 	 * An additional CSS class used to style the trigger button. The trigger	 * will always	 * 	 * get the class 'x-form-trigger' and triggerClass will be appended if	 * specified	 * 	 * (defaults to 'x-form-arrow-trigger' which displays a downward arrow	 * icon).	 */	public String triggerClass;	/**	 * 	 * True to populate and autoselect the remainder of the text being typed	 * after a	 * 	 * configurable delay (typeAheadDelay) if it matches a known value (defaults	 * to false)	 */	public boolean typeAhead = false;	/**	 * 	 * The length of time in milliseconds to wait until the typeahead text is	 * displayed	 * 	 * if typeAhead = true (defaults to 250)	 */	public int typeAheadDelay = 250;	/**	 * 	 * The underlying data value name to bind to this ComboBox (defaults to	 * undefined	 * 	 * if mode = 'remote' or 'value' if transforming a select) Note: use of a	 * valueField	 * 	 * requires the user to make a selection in order for a value to be mapped.	 */	public String valueField;	/**	 * 	 * When using a name/value combo, if the value passed to setValue is not	 * found in the	 * 	 * store, valueNotFoundText will be displayed as the field text if defined	 * (defaults to undefined)	 */	public String valueNotFoundText;	/**	 * 	 * Display with no text written or selected	 */	public String emptyText;		public ComboBox() {		super();	}		/**	 * 	 * <p>	 * The registered xtype to create. This config option is not used when	 * passing a	 * 	 * config object into a constructor. This config option is used only when	 * lazy	 * 	 * instantiation is being used, and a child item of a Container is being	 * 	 * specified not as a fully instantiated Component, but as a Component	 * config	 * 	 * object. The xtype will be looked up at render time up to determine what	 * 	 * type of child Component to create.	 * </p>	 * 	 * 	 * 	 * @see XTypes <p>	 *      If you subclass Components to create your own Components, you may	 *      register	 * 	 *      them using Ext.ComponentMgr.registerType in order to be able to take	 *      advantage	 * 	 *      of lazy instantiation and rendering.	 *      </p>	 */	public String xtype = XTypes.combo;		@Override	protected void _postProcessToString() {		super._postProcessToString();		if (allQuery != null)			put("allQuery", allQuery);		if (autoCreate != null)			put("autoCreate", autoCreate);		if (displayField != null)			put("displayField", displayField);		if (!editable)			put("editable", editable);		if (forceSelection)			put("forceSelection", forceSelection);		if (handleHeight != 8)			put("handleHeight", handleHeight);		if (hiddenId != null)			put("hiddenId", hiddenId);		if (hiddenName != null)			put("hiddenName", hiddenName);		if (!lazyInit)			put("lazyInit", lazyInit);		if (lazyRender)			put("lazyRender", lazyRender);		if (listAlign != null)			put("listAlign", listAlign);		if (listClass != null)			put("listClass", listClass);		if (listWidth != 0)			put("listWidth", listWidth);		if (loadingText != null)			put("loadingText", loadingText);		if (maxHeight != 0)			put("maxHeight", maxHeight);		if (minChars != 0)			put("minChars", minChars);		if (minListWidth != 70)			put("minListWidth", minListWidth);		if (mode != null)			put("mode", mode);		if (pageSize != 0)			put("pageSize", pageSize);		if (queryDelay != 0)			put("queryDelay", queryDelay);		if (queryParam != null)			put("queryParam", queryParam);		if (resizable)			put("resizable", resizable);		if (selectedClass != null)			put("selectedClass", selectedClass);		if (selectOnFocus)			put("selectOnFocus", selectOnFocus);		if (shadow != null)			put("shadow", shadow);		if (store != null)			put("store", store);		if (title != null)			put("title", title);		if (tpl != null)			put("tpl", tpl);		if (transform != null)			put("transform", transform);		if (triggerAction != null)			put("triggerAction", triggerAction);		if (triggerClass != null)			put("triggerClass", triggerClass);		if (typeAhead)			put("typeAhead", typeAhead);		if (typeAheadDelay != 250)			put("typeAheadDelay", typeAheadDelay);		if (valueField != null)			put("valueField", valueField);		if (valueNotFoundText != null)			put("valueNotFoundText", valueNotFoundText);		if (emptyText != null)			put("emptyText", emptyText);		if (xtype != null)			put("xtype", xtype);	}		@Override	public String toString() {		_postProcessToString();		return "new " + TAG + "(" + JsHelper.printJsObject(this) + ")";	}}
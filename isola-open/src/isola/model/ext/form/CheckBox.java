package isola.model.ext.form;import isola.helpers.JsHelper;import isola.model.core.JsObject;import isola.model.ext.constants.XTypes;/** *  * Single checkbox field. Can be used as a direct replacement for traditional * checkbox fields. *  *  *  * @author Umut Gokbayrak */public class CheckBox extends Field {	private static final long serialVersionUID = -215881687743439231L;	private static final String TAG = "Ext.form.Checkbox";	/**	 * 	 * A DomHelper element spec, or true for a default element spec	 * 	 * (defaults to {tag: "input", type: "checkbox", autocomplete: "off"})	 */	public JsObject autoCreate;	/**	 * 	 * The text that appears beside the checkbox	 */	public String boxLabel;	/**	 * 	 * True if the the checkbox should render already checked (defaults to	 * false)	 */	public boolean checked = false;	/**	 * 	 * The default CSS class for the checkbox (defaults to "x-form-field")	 */	public String fieldClass;	/**	 * 	 * The CSS class to use when the checkbox receives focus (defaults to	 * undefined)	 */	public String focusClass;	/**	 * 	 * The value that should go into the generated input element's value	 * attribute	 */	public String inputValue;	/**	 * 	 * <p>	 * The registered xtype to create. This config option is not used when	 * passing a	 * 	 * config object into a constructor. This config option is used only when	 * lazy	 * 	 * instantiation is being used, and a child item of a Container is being	 * 	 * specified not as a fully instantiated Component, but as a Component	 * config	 * 	 * object. The xtype will be looked up at render time up to determine what	 * 	 * type of child Component to create.	 * </p>	 * 	 * 	 * 	 * @see XTypes <p>	 *      If you subclass Components to create your own Components, you may	 *      register	 * 	 *      them using Ext.ComponentMgr.registerType in order to be able to take	 *      advantage	 * 	 *      of lazy instantiation and rendering.	 *      </p>	 */	public String xtype = XTypes.checkbox;		public CheckBox() {		super();	}		protected void _postProcessToString() {		super._postProcessToString();		if (autoCreate != null)			put("autoCreate", autoCreate);		if (boxLabel != null)			put("boxLabel", boxLabel);		if (checked)			put("checked", checked);		if (fieldClass != null)			put("fieldClass", fieldClass);		if (focusClass != null)			put("focusClass", focusClass);		if (inputValue != null)			put("inputValue", inputValue);		if (xtype != null)			put("xtype", xtype);	}		@Override	public String toString() {		_postProcessToString();		return "new " + TAG + "(" + JsHelper.printJsObject(this) + ")";	}}
package isola.model.ext.form;import isola.helpers.JsHelper;import isola.model.core.JsFunction;import isola.model.ext.base.Component;import isola.model.ext.constants.XTypes;import isola.model.ext.menu.Menu;/** *  *  *  * @author Umut Gokbayrak */public class Button extends Component {	private static final long serialVersionUID = -6397947593140260399L;	private static final String TAG = "Ext.Button";	/**	 * 	 * The type of event to map to the button's event handler (defaults to	 * 'click')	 */	public String clickEvent;	/**	 * 	 * True to start disabled (defaults to false)	 */	public boolean disabled = false;	/**	 * 	 * True to enable pressed/not pressed toggling (defaults to false)	 */	public boolean enableToggle = false;	/**	 * 	 * False to disable visual cues on mouseover, mouseout and mousedown	 * (defaults to true)	 */	public boolean handleMouseEvents = true;	/**	 * 	 * A function called when the button is clicked (can be used instead of	 * click event)	 */	public JsFunction handler;	/**	 * 	 * True to start hidden (defaults to false)	 */	public boolean hidden = false;	/**	 * 	 * The path to an image to display in the button (the image will be set as	 * the	 * 	 * background-image CSS property of the button by default, so if you want a	 * mixed	 * 	 * icon/text button, set cls:"x-btn-text-icon")	 */	public String icon;	/**	 * 	 * A css class which sets a background image to be used as the icon for this	 * button	 */	public String iconCls;	/**	 * 	 * Standard menu attribute consisting of a reference to a menu object, a	 * menu id or	 * 	 * a menu config blob (defaults to undefined).	 */	public Menu menu;	/**	 * 	 * The position to align the menu to (see Ext.Element.alignTo for more	 * details,	 * 	 * defaults to 'tl-bl?').	 */	public String menuAlign;	/**	 * 	 * The minimum width for this button (used to give a set of buttons a common	 * width)	 */	public int minWidth = 0;	/**	 * 	 * True to start pressed (only if enableToggle = true)	 */	public boolean pressed = false;	/**	 * 	 * True to repeat fire the click event while the mouse is down. This can	 * also be an	 * 	 * Ext.util.ClickRepeater config object (defaults to false).	 */	public boolean repeat = false;	/**	 * 	 * The scope of the handler	 */	public String scope;	/**	 * 	 * Set a DOM tabIndex for this button (defaults to undefined)	 */	public int tabIndex = 0;	/**	 * 	 * Set a DOM tabIndex for this button (defaults to undefined)	 */	public String text;	/**	 * 	 * The group this toggle button is a member of (only 1 per group can be	 * 	 * pressed, only applies if enableToggle = true)	 */	public String toggleGroup;	/**	 * 	 * The tooltip for the button - can be a string or QuickTips config object	 */	public String tooltip;	/**	 * 	 * The type of tooltip to use. Either "qtip" (default) for QuickTips or	 * "title"	 * 	 * for title attribute.	 */	public String tooltipType;	/**	 * 	 * submit, reset or button - defaults to 'button'	 */	public String type;	/**	 * 	 * <p>	 * The registered xtype to create. This config option is not used when	 * passing a	 * 	 * config object into a constructor. This config option is used only when	 * lazy	 * 	 * instantiation is being used, and a child item of a Container is being	 * 	 * specified not as a fully instantiated Component, but as a Component	 * config	 * 	 * object. The xtype will be looked up at render time up to determine what	 * 	 * type of child Component to create.	 * </p>	 * 	 * 	 * 	 * @see XTypes <p>	 *      If you subclass Components to create your own Components, you may	 *      register	 * 	 *      them using Ext.ComponentMgr.registerType in order to be able to take	 *      advantage	 * 	 *      of lazy instantiation and rendering.	 *      </p>	 */	public String xtype = XTypes.button;		public Button() {		super();	}		/**	 * 	 * Disable this component.	 */	public void disable() {		disabled = true;	}		/**	 * 	 * Enable this component.	 */	public void enable() {		disabled = false;	}		/**	 * 	 * Sets this button's text	 * 	 * 	 * 	 * @param text	 */	public void setText(String text) {		this.text = text;	}		/**	 * 	 * Convenience function to hide or show this component by boolean.	 * 	 * 	 * 	 * @param visible	 */	public void setVisible(boolean visible) {		if (visible)			hidden = false;		else			hidden = true;	}		/**	 * 	 * Show this component.	 */	public void show() {		hidden = false;	}		/**
	 * 
	 */	public void hide() {		hidden = true;	}		protected void _postProcessToString() {		super._postProcessToString();		if (clickEvent != null)			put("clickEvent", clickEvent);		if (disabled)			put("disabled", disabled);		if (enableToggle)			put("enableToggle", enableToggle);		if (!handleMouseEvents)			put("handleMouseEvents", handleMouseEvents);		if (handler != null)			put("handler", handler);		if (hidden)			put("hidden", hidden);		if (icon != null)			put("icon", icon);		if (iconCls != null)			put("iconCls", iconCls);		if (menu != null)			put("menu", menu);		if (menuAlign != null)			put("menuAlign", menuAlign);		if (minWidth != 0)			put("minWidth", minWidth);		if (pressed)			put("pressed", pressed);		if (repeat)			put("repeat", repeat);		if (scope != null)			put("scope", scope);		if (tabIndex != 0)			put("tabIndex", tabIndex);		if (text != null)			put("text", text);		if (toggleGroup != null)			put("toggleGroup", toggleGroup);		if (tooltip != null)			put("tooltip", tooltip);		if (tooltipType != null)			put("tooltipType", tooltipType);		if (type != null)			put("type", type);		if (xtype != null)			put("xtype", xtype);	}		@Override	public String toString() {		_postProcessToString();		return "new " + TAG + "(" + JsHelper.printJsObject(this) + ")";	}}
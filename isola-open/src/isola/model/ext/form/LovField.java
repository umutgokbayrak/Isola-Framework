package isola.model.ext.form;import isola.helpers.JsHelper;import isola.model.ext.constants.XTypes;import isola.model.ext.grid.GridPanel;/** *  * <p> * Provides a convenient wrapper for TextFields that adds a clickable trigger * button *  * (looks like a combobox by default). The trigger has no default action, so you * must *  * assign a function to implement the trigger click handler by overriding * onTriggerClick. *  * You can create a TriggerField directly, as it renders exactly like a combobox * for *  * which you can provide a custom implementation. For example: * </p> *  *  *  * <pre> * &lt;code&gt; * 
 * var trigger = new Ext.form.TriggerField(); * 
 * trigger.onTriggerClick = myTriggerFn; * 
 * trigger.applyToMarkup('my-field'); * 
 * &lt;/code&gt; * </pre> *  *  *  * However, in general you will most likely want to use TriggerField as the base * class *  * for a reusable component. Ext.form.DateField and Ext.form.ComboBox are * perfect *  * examples of this. *  *  *  * @author Umut Gokbayrak */public class LovField extends TriggerField {	private static final long serialVersionUID = 342733731138403120L;	private static final String TAG = "Ext.ux.form.LovField";	/**	 * LOV window width	 * 	 * 	 */	public int lovWidth = 0;	/**	 * LOV window height	 * 	 * 	 */	public int lovHeight = 0;	/**	 * LOV window title	 * 	 * 	 */	public String lovTitle;	/**	 * Multiple selection is possible?	 * 	 * 	 */	public boolean multiSelect = false;	/**	 * If this option is true, data store reloads each time the LOV opens	 * 	 * 	 */	public boolean alwaysLoadStore = false;	/**	 * LOV data provider, intance of Ext.grid.GridPanel or Ext.DataView	 * 	 * 	 */	public GridPanel view;	/**	 * Which data store field will use for return	 * 	 * 	 */	public String valueField;	/**	 * Which data store field will use for display	 * 	 * 	 */	public String displayField;	/**	 * If multiple items are selected, they are joined with this character	 * 	 * 	 */	public String valueSeparator;	/**	 * If multiple items are selected, they are joined with this character	 * 	 * 	 */	public String displaySeparator;	// LOV window configurations	// autoScroll, layout, bbar and items configurations are not changed by this	// option	// windowConfig: {},	public boolean showOnFocus = false;	public int minItem = 0;	public String minItemText;	public int maxItem = 0;	public String maxItemText;	public boolean textarea = false;		public LovField() {		super();	}		/**	 * 	 * <p>	 * The registered xtype to create. This config option is not used when	 * passing a	 * 	 * config object into a constructor. This config option is used only when	 * lazy	 * 	 * instantiation is being used, and a child item of a Container is being	 * 	 * specified not as a fully instantiated Component, but as a Component	 * config	 * 	 * object. The xtype will be looked up at render time up to determine what	 * 	 * type of child Component to create.	 * </p>	 * 	 * 	 * 	 * @see XTypes <p>	 *      If you subclass Components to create your own Components, you may	 *      register	 * 	 *      them using Ext.ComponentMgr.registerType in order to be able to take	 *      advantage	 * 	 *      of lazy instantiation and rendering.	 *      </p>	 */	public String xtype = XTypes.lov;		@Override	protected void _postProcessToString() {		super._postProcessToString();		if (lovWidth != 0)			put("lovWidth", lovWidth);		if (lovHeight != 0)			put("lovHeight", lovHeight);		if (lovTitle != null)			put("lovTitle", lovTitle);		if (multiSelect)			put("multiSelect", multiSelect);		if (alwaysLoadStore)			put("alwaysLoadStore", alwaysLoadStore);		if (view != null)			put("view", view);		if (valueField != null)			put("valueField", valueField);		if (displayField != null)			put("displayField", displayField);		if (valueSeparator != null)			put("valueSeparator", valueSeparator);		if (displaySeparator != null)			put("displaySeparator", displaySeparator);		if (showOnFocus)			put("showOnFocus", showOnFocus);		if (minItem != 0)			put("minItem", minItem);		if (minItemText != null)			put("minItemText", minItemText);		if (maxItem != 0)			put("maxItem", maxItem);		if (maxItemText != null)			put("maxItemText", maxItemText);		if (textarea)			put("textarea", textarea);		if (xtype != null)			put("xtype", xtype);	}		@Override	public String toString() {		_postProcessToString();		return "new " + TAG + "(" + JsHelper.printJsObject(this) + ")";	}}
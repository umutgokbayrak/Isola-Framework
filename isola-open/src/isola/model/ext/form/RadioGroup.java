package isola.model.ext.form;import isola.helpers.JsHelper;import isola.model.core.JsArray;import isola.model.ext.constants.XTypes;/** *  * Extjs Extension to generate structured radio groups. *  *  *  * @author Umut Gokbayrak *  *  */public class RadioGroup extends Field {	private static final long serialVersionUID = 3129380298949406879L;	private static final String TAG = "Ext.ux.RadioGroup";	/**	 * 	 * True if the the checkbox should render already checked (defaults to	 * false)	 */	public Boolean checked = false;	/**	 * 	 * Radio Buttons added to this group	 */	public JsArray radios;	/**	 * 	 * If set to true radio group will group radio buttons horizantally	 */	public Boolean horizontal = false;	/**	 * 	 * <p>	 * The registered xtype to create. This config option is not used when	 * passing a	 * 	 * config object into a constructor. This config option is used only when	 * lazy	 * 	 * instantiation is being used, and a child item of a Container is being	 * 	 * specified not as a fully instantiated Component, but as a Component	 * config	 * 	 * object. The xtype will be looked up at render time up to determine what	 * 	 * type of child Component to create.	 * </p>	 * 	 * 	 * 	 * @see XTypes <p>	 *      If you subclass Components to create your own Components, you may	 *      register	 * 	 *      them using Ext.ComponentMgr.registerType in order to be able to take	 *      advantage	 * 	 *      of lazy instantiation and rendering.	 *      </p>	 */	public String xtype = "ux-radiogroup";		public RadioGroup() {		super();	}		protected void _postProcessToString() {		super._postProcessToString();		if (checked)			put("checked", checked);		if (horizontal)			put("horizontal", horizontal);		if (radios != null && radios.size() > 0) {			put("radios", radios);		}		if (xtype != null)			put("xtype", xtype);	}		@Override	public String toString() {		_postProcessToString();		return "new " + TAG + "(" + JsHelper.printJsObject(this) + ")";	}}
package isola.model.ext.form;import isola.helpers.JsHelper;import isola.model.ext.constants.XTypes;import java.util.Date;/** *  * Provides a time input field with a time dropdown and automatic time * validation. *  *  *  * @author Umut Gokbayrak */public class TimeField extends ComboBox {	private static final long serialVersionUID = 7066102958179248505L;	private static final String TAG = "Ext.form.TimeField";	/**	 * 	 * Multiple date formats separated by "|" to try when parsing a user input	 * value	 * 	 * and it doesn't match the defined format (defaults to	 * 'm/d/Y|m-d-y|m-d-Y|m/d|m-d|d').	 */	public String altFormats;	/**	 * 	 * The default date format string which can be overriden for localization	 * support.	 * 	 * The format must be valid according to Date.parseDate (defaults to	 * 'm/d/y').	 */	public String format;	/**	 * 	 * The number of minutes between each time value in the list (defaults to	 * 15).	 */	public int increment = 15;	/**	 * 	 * The error text to display when the time in the field is invalid (defaults	 * to	 * 	 * '{value} is not a valid time - it must be in the format {format}').	 */	public String invalidText;	/**	 * 	 * The error text to display when the time is after maxValue (defaults to	 * 'The time	 * 	 * in this field must be equal to or before {0}').	 */	public String maxText;	/**	 * 	 * The maximum allowed time. Can be either a Javascript date object or a	 * string date	 * 	 * in a valid format (defaults to null).	 */	public Date maxValue;	/**	 * 	 * The error text to display when the date in the cell is before minValue	 * (defaults to	 * 	 * 'The time in this field must be equal to or after {0}').	 */	public String minText;	/**	 * 	 * The minimum allowed time. Can be either a Javascript date object or a	 * string date	 * 	 * in a valid format (defaults to null).	 */	public Date minValue;	/**	 * 	 * <p>	 * The registered xtype to create. This config option is not used when	 * passing a	 * 	 * config object into a constructor. This config option is used only when	 * lazy	 * 	 * instantiation is being used, and a child item of a Container is being	 * 	 * specified not as a fully instantiated Component, but as a Component	 * config	 * 	 * object. The xtype will be looked up at render time up to determine what	 * 	 * type of child Component to create.	 * </p>	 * 	 * 	 * 	 * @see XTypes <p>	 *      If you subclass Components to create your own Components, you may	 *      register	 * 	 *      them using Ext.ComponentMgr.registerType in order to be able to take	 *      advantage	 * 	 *      of lazy instantiation and rendering.	 *      </p>	 */	public String xtype = XTypes.timefield;		public TimeField() {		super();	}		protected void _postProcessToString() {		super._postProcessToString();		if (altFormats != null)			put("altFormats", altFormats);		if (format != null)			put("format", format);		if (increment != 15)			put("increment", increment);		if (invalidText != null)			put("invalidText", invalidText);		if (maxText != null)			put("maxText", maxText);		if (maxValue != null)			put("maxValue", maxValue);		if (minText != null)			put("minText", minText);		if (minValue != null)			put("minValue", minValue);		if (xtype != null)			put("xtype", xtype);	}		@Override	public String toString() {		_postProcessToString();		return "new " + TAG + "(" + JsHelper.printJsObject(this) + ")";	}}
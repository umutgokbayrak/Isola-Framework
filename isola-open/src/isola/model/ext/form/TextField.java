package isola.model.ext.form;import isola.helpers.JsHelper;import isola.model.core.JsFunction;import isola.model.core.JsRegExp;import isola.model.ext.constants.VTypes;import isola.model.ext.constants.XTypes;/** *  * Basic text field. Can be used as a direct replacement for traditional text * inputs, *  * or as the base class for more sophisticated input controls (like * Ext.form.TextArea *  * and Ext.form.ComboBox). *  *  *  * @author Umut Gokbayrak */public class TextField extends Field {	private static final long serialVersionUID = -7335464772391721317L;	private static final String TAG = "Ext.form.TextField";	/**	 * 	 * False to validate that the value length > 0 (defaults to true)	 */	public boolean allowBlank = true;	/**	 * 	 * Error text to display if the allow blank validation fails (defaults to	 * "This field is	 * 	 * required")	 */	public String blankText;	/**	 * 	 * True to disable input keystroke filtering (defaults to false)	 */	public boolean disableKeyFilter = false;	/**	 * 	 * The CSS class to apply to an empty field to style the emptyText (defaults	 * to	 * 	 * 'x-form-empty-field'). This class is automatically added and removed as	 * needed depending on	 * 	 * the current field value.	 */	public String emptyClass;	/**	 * 	 * The default text to display in an empty field (defaults to null).	 */	public String emptyText;	/**	 * 	 * True if this field should automatically grow and shrink to its content	 */	public boolean grow = false;	/**	 * 	 * The maximum width to allow when grow = true (defaults to 800)	 */	public int growMax = 800;	/**	 * 	 * The minimum width to allow when grow = true (defaults to 30)	 */	public int growMin = 30;	/**	 * 	 * Maximum input field length allowed (defaults to Number.MAX_VALUE)	 */	public int maxLength = 0;	/**	 * 	 * Error text to display if the maximum length validation fails (defaults to	 * 	 * "The maximum length for this field is {maxLength}")	 */	public String maxLengthText;	/**	 * 	 * Minimum input field length required (defaults to 0)	 */	public int minLength = 0;	/**	 * 	 * Error text to display if the minimum length validation fails (defaults to	 * 	 * "The minimum length for this field is {minLength}")	 */	public String minLengthText;	/**	 * 	 * A JavaScript RegExp object to be tested against the field value during	 * validation	 * 	 * (defaults to null). If available, this regex will be evaluated only after	 * the basic	 * 	 * validators all return true, and will be passed the current field value.	 * If the test	 * 	 * fails, the field will be marked invalid using regexText.	 */	public JsRegExp regex;	/**	 * 	 * The error text to display if regex is used and the test fails during	 * validation (defaults to "")	 */	public String regexText;	/**	 * 	 * True to automatically select any existing field text when the field	 * receives input	 * 	 * focus (defaults to false)	 */	public boolean selectOnFocus = false;	/**	 * 	 * A custom validation function to be called during field validation	 * (defaults to null).	 * 	 * If available, this function will be called only after the basic	 * validators all return	 * 	 * true, and will be passed the current field value and expected to return	 * boolean true	 * 	 * if the value is valid or a string error message if invalid.	 */	public JsFunction validator;	/**	 * 	 * A validation type name as defined in Ext.form.VTypes (defaults to null)	 */	public String vtype;	/**	 * 	 * A custom error message to display in place of the default message	 * provided for the	 * 	 * vtype currently set for this field (defaults to ''). Only applies if	 * vtype is set,	 * 	 * else ignored.	 * 	 * @see VTypes	 */	public String vtypeText;	/**	 * 	 * <p>	 * The registered xtype to create. This config option is not used when	 * passing a	 * 	 * config object into a constructor. This config option is used only when	 * lazy	 * 	 * instantiation is being used, and a child item of a Container is being	 * 	 * specified not as a fully instantiated Component, but as a Component	 * config	 * 	 * object. The xtype will be looked up at render time up to determine what	 * 	 * type of child Component to create.	 * </p>	 * 	 * 	 * 	 * @see XTypes <p>	 *      If you subclass Components to create your own Components, you may	 *      register	 * 	 *      them using Ext.ComponentMgr.registerType in order to be able to take	 *      advantage	 * 	 *      of lazy instantiation and rendering.	 *      </p>	 */	public String xtype = XTypes.textfield;		protected void _postProcessToString() {		super._postProcessToString();		if (!allowBlank)			put("allowBlank", allowBlank);		if (blankText != null)			put("blankText", blankText);		if (disableKeyFilter)			put("disableKeyFilter", disableKeyFilter);		if (emptyClass != null)			put("emptyClass", emptyClass);		if (emptyText != null)			put("emptyText", emptyText);		if (grow)			put("grow", grow);		if (growMax != 800)			put("growMax", growMax);		if (growMin != 30)			put("growMin", growMin);		if (maxLength != 0)			put("maxLength", maxLength);		if (maxLengthText != null)			put("maxLengthText", maxLengthText);		if (minLength != 0)			put("minLength", minLength);		if (minLengthText != null)			put("minLengthText", minLengthText);		if (regex != null)			put("regex", regex);		if (regexText != null)			put("regexText", regexText);		if (selectOnFocus)			put("selectOnFocus", selectOnFocus);		if (validator != null)			put("validator", validator);		if (vtype != null)			put("vtype", vtype);		if (vtypeText != null)			put("vtypeText", vtypeText);		if (xtype != null)			put("xtype", xtype);	}		@Override	public String toString() {		_postProcessToString();		return "new " + TAG + "(" + JsHelper.printJsObject(this) + ")";	}}
package isola.model.ext.menu;import isola.helpers.JsHelper;import isola.model.core.JsArray;import isola.model.core.JsObject;import isola.model.ext.base.Observable;/** *  * A menu object. This is the container to which you add all other menu items. * Menu can also serve a *  * as a base class when you want a specialzed menu based off of another * component (like Ext.menu.DateMenu *  * for example). *  *  *  * @author Umut Gokbayrak */public class Menu extends Observable {	private static final long serialVersionUID = -3764412141941995114L;	private static final String TAG = "Ext.menu.Menu";	/**	 * 	 * True to allow multiple menus to be displayed at the same time (defaults	 * to false)	 */	public boolean allowOtherMenus = false;	/**	 * 	 * The default {@link Ext.Element#alignTo) anchor position value for this	 * menu relative to	 * 	 * its element of origin (defaults to "tl-bl?")	 */	public String defaultAlign;	/**	 * 	 * A config object that will be applied to all items added to this container	 * either via the items config	 * 	 * or via the add method. The defaults config can contain any number of	 * name/value property pairs to be	 * 	 * added to each item, and should be valid for the types of items being	 * added to the menu.	 */	public JsObject defaults;	/**	 * 	 * An array of items to be added to this menu. See add for a list of valid	 * item types.	 */	public JsArray items;	/**	 * 	 * The minimum width of the menu in pixels (defaults to 120)	 */	public int minWidth = 120;	/**	 * 	 * True or "sides" for the default effect, "frame" for 4-way shadow, and	 * "drop" for bottom-right shadow	 * 	 * (defaults to "sides")	 */	public String shadow;	/**	 * 	 * The Ext.Element.alignTo anchor position value to use for submenus of this	 * menu (defaults to	 * 	 * "tl-tr?")	 */	public String subMenuAlign;		public Menu() {		super();	}		@Override	protected void _postProcessToString() {		super._postProcessToString();		if (allowOtherMenus)			put("allowOtherMenus", allowOtherMenus);		if (defaultAlign != null)			put("defaultAlign", defaultAlign);		if (defaults != null)			put("defaults", defaults);		if (items != null)			put("items", items);		if (minWidth != 120)			put("minWidth", minWidth);		if (shadow != null)			put("shadow", shadow);		if (subMenuAlign != null)			put("subMenuAlign", subMenuAlign);	}		@Override	public String toString() {		_postProcessToString();		return "new " + TAG + "(" + JsHelper.printJsObject(this) + ")";	}}
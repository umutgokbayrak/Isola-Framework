package isola.model.ext.layout;import isola.helpers.JsHelper;import isola.model.core.JsObject;/** *  * Every layout is composed of one or more Ext.Container elements internally, * and ContainerLayout *  * provides the basic foundation for all other layout classes in Ext. It is a * non-visual class *  * that simply provides the base logic required for a Container to function as a * layout. This *  * class is intended to be extended and should generally not need to be created * directly via *  * the new keyword. *  *  *  * @author Umut Gokbayrak */public class ContainerLayout extends JsObject {	private static final long serialVersionUID = 7421126214527321087L;	private static final String TAG = "Ext.layout.ContainerLayout";	/**	 * 	 * An optional extra CSS class that will be added to the container (defaults	 * to ''). This can	 * 	 * be useful for adding customized styles to the container or any of its	 * children using	 * 	 * standard CSS rules.	 */	public String extraCls;	/**	 * 	 * True to hide each contained item on render (defaults to false).	 */	public boolean renderHidden = false;		/**
	 * 
	 */	public ContainerLayout() {		super();	}		@Override	protected void _postProcessToString() {		super._postProcessToString();		if (extraCls != null)			put("extraCls", extraCls);		if (renderHidden)			put("renderHidden", renderHidden);	}		@Override	public String toString() {		_postProcessToString();		return "new " + TAG + "(" + JsHelper.printJsObject(this) + ")";	}}
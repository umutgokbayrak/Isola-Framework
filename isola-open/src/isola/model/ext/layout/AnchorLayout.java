package isola.model.ext.layout;import isola.helpers.JsHelper;/** *  * <p> * This is a layout that enables anchoring of contained elements relative to the * container's *  * dimensions. If the container is resized, all anchored items are automatically * rerendered *  * according to their anchor rules. This class is intended to be extended or * created via the *  * layout:'anchor' Ext.Container.layout config, and should generally not need to * be created *  * directly via the new keyword. * </p> *  *  *  * <p> * AnchorLayout does not have any direct config options (other than inherited * ones). However, *  * the container using the AnchorLayout can supply an anchoring-specific config * property of *  * anchorSize. By default, AnchorLayout will calculate anchor measurements based * on the size *  * of the container itself. However, if anchorSize is specifed, the layout will * use it as a *  * virtual container for the purposes of calculating anchor measurements based * on it instead, *  * allowing the container to be sized independently of the anchoring logic if * necessary. * </p> *  *  *  * <p> * The items added to an AnchorLayout can also supply an anchoring-specific * config property *  * of anchor which is a string containing two values: the horizontal anchor * value and the *  * vertical anchor value (for example, '100% 50%'). This value is what tells the * layout how the *  * item should be anchored to the container. The following types of anchor * values are *  * supported: * </p> *  *  *  * <p> * <strong>Percentage</strong>: Any value between 1 and 100, expressed as a * percentage. The first *  * anchor is the percentage width that the item should take up within the * container, and the *  * second is the percentage height. Example: '100% 50%' would render an item the * complete width *  * of the container and 1/2 its height. If only one anchor value is supplied it * is assumed to be *  * the width value and the height will default to auto. * </p> *  * <p> * <strong>Offsets</strong>: Any positive or negative integer value. The first * anchor is the *  * offset from the right edge of the container, and the second is the offset * from the bottom edge. *  * Example: '-50 -100' would render an item the complete width of the container * minus 50 pixels *  * and the complete height minus 100 pixels. If only one anchor value is * supplied it is assumed *  * to be the right offset value and the bottom offset will default to 0. * </p> *  * <p> * <strong>Sides</strong>: Valid values are 'right' (or 'r') and 'bottom' (or * 'b'). Either the *  * container must have a fixed size or an anchorSize config value defined at * render time in order *  * for these to have any effect. * </p> *  *  *  * @author Umut Gokbayrak *  *  */public class AnchorLayout extends ContainerLayout {	private static final long serialVersionUID = 5328364634551978489L;	private static final String TAG = "Ext.layout.AnchorLayout";	/**	 * 	 * An optional extra CSS class that will be added to the container (defaults	 * to ''). This	 * 	 * can be useful for adding customized styles to the container or any of its	 * children	 * 	 * using standard CSS rules.	 */	public String extraCls;	/**	 * 	 * True to hide each contained item on render (defaults to false).	 */	public boolean renderHidden = false;		public AnchorLayout() {		super();	}		@Override	protected void _postProcessToString() {		super._postProcessToString();		if (extraCls != null)			put("extraCls", extraCls);		if (renderHidden)			put("renderHidden", renderHidden);	}		@Override	public String toString() {		_postProcessToString();		return "new " + TAG + "(" + JsHelper.printJsObject(this) + ")";	}}
package isola.model.ext.base;import isola.helpers.JsHelper;import isola.model.core.JsArray;import isola.model.core.JsObject;import isola.model.ext.constants.XTypes;import isola.model.ext.container.BoxComponent;/** *  * Base class for any Ext.BoxComponent that can contain other components. * Containers *  * handle the basic behavior of containing items, namely adding, inserting and *  * removing them. The specific layout logic required to visually render * contained *  * items is delegated to any one of the different layout classes available. *  * This class is intended to be extended and should generally not need to be *  * created directly via the new keyword. *  *  *  * @author Umut Gokbayrak *  *  */public class Container extends BoxComponent {	private static final long serialVersionUID = -906787227901001735L;	private static final String TAG = "Ext.Container";	/**	 * 	 * A string component id or the numeric index of the component that should	 * be	 * 	 * initially activated within the container's layout on render. For example,	 * 	 * activeItem: 'item-1' or activeItem: 0 (index 0 = the first item in the	 * 	 * container's collection). activeItem only applies to layout styles that	 * can	 * 	 * display items one at a time (like Ext.layout.Accordion,	 * 	 * Ext.layout.CardLayout and Ext.layout.FitLayout).	 * 	 * Related to Ext.layout.ContainerLayout.activeItem.	 */	public String activeItem;	/**	 * 	 * If true the container will automatically destroy any contained component	 * 	 * that is removed from it, else destruction must be handled manually	 * 	 * (defaults to true).	 */	public boolean autoDestroy = true;	/**	 * 	 * When set to true (100 milliseconds) or a number of milliseconds, the	 * 	 * layout assigned for this container will buffer the frequency it	 * calculates	 * 	 * and does a re-layout of components. This is useful for heavy containers	 * 	 * or containers with a large amount of sub components that frequent calls	 * 	 * to layout are expensive.	 */	public int bufferResize = 0;	/**	 * 	 * The default type of container represented by this object as registered	 * 	 * in Ext.ComponentMgr (defaults to 'panel').	 * 	 * 	 * 	 * @see XTypes	 */	public String defaultType;	/**	 * 	 * A config object that will be applied to all components added to this	 * container	 * 	 * either via the items config or via the add or insert methods.	 * 	 * The defaults config can contain any number of name/value property pairs	 * 	 * to be added to each item, and should be valid for the types of items	 * 	 * being added to the container. For example, to automatically apply padding	 * to	 * 	 * the body of each of a set of contained Ext.Panel items, you could pass:	 * 	 * defaults: {bodyStyle:'padding:15px'}.	 */	public JsObject defaults;	/**	 * 	 * True to hide the borders of each contained component, false to defer to	 * the	 * 	 * component's existing border settings (defaults to false).	 */	public boolean hideBorders = false;	/**	 * 	 * How this component should hidden. Supported values are "visibility"	 * 	 * (css visibility), "offsets" (negative offset position) and "display"	 * 	 * (css display) - defaults to "display".	 */	public String hideMode;	/**	 * 	 * <p>	 * A single item, or an array of child Components to be added to this	 * 	 * container. Each item can be any type of object based on Ext.Component.	 * </p>	 * 	 * 	 * 	 * <p>	 * Component config objects may also be specified in order to avoid the	 * overhead of	 * 	 * constructing a real Component object if lazy rendering might mean that	 * the	 * 	 * added Component will not be rendered immediately. To take advantage of	 * this	 * 	 * "lazy instantiation", set the Ext.Component.xtype config property to the	 * registered	 * 	 * type of the Component wanted.	 * </p>	 * 	 * 	 * 	 * <p>	 * For a list of all available xtypes, see Ext.Component. If a single item	 * 	 * is being passed, it should be passed directly as an object reference	 * (e.g.,	 * 	 * items: {...}). Multiple items should be passed as an array of objects	 * 	 * (e.g., items: [{...}, {...}]).	 * </p>	 */	public JsArray items;	/**	 * 	 * <p>	 * The layout type to be used in this container. If not specified, a default	 * 	 * Ext.layout.ContainerLayout will be created and used.	 * 	 * 	 * 	 * <p>	 * Valid values are:	 * </p>	 * 	 * <ul>	 * 	 * <li>accordion,</li>	 * 	 * <li>anchor,</li>	 * 	 * <li>border,</li>	 * 	 * <li>card,</li>	 * 	 * <li>column,</li>	 * 	 * <li>fit,</li>	 * 	 * <li>form</li>	 * 	 * <li>table.</li>	 * 	 * </ul>	 * 	 * <p>	 * Specific config values for the chosen layout type can be specified using	 * 	 * layoutConfig.	 * </p>	 */	public String layout;	/**	 * 	 * <p>	 * This is a config object containing properties specific to the chosen	 * layout	 * 	 * (to be used in conjunction with the layout config value). For complete	 * 	 * details regarding the valid config options for each layout type, see	 * 	 * the layout class corresponding to the type specified:	 * </p>	 * 	 * Ext.layout.Accordion	 * 	 * Ext.layout.AnchorLayout	 * 	 * Ext.layout.BorderLayout	 * 	 * Ext.layout.CardLayout	 * 	 * Ext.layout.ColumnLayout	 * 	 * Ext.layout.FitLayout	 * 	 * Ext.layout.FormLayout	 * 	 * Ext.layout.TableLayout	 */	public JsObject layoutConfig;	/**	 * 	 * True to automatically monitor window resize events to handle anything	 * that is	 * 	 * sensitive to the current size of the viewport. This value is typically	 * managed	 * 	 * by the chosen layout and should not need to be set manually.	 */	public boolean monitorResize = false;	/**	 * 	 * <p>	 * The registered xtype to create. This config option is not used when	 * passing a	 * 	 * config object into a constructor. This config option is used only when	 * lazy	 * 	 * instantiation is being used, and a child item of a Container is being	 * 	 * specified not as a fully instantiated Component, but as a Component	 * config	 * 	 * object. The xtype will be looked up at render time up to determine what	 * 	 * type of child Component to create.	 * </p>	 * 	 * 	 * 	 * @see XTypes <p>	 *      If you subclass Components to create your own Components, you may	 *      register	 * 	 *      them using Ext.ComponentMgr.registerType in order to be able to take	 *      advantage	 * 	 *      of lazy instantiation and rendering.	 *      </p>	 */	public String xtype = XTypes.container;		public Container() {		super();	}		/**	 * 	 * Adds a component to this container. Fires the beforeadd event before	 * adding,	 * 	 * then fires the add event after the component has been added. If the	 * container	 * 	 * is already rendered when add is called, you may need to call doLayout to	 * 	 * refresh the view. This is required so that you can add multiple child	 * 	 * components if needed while only refreshing the layout once.	 * 	 * 	 * 	 * @param component	 *            The component to add. Ext uses lazy rendering, and will only	 * 	 *            render the added Component should it become necessary. A	 *            Component config object	 * 	 *            may be passed in order to avoid the overhead of constructing a	 *            real Component	 * 	 *            object if lazy rendering might mean that the added Component	 *            will not be	 * 	 *            rendered immediately. To take advantage of this	 *            "lazy instantiation", set the	 * 	 *            Ext.Component.xtype config property to the registered type of	 *            the Component	 * 	 *            wanted. For a list of all available xtypes, see Ext.Component.	 */	public void add(Component component) {		if (items == null) {			items = new JsArray();		}		items.add(component);	}		/**	 * 	 * Inserts a Component into this Container at a specified index. Fires the	 * beforeadd	 * 	 * event before inserting, then fires the add event after the Component has	 * been	 * 	 * inserted	 * 	 * 	 * 	 * @param index	 *            The index at which the Component will be inserted into the	 *            Container's items collection	 * 	 * @param component	 *            The child Component to insert. Ext uses lazy rendering, and	 *            will only render the inserted Component should it become	 *            necessary. A Component config object may be passed in order to	 *            avoid the overhead of constructing a real Component object if	 *            lazy rendering might mean that the inserted Component will not	 *            be rendered immediately. To take advantage of this	 *            "lazy instantiation", set the Ext.Component.xtype config	 *            property to the registered type of the Component wanted.	 * 	 * @see XTypes	 */	public void insert(int index, Component component) {		if (items == null) {			items = new JsArray();		}		items.set(index, component);	}		protected void _postProcessToString() {		super._postProcessToString();		if (activeItem != null)			put("activeItem", activeItem);		if (!autoDestroy)			put("autoDestroy", autoDestroy);		if (bufferResize > 0)			put("bufferResize", bufferResize);		if (defaults != null && defaults.size() > 0)			put("defaults", defaults);		if (defaultType != null)			put("defaultType", defaultType);		if (hideBorders)			put("hideBorders", hideBorders);		if (hideMode != null)			put("hideMode", hideMode);		if (items != null && items.size() > 0)			put("items", items);		if (layout != null)			put("layout", layout);		if (layoutConfig != null && layoutConfig.size() > 0)			put("layoutConfig", layoutConfig);		if (monitorResize)			put("monitorResize", monitorResize);		if (xtype != null)			put("xtype", xtype);	}		@Override	public String toString() {		_postProcessToString();		return "new " + TAG + "(" + JsHelper.printJsObject(this) + ")";	}}
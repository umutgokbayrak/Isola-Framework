package isola.model.ext.visual;import isola.helpers.JsHelper;import isola.model.core.JsArray;/** *  * A standard tooltip implementation for providing additional information when * hovering over a target * element. *  * @author Umut Gokbayrak */public class ToolTip extends Tip {	private static final long serialVersionUID = 4264398143733491583L;	private static final String TAG = "Ext.ToolTip";	/**	 * 	 * True to automatically hide the tooltip after the mouse exits the target	 * element or after	 * 	 * the dismissDelay has expired if set (defaults to true). If closable =	 * true a close tool	 * 	 * button will be rendered into the tooltip header.	 */	public boolean autoHide = true;	/**	 * 	 * Delay in milliseconds before the tooltip automatically hides (defaults to	 * 5000). To disable	 * 	 * automatic hiding, set dismissDelay = 0.	 */	public int dismissDelay = 5000;	/**	 * 	 * Delay in milliseconds after the mouse exits the target element but before	 * the tooltip	 * 	 * actually hides (defaults to 200). Set to 0 for the tooltip to hide	 * immediately.	 */	public int hideDelay = 200;	/**	 * 	 * An XY offset from the mouse position where the tooltip should be shown	 * (defaults to [15,18]).	 */	public JsArray mouseOffset;	/**	 * 	 * Delay in milliseconds before the tooltip displays after the mouse enters	 * the target	 * 	 * element (defaults to 500)	 */	public int showDelay = 500;	/**	 * 	 * The target HTMLElement, Ext.Element or id to associate with this tooltip.	 */	public String target;	/**	 * 	 * True to have the tooltip follow the mouse as it moves over the target	 * element (defaults to false).	 */	public boolean trackMouse = false;		public ToolTip() {		super();	}		@Override	protected void _postProcessToString() {		super._postProcessToString();		if (!autoHide)			put("autoHide", autoHide);		if (dismissDelay != 5000)			put("dismissDelay", dismissDelay);		if (hideDelay != 200)			put("hideDelay", hideDelay);		if (mouseOffset != null)			put("mouseOffset", mouseOffset);		if (showDelay != 500)			put("showDelay", showDelay);		if (target != null)			put("target", target);		if (trackMouse)			put("trackMouse", trackMouse);	}		@Override	public String toString() {		_postProcessToString();		return "new " + TAG + "(" + JsHelper.printJsObject(this) + ")";	}}
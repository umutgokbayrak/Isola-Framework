package isola.model.ext.visual;import isola.helpers.JsHelper;import isola.model.ext.constants.XTypes;import isola.model.ext.container.BoxComponent;/** *  * <p> * An updateable progress bar component. The progress bar supports two different *  * modes: manual and automatic. * </p> *  *  *  * <p> * In manual mode, you are responsible for showing, updating (via * updateProgress) and *  * clearing the progress bar as needed from your own code. This method is most * appropriate *  * when you want to show progress throughout an operation that has predictable * points of *  * interest at which you can update the control. * </p> *  *  *  * <p> * In automatic mode, you simply call wait and let the progress bar run * indefinitely, *  * only clearing it once the operation is complete. You can optionally have the * progress *  * bar wait for a specific amount of time and then clear itself. Automatic mode * is most *  * appropriate for timed operations or asymchronous operations in which you have * no need *  * for indicating intermediate progress. * </p> *  *  *  * @author Umut Gokbayrak */public class ProgressBar extends BoxComponent {	private static final long serialVersionUID = 1409122279030627446L;	private static final String TAG = "Ext.ProgressBar";	/**	 * 	 * The base CSS class to apply to the progress bar's wrapper element	 * (defaults to	 * 	 * 'x-progress')	 */	public String baseCls;	/**	 * 	 * The progress bar text (defaults to '')	 */	public String text;	/**	 * 	 * The element to render the progress text to (defaults to the progress	 * bar's internal text	 * 	 * element)	 */	public String textEl;	/**	 * 	 * A floating point value between 0 and 1 (e.g., .5, defaults to 0)	 */	public float value = 0f;	/**	 * 	 * <p>	 * The registered xtype to create. This config option is not used when	 * passing a	 * 	 * config object into a constructor. This config option is used only when	 * lazy	 * 	 * instantiation is being used, and a child item of a Container is being	 * 	 * specified not as a fully instantiated Component, but as a Component	 * config	 * 	 * object. The xtype will be looked up at render time up to determine what	 * 	 * type of child Component to create.	 * </p>	 * 	 * 	 * 	 * @see XTypes <p>	 *      If you subclass Components to create your own Components, you may	 *      register	 * 	 *      them using Ext.ComponentMgr.registerType in order to be able to take	 *      advantage	 * 	 *      of lazy instantiation and rendering.	 *      </p>	 */	public String xtype = XTypes.progress;		public ProgressBar() {		super();	}		@Override	protected void _postProcessToString() {		super._postProcessToString();		if (baseCls != null)			put("baseCls", baseCls);		if (text != null)			put("text", text);		if (textEl != null)			put("textEl", textEl);		if (value != 0f)			put("value", value);		if (xtype != null)			put("xtype", xtype);	}		@Override	public String toString() {		_postProcessToString();		return "new " + TAG + "(" + JsHelper.printJsObject(this) + ")";	}}
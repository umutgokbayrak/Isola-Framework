package isola.model.ext.visual;import isola.helpers.JsHelper;import isola.model.ext.container.Panel;/** *  * This is the base class for Ext.QuickTip and Ext.Tooltip that provides the * basic layout and *  * positioning that all tip-based classes require. This class can be used * directly for simple, *  * statically-positioned tips that are displayed programmatically, or it can be * extended to *  * provide custom tip implementations. *  *  *  * @author Umut Gokbayrak */public class Tip extends Panel {	private static final long serialVersionUID = 2929765129857179734L;	private static final String TAG = "Ext.Tip";	/**	 * 	 * True to render a close tool button into the tooltip header (defaults to	 * false).	 */	public boolean closable = false;	/**	 * 	 * Experimental. The default Ext.Element.alignTo anchor position value for	 * this tip relative	 * 	 * to its element of origin (defaults to "tl-bl?").	 */	public String defaultAlign;	/**	 * 	 * The maximum width of the tip in pixels (defaults to 300). The maximum	 * supported value is 500.	 */	public int maxWidth = 300;	/**	 * 	 * The minimum width of the tip in pixels (defaults to 40).	 */	public int minWidth = 40;	/**	 * 	 * True or "sides" for the default effect, "frame" for 4-way shadow, and	 * "drop" for	 * 	 * bottom-right shadow (defaults to "sides").	 */	public String shadow;	/**	 * 	 * Width in pixels of the tip (defaults to auto). Width will be ignored if	 * it exceeds the bounds	 * 	 * of minWidth or maxWidth. The maximum supported value is 500.	 */	public int width = 0;		public Tip() {		super();	}		@Override	protected void _postProcessToString() {		super._postProcessToString();		if (closable)			put("closable", closable);		if (defaultAlign != null)			put("defaultAlign", defaultAlign);		if (maxWidth != 300)			put("maxWidth", maxWidth);		if (minWidth != 40)			put("minWidth", minWidth);		if (shadow != null)			put("shadow", shadow);		if (width != 0)			put("width", width);	}		@Override	public String toString() {		_postProcessToString();		return "new " + TAG + "(" + JsHelper.printJsObject(this) + ")";	}}
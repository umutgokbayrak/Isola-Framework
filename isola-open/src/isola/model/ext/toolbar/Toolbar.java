package isola.model.ext.toolbar;import isola.helpers.JsHelper;import isola.model.core.JsArray;import isola.model.ext.constants.XTypes;import isola.model.ext.container.BoxComponent;/** *  * Basic Toolbar class. Toolbar elements can be created explicitly via their * constructors, *  * or implicitly via their xtypes. Some items also have shortcut strings for * creation. *  *  *  * @author Umut Gokbayrak */public class Toolbar extends BoxComponent {	private static final long serialVersionUID = -1257390559076996422L;	private static final String TAG = "Ext.Toolbar";	/**	 * 	 * <p>	 * The registered xtype to create. This config option is not used when	 * passing a	 * 	 * config object into a constructor. This config option is used only when	 * lazy	 * 	 * instantiation is being used, and a child item of a Container is being	 * 	 * specified not as a fully instantiated Component, but as a Component	 * config	 * 	 * object. The xtype will be looked up at render time up to determine what	 * 	 * type of child Component to create.	 * </p>	 * 	 * 	 * 	 * @see XTypes <p>	 *      If you subclass Components to create your own Components, you may	 *      register	 * 	 *      them using Ext.ComponentMgr.registerType in order to be able to take	 *      advantage	 * 	 *      of lazy instantiation and rendering.	 *      </p>	 */	public String xtype = XTypes.toolbar;	/**	 * 	 * Items at the toolbar. The following types of arguments are all valid:</p>	 * 	 * <ul>	 * 	 * <li>Ext.Toolbar.Button config: A valid button config object (equivalent	 * to addButton)</li>	 * 	 * <li>HtmlElement: Any standard HTML element (equivalent to addElement)</li>	 * 	 * <li>Field: Any form field (equivalent to addField)</li>	 * 	 * <li>Item: Any subclass of Ext.Toolbar.Item (equivalent to addItem)</li>	 * 	 * <li>String: Any generic string (gets wrapped in a Ext.Toolbar.TextItem,	 * equivalent to addText). Note that there are a few special strings that	 * are treated differently as explained next.</li>	 * 	 * <li>'separator' or '-': Creates a separator element (equivalent to	 * addSeparator)</li>	 * 	 * <li>' ': Creates a spacer element (equivalent to addSpacer)</li>	 * 	 * <li>'->': Creates a fill element (equivalent to addFill)</li>	 * 	 *</ul>	 */	public JsArray items;	/**	 * 	 * Is this toolbar a top toolbar or bottom toolbar. Valid values are top and	 * bottom.	 */	private String position;		public Toolbar() {		super();	}		@Override	protected void _postProcessToString() {		super._postProcessToString();		if (items != null)			put("items", items);		if (xtype != null)			put("xtype", xtype);	}		@Override	public String toString() {		_postProcessToString();		return "new " + TAG + "(" + JsHelper.printJsObject(this) + ")";	}		public String getPosition() {		return position;	}		/**	 * 	 * Is this toolbar a top toolbar or bottom toolbar. Valid values are top and	 * bottom.	 * 	 * @param position	 */	public void setPosition(String position) {		this.position = position;	}}
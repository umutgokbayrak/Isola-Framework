package isola.model.ext.toolbar;import isola.helpers.JsHelper;import isola.model.ext.constants.XTypes;import isola.model.ext.data.Store;/** *  * A specialized toolbar that is bound to a Ext.data.Store and provides * automatic paging controls. *  *  *  * @author Umut Gokbayrak */public class PagingToolbar extends Toolbar {	private static final long serialVersionUID = 6487161384404291515L;	private static final String TAG = "Ext.PagingToolbar";	/**	 * 	 * True to display the displayMsg (defaults to false)	 */	public boolean displayInfo = false;	/**	 * 	 * The paging status message to display (defaults to	 * "Displaying {0} - {1} of {2}").	 * 	 * Note that this string is formatted using the braced numbers 0-2 as tokens	 * that	 * 	 * are replaced by the values for start, end and total respectively. These	 * tokens should	 * 	 * be preserved when overriding this string if showing those values is	 * desired.	 */	public String displayMsg;	/**	 * 	 * The message to display when no records are found (defaults to	 * "No data to display")	 */	public String emptyMsg;	/**	 * 	 * The number of records to display per page (defaults to 20)	 */	public int pageSize = 20;	/**	 * 	 * <strong>Required</strong>The Ext.data.Store the paging toolbar should use	 * as its data source	 */	public Store store;	/**	 * 	 * <p>	 * The registered xtype to create. This config option is not used when	 * passing a	 * 	 * config object into a constructor. This config option is used only when	 * lazy	 * 	 * instantiation is being used, and a child item of a Container is being	 * 	 * specified not as a fully instantiated Component, but as a Component	 * config	 * 	 * object. The xtype will be looked up at render time up to determine what	 * 	 * type of child Component to create.	 * </p>	 * 	 * 	 * 	 * @see XTypes <p>	 *      If you subclass Components to create your own Components, you may	 *      register	 * 	 *      them using Ext.ComponentMgr.registerType in order to be able to take	 *      advantage	 * 	 *      of lazy instantiation and rendering.	 *      </p>	 */	public String xtype = XTypes.paging;		public PagingToolbar() {		super();	}		@Override	protected void _postProcessToString() {		super._postProcessToString();		if (displayInfo)			put("displayInfo", displayInfo);		if (displayMsg != null)			put("displayMsg", displayMsg);		if (emptyMsg != null)			put("emptyMsg", emptyMsg);		if (pageSize != 20)			put("pageSize", pageSize);		if (store != null)			put("store", store);		if (xtype != null)			put("xtype", xtype);	}		@Override	public String toString() {		_postProcessToString();		return "new " + TAG + "(" + JsHelper.printJsObject(this) + ")";	}}
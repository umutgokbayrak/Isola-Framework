package isola.model.ext.misc;import isola.helpers.JsHelper;import isola.model.ext.constants.XTypes;import isola.model.ext.container.BoxComponent;/** *  * Slider which supports vertical or horizontal orientation, keyboard * adjustments, configurable snapping, axis *  * clicking and animation. Can be added as an item to any container. Example * usage: *  * <pre> * &lt;code&gt; * 
 * new Ext.Slider({ * 
 *   renderTo: Ext.getBody(), * 
 *   width: 200, * 
 *   value: 50, * 
 *   increment: 10, * 
 *   minValue: 0, * 
 *   maxValue: 100 * 
 * }); * 
 * &lt;/code&gt; * </pre> *  *  *  * @author Umut Gokbayrak */public class Slider extends BoxComponent {	private static final long serialVersionUID = -5490908616425365238L;	private static final String TAG = "Ext.Slider";	/**	 * 	 * Turn on or off animation. Defaults to true	 */	public Boolean animate = true;	/**	 * 	 * Determines whether or not clicking on the Slider axis will change the	 * slider. Defaults to true	 */	public Boolean clickToChange = true;	/**	 * 	 * How many units to change the slider when adjusting by drag and drop. Use	 * this option to enable 'snapping'.	 */	public Integer increment;	/**	 * 	 * How many units to change the Slider when adjusting with keyboard	 * navigation. Defaults to 1. If the increment	 * 	 * config is larger, it will be used instead.	 */	public Integer keyIncrement = 1;	/**	 * 	 * The maximum value for the Slider. Defaults to 100.	 */	public Integer maxValue = 100;	/**	 * 	 * The minimum value for the Slider. Defaults to 0.	 */	public Integer minValue = 0;	/**	 * 	 * The value to initialize the slider with. Defaults to minValue.	 */	public Integer value = 0;	/**	 * 	 * Orient the Slider vertically rather than horizontally, defaults to false.	 */	public Boolean vertical = false;	/**	 * 	 * <p>	 * The registered xtype to create. This config option is not used when	 * passing a	 * 	 * config object into a constructor. This config option is used only when	 * lazy	 * 	 * instantiation is being used, and a child item of a Container is being	 * 	 * specified not as a fully instantiated Component, but as a Component	 * config	 * 	 * object. The xtype will be looked up at render time up to determine what	 * 	 * type of child Component to create.	 * </p>	 * 	 * 	 * 	 * @see XTypes <p>	 *      If you subclass Components to create your own Components, you may	 *      register	 * 	 *      them using Ext.ComponentMgr.registerType in order to be able to take	 *      advantage	 * 	 *      of lazy instantiation and rendering.	 *      </p>	 */	public String xtype = XTypes.slider;		public Slider() {		super();	}		protected void _postProcessToString() {		super._postProcessToString();		if (!animate)			put("animate", animate);		if (!clickToChange)			put("clickToChange", clickToChange);		if (increment != null)			put("increment", increment);		if (keyIncrement != 1)			put("keyIncrement", keyIncrement);		if (maxValue != 100)			put("maxValue", maxValue);		if (minValue != 0)			put("minValue", minValue);		if (value != 0)			put("value", value);		if (vertical)			put("vertical", vertical);		if (xtype != null)			put("xtype", xtype);	}		@Override	public String toString() {		_postProcessToString();		return "new " + TAG + "(" + JsHelper.printJsObject(this) + ")";	}}
package isola.model.ext.tree;import isola.helpers.JsHelper;import isola.model.core.JsObject;import isola.model.ext.constants.XTypes;import isola.model.ext.container.Panel;/** *  * <p> * The TreePanel provides tree-structured UI representation of tree-structured * data. * </p> *  *  *  * <p> * TreeNodes added to the TreePanel may each contain metadata used by your * application in *  * their attributes property. * </p> *  *  *  * <p> * <strong>A TreePanel must have a root node before it is rendered.</strong> * This may either be specified *  * using the root config option, or using the setRootNode method. * </p> *  *  *  * @author Umut Gokbayrak */public class TreePanel extends Panel {	private static final long serialVersionUID = 6434858696834640702L;	private static final String TAG = "Ext.tree.TreePanel";	/**	 * 	 * true to enable animated expand/collapse (defaults to the value of	 * Ext.enableFx)	 */	public boolean animate = false;	/**	 * 	 * true to register this container with ScrollManager	 */	public boolean containerScroll = false;	/**	 * 	 * True if the tree should only allow append drops (use for trees which are	 * sorted)	 */	public boolean ddAppendOnly = false;	/**	 * 	 * The DD group this TreePanel belongs to	 */	public String ddGroup;	/**	 * 	 * true to enable body scrolling	 */	public boolean ddScroll = false;	/**	 * 	 * Custom config to pass to the Ext.tree.TreeDragZone instance	 */	public JsObject dragConfig;	/**	 * 	 * Custom config to pass to the Ext.tree.TreeDropZone instance	 */	public JsObject dropConfig;	/**	 * 	 * true to enable drag and drop	 */	public boolean enableDD = false;	/**	 * 	 * true to enable just drag	 */	public boolean enableDrag = false;	/**	 * 	 * true to enable just drop	 */	public boolean enableDrop = false;	/**	 * 	 * The color of the node highlight (defaults to C3DAF9)	 */	public String hlColor;	/**	 * 	 * false to disable node highlight on drop (defaults to the value of	 * Ext.enableFx)	 */	public boolean hlDrop = false;	/**	 * 	 * false to disable tree lines (defaults to true)	 */	public boolean lines = true;	/**	 * 	 * A Ext.tree.TreeLoader for use with this TreePanel	 */	public TreeLoader loader;	/**	 * 	 * The token used to separate sub-paths in path strings (defaults to '/')	 */	public String pathSeparator;	/**	 * 	 * The root node for the tree.	 */	public TreeNode root;	/**	 * 	 * false to hide the root node (defaults to true)	 */	public boolean rootVisible = true;	/**	 * 	 * A tree selection model to use with this TreePanel (defaults to a	 * Ext.tree.DefaultSelectionModel)	 */	public JsObject selModel;	/**	 * 	 * true if only 1 node per branch may be expanded	 */	public boolean singleExpand = false;	/**	 * 	 * <p>	 * The registered xtype to create. This config option is not used when	 * passing a	 * 	 * config object into a constructor. This config option is used only when	 * lazy	 * 	 * instantiation is being used, and a child item of a Container is being	 * 	 * specified not as a fully instantiated Component, but as a Component	 * config	 * 	 * object. The xtype will be looked up at render time up to determine what	 * 	 * type of child Component to create.	 * </p>	 * 	 * 	 * 	 * @see XTypes <p>	 *      If you subclass Components to create your own Components, you may	 *      register	 * 	 *      them using Ext.ComponentMgr.registerType in order to be able to take	 *      advantage	 * 	 *      of lazy instantiation and rendering.	 *      </p>	 */	public String xtype = XTypes.treepanel;		public TreePanel() {		super();	}		@Override	protected void _postProcessToString() {		super._postProcessToString();		if (animate)			put("animate", animate);		if (containerScroll)			put("containerScroll", containerScroll);		if (ddAppendOnly)			put("ddAppendOnly", ddAppendOnly);		if (ddGroup != null)			put("ddGroup", ddGroup);		if (ddScroll)			put("ddScroll", ddScroll);		if (dragConfig != null)			put("dragConfig", dragConfig);		if (dropConfig != null)			put("dropConfig", dropConfig);		if (enableDD)			put("enableDD", enableDD);		if (enableDrag)			put("enableDrag", enableDrag);		if (enableDrop)			put("enableDrop", enableDrop);		if (hlColor != null)			put("hlColor", hlColor);		if (hlDrop)			put("hlDrop", hlDrop);		if (!lines)			put("lines", lines);		if (loader != null)			put("loader", loader);		if (pathSeparator != null)			put("pathSeparator", pathSeparator);		if (root != null)			put("root", root);		if (!rootVisible)			put("rootVisible", rootVisible);		if (selModel != null)			put("selModel", selModel);		if (singleExpand)			put("singleExpand", singleExpand);		// if (xtype != null) put("xtype", xtype);	}		@Override	public String toString() {		_postProcessToString();		return "new " + TAG + "(" + JsHelper.printJsObject(this) + ")";	}}
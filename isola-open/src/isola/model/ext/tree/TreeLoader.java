package isola.model.ext.tree;import isola.helpers.JsHelper;import isola.model.core.JsObject;import isola.model.ext.base.Observable;/** *  * A TreeLoader provides for lazy loading of an Ext.tree.TreeNode's child nodes * from a specified *  * URL. The response must be a JavaScript Array definition whose elements are * node definition *  * objects. eg: *  *  *  * <pre> * &lt;code&gt; * 
 * [{ * 
 *       id: 1, * 
 *       text: 'A leaf Node', * 
 *       leaf: true * 
 *   },{ * 
 *       id: 2, * 
 *       text: 'A folder Node', * 
 *       children: [{ * 
 *           id: 3, * 
 *           text: 'A child Node', * 
 *           leaf: true * 
 *       }] * 
 * }] * 
 * &lt;/code&gt; * </pre> *  *  *  * <p> * A server request is sent, and child nodes are loaded only when a node is * expanded. The loading *  * node's id is passed to the server under the parameter name "node" to enable * the server to produce *  * the correct child nodes. * </p> *  *  *  * <p> * To pass extra parameters, an event handler may be attached to the * "beforeload" event, and the *  * parameters specified in the TreeLoader's baseParams property: * </p> *  *  *  * <pre> * &lt;code&gt; * 
 * myTreeLoader.on(&quot;beforeload&quot;, function(treeLoader, node) { * 
 *       this.baseParams.category = node.attributes.category; * 
 *   }, this); * 
 * &lt;/code&gt; * </pre> *  *  *  * <p> * This would pass an HTTP parameter called "category" to the server containing * the value of the *  * Node's "category" attribute. * </p> *  *  *  * @author Umut Gokbayrak *  *  */public class TreeLoader extends Observable {	private static final long serialVersionUID = 6051362719421913574L;	private static final String TAG = "Ext.tree.TreeLoader";	/**	 * 	 * (optional) An object containing attributes to be added to all nodes	 * created by this loader.	 * 	 * If the attributes sent by the server have an attribute in this object,	 * they take priority.	 */	public JsObject baseAttrs;	/**	 * 	 * (optional) An object containing properties which specify HTTP parameters	 * to be passed to each	 * 	 * request for child nodes.	 */	public JsObject baseParams;	/**	 * 	 * (optional) Default to true. Remove previously existing child nodes before	 * loading.	 */	public boolean clearOnLoad = true;	/**	 * 	 * The URL from which to request a Json string which specifies an array of	 * node definition objects	 * 	 * representing the child nodes to be loaded.	 */	public String dataUrl;	/**	 * 	 * If set to true, the loader recursively loads "children" attributes when	 * doing the first load on	 * 	 * nodes.	 */	public boolean preloadChildren = false;	/**	 * 	 * The HTTP request method for loading data (defaults to 'POST').	 */	public String requestMethod;	/**	 * 	 * (optional) An object containing properties which specify custom	 * Ext.tree.TreeNodeUI	 * 	 * implementations. If the optional uiProvider attribute of a returned child	 * node is a string	 * 	 * rather than a reference to a TreeNodeUI implementation, this that string	 * value is used as a	 * 	 * property name in the uiProviders object.	 */	public JsObject uiProviders;	/**	 * 	 * Equivalent to dataUrl.	 */	public String url;		public TreeLoader() {		super();	}		@Override	protected void _postProcessToString() {		super._postProcessToString();		if (baseAttrs != null)			put("baseAttrs", baseAttrs);		if (baseParams != null)			put("baseParams", baseParams);		if (!clearOnLoad)			put("clearOnLoad", clearOnLoad);		if (dataUrl != null)			put("dataUrl", dataUrl);		if (preloadChildren)			put("preloadChildren", preloadChildren);		if (requestMethod != null)			put("requestMethod", requestMethod);		if (uiProviders != null)			put("uiProviders", uiProviders);		if (url != null)			put("url", url);	}		@Override	public String toString() {		_postProcessToString();		return "new " + TAG + "(" + JsHelper.printJsObject(this) + ")";	}}
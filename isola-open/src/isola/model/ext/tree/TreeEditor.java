package isola.model.ext.tree;import isola.helpers.JsHelper;import isola.model.ext.form.Editor;/** *  * Provides editor functionality for inline tree node editing. Any valid * Ext.form.Field can be *  * used as the editor field. *  *  *  * @author Umut Gokbayrak */public class TreeEditor extends Editor {	private static final long serialVersionUID = 7155961946701629134L;	private static final String TAG = "Ext.tree.TreeEditor";	/**	 * 	 * The position to align to (see Ext.Element.alignTo for more details,	 * defaults to "l-l").	 */	public String alignment;	/**	 * 	 * CSS class to apply to the editor (defaults to	 * "x-small-editor x-tree-editor")	 */	public String cls;	/**	 * 	 * The number of milliseconds between clicks to register a double-click that	 * will trigger	 * 	 * editing on the current node (defaults to 350). If two clicks occur on the	 * same node	 * 	 * within this time span, the editor for the node will display, otherwise it	 * will be processed	 * 	 * as a regular click.	 */	public int editDelay = 350;	/**	 * 	 * True to hide the bound element while the editor is displayed (defaults to	 * false)	 */	public boolean hideEl = false;	/**	 * 	 * The maximum width in pixels of the editor field (defaults to 250). Note	 * that if the maxWidth	 * 	 * would exceed the containing tree element's size, it will be automatically	 * limited for you to	 * 	 * the container width, taking scroll and client offsets into account prior	 * to each edit.	 */	public int maxWidth = 250;	/**	 * 	 * True to shim the editor if selects/iframes could be displayed beneath it	 * (defaults to false)	 */	public boolean shim = false;		public TreeEditor() {		super();	}		@Override	protected void _postProcessToString() {		super._postProcessToString();		if (alignment != null)			put("alignment", alignment);		if (cls != null)			put("cls", cls);		if (editDelay != 350)			put("editDelay", editDelay);		if (hideEl)			put("hideEl", hideEl);		if (maxWidth != 350)			put("maxWidth", maxWidth);		if (shim)			put("shim", shim);	}		@Override	public String toString() {		_postProcessToString();		return "new " + TAG + "(" + JsHelper.printJsObject(this) + ")";	}}
package isola.model.ext.tree;import isola.helpers.JsHelper;import isola.model.core.JsArray;/** *  * A TreePanel combined with a grid panel. *  *  *  * var tree = new Ext.tree.ColumnTree({ *  * el:'tree-ct', *  * width:552, *  * autoHeight:true, *  * rootVisible:false, *  * autoScroll:true, *  * title: 'Example Tasks', *  *  *  * columns:[{ *  * header:'Task', *  * width:350, *  * dataIndex:'task' *  * },{ *  * header:'Duration', *  * width:100, *  * dataIndex:'duration' *  * },{ *  * header:'Assigned To', *  * width:100, *  * dataIndex:'user' *  * }], *  *  *  * loader: new Ext.tree.TreeLoader({ *  * dataUrl:'column-data.json', *  * uiProviders:{ *  * 'col': Ext.tree.ColumnNodeUI *  * } *  * }), *  *  *  * root: new Ext.tree.AsyncTreeNode({ *  * text:'Tasks' *  * }) *  * }); *  * var tree = new Ext.tree.ColumnTree({ *  * el:'tree-ct', *  * width:552, *  * autoHeight:true, *  * rootVisible:false, *  * autoScroll:true, *  * title: 'Example Tasks', *  *  *  * columns:[{ *  * header:'Task', *  * width:350, *  * dataIndex:'task' *  * },{ *  * header:'Duration', *  * width:100, *  * dataIndex:'duration' *  * },{ *  * header:'Assigned To', *  * width:100, *  * dataIndex:'user' *  * }], *  *  *  * loader: new Ext.tree.TreeLoader({ *  * dataUrl:'column-data.json', *  * uiProviders:{ *  * 'col': Ext.tree.ColumnNodeUI *  * } *  * }), *  *  *  * root: new Ext.tree.AsyncTreeNode({ *  * text:'Tasks' *  * }) *  * }); *  *  *  * @author Umut Gokbayrak */public class ColumnTree extends TreePanel {	private static final long serialVersionUID = 5251339308012119485L;	private static final String TAG = "Ext.tree.ColumnTree";	/**	 * 	 * Html element this node is applied to	 */	public String el;	/**	 * 	 * Column definitions which are bind to a treeloader data source	 */	public JsArray columns;		public ColumnTree() {		super();	}		@Override	protected void _postProcessToString() {		super._postProcessToString();		if (el != null)			put("el", el);		if (columns != null && columns.size() > 0)			put("columns", columns);	}		@Override	public String toString() {		_postProcessToString();		return "new " + TAG + "(" + JsHelper.printJsObject(this) + ")";	}}
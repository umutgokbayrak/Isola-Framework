package isola.model.ext.grid;import isola.helpers.JsHelper;import isola.model.core.JsFunction;/** *  * Adds the ability for single level grouping to the grid. *  * var grid = new Ext.grid.GridPanel({ *  * // A groupingStore is required for a GroupingView *  * store: new Ext.data.GroupingStore({ *  * reader: reader, *  * data: xg.dummyData, *  * sortInfo:{field: 'company', direction: "ASC"}, *  * groupField:'industry' *  * }), *  *  *  * columns: [ *  * {id:'company',header: "Company", width: 60, sortable: true, dataIndex: * 'company'}, *  * {header: "Price", width: 20, sortable: true, renderer: * Ext.util.Format.usMoney, dataIndex: 'price'}, *  * {header: "Change", width: 20, sortable: true, dataIndex: 'change', renderer: * Ext.util.Format.usMoney}, *  * {header: "Industry", width: 20, sortable: true, dataIndex: 'industry'}, *  * {header: "Last Updated", width: 20, sortable: true, renderer: * Ext.util.Format.dateRenderer('m/d/Y'), dataIndex: 'lastChange'} *  * ], *  *  *  * view: new Ext.grid.GroupingView({ *  * forceFit:true, *  * // custom grouping text template to display the number of items per group *  * groupTextTpl: '{text} ({[values.rs.length]} {[values.rs.length > 1 ? "Items" * : "Item"]})' *  * }), *  *  *  * frame:true, *  * width: 700, *  * height: 450, *  * collapsible: true, *  * animCollapse: false, *  * title: 'Grouping Example', *  * iconCls: 'icon-grid', *  * renderTo: document.body *  * }); *  *  *  * @author Umut Gokbayrak */public class GroupingView extends GridView {	private static final long serialVersionUID = -88229755580628492L;	private static final String TAG = "Ext.grid.GroupingView";	/**	 * 	 * The text to display when there is an empty group value	 */	public String emptyGroupText;	/**	 * 	 * False to disable grouping functionality (defaults to true)	 */	public boolean enableGrouping = true;	/**	 * 	 * True to enable the grouping control in the column menu	 */	public boolean enableGroupingMenu = false;	/**	 * 	 * True to allow the user to turn off grouping	 */	public boolean enableNoGroups = false;	/**	 * 	 * Text displayed in the grid header menu for grouping by a column (defaults	 * to 'Group By This Field').	 */	public String groupByText;	/**	 * 	 * The function used to format the grouping field value for display in the	 * group header. Should	 * 	 * return a string value. This takes the following parameters:	 * 	 * 	 * 	 * <ul>	 * 	 * <li>	 * 	 * <strong>v</strong>: (Object) The new value of the group field.	 * 	 * </li>	 * 	 * <li><strong>unused</strong>: (undefined) Unused parameter.</li>	 * 	 * <li>	 * 	 * <strong>r</strong>: (Ext.data.Record) The Record providing the data for	 * the row	 * 	 * which caused group change.	 * 	 * </li>	 * 	 * <li>	 * 	 * <strong>rowIndex</strong>: (Number) The row index of the Record which	 * caused group	 * 	 * change.	 * 	 * </li>	 * 	 * <li>	 * 	 * <strong>colIndex</strong>: (Number) The column index of the group field.	 * 	 * </li>	 * 	 * <li>	 * 	 * <strong>ds</strong>: (Ext.data.Store) The Store which is providing the	 * data Model.	 * 	 * </li>	 * 	 * </ul>	 */	public JsFunction groupRenderer;	/**	 * 	 * The template used to render the group header. This is used to format an	 * object which contains	 * 	 * the following properties:	 * 	 * 	 * 	 * <ul>	 * 	 * <li>	 * 	 * <strong>group</strong> : String - The rendered value of the group field.	 * By default	 * 	 * this is the unchanged value of the group field. If a groupRenderer is	 * specified, it is	 * 	 * the result of a call to that.	 * 	 * </li>	 * 	 * <li>	 * 	 * <strong>gvalue</strong> : JsObject - The raw value of the group field.	 * 	 * </li>	 * 	 * <li>	 * 	 * <strong>text</strong> : String - The configured header (If showGroupName	 * is true)	 * 	 * plus the renderedgroup field value.	 * 	 * </li>	 * 	 * <li>	 * 	 * <strong>groupId</strong> : String - A unique, generated ID which is	 * applied to the View	 * 	 * Element which contains the group.	 * 	 * </li>	 * 	 * <li>	 * 	 * <strong>startRow</strong> : Number - The row index of the Record which	 * caused group change.	 * 	 * </li>	 * 	 * <li>	 * 	 * <strong>rs</strong>: JsArray - Contains a single element: The Record	 * providing the data	 * 	 * for the row which caused group change.	 * 	 * </li>	 * 	 * <li>	 * 	 * <strong>cls</strong>: String - The generated class name string to apply	 * to the group	 * 	 * header Element.	 * 	 * </li>	 * 	 * <li>	 * 	 * <strong>style</strong>: String - The inline style rules to apply to the	 * group header	 * 	 * Element.	 * 	 * </li>	 * 	 * </ul>	 * 	 * See Ext.XTemplate for information on how to format data using a template.	 */	public String groupTextTpl;	/**	 * 	 * The text with which to prefix the group field value in the group header	 * line.	 */	public String header;	/**	 * 	 * True to hide the column that is currently grouped	 */	public boolean hideGroupedColumn = false;	/**	 * 	 * True to skip refreshing the view when new rows are added (defaults to	 * false)	 */	public boolean ignoreAdd = false;	/**	 * 	 * True to display the name for each set of grouped rows (defaults to true)	 */	public boolean showGroupName = true;	/**	 * 	 * Text displayed in the grid header for enabling/disabling grouping	 * (defaults to 'Show in Groups').	 */	public String showGroupsText;	/**	 * 	 * True to start all groups collapsed	 */	public boolean startCollapsed = false;		/**
	 * 
	 */	public GroupingView() {		super();	}		@Override	protected void _postProcessToString() {		super._postProcessToString();		if (emptyGroupText != null)			put("emptyGroupText", emptyGroupText);		if (!enableGrouping)			put("enableGrouping", enableGrouping);		if (enableGroupingMenu)			put("enableGroupingMenu", enableGroupingMenu);		if (enableNoGroups)			put("enableNoGroups", enableNoGroups);		if (groupByText != null)			put("groupByText", groupByText);		if (groupRenderer != null)			put("groupRenderer", groupRenderer);		if (groupTextTpl != null)			put("groupTextTpl", groupTextTpl);		if (header != null)			put("header", header);		if (hideGroupedColumn)			put("hideGroupedColumn", hideGroupedColumn);		if (ignoreAdd)			put("ignoreAdd", ignoreAdd);		if (!showGroupName)			put("showGroupName", showGroupName);		if (showGroupsText != null)			put("showGroupsText", showGroupsText);		if (startCollapsed)			put("startCollapsed", startCollapsed);	}		@Override	public String toString() {		_postProcessToString();		return "new " + TAG + "(" + JsHelper.printJsObject(this) + ")";	}}
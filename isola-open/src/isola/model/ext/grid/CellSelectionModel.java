package isola.model.ext.grid;import isola.helpers.JsHelper;/** *  * <p> * This class provides the basic implementation for single cell selection in a * grid. The object *  * stored as the selection and returned by getSelectedCell contains the * following properties: * </p> *  *  *  * <ul> *  * <li> *  * <strong>record</strong>:(Ext.data.Record) - The Record which provides the * data for the row *  * containing the selection *  * </li> *  * <li> *  * <strong>cell</strong>:(Ext.data.Record) - An object containing the following * properties: *  * <ul> *  * <li><strong>rowIndex</strong>: (Number) - The index of the selected row</li> *  * <li><strong>cellIndex</strong>: (Number) - The index of the selected cell</li> *  * </ul> *  * </li> *  * </ul> *  *  *  * <p> * Note that due to possible column reordering, the cellIndex should not be used * as an index *  * into the Record's data. Instead, the name of the selected field should be * determined in order *  * to retrieve the data value from the record by name: * </p> *  *  *  * <pre> * &lt;code&gt; * 
 * var fieldName = grid.getColumnModel().getDataIndex(cellIndex); * 
 * var data = record.get(fieldName); * 
 * &lt;/code&gt; * </pre> *  *  *  * @author Umut Gokbayrak */public class CellSelectionModel extends AbstractSelectionModel {	private static final long serialVersionUID = 7456320905932698059L;	private static final String TAG = "Ext.grid.CellSelectionModel";		public CellSelectionModel() {		super();	}		@Override	protected void _postProcessToString() {		super._postProcessToString();	}		@Override	public String toString() {		_postProcessToString();		return "new " + TAG + "(" + JsHelper.printJsObject(this) + ")";	}}
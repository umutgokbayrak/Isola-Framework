package isola.model.ext.grid;import isola.helpers.JsHelper;import isola.model.ext.base.Observable;/** *  * <p> * This class encapsulates the user interface of an Ext.grid.GridPanel. Methods * of this class may be *  * used to access user interface elements to enable special display effects. Do * not change the DOM *  * structure of the user interface. * </p> *  *  *  * <p> * This class does not provide ways to manipulate the underlying data. The data * model of a Grid is *  * held in an Ext.data.Store. * </p> *  *  *  * @author Umut Gokbayrak */public class GridView extends Observable {	private static final long serialVersionUID = 8956700719507936354L;	private static final String TAG = "Ext.grid.GridView";	/**	 * 	 * True to auto expand the columns to fit the grid when the grid is created.	 */	public boolean autoFill = false;	/**	 * 	 * Default text to display in the grid body when no rows are available	 * (defaults to '').	 */	public String emptyText;	/**	 * 	 * True to add a second TR element per row that can be used to provide a row	 * body that spans beneath	 * 	 * the data row. Use the getRowClass method's rowParams config to customize	 * the row body.	 */	public boolean enableRowBody = false;	/**	 * 	 * True to auto expand/contract the size of the columns to fit the grid	 * width and prevent horizontal scrolling.	 */	public boolean forceFit = false;		/**
	 * 
	 */	public GridView() {		super();	}		@Override	protected void _postProcessToString() {		super._postProcessToString();		if (autoFill)			put("autoFill", autoFill);		if (emptyText != null)			put("emptyText", emptyText);		if (enableRowBody)			put("enableRowBody", enableRowBody);		if (forceFit)			put("enableRowBody", enableRowBody);	}		@Override	public String toString() {		_postProcessToString();		return "new " + TAG + "(" + JsHelper.printJsObject(this) + ")";	}}
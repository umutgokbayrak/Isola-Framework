package isola.model.ext.grid;import isola.helpers.JsHelper;import isola.model.core.JsArray;import isola.model.core.JsObject;import isola.model.ext.constants.XTypes;import isola.model.ext.container.Panel;import isola.model.ext.data.Store;/** *  * <p> * This class represents the primary interface of a component based grid * control. * </p> *  *  *  * <p> * Usage: * </p> *  * <code><pre> * var grid = new Ext.grid.GridPanel({ *     store: new Ext.data.Store({ *         reader: reader, *         data: xg.dummyData *     }), *     columns: [ *         {id:'company', header: "Company", width: 200, sortable: true, dataIndex: 'company'}, *         {header: "Price", width: 120, sortable: true, renderer: Ext.util.Format.usMoney, dataIndex: 'price'}, *         {header: "Change", width: 120, sortable: true, dataIndex: 'change'}, *         {header: "% Change", width: 120, sortable: true, dataIndex: 'pctChange'}, *         {header: "Last Updated", width: 135, sortable: true, renderer: Ext.util.Format.dateRenderer('m/d/Y'), dataIndex: 'lastChange'} *     ], *     viewConfig: { *         forceFit: true *     }, *     sm: new Ext.grid.RowSelectionModel({singleSelect:true}), *     width:600, *     height:300, *     frame:true, *     title:'Framed with CheckBox Selection and Horizontal Scrolling', *     iconCls:'icon-grid' * }); * </pre></code> *  *  *  * <p> * Note: Although this class inherits many configuration options from base * classes, some *  * of them (such as autoScroll, layout, items, etc) won't function as they do * with the base *  * Panel class. * </p> *  *  *  * <p> * To access the data in a Grid, it is necessary to use the data model * encapsulated by *  * the Store. See the cellclick event. * </p> *  *  *  * @author Umut Gokbayrak */public class GridPanel extends Panel {	private static final long serialVersionUID = -4233203920914377589L;	private static final String TAG = "Ext.grid.GridPanel";	/**	 * 	 * The id of a column in this grid that should expand to fill unused space.	 * This id can not	 * 	 * be 0.	 */	public String autoExpandColumn;	/**	 * 	 * The maximum width the autoExpandColumn can have (if enabled). Defaults to	 * 1000.	 */	public int autoExpandMax = 1000;	/**	 * 	 * The minimum width the autoExpandColumn can have (if enabled). defaults to	 * 50.	 */	public int autoExpandMin = 50;	/**	 * 	 * The Ext.grid.ColumnModel to use when rendering the grid (required).	 */	public ColumnModel colModel;	/**	 * 	 * An array of columns to auto create a ColumnModel	 */	public JsArray columns;	/**	 * 	 * True to disable selections in the grid (defaults to false). - ignored a	 * SelectionModel is	 * 	 * specified	 */	public boolean disableSelection = false;	/**	 * 	 * True to enable hiding of columns with the header context menu.	 */	public boolean enableColumnHide = false;	/**	 * 	 * True to enable drag and drop reorder of columns.	 */	public boolean enableColumnMove = false;	/**	 * 	 * False to turn off column resizing for the whole grid (defaults to true).	 */	public boolean enableColumnResize = true;	/**	 * 	 * True to enable drag and drop of rows.	 */	public boolean enableDragDrop = false;	/**	 * 	 * True to enable the drop down button for menu in the headers.	 */	public boolean enableHdMenu = false;	/**	 * 	 * An Ext.LoadMask config or true to mask the grid while loading (defaults	 * to false).	 */	public boolean loadMask = false;	/**	 * 	 * Sets the maximum height of the grid - ignored if autoHeight is not on.	 */	public int maxHeight = 0;	/**	 * 	 * The minimum width a column can be resized to. Defaults to 25.	 */	public int minColumnWidth = 25;	/**	 * 	 * True to autoSize the grid when the window resizes. Defaults to true.	 */	public boolean monitorWindowResize = true;	/**	 * 	 * Any subclass of AbstractSelectionModel that will provide the selection	 * 	 * model for the grid (defaults to Ext.grid.RowSelectionModel if not	 * specified).	 */	public AbstractSelectionModel selModel;	/**	 * 	 * <strong>Required</strong>The Ext.data.Store the grid should use as its	 * data source.	 */	public Store store;	/**	 * 	 * True to stripe the rows. Default is false.	 */	public boolean stripeRows = false;	/**	 * 	 * True to highlight rows when the mouse is over. Default is true.	 */	public boolean trackMouseOver = true;	/**	 * 	 * The Ext.grid.GridView used by the grid. This can be set before a call to	 * render().	 */	public GridView view;	/**	 * 	 * A config object that will be applied to the grid's UI view. Any of the	 * config	 * 	 * options available for Ext.grid.GridView can be specified here.	 */	public JsObject viewConfig;	/**	 * 	 * <p>	 * The registered xtype to create. This config option is not used when	 * passing a	 * 	 * config object into a constructor. This config option is used only when	 * lazy	 * 	 * instantiation is being used, and a child item of a Container is being	 * 	 * specified not as a fully instantiated Component, but as a Component	 * config	 * 	 * object. The xtype will be looked up at render time up to determine what	 * 	 * type of child Component to create.	 * </p>	 * 	 * 	 * 	 * @see XTypes <p>	 *      If you subclass Components to create your own Components, you may	 *      register	 * 	 *      them using Ext.ComponentMgr.registerType in order to be able to take	 *      advantage	 * 	 *      of lazy instantiation and rendering.	 *      </p>	 */	public String xtype = XTypes.grid;		public GridPanel() {		super();	}		protected void _postProcessToString() {		super._postProcessToString();		if (autoExpandColumn != null)			put("autoExpandColumn", autoExpandColumn);		if (autoExpandMax != 1000)			put("autoExpandMax", autoExpandMax);		if (autoExpandMin != 50)			put("autoExpandMin", autoExpandMin);		if (colModel != null)			put("cm", colModel);		if (disableSelection)			put("disableSelection", disableSelection);		if (!enableColumnHide)			put("enableColumnHide", enableColumnHide);		if (!enableColumnMove)			put("enableColumnMove", enableColumnMove);		if (!enableColumnResize)			put("enableColumnResize", enableColumnResize);		if (enableDragDrop)			put("enableDragDrop", enableDragDrop);		if (!enableHdMenu)			put("enableHdMenu", enableHdMenu);		if (loadMask)			put("loadMask", loadMask);		if (maxHeight != 0)			put("maxHeight", maxHeight);		if (minColumnWidth != 25)			put("minColumnWidth", minColumnWidth);		if (!monitorWindowResize)			put("monitorWindowResize", monitorWindowResize);		if (selModel != null)			put("selModel", selModel);		if (store != null)			put("store", store);		if (stripeRows)			put("stripeRows", stripeRows);		if (!trackMouseOver)			put("trackMouseOver", trackMouseOver);		if (view != null)			put("view", view);		if (viewConfig != null)			put("viewConfig", viewConfig);		if (columns != null)			put("columns", columns);		if (xtype != null)			put("xtype", xtype);	}		@Override	public String toString() {		_postProcessToString();		return "new " + TAG + "(" + JsHelper.printJsObject(this) + ")";	}}
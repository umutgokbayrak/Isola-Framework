package isola.tags.ext.tree;import javax.servlet.jsp.JspException;import isola.model.core.JsFunction;import isola.model.ext.base.Observable;import isola.model.ext.tree.TreeNode;import isola.tags.ext.data.NodeTag;/** *  *  *  * @author Umut Gokbayrak */public class TreeNodeTag extends NodeTag {	private static final long serialVersionUID = -9092733122764845768L;	private String allowChildren;	private String allowDrag;	private String allowDrop;	private String checked;	private String cls;	private String disabled;	private String draggable;	private String expandable;	private String expanded;	private String href;	private String hrefTarget;	private String icon;	private String iconCls;	private String isTarget;	private String qtip;	private String singleClickExpand;	private String text;	private String onBeforeChildrenRendered;	private String onBeforeClick;	private String onBeforeCollapse;	private String onBeforeExpand;	private String onCheckChange;	private String onClick;	private String onCollapse;	private String onContextMenu;	private String onDblClick;	private String onDisabledChange;	private String onExpand;	private String onTextChange;		@Override	public int doEndTag() throws JspException {		TreeNode obj = new TreeNode();		prepareConfig(obj);		// manage listeners		prepareEvents(obj);		// print the output		printOut(obj);		return EVAL_PAGE;	}		@Override	public void clear() {		super.clear();		allowChildren = allowDrag = allowDrop = "true";		checked = "false";		cls = null;		disabled = draggable = expandable = "false";		href = hrefTarget = icon = iconCls = null;		isTarget = "true";		qtip = null;		singleClickExpand = "false";		expanded = null;		text = null;	}		/**	 * 	 * 	 * 	 * @param obj	 */	protected void prepareConfig(TreeNode obj) {		super.prepareConfig(obj);		if (allowChildren != null) {			try {				obj.allowChildren = Boolean.valueOf(allowChildren);			} catch (Exception e) {			}		}		if (allowDrag != null) {			try {				obj.allowDrag = Boolean.valueOf(allowDrag);			} catch (Exception e) {			}		}		if (allowDrop != null) {			try {				obj.allowDrop = Boolean.valueOf(allowDrop);			} catch (Exception e) {			}		}		if (checked != null) {			try {				obj.checked = Boolean.valueOf(checked);			} catch (Exception e) {			}		}		obj.cls = cls;		if (disabled != null) {			try {				obj.disabled = Boolean.valueOf(disabled);			} catch (Exception e) {			}		}		if (draggable != null) {			try {				obj.draggable = Boolean.valueOf(draggable);			} catch (Exception e) {			}		}		if (expandable != null) {			try {				obj.expandable = Boolean.valueOf(expandable);			} catch (Exception e) {			}		}		if (expanded != null) {			try {				obj.expanded = Boolean.valueOf(expanded);			} catch (Exception e) {			}		}		obj.href = href;		obj.hrefTarget = hrefTarget;		obj.icon = icon;		obj.iconCls = iconCls;		if (isTarget != null) {			try {				obj.isTarget = Boolean.valueOf(isTarget);			} catch (Exception e) {			}		}		obj.qtip = qtip;		if (singleClickExpand != null) {			try {				obj.singleClickExpand = Boolean.valueOf(singleClickExpand);			} catch (Exception e) {			}		}		obj.text = text;	}		@Override	protected void prepareEvents(Observable obj) {		super.prepareEvents(obj);		if (onBeforeChildrenRendered != null) {			obj.listeners.put("beforechildrenrendered", new JsFunction(onBeforeChildrenRendered));		}		if (onBeforeClick != null) {			obj.listeners.put("beforeclick", new JsFunction(onBeforeClick));		}		if (onBeforeCollapse != null) {			obj.listeners.put("beforecollapse", new JsFunction(onBeforeCollapse));		}		if (onBeforeExpand != null) {			obj.listeners.put("beforeexpand", new JsFunction(onBeforeExpand));		}		if (onCheckChange != null) {			obj.listeners.put("checkchange", new JsFunction(onCheckChange));		}		if (onClick != null) {			obj.listeners.put("click", new JsFunction(onClick));		}		if (onCollapse != null) {			obj.listeners.put("collapse", new JsFunction(onCollapse));		}		if (onContextMenu != null) {			obj.listeners.put("conteztMenu", new JsFunction(onContextMenu));		}		if (onDblClick != null) {			obj.listeners.put("dblclick", new JsFunction(onDblClick));		}		if (onDisabledChange != null) {			obj.listeners.put("disabledchange", new JsFunction(onDisabledChange));		}		if (onExpand != null) {			obj.listeners.put("expand", new JsFunction(onExpand));		}		if (onTextChange != null) {			obj.listeners.put("textchange", new JsFunction(onTextChange));		}	}		/**	 * 	 * False to not allow this node to have child nodes (defaults to true)	 */	public void setAllowChildren(String allowChildren) {		this.allowChildren = allowChildren;	}		/**	 * 	 * False to make this node undraggable if draggable = true (defaults to	 * true)	 */	public void setAllowDrag(String allowDrag) {		this.allowDrag = allowDrag;	}		/**	 * 	 * False if this node cannot have child nodes dropped on it (defaults to	 * true)	 */	public void setAllowDrop(String allowDrop) {		this.allowDrop = allowDrop;	}		/**	 * 	 * True to render a checked checkbox for this node, false to render an	 * unchecked checkbox	 * 	 * (defaults to undefined with no checkbox rendered)	 */	public void setChecked(String checked) {		this.checked = checked;	}		/**	 * 	 * A css class to be added to the node	 */	public void setCls(String cls) {		this.cls = cls;	}		/**	 * 	 * true to start the node disabled	 */	public void setDisabled(String disabled) {		this.disabled = disabled;	}		/**	 * 	 * True to make this node draggable (defaults to false)	 */	public void setDraggable(String draggable) {		this.draggable = draggable;	}		/**	 * 	 * If set to true, the node will always show a plus/minus icon, even when	 * empty	 */	public void setExpandable(String expandable) {		this.expandable = expandable;	}		/**	 * 	 * URL of the link used for the node (defaults to #)	 */	public void setHref(String href) {		this.href = href;	}		/**	 * 	 * target frame for the link	 */	public void setHrefTarget(String hrefTarget) {		this.hrefTarget = hrefTarget;	}		/**	 * 	 * The path to an icon for the node. The preferred way to do this is to use	 * the cls or	 * 	 * iconCls attributes and add the icon via a CSS background image.	 */	public void setIcon(String icon) {		this.icon = icon;	}		/**	 * 	 * A css class to be added to the nodes icon element for applying css	 * background images	 */	public void setIconCls(String iconCls) {		this.iconCls = iconCls;	}		/**	 * 	 * False to not allow this node to act as a drop target (defaults to true)	 */	public void setIsTarget(String isTarget) {		this.isTarget = isTarget;	}		/**	 * 	 * An Ext QuickTip for the node	 */	public void setQtip(String qtip) {		this.qtip = qtip;	}		/**	 * 	 * True for single click expand on this node	 */	public void setSingleClickExpand(String singleClickExpand) {		this.singleClickExpand = singleClickExpand;	}		/**	 * 	 * The text for this node	 */	public void setText(String text) {		this.text = text;	}		/**	 * 	 * <p>	 * Fires right before the child nodes for this node are rendered	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>This</strong> : (Node) This node.</li>	 * 	 * </ul>	 * 	 * @param onBeforeChildrenRendered	 */	public void setOnBeforeChildrenRendered(String onBeforeChildrenRendered) {		this.onBeforeChildrenRendered = onBeforeChildrenRendered;	}		/**	 * 	 * <p>	 * Fires before click processing. Return false to cancel the default action.	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>This</strong> : (Node) This node.</li>	 * 	 * <li><strong>e</strong> : (Ext.EventObject) The event object</li>	 * 	 * </ul>	 * 	 * @param onBeforeClick	 */	public void setOnBeforeClick(String onBeforeClick) {		this.onBeforeClick = onBeforeClick;	}		/**	 * 	 * <p>	 * Fires before this node is collapsed, return false to cancel.	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>This</strong> : (Node) This node.</li>	 * 	 * <li><strong>deep</strong> : Boolean</li>	 * 	 * <li><strong>anim</strong> : Boolean</li>	 * 	 * </ul>	 * 	 * @param onBeforeCollapse	 */	public void setOnBeforeCollapse(String onBeforeCollapse) {		this.onBeforeCollapse = onBeforeCollapse;	}		/**	 * 	 * <p>	 * Fires before this node is expanded, return false to cancel.	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>This</strong> : (Node) This node.</li>	 * 	 * <li><strong>deep</strong> : Boolean</li>	 * 	 * <li><strong>anim</strong> : Boolean</li>	 * 	 * </ul>	 * 	 * @param onBeforeExpand	 */	public void setOnBeforeExpand(String onBeforeExpand) {		this.onBeforeExpand = onBeforeExpand;	}		/**	 * 	 * <p>	 * Fires when a node with a checkbox's checked property changes	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>This</strong> : (Node) This node.</li>	 * 	 * <li><strong>checked</strong> : Boolean</li>	 * 	 * </ul>	 * 	 * @param onCheckChange	 */	public void setOnCheckChange(String onCheckChange) {		this.onCheckChange = onCheckChange;	}		/**	 * 	 * <p>	 * Fires when this node is clicked	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>This</strong> : (Node) This node.</li>	 * 	 * <li><strong>e</strong> : (Ext.EventObject) The event object</li>	 * 	 * </ul>	 * 	 * @param onClick	 */	public void setOnClick(String onClick) {		this.onClick = onClick;	}		/**	 * 	 * <p>	 * Fires when this node is collapsed	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>This</strong> : (Node) This node.</li>	 * 	 * </ul>	 * 	 * @param onCollapse	 */	public void setOnCollapse(String onCollapse) {		this.onCollapse = onCollapse;	}		/**	 * 	 * <p>	 * Fires when this node is right clicked	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>This</strong> : (Node) This node.</li>	 * 	 * <li><strong>e</strong> : (Ext.EventObject) The event object</li>	 * 	 * </ul>	 * 	 * @param onContextMenu	 */	public void setOnContextMenu(String onContextMenu) {		this.onContextMenu = onContextMenu;	}		/**	 * 	 * <p>	 * Fires when this node is double clicked	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>This</strong> : (Node) This node.</li>	 * 	 * <li><strong>e</strong> : (Ext.EventObject) The event object</li>	 * 	 * </ul>	 * 	 * @param onDblClick	 */	public void setOnDblClick(String onDblClick) {		this.onDblClick = onDblClick;	}		/**	 * 	 * <p>	 * Fires when the disabled status of this node changes	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>This</strong> : (Node) This node.</li>	 * 	 * <li><strong>disabled</strong> : Boolean</li>	 * 	 * </ul>	 * 	 * @param onDisabledChange	 */	public void setOnDisabledChange(String onDisabledChange) {		this.onDisabledChange = onDisabledChange;	}		/**	 * 	 * <p>	 * Fires when this node is expanded	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>This</strong> : (Node) This node.</li>	 * 	 * </ul>	 * 	 * @param onExpand	 */	public void setOnExpand(String onExpand) {		this.onExpand = onExpand;	}		/**	 * 	 * <p>	 * Fires when the text for this node is changed	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>This</strong> : (Node) This node.</li>	 * 	 * <li><strong>text</strong> : (String) The new text</li>	 * 	 * <li><strong>oldText</strong> : (String) The old text</li>	 * 	 * </ul>	 * 	 * @param onTextChange	 */	public void setOnTextChange(String onTextChange) {		this.onTextChange = onTextChange;	}		public void setExpanded(String expanded) {		this.expanded = expanded;	}}
package isola.tags.ext.tree;import javax.servlet.jsp.JspException;import isola.model.core.JsFunction;import isola.model.core.JsObject;import isola.model.ext.base.Observable;import isola.model.ext.tree.TreeLoader;import isola.tags.base.BaseTag;/** *  * A TreeLoader provides for lazy loading of an Ext.tree.TreeNode's child nodes * from a specified *  * URL. The response must be a JavaScript Array definition whose elements are * node definition *  * objects. eg: *  *  *  * <pre> * &lt;code&gt; * 
 * [{ * 
 *       id: 1, * 
 *       text: 'A leaf Node', * 
 *       leaf: true * 
 *   },{ * 
 *       id: 2, * 
 *       text: 'A folder Node', * 
 *       children: [{ * 
 *           id: 3, * 
 *           text: 'A child Node', * 
 *           leaf: true * 
 *       }] * 
 * }] * 
 * &lt;/code&gt; * </pre> *  *  *  * <p> * A server request is sent, and child nodes are loaded only when a node is * expanded. The loading *  * node's id is passed to the server under the parameter name "node" to enable * the server to produce *  * the correct child nodes. * </p> *  *  *  * <p> * To pass extra parameters, an event handler may be attached to the * "beforeload" event, and the *  * parameters specified in the TreeLoader's baseParams property: * </p> *  *  *  * <pre> * &lt;code&gt; * 
 * myTreeLoader.on(&quot;beforeload&quot;, function(treeLoader, node) { * 
 *       this.baseParams.category = node.attributes.category; * 
 *   }, this); * 
 * &lt;/code&gt; * </pre> *  *  *  * <p> * This would pass an HTTP parameter called "category" to the server containing * the value of the *  * Node's "category" attribute. * </p> *  *  *  * @author Umut Gokbayrak */public class TreeLoaderTag extends BaseTag {	private static final long serialVersionUID = 845538380906279587L;	private String clearOnLoad;	private String preloadChildren;	private String method;	private String url;	private JsObject baseAttrs;	private JsObject params;	private JsObject uiProviders;	private String onBeforeLoad;	private String onLoad;	private String onLoadException;		@Override	public int doEndTag() throws JspException {		TreeLoader obj = new TreeLoader();		prepareConfig(obj);		// manage listeners		prepareEvents(obj);		// print the output		printOut(obj);		return EVAL_PAGE;	}		@Override	public void clear() {		clearOnLoad = "true";		preloadChildren = "false";		method = url = null;		baseAttrs = null;		params = null;		uiProviders = null;		onBeforeLoad = onLoad = onLoadException = null;	}		/**	 * 	 * 	 * 	 * @param obj	 */	protected void prepareConfig(TreeLoader obj) {		if (clearOnLoad != null) {			try {				obj.clearOnLoad = Boolean.valueOf(clearOnLoad);			} catch (Exception e) {			}		}		if (preloadChildren != null) {			try {				obj.preloadChildren = Boolean.valueOf(preloadChildren);			} catch (Exception e) {			}		}		obj.requestMethod = method;		obj.dataUrl = url;		if (baseAttrs != null) {			obj.baseAttrs = baseAttrs;		}		if (params != null && params.size() > 0) {			obj.baseParams = params;		}		if (uiProviders != null && uiProviders.size() > 0) {			obj.uiProviders = uiProviders;		}	}		protected void prepareEvents(Observable obj) {		if (onBeforeLoad != null) {			obj.listeners.put("beforeload", new JsFunction(onBeforeLoad));		}		if (onLoad != null) {			obj.listeners.put("load", new JsFunction(onLoad));		}		if (onLoadException != null) {			obj.listeners.put("loadexception", new JsFunction(onLoadException));		}	}		/**	 * 	 * (optional) Default to true. Remove previously existing child nodes before	 * loading.	 */	public void setClearOnLoad(String clearOnLoad) {		this.clearOnLoad = clearOnLoad;	}		/**	 * 	 * If set to true, the loader recursively loads "children" attributes when	 * doing the first load on	 * 	 * nodes.	 */	public void setPreloadChildren(String preloadChildren) {		this.preloadChildren = preloadChildren;	}		/**	 * 	 * The HTTP request method for loading data (defaults to 'POST').	 */	public void setMethod(String method) {		this.method = method;	}		/**	 * 	 * The URL from which to request a Json string which specifies an array of	 * node definition objects	 * 	 * representing the child nodes to be loaded.	 */	public void setUrl(String url) {		this.url = url;	}		/**	 * 	 * (optional) An object containing attributes to be added to all nodes	 * created by this loader.	 * 	 * If the attributes sent by the server have an attribute in this object,	 * they take priority.	 */	public void setBaseAttrs(JsObject baseAttrs) {		this.baseAttrs = baseAttrs;	}		/**	 * 	 * (optional) An object containing properties which specify HTTP parameters	 * to be passed to each	 * 	 * request for child nodes.	 */	public void setParams(JsObject params) {		this.params = params;	}		/**	 * 	 * (optional) An object containing properties which specify custom	 * Ext.tree.TreeNodeUI	 * 	 * implementations. If the optional uiProvider attribute of a returned child	 * node is a string	 * 	 * rather than a reference to a TreeNodeUI implementation, this that string	 * value is used as a	 * 	 * property name in the uiProviders object.	 */	public void setUiProviders(JsObject uiProviders) {		this.uiProviders = uiProviders;	}		/**	 * 	 * <p>	 * Fires before a network request is made to retrieve the Json text which	 * specifies a node's children.	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>This</strong> : (Object) TreeLoader object.</li>	 * 	 * <li><strong>node</strong> : (Object) The Ext.tree.TreeNode object being	 * loaded.</li>	 * 	 * <li><strong>callback</strong> : (Object) The callback function specified	 * in the load call.</li>	 * 	 * </ul>	 * 	 * @param onBeforeLoad	 */	public void setOnBeforeLoad(String onBeforeLoad) {		this.onBeforeLoad = onBeforeLoad;	}		/**	 * 	 * <p>	 * Fires when the node has been successfuly loaded.	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>This</strong> : (Object) TreeLoader object.</li>	 * 	 * <li><strong>node</strong> : (Object) The Ext.tree.TreeNode object being	 * loaded.</li>	 * 	 * <li><strong>response</strong> : (Object) The response object containing	 * the data from the server.</li>	 * 	 * </ul>	 * 	 * @param onLoad	 */	public void setOnLoad(String onLoad) {		this.onLoad = onLoad;	}		/**	 * 	 * <p>	 * Fires if the network request failed.	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>This</strong> : (Object) TreeLoader object.</li>	 * 	 * <li><strong>node</strong> : (Object) The Ext.tree.TreeNode object being	 * loaded.</li>	 * 	 * <li><strong>response</strong> : (Object) The response object containing	 * the data from the server.</li>	 * 	 * </ul>	 * 	 * @param onLoadException	 */	public void setOnLoadException(String onLoadException) {		this.onLoadException = onLoadException;	}		public JsObject getParams() {		if (params == null) {			params = new JsObject();		}		return params;	}}
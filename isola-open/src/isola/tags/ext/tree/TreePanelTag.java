package isola.tags.ext.tree;import javax.servlet.jsp.JspException;import isola.model.core.JsFunction;import isola.model.core.JsObject;import isola.model.ext.base.Observable;import isola.model.ext.tree.TreeLoader;import isola.model.ext.tree.TreeNode;import isola.model.ext.tree.TreePanel;import isola.tags.ext.container.PanelTag;/** *  * <p> * The TreePanel provides tree-structured UI representation of tree-structured * data. * </p> *  *  *  * <p> * TreeNodes added to the TreePanel may each contain metadata used by your * application in *  * their attributes property. * </p> *  *  *  * <p> * <strong>A TreePanel must have a root node before it is rendered.</strong> * This may either be specified *  * using the root config option, or using the setRootNode method. * </p> *  *  *  * <pre> * &lt;code&gt; * 
 * &lt;ext:body runOnLoad=&quot;true&quot;&gt; * 
 * 	&lt;ext:borderLayout renderTo=&quot;hebelek&quot; border=&quot;true&quot; width=&quot;900&quot; height=&quot;600&quot;&gt; * 
 * 		&lt;ext:treePanel rootVisible=&quot;true&quot; lines=&quot;true&quot; region=&quot;west&quot; split=&quot;true&quot; width=&quot;200&quot; autoScroll=&quot;true&quot; animate=&quot;true&quot; enableDD=&quot;true&quot; title=&quot;Folder Tree&quot;&gt; * 
 * 			&lt;ext:asyncTreeNode text=&quot;Root Node&quot; id=&quot;source&quot; draggable=&quot;false&quot; /&gt; * 
 * 			&lt;ext:treeLoader url=&quot;servlet/TreeLoaderServlet&quot; method=&quot;post&quot; /&gt; * 
 * 		&lt;/ext:treePanel&gt; * 
 * 		&lt;ext:borderLayout region=&quot;center&quot; split=&quot;true&quot;&gt; * 
 * 			&lt;ext:gridPanel region=&quot;north&quot; height=&quot;300&quot; forceFit=&quot;true&quot; border=&quot;true&quot; checkboxEnabled=&quot;true&quot;&gt; * 
 * 				&lt;ext:jsonStore url=&quot;servlet/JsonSampleServlet&quot; root=&quot;result&quot;&gt; * 
 * 					&lt;ext:httpParam name=&quot;action&quot; value=&quot;env&quot;/&gt; * 
 * 					&lt;ext:storeMapping name=&quot;name&quot;/&gt; * 
 * 					&lt;ext:storeMapping name=&quot;value&quot;/&gt; * 
 * 				&lt;/ext:jsonStore&gt; * 
 * 				&lt;ext:columnModel&gt; * 
 * 					&lt;ext:gridColumn dataIndex=&quot;name&quot; header=&quot;Name&quot; /&gt; * 
 * 					&lt;ext:gridColumn dataIndex=&quot;value&quot; header=&quot;Value&quot; /&gt; * 
 * 				&lt;/ext:columnModel&gt; * 
 * 			&lt;/ext:gridPanel&gt; * 
 * 			&lt;ext:borderLayout region=&quot;center&quot; split=&quot;true&quot; border=&quot;false&quot;&gt; * 
 * 				&lt;ext:panel region=&quot;north&quot; height=&quot;40&quot; bodyStyle=&quot;background-color:#f8f8f8;&quot; contentEl=&quot;msgHead&quot; style=&quot;border-top: 1px solid #eeeeee; border-bottom:1px solid #eeeeee;&quot;&gt; * 
 * 				&lt;/ext:panel&gt; * 
 * 				&lt;ext:panel region=&quot;center&quot; split=&quot;true&quot; border=&quot;true&quot;&gt; * 
 * 					This is the center pane * 
 * 				&lt;/ext:panel&gt; * 
 * 			&lt;/ext:borderLayout&gt; * 
 * 		&lt;/ext:borderLayout&gt; * 
 * 	&lt;/ext:borderLayout&gt; * 
 * &lt;/ext:body&gt; * 
 *  * 
 * &lt;div id=&quot;hebelek&quot;&gt;&lt;/div&gt; * 
 *  * 
 * &lt;div id=&quot;msgHead&quot;&gt; * 
 * 	&lt;b&gt;From:&lt;/b&gt;Test User&lt;br/&gt; * 
 * 	&lt;b&gt;Subject:&lt;/b&gt;Test Subject * 
 * &lt;/div&gt; * 
 * &lt;/code&gt; * </pre> *  *  *  * @author Umut Gokbayrak */public class TreePanelTag extends PanelTag {	private static final long serialVersionUID = 4617923539315730235L;	private String animate;	private String containerScroll;	private String ddAppendOnly;	private String ddGroup;	private String ddScroll;	private String enableDD;	private String enableDrag;	private String enableDrop;	private String hlColor;	private String hlDrop;	private String lines;	private String pathSeparator;	private String rootVisible;	private String singleExpand;	private JsObject dragConfig;	private JsObject dropConfig;	private TreeLoader loader;	private TreeNode root;	private JsObject selModel;	private String onAppend;	private String onBeforeAppend;	private String onBeforeChildRendered;	private String onBeforeClick;	private String onBeforeCollapseNode;	private String onBeforeExpandNode;	private String onBeforeInsert;	private String onBeforeLoad;	private String onBeforeRemoveNode;	private String onBeforeNodeDrop;	private String onCheckChange;	private String onClick;	private String onCollapseNode;	private String onContextMenu;	private String onDblClick;	private String onDisabledChange;	private String onDragDrop;	private String onEndDrag;	private String onExpandNode;	private String onInsert;	private String onLoad;	private String onMoveNode;	private String onNodeDragOver;	private String onNodeDrop;	private String onStartDrag;	private String onTextChange;	private String onBeforeMoveNode;		@Override	public int doEndTag() throws JspException {		TreePanel obj = new TreePanel();		prepareConfig(obj);		// manage listeners		prepareEvents(obj);		// print the output		printOut(obj);		return EVAL_PAGE;	}		@Override	public void clear() {		super.clear();		animate = containerScroll = ddAppendOnly = "false";		ddGroup = null;		ddScroll = enableDD = enableDrag = enableDrop = "false";		hlColor = null;		hlDrop = "false";		lines = "true";		pathSeparator = null;		rootVisible = "true";		singleExpand = "false";		dragConfig = null;		dropConfig = null;		loader = null;		root = null;		selModel = null;		onAppend = onBeforeAppend = onBeforeChildRendered = null;		onBeforeClick = onBeforeCollapseNode = onBeforeExpandNode = null;		onBeforeInsert = onBeforeLoad = onBeforeRemoveNode = null;		onBeforeNodeDrop = onCheckChange = null;		onClick = onCollapseNode = onContextMenu = null;		onDblClick = onDisabledChange = onDragDrop = onEndDrag = null;		onExpandNode = onInsert = onLoad = onMoveNode = null;		onNodeDragOver = onNodeDrop = onStartDrag = onTextChange = null;	}		/**	 * 	 * 	 * 	 * @param obj	 */	protected void prepareConfig(TreePanel obj) {		super.prepareConfig(obj);		if (animate != null) {			try {				obj.animate = Boolean.valueOf(animate);			} catch (Exception e) {			}		}		if (containerScroll != null) {			try {				obj.containerScroll = Boolean.valueOf(containerScroll);			} catch (Exception e) {			}		}		if (ddAppendOnly != null) {			try {				obj.ddAppendOnly = Boolean.valueOf(ddAppendOnly);			} catch (Exception e) {			}		}		obj.ddGroup = ddGroup;		if (ddScroll != null) {			try {				obj.ddScroll = Boolean.valueOf(ddScroll);			} catch (Exception e) {			}		}		if (enableDD != null) {			try {				obj.enableDD = Boolean.valueOf(enableDD);			} catch (Exception e) {			}		}		if (enableDrag != null) {			try {				obj.enableDrag = Boolean.valueOf(enableDrag);			} catch (Exception e) {			}		}		if (enableDrop != null) {			try {				obj.enableDrop = Boolean.valueOf(enableDrop);			} catch (Exception e) {			}		}		obj.hlColor = hlColor;		if (hlDrop != null) {			try {				obj.hlDrop = Boolean.valueOf(hlDrop);			} catch (Exception e) {			}		}		if (lines != null) {			try {				obj.lines = Boolean.valueOf(lines);			} catch (Exception e) {			}		}		obj.pathSeparator = pathSeparator;		if (rootVisible != null) {			try {				obj.rootVisible = Boolean.valueOf(rootVisible);			} catch (Exception e) {			}		}		if (singleExpand != null) {			try {				obj.singleExpand = Boolean.valueOf(singleExpand);			} catch (Exception e) {			}		}		if (dragConfig != null && dragConfig.size() > 0) {			obj.dragConfig = dragConfig;		}		if (dropConfig != null && dropConfig.size() > 0) {			obj.dropConfig = dropConfig;		}		if (loader != null) {			obj.loader = loader;		}		if (root != null) {			obj.root = root;		}		if (selModel != null && selModel.size() > 0) {			obj.selModel = selModel;		}	}		@Override	protected void prepareEvents(Observable obj) {		super.prepareEvents(obj);		if (onAppend != null) {			obj.listeners.put("append", new JsFunction(onAppend));		}		if (onBeforeAppend != null) {			obj.listeners.put("beforeappend", new JsFunction(onBeforeAppend));		}		if (onBeforeChildRendered != null) {			obj.listeners.put("beforechildrendered", new JsFunction(onBeforeChildRendered));		}		if (onBeforeClick != null) {			obj.listeners.put("beforeclick", new JsFunction(onBeforeClick));		}		if (onBeforeCollapseNode != null) {			obj.listeners.put("beforecollapsenode", new JsFunction(onBeforeCollapseNode));		}		if (onBeforeExpandNode != null) {			obj.listeners.put("beforeexpandnode", new JsFunction(onBeforeExpandNode));		}		if (onBeforeInsert != null) {			obj.listeners.put("beforeinsert", new JsFunction(onBeforeInsert));		}		if (onBeforeLoad != null) {			obj.listeners.put("beforeload", new JsFunction(onBeforeLoad));		}		if (onBeforeRemoveNode != null) {			obj.listeners.put("beforeremovenode", new JsFunction(onBeforeRemoveNode));		}		if (onBeforeNodeDrop != null) {			obj.listeners.put("beforenodedrop", new JsFunction(onBeforeNodeDrop));		}		if (onCheckChange != null) {			obj.listeners.put("checkchange", new JsFunction(onCheckChange));		}		if (onClick != null) {			obj.listeners.put("click", new JsFunction(onClick));		}		if (onCollapseNode != null) {			obj.listeners.put("collapsenode", new JsFunction(onCollapseNode));		}		if (onContextMenu != null) {			obj.listeners.put("contextmenu", new JsFunction(onContextMenu));		}		if (onDblClick != null) {			obj.listeners.put("dblclick", new JsFunction(onDblClick));		}		if (onDisabledChange != null) {			obj.listeners.put("disabledchange", new JsFunction(onDisabledChange));		}		if (onDragDrop != null) {			obj.listeners.put("dragdrop", new JsFunction(onDragDrop));		}		if (onEndDrag != null) {			obj.listeners.put("enddrag", new JsFunction(onEndDrag));		}		if (onExpandNode != null) {			obj.listeners.put("expandnode", new JsFunction(onExpandNode));		}		if (onInsert != null) {			obj.listeners.put("insert", new JsFunction(onInsert));		}		if (onLoad != null) {			obj.listeners.put("load", new JsFunction(onLoad));		}		if (onMoveNode != null) {			obj.listeners.put("movenode", new JsFunction(onMoveNode));		}		if (onNodeDragOver != null) {			obj.listeners.put("nodedragover", new JsFunction(onNodeDragOver));		}		if (onNodeDrop != null) {			obj.listeners.put("nodedrop", new JsFunction(onNodeDrop));		}		if (onStartDrag != null) {			obj.listeners.put("startdrag", new JsFunction(onStartDrag));		}		if (onTextChange != null) {			obj.listeners.put("textchange", new JsFunction(onTextChange));		}		if (onBeforeMoveNode!= null) {			obj.listeners.put("beforemovenode", new JsFunction(onBeforeMoveNode));		}	}		/**	 * 	 * true to enable animated expand/collapse (defaults to the value of	 * Ext.enableFx)	 */	public void setAnimate(String animate) {		this.animate = animate;	}		/**	 * 	 * true to register this container with ScrollManager	 */	public void setContainerScroll(String containerScroll) {		this.containerScroll = containerScroll;	}		/**	 * 	 * True if the tree should only allow append drops (use for trees which are	 * sorted)	 */	public void setDdAppendOnly(String ddAppendOnly) {		this.ddAppendOnly = ddAppendOnly;	}		/**	 * 	 * The DD group this TreePanel belongs to	 */	public void setDdGroup(String ddGroup) {		this.ddGroup = ddGroup;	}		/**	 * 	 * true to enable body scrolling	 */	public void setDdScroll(String ddScroll) {		this.ddScroll = ddScroll;	}		/**	 * 	 * true to enable drag and drop	 */	public void setEnableDD(String enableDD) {		this.enableDD = enableDD;	}		/**	 * 	 * true to enable just drag	 */	public void setEnableDrag(String enableDrag) {		this.enableDrag = enableDrag;	}		/**	 * 	 * true to enable just drop	 */	public void setEnableDrop(String enableDrop) {		this.enableDrop = enableDrop;	}		/**	 * 	 * The color of the node highlight (defaults to C3DAF9)	 */	public void setHlColor(String hlColor) {		this.hlColor = hlColor;	}		/**	 * 	 * false to disable node highlight on drop (defaults to the value of	 * Ext.enableFx)	 */	public void setHlDrop(String hlDrop) {		this.hlDrop = hlDrop;	}		/**	 * 	 * false to disable tree lines (defaults to true)	 */	public void setLines(String lines) {		this.lines = lines;	}		/**	 * 	 * The token used to separate sub-paths in path strings (defaults to '/')	 */	public void setPathSeparator(String pathSeparator) {		this.pathSeparator = pathSeparator;	}		/**	 * 	 * false to hide the root node (defaults to true)	 */	public void setRootVisible(String rootVisible) {		this.rootVisible = rootVisible;	}		/**	 * 	 * true if only 1 node per branch may be expanded	 */	public void setSingleExpand(String singleExpand) {		this.singleExpand = singleExpand;	}		/**	 * 	 * Custom config to pass to the Ext.tree.TreeDragZone instance	 */	public void setDragConfig(JsObject dragConfig) {		this.dragConfig = dragConfig;	}		/**	 * 	 * Custom config to pass to the Ext.tree.TreeDropZone instance	 */	public void setDropConfig(JsObject dropConfig) {		this.dropConfig = dropConfig;	}		/**	 * 	 * A Ext.tree.TreeLoader for use with this TreePanel	 */	public void setLoader(TreeLoader loader) {		this.loader = loader;	}		/**	 * 	 * The root node for the tree.	 */	public void setRoot(TreeNode root) {		this.root = root;	}		/**	 * 	 * A tree selection model to use with this TreePanel (defaults to a	 * Ext.tree.DefaultSelectionModel)	 */	public void setSelModel(JsObject selModel) {		this.selModel = selModel;	}		/**	 * 	 * <p>	 * Fires when a new child node is appended to a node in this tree.	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>tree</strong> : (Tree) The owner tree.</li>	 * 	 * <li><strong>parent</strong> : (Node) The parent node</li>	 * 	 * <li><strong>node</strong> : (Node) The newly appended node</li>	 * 	 * <li><strong>index</strong> : (Number) The index of the newly appended	 * node</li>	 * 	 * </ul>	 * 	 * @param onAppend	 */	public void setOnAppend(String onAppend) {		this.onAppend = onAppend;	}		/**	 * 	 * <p>	 * Fires before a new child is appended to a node in this tree, return false	 * to cancel the append.	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>tree</strong> : (Tree) The owner tree.</li>	 * 	 * <li><strong>parent</strong> : (Node) The parent node</li>	 * 	 * <li><strong>node</strong> : (Node) The newly appended node</li>	 * 	 * </ul>	 * 	 * @param onBeforeAppend	 */	public void setOnBeforeAppend(String onBeforeAppend) {		this.onBeforeAppend = onBeforeAppend;	}		/**	 * 	 * <p>	 * Fires right before the child nodes for a node are rendered	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>node</strong> : (Node) The node</li>	 * 	 * </ul>	 * 	 * @param onBeforeChildRendered	 */	public void setOnBeforeChildRendered(String onBeforeChildRendered) {		this.onBeforeChildRendered = onBeforeChildRendered;	}		/**	 * 	 * <p>	 * Fires before click processing on a node. Return false to cancel the	 * default action.	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>node</strong> : (Node) The node</li>	 * 	 * <li><strong>e</strong> : (Ext.EventObject) The event object</li>	 * 	 * </ul>	 * 	 * @param onBeforeClick	 */	public void setOnBeforeClick(String onBeforeClick) {		this.onBeforeClick = onBeforeClick;	}		/**	 * 	 * <p>	 * Fires before a node is collapsed, return false to cancel.	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>node</strong> : (Node) The node</li>	 * 	 * <li><strong>deep</strong> : Boolean</li>	 * 	 * <li><strong>anim</strong> : Boolean</li>	 * 	 * </ul>	 * 	 * @param onBeforeCollapseNode	 */	public void setOnBeforeCollapseNode(String onBeforeCollapseNode) {		this.onBeforeCollapseNode = onBeforeCollapseNode;	}		/**	 * 	 * <p>	 * Fires before the Panel is expanded. A handler can return false to cancel	 * the expand.	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>node</strong> : (Ext.Panel) The Panel being expanded.</li>	 * 	 * <li><strong>animate</strong> : (Boolean) True if the expand is animated,	 * else false.</li>	 * 	 * </ul>	 * 	 * @param onBeforeExpandNode	 */	public void setOnBeforeExpandNode(String onBeforeExpandNode) {		this.onBeforeExpandNode = onBeforeExpandNode;	}		/**	 * 	 * <p>	 * Fires before a new child is inserted in a node in this tree, return false	 * to cancel the insert.	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>tree</strong> : (Tree) The owner tree.</li>	 * 	 * <li><strong>parent</strong> : (Node) The parent node</li>	 * 	 * <li><strong>node</strong> : (Node) The child node to be inserted</li>	 * 	 * <li><strong>refNode</strong> : (Node) The child node the node is being	 * inserted before</li>	 * 	 * </ul>	 * 	 * @param onBeforeInsert	 */	public void setOnBeforeInsert(String onBeforeInsert) {		this.onBeforeInsert = onBeforeInsert;	}		/**	 * 	 * <p>	 * Fires before a node is loaded, return false to cancel	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>node</strong> : (Node) The node being loaded.</li>	 * 	 * </ul>	 * 	 * @param onBeforeLoad	 */	public void setOnBeforeLoad(String onBeforeLoad) {		this.onBeforeLoad = onBeforeLoad;	}		/**	 * 	 * <p>	 * Fires before a node is moved to a new location in the tree. Return false	 * to cancel the move.	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>tree</strong> : (Tree) The owner tree</li>	 * 	 * <li><strong>node</strong> : (Node) The node being moved</li>	 * 	 * <li><strong>oldParent</strong> : (Node) The parent of the node</li>	 * 	 * <li><strong>newParent</strong> : (Node) The new parent the node is moving	 * to</li>	 * 	 * <li><strong>index</strong> : (Number) The index it is being moved to</li>	 * 	 * </ul>	 * 	 * @param onBeforeRemoveNode	 */	public void setOnBeforeRemoveNode(String onBeforeRemoveNode) {		this.onBeforeRemoveNode = onBeforeRemoveNode;	}		/**	 * 	 * <p>	 * Fires when a DD object is dropped on a node in this tree for	 * preprocessing. Return false to cancel	 * 	 * the drop. The dropEvent passed to handlers has the following properties:	 * </p>	 * 	 * <pre>	 * 	 * tree - The TreePanel	 * 
	 * target - The node being targeted for the drop	 * 
	 * data - The drag data from the drag source	 * 
	 * point - The point of the drop - append, above or below	 * 
	 * source - The drag source	 * 
	 * rawEvent - Raw mouse event	 * 
	 * dropNode - Drop node(s) provided by the source &lt;strong&gt;OR&lt;/strong&gt; you can supply node(s) to be inserted by setting them on this object.	 * 
	 * cancel - Set this to true to cancel the drop.	 * 
	 * dropStatus - If the default drop action is cancelled but the drop is valid, setting this to true will prevent the animated &quot;repair&quot; from appearing.	 * 	 * </pre>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>dropEvent </strong> : Object</li>	 * 	 * </ul>	 * 	 * @param onBeforeNodeDrop	 */	public void setOnBeforeNodeDrop(String onBeforeNodeDrop) {		this.onBeforeNodeDrop = onBeforeNodeDrop;	}		/**	 * 	 * <p>	 * Fires when a node with a checkbox's checked property changes	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>this</strong> : (Node) This node</li>	 * 	 * <li><strong>checked</strong> : Boolean</li>	 * 	 * </ul>	 * 	 * @param onCheckChange	 */	public void setOnCheckChange(String onCheckChange) {		this.onCheckChange = onCheckChange;	}		/**	 * 	 * <p>	 * Fires when a node is clicked	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>node</strong> : (Node) The node</li>	 * 	 * <li><strong>e</strong> : (Ext.EventObject) The event object</li>	 * 	 * </ul>	 * 	 * @param onClick	 */	public void setOnClick(String onClick) {		this.onClick = onClick;	}		/**	 * 	 * <p>	 * Fires when a node is collapsed	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>node</strong> : (Node) The node</li>	 * 	 * </ul>	 * 	 * @param onCollapseNode	 */	public void setOnCollapseNode(String onCollapseNode) {		this.onCollapseNode = onCollapseNode;	}		/**	 * 	 * <p>	 * Fires when a node is right clicked	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>node</strong> : (Node) The node</li>	 * 	 * <li><strong>e</strong> : (Ext.EventObject) The event object</li>	 * 	 * </ul>	 * 	 * @param onContextMenu	 */	public void setOnContextMenu(String onContextMenu) {		this.onContextMenu = onContextMenu;	}		/**	 * 	 * <p>	 * Fires when a node is double clicked	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>node</strong> : (Node) The node</li>	 * 	 * <li><strong>e</strong> : (Ext.EventObject) The event object</li>	 * 	 * </ul>	 * 	 * @param onDblClick	 */	public void setOnDblClick(String onDblClick) {		this.onDblClick = onDblClick;	}		/**	 * 	 * <p>	 * Fires when the disabled status of a node changes	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>node</strong> : (Node) The node</li>	 * 	 * <li><strong>disabled</strong> : Boolean</li>	 * 	 * </ul>	 * 	 * @param onDisabledChange	 */	public void setOnDisabledChange(String onDisabledChange) {		this.onDisabledChange = onDisabledChange;	}		/**	 * 	 * <p>	 * Fires when a dragged node is dropped on a valid DD target	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>this</strong> : Ext.tree.TreePanel</li>	 * 	 * <li><strong>node</strong> : Ext.tree.TreeNode</li>	 * 	 * <li><strong>dd</strong> : (DD) The dd it was dropped on</li>	 * 	 * <li><strong>e</strong> : (Event) The raw browser event</li>	 * 	 * </ul>	 * 	 * @param onDragDrop	 */	public void setOnDragDrop(String onDragDrop) {		this.onDragDrop = onDragDrop;	}		/**	 * 	 * <p>	 * Fires when a drag operation is complete	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>this</strong> : Ext.tree.TreePanel</li>	 * 	 * <li><strong>node</strong> : Ext.tree.TreeNode</li>	 * 	 * <li><strong>e</strong> : (Event) The raw browser event</li>	 * 	 * </ul>	 * 	 * @param onEndDrag	 */	public void setOnEndDrag(String onEndDrag) {		this.onEndDrag = onEndDrag;	}		/**	 * 	 * <p>	 * Fires when a node is expanded	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>node</strong> : (Node) The node</li>	 * 	 * </ul>	 * 	 * @param onExpandNode	 */	public void setOnExpandNode(String onExpandNode) {		this.onExpandNode = onExpandNode;	}		/**	 * 	 * <p>	 * Fires when a new child node is inserted in a node in this tree.	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>tree</strong> : (Tree) The owner tree</li>	 * 	 * <li><strong>parent</strong> : (Node) The parent node</li>	 * 	 * <li><strong>node</strong> : (Node) The child node inserted</li>	 * 	 * <li><strong>refNode</strong> : (Node) The child node the node was	 * inserted before</li>	 * 	 * </ul>	 * 	 * @param onInsert	 */	public void setOnInsert(String onInsert) {		this.onInsert = onInsert;	}		/**	 * 	 * <p>	 * Fires when a node is loaded	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>node</strong> : (Node) The node that was loaded</li>	 * 	 * </ul>	 * 	 * @param onLoad	 */	public void setOnLoad(String onLoad) {		this.onLoad = onLoad;	}		/**	 * 	 * <p>	 * Fires when a node is moved to a new location in the tree	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>tree</strong> : (Tree) The owner tree</li>	 * 	 * <li><strong>node</strong> : (Node) The node moved</li>	 * 	 * <li><strong>oldParent</strong> : (Node) The old parent of this node</li>	 * 	 * <li><strong>newParent</strong> : (Node) The new parent of this node</li>	 * 	 * <li><strong>index</strong> : (Number) The index it was moved to</li>	 * 	 * </ul>	 * 	 * @param onMoveNode	 */	public void setOnMoveNode(String onMoveNode) {		this.onMoveNode = onMoveNode;	}		/**	 * 	 * <p>	 * Fires when a tree node is being targeted for a drag drop, return false to	 * signal drop not allowed.	 * 	 * The dragOverEvent passed to handlers has the following properties:	 * </p>	 * 	 * <pre>	 * 	 * tree - The TreePanel	 * 
	 * target - The node being targeted for the drop	 * 
	 * data - The drag data from the drag source	 * 
	 * point - The point of the drop - append, above or below	 * 
	 * source - The drag source	 * 
	 * rawEvent - Raw mouse event	 * 
	 * dropNode - Drop node(s) provided by the source.	 * 
	 * cancel - Set this to true to signal drop not allowed.	 * 	 * 	 * 	 * </pre>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>dragOverEvent</strong> : Object</li>	 * 	 * </ul>	 * 	 * @param onNodeDragOver	 */	public void setOnNodeDragOver(String onNodeDragOver) {		this.onNodeDragOver = onNodeDragOver;	}		/**	 * 	 * <p>	 * Fires after a DD object is dropped on a node in this tree.	 * 	 * The dropEvent passed to handlers has the following properties:	 * </p>	 * 	 * <pre>	 * 	 * tree - The TreePanel	 * 
	 * target - The node being targeted for the drop	 * 
	 * data - The drag data from the drag source	 * 
	 * point - The point of the drop - append, above or below	 * 
	 * source - The drag source	 * 
	 * rawEvent - Raw mouse event	 * 
	 * dropNode - Dropped node(s).	 * 	 * 	 * 	 * </pre>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>dropEvent</strong> : Object</li>	 * 	 * </ul>	 * 	 * @param onNodeDrop	 */	public void setOnNodeDrop(String onNodeDrop) {		this.onNodeDrop = onNodeDrop;	}		/**	 * 	 * <p>	 * Fires when a node starts being dragged	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>this</strong> : Ext.tree.TreePanel</li>	 * 	 * <li><strong>node</strong> : Ext.tree.TreeNode</li>	 * 	 * <li><strong>e</strong> : (Event) The raw browser event</li>	 * 	 * </ul>	 * 	 * @param onStartDrag	 */	public void setOnStartDrag(String onStartDrag) {		this.onStartDrag = onStartDrag;	}		/**	 * 	 * <p>	 * Fires when the text for a node is changed	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>node</strong> : (Node) The node</li>	 * 	 * <li><strong>text</strong> : (String) The new text</li>	 * 	 * <li><strong>oldText</strong> : (String) The old text</li>	 * 	 * </ul>	 * 	 * @param onTextChange	 */	public void setOnTextChange(String onTextChange) {		this.onTextChange = onTextChange;	}		public TreeLoader getLoader() {		return loader;	}		/**	 * 	 * <p>Fires before a node is moved to a new location in the tree. Return false to cancel the move.	 * Listeners will be called with the following arguments:</p>	 * 	 * <ul>	 * <li><strong>tree :</strong> The owner tree	 * <li><strong>node :</strong> The node being moved</li>	 * <li><strong>oldParent :</strong> The parent of the node</li>	 * <li><strong>newParent :</strong> The new parent the node is moving to</li>	 * <li><strong>index :</strong> The index it is being moved to</li>	 * </ul>	 * 	 * @param onBeforeMoveNode	 */	public void setOnBeforeMoveNode(String onBeforeMoveNode) {		this.onBeforeMoveNode = onBeforeMoveNode;	}}
package isola.tags.ext.data;import javax.servlet.jsp.JspException;import isola.model.core.JsFunction;import isola.model.ext.base.Observable;import isola.model.ext.data.Node;import isola.tags.base.BaseTag;/** *  * Used by underlying framework. Don't needed to be instantiated seperately. *  *  *  * @author Umut Gokbayrak */public class NodeTag extends BaseTag {	private static final long serialVersionUID = -3969888688698487129L;	private String id;	private String leaf;	private String onAppend;	private String onBeforeAppend;	private String onBeforeInsert;	private String onBeforeMove;	private String onBeforeRemove;	private String onInsert;	private String onMove;	private String onRemove;		@Override	public int doEndTag() throws JspException {		Node obj = new Node();		prepareConfig(obj);		// manage listeners		prepareEvents(obj);		// print the output		printOut(obj);		return EVAL_PAGE;	}		@Override	public void clear() {		id = null;		leaf = "false";		onAppend = onBeforeAppend = onBeforeInsert = onBeforeMove = null;		onBeforeRemove = onInsert = onMove = onRemove = null;	}		/**	 * 	 * 	 * 	 * @param obj	 */	protected void prepareConfig(Node obj) {		obj.id = id;		if (leaf != null) {			try {				obj.leaf = Boolean.valueOf(leaf);			} catch (Exception e) {			}		}	}		/**	 * 	 * 	 * 	 * @param obj	 */	protected void prepareEvents(Observable obj) {		if (onAppend != null) {			obj.listeners.put("append", new JsFunction(onAppend));		}		if (onBeforeAppend != null) {			obj.listeners.put("beforeappend", new JsFunction(onBeforeAppend));		}		if (onBeforeInsert != null) {			obj.listeners.put("beforeinsert", new JsFunction(onBeforeInsert));		}		if (onBeforeMove != null) {			obj.listeners.put("beforemove", new JsFunction(onBeforeMove));		}		if (onBeforeRemove != null) {			obj.listeners.put("beforeremove", new JsFunction(onBeforeRemove));		}		if (onInsert != null) {			obj.listeners.put("insert", new JsFunction(onInsert));		}		if (onMove != null) {			obj.listeners.put("move", new JsFunction(onMove));		}		if (onRemove != null) {			obj.listeners.put("remove", new JsFunction(onRemove));		}	}		/**	 * 	 * The id for this node. If one is not specified, one is generated.	 */	public void setId(String id) {		this.id = id;	}		/**	 * 	 * true if this node is a leaf and does not have children	 */	public void setLeaf(String leaf) {		this.leaf = leaf;	}		/**	 * 	 * <p>	 * Fires when a new child node is appended	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>tree</strong>:(Tree) The owner tree</li>	 * 	 * <li><strong>this</strong>:(Node) This node</li>	 * 	 * <li><strong>node</strong>:(Node) The newly appended node</li>	 * 	 * <li><strong>index</strong>:(Number) The index of the newly appended node</li>	 * 	 * </ul>	 * 	 * @param onAppend	 */	public void setOnAppend(String onAppend) {		this.onAppend = onAppend;	}		/**	 * 	 * <p>	 * Fires before a new child is appended, return false to cancel the append.	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>tree</strong>:(Tree) The owner tree</li>	 * 	 * <li><strong>this</strong>:(Node) This node</li>	 * 	 * <li><strong>node</strong>:(Node) The child node to be appended</li>	 * 	 * </ul>	 * 	 * @param onBeforeAppend	 */	public void setOnBeforeAppend(String onBeforeAppend) {		this.onBeforeAppend = onBeforeAppend;	}		/**	 * 	 * <p>	 * Fires before a new child is inserted, return false to cancel the insert.	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>tree</strong>:(Tree) The owner tree</li>	 * 	 * <li><strong>this</strong>:(Node) This node</li>	 * 	 * <li><strong>node</strong>:(Node) The child node to be inserted</li>	 * 	 * <li><strong>refNode</strong>:(Node) The child node the node is being	 * inserted before</li>	 * 	 * </ul>	 * 	 * @param onBeforeInsert	 */	public void setOnBeforeInsert(String onBeforeInsert) {		this.onBeforeInsert = onBeforeInsert;	}		/**	 * 	 * <p>	 * Fires before this node is moved to a new location in the tree. Return	 * false to cancel the move.	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>tree</strong>:(Tree) The owner tree</li>	 * 	 * <li><strong>this</strong>:(Node) This node</li>	 * 	 * <li><strong>oldParent</strong>:(Node) The parent of this node</li>	 * 	 * <li><strong>newParent</strong>:(Node) The new parent this node is moving	 * to</li>	 * 	 * <li><strong>index</strong>:(Number) The index it is being moved to</li>	 * 	 * </ul>	 * 	 * @param onBeforeMove	 */	public void setOnBeforeMove(String onBeforeMove) {		this.onBeforeMove = onBeforeMove;	}		/**	 * 	 * <p>	 * Fires before a child is removed, return false to cancel the remove.	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>tree</strong>:(Tree) The owner tree</li>	 * 	 * <li><strong>this</strong>:(Node) This node</li>	 * 	 * <li><strong>node</strong>:(Node) The child node to be removed</li>	 * 	 * </ul>	 * 	 * @param onBeforeRemove	 */	public void setOnBeforeRemove(String onBeforeRemove) {		this.onBeforeRemove = onBeforeRemove;	}		/**	 * 	 * <p>	 * Fires when a new child node is inserted.	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>tree</strong>:(Tree) The owner tree</li>	 * 	 * <li><strong>this</strong>:(Node) This node</li>	 * 	 * <li><strong>node</strong>:(Node) The child node inserted</li>	 * 	 * <li><strong>refNode</strong>:(Node) The child node the node was inserted	 * before</li>	 * 	 * </ul>	 * 	 * @param onInsert	 */	public void setOnInsert(String onInsert) {		this.onInsert = onInsert;	}		/**	 * 	 * <p>	 * Fires when this node is moved to a new location in the tree	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>tree</strong>:(Tree) The owner tree</li>	 * 	 * <li><strong>this</strong>:(Node) This node</li>	 * 	 * <li><strong>oldParent</strong>:(Node) The old parent of this node</li>	 * 	 * <li><strong>newParent</strong>:(Node) The new parent of this node</li>	 * 	 * <li><strong>index</strong>:(Number) The index it was moved to</li>	 * 	 * </ul>	 * 	 * @param onMove	 */	public void setOnMove(String onMove) {		this.onMove = onMove;	}		/**	 * 	 * <p>	 * Fires when a child node is removed	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>tree</strong>:(Tree) The owner tree</li>	 * 	 * <li><strong>this</strong>:(Node) This node</li>	 * 	 * <li><strong>node</strong>:(Node) The removed node</li>	 * 	 * </ul>	 * 	 * @param onRemove	 */	public void setOnRemove(String onRemove) {		this.onRemove = onRemove;	}}
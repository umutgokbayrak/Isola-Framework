package isola.tags.ext.data;import javax.servlet.jsp.JspException;import isola.model.core.JsArray;import isola.model.core.JsObject;import isola.model.ext.base.Observable;import isola.model.ext.data.Connection;import isola.model.ext.data.HttpProxy;import isola.model.ext.data.JsonStore;/** *  * A Datastore which fetches its data from a HTTP request and the response is a * valid JSON String *  *  *  * <pre> * &lt;code&gt; * 
 * &lt;ext:gridPanel id=&quot;myGrid&quot; width=&quot;400&quot; height=&quot;200&quot; forceFit=&quot;true&quot; renderTo=&quot;pbar&quot; border=&quot;true&quot;&gt; * 
 * 	&lt;ext:jsonStore url=&quot;jsonServlet.html&quot; root=&quot;result&quot;&gt; * 
 * 		&lt;ext:httpParam name=&quot;id&quot; value=&quot;111&quot;/&gt; * 
 * 		&lt;ext:httpParam name=&quot;user&quot; value=&quot;dummy&quot;/&gt; * 
 * 		&lt;ext:storeMapping name=&quot;name&quot; /&gt; * 
 * 		&lt;ext:storeMapping name=&quot;value&quot;/&gt; * 
 * 	&lt;/ext:jsonStore&gt; * 
 * 	&lt;ext:columnModel&gt; * 
 * 		 &lt;ext:gridColumn dataIndex=&quot;name&quot; header=&quot;Name&quot; /&gt; * 
 * 		 &lt;ext:gridColumn dataIndex=&quot;value&quot; header=&quot;Value&quot; /&gt; * 
 * 	&lt;/ext:columnModel&gt; * 
 * &lt;/ext:gridPanel&gt; * 
 * &lt;/code&gt;&lt;/pre&gt; * 
 *  * 
 * &lt;p&gt;This will consume a JSON string like: &lt;/p&gt; * 
 * &lt;pre&gt;&lt;code&gt; * 
 *  * 
 * {&quot;result&quot;:[ * 
 * {&quot;name&quot;:&quot;java.runtime.name&quot;,&quot;value&quot;:&quot;Java(TM) SE Runtime Environment&quot;}, * 
 * {&quot;name&quot;:&quot;com.atomikos.icatch.file&quot;,&quot;value&quot;:&quot;D:\\dev\\java\\jetty-6.1.7/contexts/test-jndi.d/WEB-INF/classes/jta.properties&quot;}, * 
 * {&quot;name&quot;:&quot;sun.boot.library.path&quot;,&quot;value&quot;:&quot;D:\\dev\\java\\jdk1.6.0_03\\jre\\bin&quot;} * 
 * ]} * 
 * &lt;/code&gt; * </pre> *  *  *  * @author Umut Gokbayrak */public class JsonStoreTag extends StoreTag {	private static final long serialVersionUID = 4825474186186559322L;	private String id;	private String root;	private String successProperty;	private String totalProperty;	private JsObject params;	private String method;	private String timeout;	private String disableProxy = "false";		@Override	public int doEndTag() throws JspException {		JsonStore obj = new JsonStore();		prepareConfig(obj);		// manage listeners		prepareEvents(obj);		boolean bDisableProxy = false;		if (disableProxy != null) {			try {				bDisableProxy = Boolean.valueOf(disableProxy);			} catch (Exception e) {}		}		if (!bDisableProxy) {			if (getProxy() == null) {				Connection conn = new Connection();				conn.url = getUrl();				conn.put("method", method);				if (timeout != null && !timeout.equals("30000")) {					try {						conn.timeout = Integer.parseInt(timeout);					} catch (Exception e) {}				}				HttpProxy proxy = new HttpProxy(conn);				if (timeout != null && !timeout.equals("30000")) {					try {						proxy.timeout = Integer.parseInt(timeout);					} catch (Exception e) {}				}				obj.proxy = proxy;			}		}		printStore(obj);		clear();		return EVAL_PAGE;	}		@Override	public void clear() {		super.clear();		id = method = root = successProperty = totalProperty = null;		params = new JsObject();		timeout = "30000";	}		/**	 * 	 * 	 * 	 * @param obj	 */	protected void prepareConfig(JsonStore obj) {		super.prepareConfig(obj);		obj.id = id;		obj.root = root;		obj.successProperty = successProperty;		obj.totalProperty = totalProperty;		JsArray f = getFields();		if (f != null && f.size() > 0) {			obj.put("fields", f);		}		if (params != null && params.size() > 0) {			obj.put("baseParams", params);		}		if (method != null) {			obj.put("method", method);		}		if (timeout != null && !timeout.equals("30000")) {			try {				obj.put("timeout", Integer.parseInt(timeout));			} catch (Exception e) {}		}	}		@Override	protected void prepareEvents(Observable obj) {		super.prepareEvents(obj);	}		/**	 * 	 * Name of the property within a row object that contains a record	 * identifier value.	 */	public void setId(String id) {		this.id = id;	}		/**	 * 	 * name of the property which contains the Array of row objects.	 */	public void setRoot(String root) {		this.root = root;	}		/**	 * 	 * Name of the property from which to retrieve the success attribute used by	 * forms.	 */	public void setSuccessProperty(String successProperty) {		this.successProperty = successProperty;	}		/**	 * 	 * Name of the property from which to retrieve the total number of records	 * in the	 * 	 * dataset. This is only needed if the whole dataset is not passed in one	 * go, but	 * 	 * is being paged from the remote server.	 */	public void setTotalProperty(String totalProperty) {		this.totalProperty = totalProperty;	}		public JsObject getParams() {		if (params == null) {			params = new JsObject();		}		return params;	}		/**	 * 	 * An object containing properties which are to be sent as parameters on any	 * HTTP request	 */	public void setParams(JsObject params) {		this.params = params;	}		/**	 * 	 * HTTP Method to use. post or get	 */	public void setMethod(String method) {		this.method = method;	}	public String getTimeout() {		return timeout;	}	public void setTimeout(String timeout) {		this.timeout = timeout;	}	public void setDisableProxy(String disableProxy) {		this.disableProxy = disableProxy;	}}
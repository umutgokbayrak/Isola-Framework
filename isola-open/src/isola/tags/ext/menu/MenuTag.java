package isola.tags.ext.menu;import javax.servlet.jsp.JspException;import isola.model.core.JsArray;import isola.model.core.JsFunction;import isola.model.core.JsObject;import isola.model.ext.base.Observable;import isola.model.ext.menu.Menu;import isola.tags.ext.base.ObservableTag;/** *  * A menu object. This is the container to which you add all other menu items. * Menu can also serve a *  * as a base class when you want a specialzed menu based off of another * component (like Ext.menu.DateMenu *  * for example). *  *  *  * @author Umut Gokbayrak */public class MenuTag extends ObservableTag {	private static final long serialVersionUID = 7891989464628455677L;	private String allowOtherMenus;	private String defaultAlign;	private String minWidth;	private String shadow;	private String subMenuAlign;	private JsObject defaults;	private JsArray items;	private String onBeforeHide;	private String onBeforeShow;	private String onClick;	private String onHide;	private String onItemClick;	private String onMouseOut;	private String onMouseOver;	private String onShow;		@Override	public int doEndTag() throws JspException {		Menu obj = new Menu();		prepareConfig(obj);		// manage listeners		prepareEvents(obj);		// print the output		printOut(obj);		return EVAL_PAGE;	}		@Override	public void clear() {		super.clear();		allowOtherMenus = "false";		defaultAlign = null;		minWidth = "120";		shadow = subMenuAlign = null;		defaults = null;		items = null;		onBeforeHide = onBeforeShow = onClick = onHide = null;		onItemClick = onMouseOut = onMouseOver = onShow = null;	}		/**	 * 	 * 	 * 	 * @param obj	 */	protected void prepareConfig(Menu obj) {		if (allowOtherMenus != null) {			try {				obj.allowOtherMenus = Boolean.valueOf(allowOtherMenus);			} catch (Exception e) {			}		}		obj.defaultAlign = defaultAlign;		if (minWidth != null) {			try {				obj.minWidth = Integer.parseInt(minWidth);			} catch (Exception e) {			}		}		obj.shadow = shadow;		obj.subMenuAlign = subMenuAlign;		if (defaults != null && defaults.size() > 0) {			obj.defaults = defaults;		}		if (items != null && items.size() > 0) {			obj.items = items;		}	}		@Override	protected void prepareEvents(Observable obj) {		super.prepareEvents(obj);		if (onBeforeHide != null) {			obj.listeners.put("beforehide", new JsFunction(onBeforeHide));		}		if (onBeforeShow != null) {			obj.listeners.put("beforeshow", new JsFunction(onBeforeShow));		}		if (onClick != null) {			obj.listeners.put("click", new JsFunction(onClick));		}		if (onHide != null) {			obj.listeners.put("hide", new JsFunction(onHide));		}		if (onItemClick != null) {			obj.listeners.put("itemclick", new JsFunction(onItemClick));		}		if (onMouseOut != null) {			obj.listeners.put("mouseout", new JsFunction(onMouseOut));		}		if (onMouseOver != null) {			obj.listeners.put("mouseover", new JsFunction(onMouseOver));		}		if (onShow != null) {			obj.listeners.put("show", new JsFunction(onShow));		}	}		public JsArray getItems() {		if (items == null) {			items = new JsArray();		}		return items;	}		/**	 * 	 * An array of items to be added to this menu. See add for a list of valid	 * item types.	 */	public void setItems(JsArray items) {		this.items = items;	}		/**	 * 	 * True to allow multiple menus to be displayed at the same time (defaults	 * to false)	 */	public void setAllowOtherMenus(String allowOtherMenus) {		this.allowOtherMenus = allowOtherMenus;	}		/**	 * 	 * The default {@link Ext.Element#alignTo) anchor position value for this	 * menu relative to	 * 	 * its element of origin (defaults to "tl-bl?")	 */	public void setDefaultAlign(String defaultAlign) {		this.defaultAlign = defaultAlign;	}		/**	 * 	 * The minimum width of the menu in pixels (defaults to 120)	 */	public void setMinWidth(String minWidth) {		this.minWidth = minWidth;	}		/**	 * 	 * True or "sides" for the default effect, "frame" for 4-way shadow, and	 * "drop" for bottom-right shadow	 * 	 * (defaults to "sides")	 */	public void setShadow(String shadow) {		this.shadow = shadow;	}		/**	 * 	 * The Ext.Element.alignTo anchor position value to use for submenus of this	 * menu (defaults to	 * 	 * "tl-tr?")	 */	public void setSubMenuAlign(String subMenuAlign) {		this.subMenuAlign = subMenuAlign;	}		/**	 * 	 * A config object that will be applied to all items added to this container	 * either via the items config	 * 	 * or via the add method. The defaults config can contain any number of	 * name/value property pairs to be	 * 	 * added to each item, and should be valid for the types of items being	 * added to the menu.	 */	public void setDefaults(JsObject defaults) {		this.defaults = defaults;	}		/**	 * 	 * <p>	 * Fires before this menu is hidden	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>this</strong> : Ext.menu.Menu</li>	 * 	 * </ul>	 * 	 * @param onBeforeHide	 */	public void setOnBeforeHide(String onBeforeHide) {		this.onBeforeHide = onBeforeHide;	}		/**	 * 	 * <p>	 * Fires before this menu is displayed	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>this</strong> : Ext.menu.Menu</li>	 * 	 * </ul>	 * 	 * @param onBeforeShow	 */	public void setOnBeforeShow(String onBeforeShow) {		this.onBeforeShow = onBeforeShow;	}		/**	 * 	 * <p>	 * Fires when this menu is clicked (or when the enter key is pressed while	 * it is active)	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>this</strong> : Ext.menu.Menu</li>	 * 	 * <li><strong>menuItem</strong> : (Ext.menu.Item) The menu item that was	 * clicked</li>	 * 	 * <li><strong>e</strong> : Ext.EventObject</li>	 * 	 * </ul>	 * 	 * @param onClick	 */	public void setOnClick(String onClick) {		this.onClick = onClick;	}		/**	 * 	 * <p>	 * Fires after this menu is hidden	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>this</strong> : Ext.menu.Menu</li>	 * 	 * </ul>	 * 	 * @param onHide	 */	public void setOnHide(String onHide) {		this.onHide = onHide;	}		/**	 * 	 * <p>	 * Fires when a menu item contained in this menu is clicked	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>baseItem</strong> : (Ext.menu.BaseItem) The BaseItem that was	 * clicked</li>	 * 	 * <li><strong>e</strong> : Ext.EventObject</li>	 * 	 * </ul>	 * 	 * @param onItemClick	 */	public void setOnItemClick(String onItemClick) {		this.onItemClick = onItemClick;	}		/**	 * 	 * <p>	 * Fires when the mouse exits this menu	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>this</strong> : Ext.menu.Menu</li>	 * 	 * <li><strong>e</strong> : Ext.EventObject</li>	 * 	 * <li><strong>menuItem </strong> : (Ext.menu.Item) The menu item that was	 * clicked</li>	 * 	 * </ul>	 * 	 * @param onMouseOut	 */	public void setOnMouseOut(String onMouseOut) {		this.onMouseOut = onMouseOut;	}		/**	 * 	 * <p>	 * Fires when the mouse is hovering over this menu	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>this</strong> : Ext.menu.Menu</li>	 * 	 * <li><strong>e</strong> : Ext.EventObject</li>	 * 	 * <li><strong>menuItem </strong> : (Ext.menu.Item) The menu item that was	 * clicked</li>	 * 	 * </ul>	 * 	 * @param onMouseOver	 */	public void setOnMouseOver(String onMouseOver) {		this.onMouseOver = onMouseOver;	}		/**	 * 	 * <p>	 * Fires after this menu is displayed	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>this</strong> : Ext.menu.Menu</li>	 * 	 * </ul>	 * 	 * @param onShow	 */	public void setOnShow(String onShow) {		this.onShow = onShow;	}}
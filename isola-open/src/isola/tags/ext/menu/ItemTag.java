package isola.tags.ext.menu;import javax.servlet.jsp.JspException;import isola.model.ext.base.Observable;import isola.model.ext.menu.Item;import isola.model.ext.menu.Menu;/** *  * A base class for all menu items that require menu-related functionality (like * sub-menus) and are not *  * static display items. Item extends the base functionality of * Ext.menu.BaseItem by adding menu-specific *  * activation and click handling. *  *  *  * @author Umut Gokbayrak */public class ItemTag extends BaseItemTag {	private static final long serialVersionUID = -4896950375278993144L;	private String href;	private String hrefTarget;	private String icon;	private String iconCls;	private String itemCls;	private String showDelay;	private String text;	private Menu menu;		@Override	public int doEndTag() throws JspException {		Item obj = new Item();		prepareConfig(obj);		// manage listeners		prepareEvents(obj);		// print the output		printOut(obj);		return EVAL_PAGE;	}		@Override	public void clear() {		super.clear();		href = hrefTarget = icon = iconCls = itemCls = null;		showDelay = "200";		text = null;	}		/**	 * 	 * 	 * 	 * @param obj	 */	protected void prepareConfig(Item obj) {		super.prepareConfig(obj);		obj.href = href;		obj.hrefTarget = hrefTarget;		obj.icon = icon;		obj.iconCls = iconCls;		obj.itemCls = itemCls;		if (showDelay != null) {			try {				obj.showDelay = Integer.parseInt(showDelay);			} catch (Exception e) {			}		}		obj.text = text;		obj.menu = menu;	}		@Override	protected void prepareEvents(Observable obj) {		super.prepareEvents(obj);	}		/**	 * 	 * The href attribute to use for the underlying anchor link (defaults to	 * '#').	 */	public void setHref(String href) {		this.href = href;	}		/**	 * 	 * The target attribute to use for the underlying anchor link (defaults to	 * '').	 */	public void setHrefTarget(String hrefTarget) {		this.hrefTarget = hrefTarget;	}		/**	 * 	 * The path to an icon to display in this item (defaults to	 * Ext.BLANK_IMAGE_URL). If icon is	 * 	 * specified iconCls should not be.	 */	public void setIcon(String icon) {		this.icon = icon;	}		/**	 * 	 * A CSS class that specifies a background image that will be used as the	 * icon for this item	 * 	 * (defaults to ''). If iconCls is specified icon should not be.	 */	public void setIconCls(String iconCls) {		this.iconCls = iconCls;	}		/**	 * 	 * The default CSS class to use for menu items (defaults to 'x-menu-item')	 */	public void setItemCls(String itemCls) {		this.itemCls = itemCls;	}		/**	 * 	 * Length of time in milliseconds to wait before showing this item (defaults	 * to 200)	 */	public void setShowDelay(String showDelay) {		this.showDelay = showDelay;	}		/**	 * 	 * The text to display in this item (defaults to '').	 */	public void setText(String text) {		this.text = text;	}		public void setMenu(Menu menu) {		this.menu = menu;	}}
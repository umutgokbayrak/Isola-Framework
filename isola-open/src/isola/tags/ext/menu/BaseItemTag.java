package isola.tags.ext.menu;import javax.servlet.jsp.JspException;import isola.model.core.JsFunction;import isola.model.ext.base.Observable;import isola.model.ext.menu.BaseItem;import isola.tags.ext.base.ComponentTag;/** *  * The base class for all items that render into menus. BaseItem provides * default rendering, activated *  * state management and base configuration options shared by all menu * components. *  *  *  * @author Umut Gokbayrak */public class BaseItemTag extends ComponentTag {	private static final long serialVersionUID = 5860132067489511712L;	private String activeClass;	private String canActivate;	private String handler;	private String hideDelay;	private String hideOnClick;	private String scope;	private String onActivate;	private String onClick;	private String onDeactivate;		@Override	public int doEndTag() throws JspException {		BaseItem obj = new BaseItem();		prepareConfig(obj);		// manage listeners		prepareEvents(obj);		// print the output		printOut(obj);		return EVAL_PAGE;	}		@Override	public void clear() {		super.clear();		activeClass = null;		canActivate = "false";		handler = null;		hideDelay = "100";		hideOnClick = "true";		scope = onActivate = onClick = onDeactivate = null;	}		/**	 * 	 * 	 * 	 * @param obj	 */	protected void prepareConfig(BaseItem obj) {		super.prepareConfig(obj);		obj.activeClass = activeClass;		if (canActivate != null) {			try {				obj.canActivate = Boolean.valueOf(canActivate);			} catch (Exception e) {			}		}		if (handler != null) {			try {				obj.handler = new JsFunction(handler);			} catch (Exception e) {			}		}		if (hideDelay != null) {			try {				obj.hideDelay = Integer.parseInt(hideDelay);			} catch (Exception e) {			}		}		if (hideOnClick != null) {			try {				obj.hideOnClick = Boolean.valueOf(hideOnClick);			} catch (Exception e) {			}		}		obj.scope = scope;	}		@Override	protected void prepareEvents(Observable obj) {		super.prepareEvents(obj);		if (onActivate != null) {			obj.listeners.put("activate", new JsFunction(onActivate));		}		if (onClick != null) {			obj.listeners.put("click", new JsFunction(onClick));		}		if (onDeactivate != null) {			obj.listeners.put("deactivate", new JsFunction(onDeactivate));		}	}		/**	 * 	 * The CSS class to use when the item becomes activated (defaults to	 * "x-menu-item-active")	 */	public void setActiveClass(String activeClass) {		this.activeClass = activeClass;	}		/**	 * 	 * True if this item can be visually activated (defaults to false)	 */	public void setCanActivate(String canActivate) {		this.canActivate = canActivate;	}		/**	 * 	 * A function that will handle the click event of this menu item (defaults	 * to undefined)	 */	public void setHandler(String handler) {		this.handler = handler;	}		/**	 * 	 * Length of time in milliseconds to wait before hiding after a click	 * (defaults to 100)	 */	public void setHideDelay(String hideDelay) {		this.hideDelay = hideDelay;	}		/**	 * 	 * True to hide the containing menu after this item is clicked (defaults to	 * true)	 */	public void setHideOnClick(String hideOnClick) {		this.hideOnClick = hideOnClick;	}		/**	 * 	 * The scope in which the handler function will be called.	 */	public void setScope(String scope) {		this.scope = scope;	}		/**	 * 	 * <p>	 * Fires when this item is activated	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>this</strong> : Ext.menu.BaseItem</li>	 * 	 * </ul>	 * 	 * @param onActivate	 */	public void setOnActivate(String onActivate) {		this.onActivate = onActivate;	}		/**	 * 	 * <p>	 * Fires when this item is clicked	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>this</strong> : Ext.menu.BaseItem</li>	 * 	 * <li><strong>e</strong> : Ext.EventObject</li>	 * 	 * </ul>	 * 	 * @param onClick	 */	public void setOnClick(String onClick) {		this.onClick = onClick;	}		/**	 * 	 * <p>	 * Fires when this item is deactivated	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>this</strong> : Ext.menu.BaseItem</li>	 * 	 * </ul>	 * 	 * @param onDeactivate	 */	public void setOnDeactivate(String onDeactivate) {		this.onDeactivate = onDeactivate;	}}
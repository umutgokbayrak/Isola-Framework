package isola.tags.ext.toolbar;import javax.servlet.jsp.JspException;import isola.model.core.JsArray;import isola.model.ext.base.Observable;import isola.model.ext.toolbar.Toolbar;import isola.tags.ext.container.BoxComponentTag;/** *  * Basic Toolbar class. Toolbar elements can be created explicitly via their * constructors, *  * or implicitly via their xtypes. Some items also have shortcut strings for * creation. *  *  *  * @author Umut Gokbayrak */public class ToolbarTag extends BoxComponentTag {	private static final long serialVersionUID = -736529783543377901L;	private JsArray items;	/**	 * 	 * Top or bottom	 */	private String position;		@Override	public int doEndTag() throws JspException {		Toolbar obj = new Toolbar();		prepareConfig(obj);		// manage listeners		prepareEvents(obj);		// print the output		printOut(obj);		return EVAL_PAGE;	}		@Override	public void clear() {		super.clear();		items = null;		position = "top";	}		/**	 * 	 * 	 * 	 * @param obj	 */	protected void prepareConfig(Toolbar obj) {		super.prepareConfig(obj);		if (items != null && items.size() > 0) {			try {				obj.items = items;			} catch (Exception e) {			}		}		if (position == null) {			position = "top";		}		obj.setPosition(position);	}		@Override	protected void prepareEvents(Observable obj) {		super.prepareEvents(obj);	}		public JsArray getItems() {		if (items == null) {			items = new JsArray();		}		return items;	}		/**	 * 	 * Items at the toolbar. The following types of arguments are all valid:</p>	 * 	 * <ul>	 * 	 * <li>Ext.Toolbar.Button config: A valid button config object (equivalent	 * to addButton)</li>	 * 	 * <li>HtmlElement: Any standard HTML element (equivalent to addElement)</li>	 * 	 * <li>Field: Any form field (equivalent to addField)</li>	 * 	 * <li>Item: Any subclass of Ext.Toolbar.Item (equivalent to addItem)</li>	 * 	 * <li>String: Any generic string (gets wrapped in a Ext.Toolbar.TextItem,	 * equivalent to addText). Note that there are a few special strings that	 * are treated differently as explained next.</li>	 * 	 * <li>'separator' or '-': Creates a separator element (equivalent to	 * addSeparator)</li>	 * 	 * <li>' ': Creates a spacer element (equivalent to addSpacer)</li>	 * 	 * <li>'->': Creates a fill element (equivalent to addFill)</li>	 * 	 *</ul>	 */	public void setItems(JsArray items) {		this.items = items;	}		public String getPosition() {		return position;	}		/**	 * 	 * Is this toolbar a top toolbar or bottom toolbar. Valid values are top and	 * bottom.	 */	public void setPosition(String position) {		this.position = position;	}}
package isola.tags.ext.container;import javax.servlet.jsp.JspException;import isola.model.core.JsFunction;import isola.model.core.JsVariableImpl;import isola.model.ext.base.Observable;import isola.model.ext.container.DataView;import isola.model.ext.data.Store;/** *  * <p> * A mechanism for displaying data using custom layout templates and formatting. *  * DataView uses an Ext.XTemplate as its internal templating mechanisma, and is *  * bound to an Ext.data.Store so that as the data in the store changes the view * is *  * automatically updated to reflect the changes. The view also provides built-in *  * behavior for many common events that can occur for its contained items * including *  * click, doubleclick, mouseover, mouseout, etc. as well as a built-in selection *  * model. In order to use these features, an itemSelector config must be * provided *  * for the DataView to determine what nodes it will be working with. * </p> *  *  *  * <p> * The example below binds a DataView to a Ext.data.Store and renders it into *  * an Ext.Panel. * </p> *  *  *  * <pre> * &lt;code&gt; * 
 * var store = new Ext.data.JsonStore({ * 
 *     url: 'get-images.php', * 
 *     root: 'images', * 
 *     fields: [ * 
 *         'name', 'url', * 
 *         {name:'size', type: 'float'}, * 
 *         {name:'lastmod', type:'date', dateFormat:'timestamp'} * 
 *     ] * 
 * }); * 
 * store.load(); * 
 *  * 
 * var tpl = new Ext.XTemplate( * 
 *     '&lt;tpl for=&quot;.&quot;&gt;', * 
 *         '&lt;div class=&quot;thumb-wrap&quot; id=&quot;{name}&quot;&gt;', * 
 *         '&lt;div class=&quot;thumb&quot;&gt;&lt;img src=&quot;{url}&quot; title=&quot;{name}&quot;&gt;&lt;/div&gt;', * 
 *         '&lt;span class=&quot;x-editable&quot;&gt;{shortName}&lt;/span&gt;&lt;/div&gt;', * 
 *     '&lt;/tpl&gt;', * 
 *     '&lt;div class=&quot;x-clear&quot;&gt;&lt;/div&gt;' * 
 * ); * 
 *  * 
 * var panel = new Ext.Panel({ * 
 *     id:'images-view', * 
 *     frame:true, * 
 *     width:535, * 
 *     autoHeight:true, * 
 *     collapsible:true, * 
 *     layout:'fit', * 
 *     title:'Simple DataView', * 
 *  * 
 *     items: new Ext.DataView({ * 
 *         store: store, * 
 *         tpl: tpl, * 
 *         autoHeight:true, * 
 *         multiSelect: true, * 
 *         overClass:'x-view-over', * 
 *         itemSelector:'div.thumb-wrap', * 
 *         emptyText: 'No images to display' * 
 *     }) * 
 * }); * 
 * panel.render(document.body); * 
 * &lt;/code&gt; * </pre> *  *  *  * @author Umut Gokbayrak */public class DataViewTag extends BoxComponentTag {	private static final long serialVersionUID = 8991292210490985574L;	private String emptyText;	private String itemSelector;	private String loadingText;	private String multiSelect;	private String overClass;	private String selectedClass;	private String simpleSelect;	private String singleSelect;	private String tpl;	private Store store;	private String storeId;	private String onBeforeClick;	private String onBeforeSelect;	private String onClick;	private String onContainerClick;	private String onContextMenu;	private String onDblClick;	private String onSelectionChange;		@Override	public int doEndTag() throws JspException {		DataView obj = new DataView();		prepareConfig(obj);		// manage listeners		prepareEvents(obj);		// print the output		printOut(obj);		return EVAL_PAGE;	}		@Override	public void clear() {		super.clear();		emptyText = itemSelector = loadingText = multiSelect = overClass = null;		selectedClass = simpleSelect = singleSelect = null;		store = null;		tpl = null;		onBeforeClick = onBeforeSelect = onClick = onContainerClick = null;		onContextMenu = onDblClick = onSelectionChange = null;		storeId = null;	}		/**	 * 	 * 	 * 	 * @param obj	 */	protected void prepareConfig(DataView obj) {		super.prepareConfig(obj);		obj.emptyText = emptyText;		obj.itemSelector = itemSelector;		obj.loadingText = loadingText;		if (multiSelect != null) {			try {				obj.multiSelect = Boolean.valueOf(multiSelect);			} catch (Exception e) {			}		}		obj.overClass = overClass;		obj.selectedClass = selectedClass;		if (simpleSelect != null) {			try {				obj.simpleSelect = Boolean.valueOf(simpleSelect);			} catch (Exception e) {			}		}		if (simpleSelect != null) {			try {				obj.singleSelect = Boolean.valueOf(singleSelect);			} catch (Exception e) {			}		}		if (store != null) {			obj.store = store;		}		if (tpl != null) {			obj.tpl = tpl;		}		if (storeId != null && store == null) {			obj.put("store", new JsVariableImpl(storeId));		}	}		@Override	protected void prepareEvents(Observable obj) {		super.prepareEvents(obj);		if (onBeforeClick != null) {			obj.listeners.put("beforeclick", new JsFunction(onBeforeClick));		}		if (onBeforeSelect != null) {			obj.listeners.put("beforeselect", new JsFunction(onBeforeSelect));		}		if (onClick != null) {			obj.listeners.put("click", new JsFunction(onClick));		}		if (onContainerClick != null) {			obj.listeners.put("containerclick", new JsFunction(onContainerClick));		}		if (onContextMenu != null) {			obj.listeners.put("contextmenu", new JsFunction(onContextMenu));		}		if (onDblClick != null) {			obj.listeners.put("dblclick", new JsFunction(onDblClick));		}		if (onSelectionChange != null) {			obj.listeners.put("selectionchange", new JsFunction(onSelectionChange));		}	}		/**	 * 	 * The text to display in the view when there is no data to display	 * (defaults to '').	 */	public void setEmptyText(String emptyText) {		this.emptyText = emptyText;	}		/**	 * 	 * <strong>This is a required setting.</strong> A simple CSS selector (e.g.	 * 	 * div.some-class or span:first-child) that will be used to determine	 * 	 * what nodes this DataView will be working with.	 */	public void setItemSelector(String itemSelector) {		this.itemSelector = itemSelector;	}		/**	 * 	 * A string to display during data load operations (defaults to undefined).	 * 	 * If specified, this text will be displayed in a loading div and the	 * 	 * view's contents will be cleared while loading, otherwise the view's	 * 	 * contents will continue to display normally until the new data is	 * 	 * loaded and the contents are replaced.	 */	public void setLoadingText(String loadingText) {		this.loadingText = loadingText;	}		/**	 * 	 * True to allow selection of more than one item at a time, false to	 * 	 * allow selection of only a single item at a time or no selection at all,	 * 	 * depending on the value of singleSelect (defaults to false).	 */	public void setMultiSelect(String multiSelect) {		this.multiSelect = multiSelect;	}		/**	 * 	 * A CSS class to apply to each item in the view on mouseover (defaults to	 * undefined).	 */	public void setOverClass(String overClass) {		this.overClass = overClass;	}		/**	 * 	 * A CSS class to apply to each selected item in the view (defaults to	 * 'x-view-selected').	 */	public void setSelectedClass(String selectedClass) {		this.selectedClass = selectedClass;	}		/**	 * 	 * True to enable multiselection by clicking on multiple items without	 * requiring the	 * 	 * user to hold Shift or Ctrl, false to force the user to hold Ctrl or Shift	 * to	 * 	 * select more than on item (defaults to false).	 */	public void setSimpleSelect(String simpleSelect) {		this.simpleSelect = simpleSelect;	}		/**	 * 	 * True to allow selection of exactly one item at a time, false to allow no	 * selection	 * 	 * at all (defaults to false). Note that if multiSelect = true, this value	 * will be ignored.	 */	public void setSingleSelect(String singleSelect) {		this.singleSelect = singleSelect;	}		/**	 * 	 * The Ext.data.Store to bind this DataView to.	 */	public void setStore(Store store) {		this.store = store;	}		/**	 * 	 * The HTML fragment or an array of fragments that will make up the template	 * used by this	 * 	 * DataView. This should be specified in the same format expected by the	 * constructor	 * 	 * of Ext.XTemplate.	 */	public void setTpl(String tpl) {		this.tpl = tpl;	}		/**	 * 	 * <p>	 * Fires before a click is processed. Returns false to cancel the default	 * action.	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>this</strong>: Ext.DataView</li>	 * 	 * <li><strong>index</strong>:(Number) The index of the target node</li>	 * 	 * <li><strong>node</strong>:(HTMLElement) The target node</li>	 * 	 * <li><strong>e</strong>:(Ext.EventObject) The raw event object</li>	 * 	 * </ul>	 * 	 * @param onBeforeClick	 */	public void setOnBeforeClick(String onBeforeClick) {		this.onBeforeClick = onBeforeClick;	}		/**	 * 	 * <p>	 * Fires before a selection is made. If any handlers return false, the	 * selection is cancelled.	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>this</strong>: Ext.DataView</li>	 * 	 * <li><strong>node</strong>:(HTMLElement) The node to be selected</li>	 * 	 * <li><strong>selections </strong>:(Array) Array of currently selected	 * nodes</li>	 * 	 * </ul>	 * 	 * @param onBeforeSelect	 */	public void setOnBeforeSelect(String onBeforeSelect) {		this.onBeforeSelect = onBeforeSelect;	}		/**	 * 	 * <p>	 * Fires when a template node is clicked.	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>this</strong>: Ext.DataView</li>	 * 	 * <li><strong>index</strong>:(Number) The index of the target node</li>	 * 	 * <li><strong>node</strong>:(HTMLElement) The target node</li>	 * 	 * <li><strong>e</strong>:(Ext.EventObject) The raw event object</li>	 * 	 * </ul>	 * 	 * 	 * 	 * @param onClick	 */	public void setOnClick(String onClick) {		this.onClick = onClick;	}		/**	 * 	 * <p>	 * Fires when a click occurs and it is not on a template node.	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>this</strong>: Ext.DataView</li>	 * 	 * <li><strong>e</strong>:(Ext.EventObject) The raw event object</li>	 * 	 * </ul>	 * 	 * @param onContainerClick	 */	public void setOnContainerClick(String onContainerClick) {		this.onContainerClick = onContainerClick;	}		/**	 * 	 * <p>	 * Fires when a template node is right clicked.	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>this</strong>: Ext.DataView</li>	 * 	 * <li><strong>index</strong>:(Number) The index of the target node</li>	 * 	 * <li><strong>node</strong>:(HTMLElement) The target node</li>	 * 	 * <li><strong>e</strong>:(Ext.EventObject) The raw event object</li>	 * 	 * </ul>	 * 	 * @param onContextMenu	 */	public void setOnContextMenu(String onContextMenu) {		this.onContextMenu = onContextMenu;	}		/**	 * 	 * <p>	 * Fires when a template node is double clicked.	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>this</strong>: Ext.DataView</li>	 * 	 * <li><strong>index</strong>:(Number) The index of the target node</li>	 * 	 * <li><strong>node</strong>:(HTMLElement) The target node</li>	 * 	 * <li><strong>e</strong>:(Ext.EventObject) The raw event object</li>	 * 	 * </ul>	 * 	 * @param onDblClick	 */	public void setOnDblClick(String onDblClick) {		this.onDblClick = onDblClick;	}		/**	 * 	 * <p>	 * Fires when the selected nodes change.	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>this</strong>: Ext.DataView</li>	 * 	 * <li><strong>selections</strong>:(Array) Array of the selected nodes</li>	 * 	 * </ul>	 * 	 * @param onSelectionChange	 */	public void setOnSelectionChange(String onSelectionChange) {		this.onSelectionChange = onSelectionChange;	}		/**	 * 	 * Assigns a store variable to storeId	 * 	 * @param storeId	 */	public void setStoreId(String storeId) {		this.storeId = storeId;	}}
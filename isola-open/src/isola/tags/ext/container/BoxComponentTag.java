package isola.tags.ext.container;import javax.servlet.jsp.JspException;import isola.model.core.JsFunction;import isola.model.ext.base.Observable;import isola.model.ext.container.BoxComponent;import isola.tags.ext.base.ComponentTag;/** *  * Base class for any visual Ext.Component that uses a box container. *  * BoxComponent provides automatic box model adjustments for sizing and *  * positioning and will work correctly withnin the Component rendering model. *  * All container classes should subclass BoxComponent so that they will work *  * consistently when nested within other Ext layout containers. *  *  *  * @author Umut Gokbayrak *  *  */public class BoxComponentTag extends ComponentTag {	private static final long serialVersionUID = -5670602484298572570L;	// config options from BoxComponent	private String autoHeight;	private String autoWidth;	private String height;	private String width;	private String el;	private String onMove;	private String onResize;		@Override	public int doEndTag() throws JspException {		BoxComponent obj = new BoxComponent();		prepareConfig(obj);		// manage listeners		prepareEvents(obj);		// print the output		printOut(obj);		return EVAL_PAGE;	}		@Override	public void clear() {		super.clear();		autoHeight = autoWidth = height = width = el = null;		onMove = onResize = null;	}		/**	 * 	 * 	 * 	 * @param obj	 */	protected void prepareConfig(BoxComponent obj) {		super.prepareConfig(obj);		if (autoHeight != null) {			try {				obj.autoHeight = Boolean.valueOf(autoHeight);			} catch (Exception e) {			}		}		if (autoWidth != null) {			try {				obj.autoWidth = Boolean.valueOf(autoWidth);			} catch (Exception e) {			}		}		if (height != null) {			obj.height = height;		}		if (width != null) {			obj.width = width;		}		if (el != null) {			obj.put("el", el);		}	}		@Override	protected void prepareEvents(Observable obj) {		super.prepareEvents(obj);		if (onMove != null) {			obj.listeners.put("move", new JsFunction(onMove));		}		if (onResize != null) {			obj.listeners.put("resize", new JsFunction(onResize));		}	}		/**	 * 	 * HTML Element this object is parsed on.	 * 	 * @param el	 */	public void setEl(String el) {		this.el = el;	}		/**	 * 	 * True to use height:'auto', false to use fixed height (defaults to false).	 */	public void setAutoHeight(String autoHeight) {		this.autoHeight = autoHeight;	}		/**	 * 	 * True to use width:'auto', false to use fixed width (defaults to false).	 */	public void setAutoWidth(String autoWidth) {		this.autoWidth = autoWidth;	}		/**	 * 	 * The height of this component in pixels (defaults to auto).	 */	public void setHeight(String height) {		this.height = height;	}		/**	 * 	 * The width of this component in pixels (defaults to auto).	 */	public void setWidth(String width) {		this.width = width;	}		/**	 * 	 * <p>	 * Fires after the component is moved.	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>this</strong>: Ext.Component</li>	 * 	 * <li><strong>x</strong>: (Number)The new x position</li>	 * 	 * <li><strong>y</strong>: (Number)The new y position</li>	 * 	 * </ul>	 * 	 * @param onMove	 */	public void setOnMove(String onMove) {		this.onMove = onMove;	}		/**	 * 	 * <p>	 * Fires after the component is resized.	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>this</strong>: Ext.Component</li>	 * 	 * <li><strong>adjWidth</strong>:(Number) The box-adjusted width that was	 * set</li>	 * 	 * <li><strong>adjHeight</strong>:(Number) The box-adjusted height that was	 * set</li>	 * 	 * <li><strong>rawWidth</strong>:(Number) The width that was originally	 * specified</li>	 * 	 * <li><strong>rawHeight</strong>:(Number) The height that was originally	 * specified</li>	 * 	 * </ul>	 * 	 * @param onResize	 */	public void setOnResize(String onResize) {		this.onResize = onResize;	}		/**	 * 	 * Returns the HTML element this object is parsed on.	 * 	 * @return	 */	public String getEl() {		return el;	}		/**	 * 	 * Returns the height of this object	 * 	 * @return	 */	public String getHeight() {		return height;	}}
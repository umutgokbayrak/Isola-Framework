package isola.tags.ext.misc;import javax.servlet.jsp.JspException;import isola.model.core.JsFunction;import isola.model.ext.base.Observable;import isola.model.ext.visual.ProgressBar;import isola.tags.ext.container.BoxComponentTag;/** *  * <p> * An updateable progress bar component. The progress bar supports two different *  * modes: manual and automatic. * </p> *  *  *  * <p> * In manual mode, you are responsible for showing, updating (via * updateProgress) and *  * clearing the progress bar as needed from your own code. This method is most * appropriate *  * when you want to show progress throughout an operation that has predictable * points of *  * interest at which you can update the control. * </p> *  *  *  * <p> * In automatic mode, you simply call wait and let the progress bar run * indefinitely, *  * only clearing it once the operation is complete. You can optionally have the * progress *  * bar wait for a specific amount of time and then clear itself. Automatic mode * is most *  * appropriate for timed operations or asymchronous operations in which you have * no need *  * for indicating intermediate progress. * </p> *  *  *  * @author Umut Gokbayrak */public class ProgressBarTag extends BoxComponentTag {	private static final long serialVersionUID = 5247076641429491428L;	private String baseCls;	private String text;	private String textEl;	private String value;	private String onUpdate;		/**
	 * 
	 */	public int doEndTag() throws JspException {		ProgressBar obj = new ProgressBar();		prepareConfig(obj);		// manage listeners		prepareEvents(obj);		// print the output		printOut(obj);		return EVAL_PAGE;	}		@Override	public void clear() {		super.clear();		baseCls = text = textEl = null;		value = "0";		onUpdate = null;	}		/**	 * 	 * 	 * 	 * @param obj	 */	protected void prepareConfig(ProgressBar obj) {		super.prepareConfig(obj);		obj.baseCls = baseCls;		obj.text = text;		obj.textEl = textEl;		if (value != null) {			try {				obj.value = Float.parseFloat(value);			} catch (Exception e) {			}		}	}		@Override	protected void prepareEvents(Observable obj) {		super.prepareEvents(obj);		if (onUpdate != null) {			obj.listeners.put("update", new JsFunction(onUpdate));		}	}		/**	 * 	 * The base CSS class to apply to the progress bar's wrapper element	 * (defaults to	 * 	 * 'x-progress')	 */	public void setBaseCls(String baseCls) {		this.baseCls = baseCls;	}		/**	 * 	 * The progress bar text (defaults to '')	 */	public void setText(String text) {		this.text = text;	}		/**	 * 	 * The element to render the progress text to (defaults to the progress	 * bar's internal text	 * 	 * element)	 */	public void setTextEl(String textEl) {		this.textEl = textEl;	}		/**	 * 	 * A floating point value between 0 and 1 (e.g., .5, defaults to 0)	 */	public void setValue(String value) {		this.value = value;	}		/**	 * 	 * <p>	 * Fires after each update interval	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>this</strong> : Ext.ProgressBar</li>	 * 	 * <li><strong>The</strong> : (Number) current progress value</li>	 * 	 * <li><strong>The</strong> : (String) current progress textt</li>	 * 	 * </ul>	 * 	 * @param onUpdate	 */	public void setOnUpdate(String onUpdate) {		this.onUpdate = onUpdate;	}}
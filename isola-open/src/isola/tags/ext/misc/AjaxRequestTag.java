package isola.tags.ext.misc;import java.io.IOException;import java.util.Locale;import javax.servlet.jsp.JspException;import javolution.text.TextBuilder;import isola.model.core.JsArray;import isola.model.core.JsFunction;import isola.model.core.JsObject;import isola.tags.base.BaseTag;/** *  * Global Ajax request class. Provides a simple way to make Ajax requests with * maximum flexibility. *  *  *  * @author Umut Gokbayrak */public class AjaxRequestTag extends BaseTag {	private static final long serialVersionUID = 5788271967267020935L;	private String url;	private JsObject params;	private String method;	private String callback;	private String success;	private String failure;	private String scope;	private String form;	private String isUpload = "false";	private JsArray headers;	private String xmlData;	private String jsonData;	private String disableCaching = "true";	private String timeout = "30000";		@Override	public int doEndTag() throws JspException {		TextBuilder buff = new TextBuilder();		if (timeout != null && timeout.equals("30000")) {			buff.append("Ext.Ajax.timeout = ").append(timeout).append(";");		}		JsObject obj = new JsObject();		if (url != null) {			obj.put("url", url);		}		if (params != null && params.size() > 0) {			obj.put("params", params);		}		if (method != null) {			obj.put("method", method.toUpperCase(Locale.ENGLISH));		}		if (callback != null) {			obj.put("callback", new JsFunction(callback));		}		if (success != null) {			obj.put("success", new JsFunction(success));		}		if (failure != null) {			obj.put("failure", new JsFunction(failure));		}		if (scope != null) {			obj.put("scope", scope);		}		if (form != null) {			obj.put("form", form);		}		if (isUpload != null && !isUpload.equals("false")) {			try {				obj.put("isUpload", Boolean.valueOf(isUpload));			} catch (Exception e) {			}		}		if (headers != null && headers.size() > 0) {			obj.put("headers", headers);		}		if (xmlData != null) {			obj.put("xmlData", xmlData);		}		if (jsonData != null) {			obj.put("jsonData", jsonData);		}		if (disableCaching != null && !disableCaching.equals("true")) {			try {				obj.put("disableCaching", Boolean.valueOf(disableCaching));			} catch (Exception e) {			}		}		buff.append("Ext.Ajax.request(").append(obj.toString()).append(");");		// time to write output		try {			pageContext.getOut().write(buff.toString());		} catch (IOException e) {		}		return EVAL_PAGE;	}		@Override	protected void clear() {		url = null;		params = null;		method = callback = success = failure = scope = form = null;		isUpload = "false";		headers = null;		xmlData = jsonData = null;		disableCaching = "true";		timeout = "30000";	}		/**	 * 	 * The URL to which to send the request. Defaults to configured URL	 */	public void setUrl(String url) {		this.url = url;	}		/**	 * 	 * An object containing properties which are used as parameters to the	 * request, a url	 * 	 * encoded string or a function to call to get either.	 */	public void setParams(JsObject params) {		this.params = params;	}		/**	 * 	 * The HTTP method to use for the request. Defaults to the configured	 * method, or if no method	 * 	 * was configured, "GET" if no parameters are being sent, and "POST" if	 * parameters are	 * 	 * being sent. Note that the method name is case-sensitive and should be all	 * caps.	 */	public void setMethod(String method) {		this.method = method;	}		/**	 * 	 * <p>	 * The function to be called upon receipt of the HTTP response. The callback	 * is called regardless of	 * 	 * success or failure and is passed the following parameters:	 * </p>	 * 	 * <ul>	 * 	 * <li><strong>options :</strong> Object: The parameter to the request call.	 * </li>	 * 	 * <li><strong>success :</strong> Boolean: True if the request succeeded.</li>	 * 	 * <li>response :</strong> Object: The XMLHttpRequest object containing the	 * response data.	 * 	 * See http://www.w3.org/TR/XMLHttpRequest/ for details about accessing	 * elements of the response.</li>	 * 	 * </ul>	 */	public void setCallback(String callback) {		this.callback = callback;	}		/**	 * 	 * The function to be called upon success of the request. The callback is	 * passed the following parameters:	 * 	 * <ul>	 * 	 * <li><strong>response :</strong> Object: The XMLHttpRequest object	 * containing the response data.</li>	 * 	 * <li><strong>options :</strong> Object: The parameter to the request call.	 * </li>	 * 	 * </ul>	 */	public void setSuccess(String success) {		this.success = success;	}		/**	 * 	 * The function to be called upon failure of the request. The callback is	 * passed the following parameters:	 * 	 * <ul>	 * 	 * <li><strong>response :</strong> Object: The XMLHttpRequest object	 * containing the response data.</li>	 * 	 * <li><strong>options :</strong> Object: The parameter to the request call.	 * </li>	 * 	 * </ul>	 */	public void setFailure(String failure) {		this.failure = failure;	}		/**	 * 	 * The scope in which to execute the callbacks: The "this" object for the	 * callback function. Defaults to	 * 	 * the browser window.	 */	public void setScope(String scope) {		this.scope = scope;	}		/**	 * 	 * A form object or id to pull parameters from.	 */	public void setForm(String form) {		this.form = form;	}		/**	 * 	 * True if the form object is a file upload (will usually be automatically	 * detected).	 */	public void setIsUpload(String isUpload) {		this.isUpload = isUpload;	}		/**	 * 	 * Request headers to set for the request.	 */	public void setHeaders(JsArray headers) {		this.headers = headers;	}		/**	 * 	 * XML document to use for the post. Note: This will be used instead of	 * params for the post data.	 * 	 * Any params will be appended to the URL.	 */	public void setXmlData(String xmlData) {		this.xmlData = xmlData;	}		/**	 * 	 * JSON data to use as the post. Note: This will be used instead of params	 * for the post data.	 * 	 * Any params will be appended to the URL.	 */	public void setJsonData(String jsonData) {		this.jsonData = jsonData;	}		/**	 * 	 * True to add a unique cache-buster param to GET requests.	 */	public void setDisableCaching(String disableCaching) {		this.disableCaching = disableCaching;	}		/**	 * 	 * The timeout in milliseconds to be used for requests. (defaults to 30000)	 */	public void setTimeout(String timeout) {		this.timeout = timeout;	}		public JsObject getParams() {		if (params == null) {			params = new JsObject();		}		return params;	}}
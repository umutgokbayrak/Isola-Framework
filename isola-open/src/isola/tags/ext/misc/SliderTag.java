package isola.tags.ext.misc;import javax.servlet.jsp.JspException;import isola.model.core.JsFunction;import isola.model.ext.base.Observable;import isola.model.ext.misc.Slider;import isola.tags.ext.container.BoxComponentTag;public class SliderTag extends BoxComponentTag {	private static final long serialVersionUID = -3003549729705789990L;	private String animate;	private String clickToChange;	private String increment;	private String keyIncrement;	private String maxValue;	private String minValue;	private String value;	private String vertical;	private String onBeforechange;	private String onChange;	private String onDrag;	private String onDragEnd;	private String onDragStart;		/**
	 * 
	 */	public int doEndTag() throws JspException {		Slider obj = new Slider();		prepareConfig(obj);		// manage listeners		prepareEvents(obj);		// print the output		printOut(obj);		return EVAL_PAGE;	}		@Override	public void clear() {		super.clear();		animate = "true";		clickToChange = "true";		increment = "0";		keyIncrement = "1";		maxValue = "100";		minValue = "0";		value = "0";		vertical = "false";	}		/**	 * 	 * 	 * 	 * @param obj	 */	protected void prepareConfig(Slider obj) {		super.prepareConfig(obj);		if (animate != null) {			try {				obj.animate = Boolean.valueOf(animate);			} catch (Exception e) {			}		}		if (clickToChange != null) {			try {				obj.clickToChange = Boolean.valueOf(clickToChange);			} catch (Exception e) {			}		}		if (increment != null) {			try {				obj.increment = Integer.parseInt(increment);			} catch (Exception e) {			}		}		if (keyIncrement != null) {			try {				obj.keyIncrement = Integer.parseInt(keyIncrement);			} catch (Exception e) {			}		}		if (maxValue != null) {			try {				obj.maxValue = Integer.parseInt(maxValue);			} catch (Exception e) {			}		}		if (minValue != null) {			try {				obj.minValue = Integer.parseInt(minValue);			} catch (Exception e) {			}		}		if (value != null) {			try {				obj.value = Integer.parseInt(value);			} catch (Exception e) {			}		}		if (vertical != null) {			try {				obj.vertical = Boolean.valueOf(vertical);			} catch (Exception e) {			}		}	}		@Override	protected void prepareEvents(Observable obj) {		super.prepareEvents(obj);		if (onBeforechange != null) {			obj.listeners.put("beforechange", new JsFunction(onBeforechange));		}		if (onChange != null) {			obj.listeners.put("change", new JsFunction(onChange));		}		if (onDrag != null) {			obj.listeners.put("drag", new JsFunction(onDrag));		}		if (onDragEnd != null) {			obj.listeners.put("dragend", new JsFunction(onDragEnd));		}		if (onDragStart != null) {			obj.listeners.put("dragstart", new JsFunction(onDragStart));		}	}		/**	 * 	 * Turn on or off animation. Defaults to true	 */	public void setAnimate(String animate) {		this.animate = animate;	}		/**	 * 	 * Determines whether or not clicking on the Slider axis will change the	 * slider. Defaults to true	 */	public void setClickToChange(String clickToChange) {		this.clickToChange = clickToChange;	}		/**	 * 	 * How many units to change the slider when adjusting by drag and drop. Use	 * this option to enable 'snapping'.	 */	public void setIncrement(String increment) {		this.increment = increment;	}		/**	 * 	 * How many units to change the Slider when adjusting with keyboard	 * navigation. Defaults to 1. If the increment	 * 	 * config is larger, it will be used instead.	 */	public void setKeyIncrement(String keyIncrement) {		this.keyIncrement = keyIncrement;	}		/**	 * 	 * The maximum value for the Slider. Defaults to 100.	 */	public void setMaxValue(String maxValue) {		this.maxValue = maxValue;	}		/**	 * 	 * The minimum value for the Slider. Defaults to 0.	 */	public void setMinValue(String minValue) {		this.minValue = minValue;	}		/**	 * 	 * The value to initialize the slider with. Defaults to minValue.	 */	public void setValue(String value) {		this.value = value;	}		/**	 * 	 * Orient the Slider vertically rather than horizontally, defaults to false.	 */	public void setVertical(String vertical) {		this.vertical = vertical;	}		/**	 * 	 * <p>	 * Fires before the slider value is changed. By returning false from an	 * event handler, you can cancel the event and prevent the slider from	 * changing.	 * 	 * Listeners will be called with the following arguments:	 * </p>	 * 	 * <ul>	 * 	 * <li><strong>slider :</strong> Ext.Slider - The slider</li>	 * 	 * <li><strong>newValue :</strong> Number - The new value which the slider	 * is being changed to.</li>	 * 	 * <li><strong>oldValue :</strong> Number - The old value which the slider	 * was previously.</li>	 * 	 * 	 * 	 * @param onBeforechange	 */	public void setOnBeforechange(String onBeforechange) {		this.onBeforechange = onBeforechange;	}		/**	 * 	 * Fires when the slider value is changed. Listeners will be called with the	 * following arguments:	 * 	 * <ul>	 * 	 * <li><strong>slider : </strong> - Ext.Slider The slider</li>	 * 	 * <li><strong>newValue :</strong> - Number The new value which the slider	 * has been changed to.</li>	 * 	 * </ul>	 * 	 * @param onChange	 */	public void setOnChange(String onChange) {		this.onChange = onChange;	}		/**	 * 	 * Fires continuously during the drag operation while the mouse is moving.	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>slider :</strong> Ext.Slider - The slider</li>	 * 	 * <li><strong>e :</strong> Ext.EventObject - The event fired from	 * Ext.dd.DragTracker</li>	 * 	 * </ul>	 * 	 * @param onDrag	 */	public void setOnDrag(String onDrag) {		this.onDrag = onDrag;	}		/**	 * 	 * Fires after the drag operation has completed. Listeners will be called	 * with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>slider :</strong>Ext.Slider The slider</li>	 * 	 * <li>e : Ext.EventObject: </strong>The event fired from Ext.dd.DragTracker	 * </li>	 * 	 * @param onDragEnd	 */	public void setOnDragEnd(String onDragEnd) {		this.onDragEnd = onDragEnd;	}		/**	 * 	 * Fires after a drag operation has started. Listeners will be called with	 * the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>slider :</strong> Ext.Slider The slider</li>	 * 	 * <li><strong>e :</strong> Ext.EventObject The event fired from	 * Ext.dd.DragTracker</li>	 * 	 * </ul>	 * 	 * @param onDragStart	 */	public void setOnDragStart(String onDragStart) {		this.onDragStart = onDragStart;	}}
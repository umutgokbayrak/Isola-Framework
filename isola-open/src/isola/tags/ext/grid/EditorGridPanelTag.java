package isola.tags.ext.grid;import javax.servlet.jsp.JspException;import isola.model.core.JsFunction;import isola.model.ext.base.Observable;import isola.model.ext.grid.EditorGridPanel;/** *  * Class for creating and editable grid. *  *  *  * <code><pre> * 	&lt;ext:body runOnLoad="true"&gt; * 		&lt;ext:editorGridPanel renderTo="form-ct" border="true" width="770" height="480" forceFit="true"&gt; * 			&lt;ext:jsonStore url="servlet/JsonSampleServlet" root="result"&gt; * 				&lt;ext:httpParam name="action" value="env"/&gt; * 				&lt;ext:storeMapping name="name"/&gt; * 				&lt;ext:storeMapping name="value"/&gt; * 			&lt;/ext:jsonStore&gt; * 			&lt;ext:columnModel&gt; * 				&lt;ext:gridColumn dataIndex="name" header="Name"&gt; * 					&lt;ext:textField name="txtName" /&gt; * 				&lt;/ext:gridColumn&gt; * 				&lt;ext:gridColumn dataIndex="value" header="Value"&gt; * 					&lt;ext:textField name="txtValue" /&gt; * 				&lt;/ext:gridColumn&gt; * 			&lt;/ext:columnModel&gt; * 		&lt;/ext:editorGridPanel&gt; * 	&lt;/ext:body&gt; * 		 * 	&lt;div style="width:800px;margin:50px;"&gt; * 	    &lt;div class="x-box-tl"&gt;&lt;div class="x-box-tr"&gt;&lt;div class="x-box-tc"&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; * 	    &lt;div class="x-box-ml"&gt;&lt;div class="x-box-mr"&gt;&lt;div class="x-box-mc"&gt; * 	        &lt;h3 style="margin-bottom:5px;"&gt;Editor Grid Sample&lt;/h3&gt; * 	        &lt;div id="form-ct"&gt; *  * 	        &lt;/div&gt; * 	    &lt;/div&gt;&lt;/div&gt;&lt;/div&gt; * 	    &lt;div class="x-box-bl"&gt;&lt;div class="x-box-br"&gt;&lt;div class="x-box-bc"&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; * 	&lt;/div&gt; * </pre></code> *  *  *  * @author Umut Gokbayrak */public class EditorGridPanelTag extends GridPanelTag {	private static final long serialVersionUID = 8315281037835116563L;	private String autoEncode;	private String clicksToEdit;	private String onAfterEdit;	private String onBeforeEdit;	private String onValidateEdit;		@Override	public int doEndTag() throws JspException {		EditorGridPanel obj = new EditorGridPanel();		prepareConfig(obj);		// manage listeners		prepareEvents(obj);		// print the output		printOut(obj);		return EVAL_PAGE;	}		@Override	public void clear() {		super.clear();		autoEncode = "false";		clicksToEdit = "2";		onAfterEdit = onBeforeEdit = onValidateEdit = null;	}		/**	 * 	 * 	 * 	 * @param obj	 */	protected void prepareConfig(EditorGridPanel obj) {		super.prepareConfig(obj);		if (autoEncode != null) {			try {				obj.autoEncode = Boolean.getBoolean(autoEncode);			} catch (Exception e) {			}		}		if (clicksToEdit != null) {			try {				obj.clicksToEdit = Integer.parseInt(clicksToEdit);			} catch (Exception e) {			}		}	}		@Override	protected void prepareEvents(Observable obj) {		super.prepareEvents(obj);		if (onAfterEdit != null) {			obj.listeners.put("afteredit", new JsFunction(onAfterEdit));		}		if (onBeforeEdit != null) {			obj.listeners.put("beforeedit", new JsFunction(onBeforeEdit));		}		if (onValidateEdit != null) {			obj.listeners.put("validateedit", new JsFunction(onValidateEdit));		}	}		/**	 * 	 * True to automatically HTML encode and decode values pre and post edit	 * (defaults to false)	 */	public void setAutoEncode(String autoEncode) {		this.autoEncode = autoEncode;	}		/**	 * 	 * 	 * 	 * The number of clicks on a cell required to display the cell's editor	 * (defaults to 2)	 */	public void setClicksToEdit(String clicksToEdit) {		this.clicksToEdit = clicksToEdit;	}		/**	 * 	 * <p>	 * Fires after a cell is edited.	 * </p>	 * 	 * <pre>	 * 	 * grid - This grid	 * 
	 * record - The record being edited	 * 
	 * field - The field name being edited	 * 
	 * value - The value being set	 * 
	 * originalValue - The original value for the field, before the edit.	 * 
	 * row - The grid row index	 * 
	 * column - The grid column index	 * 	 * </pre>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>e</strong> : (Object) An edit event (see above for	 * description)</li>	 * 	 * </ul>	 * 	 * @param onAfterEdit	 */	public void setOnAfterEdit(String onAfterEdit) {		this.onAfterEdit = onAfterEdit;	}		/**	 * 	 * <p>	 * Fires before cell editing is triggered. The edit event object has the	 * following properties	 * </p>	 * 	 * <pre>	 * 	 * grid - This grid	 * 
	 * record - The record being edited	 * 
	 * field - The field name being edited	 * 
	 * value - The value for the field being edited.	 * 
	 * row - The grid row index	 * 
	 * column - The grid column index	 * 
	 * cancel - Set this to true to cancel the edit or return false from your handler.	 * 	 * </pre>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>e</strong> : (Object) An edit event (see above for	 * description)</li>	 * 	 * </ul>	 * 	 * @param onBeforeEdit	 */	public void setOnBeforeEdit(String onBeforeEdit) {		this.onBeforeEdit = onBeforeEdit;	}		/**	 * 	 * <p>	 * Fires after a cell is edited, but before the value is set in the record.	 * Return false to cancel	 * 	 * the change. The edit event object has the following properties	 * </p>	 * 	 * <pre>	 * 	 * grid - This grid	 * 
	 * record - The record being edited	 * 
	 * field - The field name being edited	 * 
	 * value - The value being set	 * 
	 * originalValue - The original value for the field, before the edit.	 * 
	 * row - The grid row index	 * 
	 * column - The grid column index	 * 
	 * cancel - Set this to true to cancel the edit or return false from your handler.	 * 	 * </pre>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>e</strong> : (Object) An edit event (see above for	 * description)</li>	 * 	 * </ul>	 * 	 * @param onValidateEdit	 */	public void setOnValidateEdit(String onValidateEdit) {		this.onValidateEdit = onValidateEdit;	}}
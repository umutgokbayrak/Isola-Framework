package isola.tags.ext.grid;import javax.servlet.jsp.JspException;import isola.model.core.JsFunction;import isola.model.core.JsObject;import isola.model.ext.form.Field;import isola.tags.base.BaseTag;import isola.tags.ext.tree.ColumnTreeTag;/** *  * Tag representing a column for a grid. Grid columns must supply the value * dataIndex value which *  * must match a key at the grid's store. Other options than dataIndex are * optional. They should be *  * in a columnModel tag, although this is optional. Example: *  *  *  * <pre> * &lt;code&gt; * 
 * 	&lt;ext:body runOnLoad=&quot;true&quot;&gt; * 
 * 		&lt;ext:gridPanel renderTo=&quot;form-ct&quot; border=&quot;true&quot; width=&quot;770&quot; height=&quot;480&quot; forceFit=&quot;true&quot;&gt; * 
 * 			&lt;ext:jsonStore url=&quot;servlet/JsonSampleServlet&quot; root=&quot;result&quot;&gt; * 
 * 				&lt;ext:httpParam name=&quot;action&quot; value=&quot;env&quot;/&gt; * 
 * 				&lt;ext:storeMapping name=&quot;name&quot;/&gt; * 
 * 				&lt;ext:storeMapping name=&quot;value&quot;/&gt; * 
 * 			&lt;/ext:jsonStore&gt; * 
 * 			&lt;ext:columnModel&gt; * 
 * 				&lt;ext:gridColumn dataIndex=&quot;name&quot; header=&quot;Name&quot; /&gt; * 
 * 				&lt;ext:gridColumn dataIndex=&quot;value&quot; header=&quot;Value&quot; /&gt; * 
 * 			&lt;/ext:columnModel&gt; * 
 * 		&lt;/ext:gridPanel&gt; * 
 * 	&lt;/ext:body&gt; * 
 * &lt;/code&gt; * </pre> *  *  *  * @author Umut Gokbayrak */public class GridColumnTag extends BaseTag {	private static final long serialVersionUID = -899625978248518150L;	private String id;	private String header;	private String width;	private String sortable;	private String dataIndex;	private String renderer;	private String align;	private String css;	private String fixed;	private String hidden;	private String hideable;	private String resizable;	private String tooltip;	private isola.model.ext.form.Field editor;		@Override	public int doEndTag() throws JspException {		JsObject obj = new JsObject();		prepareConfig(obj);		// insert item to the parent storetag		if (getParent() instanceof GridPanelTag) {			GridPanelTag st = (GridPanelTag) getParent();			st.getColumns().add(obj);		} else if (getParent() instanceof ColumnModelTag) {			ColumnModelTag st = (ColumnModelTag) getParent();			st.getColumns().add(obj);		} else if (getParent() instanceof ColumnTreeTag) {			ColumnTreeTag st = (ColumnTreeTag) getParent();			st.getColumns().add(obj);		}		clear();		return EVAL_PAGE;	}		@Override	protected void clear() {		id = header = width = sortable = dataIndex = renderer = null;		align = css = null;		editor = null;		fixed = hidden = "false";		hideable = resizable = "true";		tooltip = null;	}		/**	 * 	 * 	 * 	 * @param obj	 */	protected void prepareConfig(JsObject obj) {		if (id != null) {			obj.put("id", id);		}		if (header != null) {			obj.put("header", header);		}		if (width != null) {			obj.put("width", width);		}		if (sortable != null) {			try {				obj.put("sortable", Boolean.valueOf(sortable));			} catch (Exception e) {			}		}		if (dataIndex != null) {			obj.put("dataIndex", dataIndex);		}		if (renderer != null) {			obj.put("renderer", new JsFunction(renderer));		}		if (align != null) {			obj.put("align", align);		}		if (css != null) {			obj.put("css", css);		}		if (editor != null) {			obj.put("editor", editor);		}		if (fixed != null) {			try {				obj.put("fixed", Boolean.valueOf(fixed));			} catch (Exception e) {			}		}		if (hidden != null) {			try {				obj.put("hidden", Boolean.valueOf(hidden));			} catch (Exception e) {			}		}		if (hideable != null) {			try {				obj.put("hideable", Boolean.valueOf(hideable));			} catch (Exception e) {			}		}		if (resizable != null) {			try {				obj.put("resizable", Boolean.valueOf(resizable));			} catch (Exception e) {			}		}		if (tooltip != null) {			obj.put("tooltip", tooltip);		}	}		/**	 * 	 * (optional) Defaults to the column's initial ordinal position. A name	 * which identifies	 * 	 * this column. The id is used to create a CSS class name which is applied	 * to all table	 * 	 * cells (including headers) in that column. The class name takes the form	 * of	 * 	 * <code>x-grid3-td-id</code>. Header cells will also recieve this class	 * name, but will	 * 	 * also have the class x-grid3-hd, so to target header cells, use CSS	 * selectors such as:	 * 	 * <code>.x-grid3-hd.x-grid3-td-id</code>. The	 * Ext.grid.Grid.autoExpandColumn grid config	 * 	 * option references the column via this identifier.	 */	public void setId(String id) {		this.id = id;	}		/**	 * 	 * The header text to display in the Grid view.	 * 	 * 	 * 	 * @param header	 */	public void setHeader(String header) {		this.header = header;	}		/**	 * 	 * (optional) The initial width in pixels of the column. Using this instead	 * of	 * 	 * Ext.grid.Grid.autoSizeColumns is more efficient.	 * 	 * 	 * 	 * @param width	 */	public void setWidth(String width) {		this.width = width;	}		/**	 * 	 * (optional) True if sorting is to be allowed on this column. Defaults to	 * the value of the	 * 	 * defaultSortable property. Whether local/remote sorting is used is	 * specified in	 * 	 * Ext.data.Store.remoteSort.	 * 	 * 	 * 	 * @param sortable	 */	public void setSortable(String sortable) {		this.sortable = sortable;	}		/**	 * 	 * (optional) The name of the field in the grid's Ext.data.Store's	 * Ext.data.Record definition	 * 	 * from which to draw the column's value. If not specified, the column's	 * index is used as	 * 	 * an index into the Record's data Array.	 * 	 * 	 * 	 * @param dataIndex	 */	public void setDataIndex(String dataIndex) {		this.dataIndex = dataIndex;	}		/**	 * 	 * (optional) A function used to generate HTML markup for a cell given the	 * cell's data	 * 	 * value. See setRenderer. If not specified, the default renderer uses the	 * raw data value.	 * 	 * 	 * 	 * @param renderer	 */	public void setRenderer(String renderer) {		this.renderer = renderer;	}		/**	 * 	 * (optional) Set the CSS text-align property of the column. Defaults to	 * undefined.	 * 	 * @param align	 */	public void setAlign(String align) {		this.align = align;	}		/**	 * 	 * (optional) Set custom CSS for all table cells in the column (excluding	 * headers). Defaults	 * 	 * to undefined.	 * 	 * 	 * 	 * @param css	 */	public void setCss(String css) {		this.css = css;	}		/**	 * 	 * (optional) True if the column width cannot be changed. Defaults to false.	 * 	 * @param fixed	 */	public void setFixed(String fixed) {		this.fixed = fixed;	}		/**	 * 	 * (optional) True to hide the column. Defaults to false.	 * 	 * 	 * 	 * @param hidden	 */	public void setHidden(String hidden) {		this.hidden = hidden;	}		/**	 * 	 * (optional) Specify as false to prevent the user from hiding this column.	 * Defaults to	 * 	 * true.	 * 	 * @param hideable	 */	public void setHideable(String hideable) {		this.hideable = hideable;	}		/**	 * 	 * (optional) False to disable column resizing. Defaults to true.	 * 	 * 	 * 	 * @param resizable	 */	public void setResizable(String resizable) {		this.resizable = resizable;	}		/**	 * 	 * (optional) A text string to use as the column header's tooltip. If	 * Quicktips are enabled,	 * 	 * this value will be used as the text of the quick tip, otherwise it will	 * be set as the	 * 	 * header's HTML title attribute. Defaults to ''.	 * 	 * 	 * 	 * @param tooltip	 */	public void setTooltip(String tooltip) {		this.tooltip = tooltip;	}		public Field getEditor() {		return editor;	}		/**	 * 	 * (optional) The Ext.form.Field to use when editing values in this column	 * if editing is	 * 	 * supported by the grid.	 * 	 * 	 * 	 * @param editor	 */	public void setEditor(Field editor) {		this.editor = editor;	}}
package isola.tags.ext.grid;import javax.servlet.jsp.JspException;import isola.model.ext.grid.GridSearchPlugin;import isola.model.ext.toolbar.Toolbar;import isola.tags.base.BaseTag;/** *  * Places a search box and the buttons to one of the grid's toolbar (bottom or * top). *  * Default is the bottom toolbar. Please note that this plugin will not create a * toolbar. *  * You have to create it manually. *  *  *  * @author Umut Gokbayrak */public class GridSearchPluginTag extends BaseTag {	private static final long serialVersionUID = 4926381923289807613L;	private String searchText;	private String searchTipText;	private String selectAllText;	private String position;	private String iconCls;	private String dateFormat;	private String mode;	private String width = "200";		@Override	public int doEndTag() throws JspException {		GridSearchPlugin obj = new GridSearchPlugin();		prepareConfig(obj);		// print the output		if (getParent() instanceof GridPanelTag) {			GridPanelTag grid = (GridPanelTag) getParent();			String plugins = grid.getPlugins();			if (plugins == null) {				grid.setPlugins(obj.toString());			} else {				grid.setPlugins(grid.getPlugins() + "," + obj.toString());			}			if (grid.getTbar() == null && grid.getBbar() == null) {				if (position == null) {					position = "bottom";				}				if (position.equals("bottom")) {					grid.setBbar(new Toolbar());				} else {					grid.setTbar(new Toolbar());				}			}		} else {			printOut(obj);		}		return EVAL_PAGE;	}		@Override	public void clear() {		searchText = searchTipText = selectAllText = position = iconCls = dateFormat = mode = null;		width = "200";	}		/**	 * 	 * 	 * 	 * @param obj	 */	protected void prepareConfig(GridSearchPlugin obj) {		if (width != null) {			try {				obj.width = Integer.parseInt(width);			} catch (Exception e) {			}		}		if (searchText != null) {			obj.searchText = searchText;		}		if (searchTipText != null) {			obj.searchTipText = searchTipText;		}		if (selectAllText != null) {			obj.selectAllText = selectAllText;		}		if (position != null) {			obj.position = position;		}		if (iconCls == null) {			iconCls = "ico-search";		}		obj.iconCls = iconCls;		if (dateFormat != null) {			obj.dateFormat = dateFormat;		}		if (mode != null) {			obj.mode = mode;		}	}		/**	 * 	 * Text to display on menu button	 */	public void setSearchText(String searchText) {		this.searchText = searchText;	}		/**	 * 	 * Text to display as input tooltip. Set to '' for no tooltip	 */	public void setSearchTipText(String searchTipText) {		this.searchTipText = searchTipText;	}		/**	 * 	 * Text to display on menu item that selects all fields	 */	public void setSelectAllText(String selectAllText) {		this.selectAllText = selectAllText;	}		/**	 * 	 * Where to display the search controls. Valid values are top and bottom	 * (defaults to bottom)	 * 	 * Corresponding toolbar has to exist at least with mimimum configuration	 * tbar:[] for position:top or bbar:[]	 * 	 * for position bottom. Plugin does NOT create any toolbar.	 */	public void setPosition(String position) {		this.position = position;	}		/**	 * 	 * Icon class for menu button (defaults to icon-magnifier)	 */	public void setIconCls(String iconCls) {		this.iconCls = iconCls;	}		/**	 * 	 * How to format date values. If undefined (the default)	 * 	 * date is formatted as configured in colummn model	 */	public void setDateFormat(String dateFormat) {		this.dateFormat = dateFormat;	}		/**	 * 	 * Use 'remote' for remote stores or 'local' for local stores. If mode is	 * local	 * 	 * no data requests are sent to server the grid's store is filtered instead	 * 	 * (defaults to 'remote')	 */	public void setMode(String mode) {		this.mode = mode;	}		/**	 * 	 * Width of input field in pixels (defaults to 100)	 */	public void setWidth(String width) {		this.width = width;	}}
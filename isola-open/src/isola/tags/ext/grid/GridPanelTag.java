package isola.tags.ext.grid;import javax.servlet.jsp.JspException;import isola.model.core.JsArray;import isola.model.core.JsFunction;import isola.model.core.JsObject;import isola.model.core.JsVariableImpl;import isola.model.ext.base.Observable;import isola.model.ext.data.Store;import isola.model.ext.grid.AbstractSelectionModel;import isola.model.ext.grid.CellSelectionModel;import isola.model.ext.grid.CheckboxSelectionModel;import isola.model.ext.grid.ColumnModel;import isola.model.ext.grid.GridPanel;import isola.model.ext.grid.GridView;import isola.model.ext.grid.RowNumberer;import isola.model.ext.grid.RowSelectionModel;import isola.tags.ext.container.PanelTag;/** *  * <p> * This class represents the primary interface of a component based grid * control. * </p> *  * <p> * Usage: * </p> *  * <code><pre> *  * &lt;ext:body runOnLoad="true"&gt; * 	&lt;ext:gridPanel renderTo="form-ct" border="true" width="770" height="480" forceFit="true"&gt; * 		&lt;ext:jsonStore url="servlet/JsonSampleServlet" root="result"&gt; * 			&lt;ext:httpParam name="action" value="env"/&gt; * 			&lt;ext:storeMapping name="name"/&gt; * 			&lt;ext:storeMapping name="value"/&gt; * 		&lt;/ext:jsonStore&gt; * 		&lt;ext:columnModel&gt; * 			&lt;ext:gridColumn dataIndex="name" header="Name" /&gt; * 			&lt;ext:gridColumn dataIndex="value" header="Value" /&gt; * 		&lt;/ext:columnModel&gt; * 	&lt;/ext:gridPanel&gt; * &lt;/ext:body&gt; * 	 * &lt;div style="width:800px;margin:50px;"&gt; *     &lt;div class="x-box-tl"&gt;&lt;div class="x-box-tr"&gt;&lt;div class="x-box-tc"&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; *     &lt;div class="x-box-ml"&gt;&lt;div class="x-box-mr"&gt;&lt;div class="x-box-mc"&gt; *         &lt;h3 style="margin-bottom:5px;"&gt;Simple Form&lt;/h3&gt; *         &lt;div id="form-ct"&gt;&lt;/div&gt; *     &lt;/div&gt;&lt;/div&gt;&lt;/div&gt; *     &lt;div class="x-box-bl"&gt;&lt;div class="x-box-br"&gt;&lt;div class="x-box-bc"&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; * &lt;/div&gt; *  * </pre></code> *  *  *  * <p> * Note: Although this class inherits many configuration options from base * classes, some *  * of them (such as autoScroll, layout, items, etc) won't function as they do * with the base *  * Panel class. * </p> *  *  *  * <p> * To access the data in a Grid, it is necessary to use the data model * encapsulated by *  * the Store. See the cellclick event. * </p> *  *  *  * @author Umut Gokbayrak */public class GridPanelTag extends PanelTag {	private static final long serialVersionUID = -4542676725084154790L;	private String autoExpandColumn;	private String autoExpandMax;	private String autoExpandMin;	private String disableSelection;	private String enableColumnHide;	private String enableColumnMove;	private String enableColumnResize;	private String enableDragDrop;	private String enableHdMenu;	private String loadMask;	private String maxHeight;	private String minColumnWidth;	private String monitorWindowResize;	private String stripeRows;	private String trackMouseOver;	private String autoFill;	private String emptyText;	private String enableRowBody;	private String forceFit;	private String cellSelect;	private String checkboxEnabled;	private String rowNumbererEnabled;	private String singleSelect;	private JsObject viewConfig;	private GridView view;	private ColumnModel colModel;	private AbstractSelectionModel selModel;	private Store store;	private JsArray columns;	private String storeId;	private String onBodyScroll;	private String onCellClick;	private String onCellContextMenu;	private String onCellDblClick;	private String onCellMouseDown;	private String onClick;	private String onColumnMove;	private String onColumnResize;	private String onContextMenu;	private String onDblClick;	private String onHeaderClick;	private String onHeaderContextMenu;	private String onHeaderDblClick;	private String onHeaderMouseDown;	private String onKeyDown;	private String onKeyPress;	private String onMouseDown;	private String onMouseOut;	private String onMouseOver;	private String onMouseUp;	private String onRowClick;	private String onRowContextMenu;	private String onRowDblClick;	private String onRowMouseDown;	private String onSortChange;		@Override	public int doEndTag() throws JspException {		GridPanel obj = new GridPanel();		prepareConfig(obj);		// manage listeners		prepareEvents(obj);		// print the output		printOut(obj);		return EVAL_PAGE;	}		@Override	public void clear() {		super.clear();		autoExpandColumn = null;		autoExpandMax = "1000";		autoExpandMin = "50";		disableSelection = enableColumnHide = enableColumnMove = "false";		enableColumnResize = "true";		enableDragDrop = enableHdMenu = loadMask = "false";		maxHeight = "0";		minColumnWidth = "25";		monitorWindowResize = "true";		stripeRows = "false";		trackMouseOver = "true";		autoFill = "false";		emptyText = null;		enableRowBody = "false";		forceFit = "false";		viewConfig = null;		view = null;		colModel = null;		selModel = null;		store = null;		columns = null;		cellSelect = "false";		checkboxEnabled = "false";		rowNumbererEnabled = "false";		singleSelect = "true";		onBodyScroll = onCellClick = onCellContextMenu = onCellDblClick = null;		onCellMouseDown = onClick = onColumnMove = onColumnResize = null;		onContextMenu = onDblClick = onHeaderClick = onHeaderContextMenu = null;		onHeaderDblClick = onHeaderMouseDown = onKeyDown = onKeyPress = onMouseDown = null;		onMouseOut = onMouseOver = onMouseUp = onRowClick = onRowContextMenu = null;		onRowDblClick = onRowMouseDown = onSortChange = null;		storeId = null;	}		/**	 * 	 * 	 * 	 * @param obj	 */	protected void prepareConfig(GridPanel obj) {		super.prepareConfig(obj);		obj.autoExpandColumn = autoExpandColumn;		if (autoExpandMax != null) {			try {				obj.autoExpandMax = Integer.parseInt(autoExpandMax);			} catch (Exception e) {			}		}		if (autoExpandMin != null) {			try {				obj.autoExpandMin = Integer.parseInt(autoExpandMin);			} catch (Exception e) {			}		}		if (disableSelection != null) {			try {				obj.disableSelection = Boolean.parseBoolean(disableSelection);			} catch (Exception e) {			}		}		if (enableColumnHide != null) {			try {				obj.enableColumnHide = Boolean.parseBoolean(enableColumnHide);			} catch (Exception e) {			}		}		if (enableColumnMove != null) {			try {				obj.enableColumnMove = Boolean.parseBoolean(enableColumnMove);			} catch (Exception e) {			}		}		if (enableColumnResize != null) {			try {				obj.enableColumnResize = Boolean.parseBoolean(enableColumnResize);			} catch (Exception e) {			}		}		if (enableDragDrop != null) {			try {				obj.enableDragDrop = Boolean.parseBoolean(enableDragDrop);			} catch (Exception e) {			}		}		if (enableHdMenu != null) {			try {				obj.enableHdMenu = Boolean.parseBoolean(enableHdMenu);			} catch (Exception e) {			}		} else {			obj.enableHdMenu = false;		}		if (loadMask != null) {			try {				obj.loadMask = Boolean.parseBoolean(loadMask);			} catch (Exception e) {			}		}		if (maxHeight != null) {			try {				obj.maxHeight = Integer.parseInt(maxHeight);			} catch (Exception e) {			}		}		if (minColumnWidth != null) {			try {				obj.minColumnWidth = Integer.parseInt(minColumnWidth);			} catch (Exception e) {			}		}		if (monitorWindowResize != null) {			try {				obj.monitorWindowResize = Boolean.parseBoolean(monitorWindowResize);			} catch (Exception e) {			}		}		if (stripeRows != null) {			try {				obj.stripeRows = Boolean.parseBoolean(stripeRows);			} catch (Exception e) {			}		}		if (trackMouseOver != null) {			try {				obj.trackMouseOver = Boolean.parseBoolean(trackMouseOver);			} catch (Exception e) {			}		}		if (viewConfig == null) {			viewConfig = new JsObject();		}		if (autoFill != null && autoFill.equals("true")) {			viewConfig.put("autoFill", true);		}		if (emptyText != null) {			viewConfig.put("emptyText", emptyText);		}		if (enableRowBody != null && enableRowBody.equals("true")) {			viewConfig.put("enableRowBody", true);		}		if (forceFit != null && forceFit.equals("true")) {			viewConfig.put("forceFit", Boolean.valueOf(forceFit));		}		if (viewConfig != null && viewConfig.size() > 0) {			obj.viewConfig = viewConfig;		}		if (view != null) {			obj.view = view;		}		if (store != null) {			obj.store = store;		}		if (selModel != null) {			obj.selModel = selModel;		} else {			boolean bSingleSelect = true;			try {				bSingleSelect = Boolean.valueOf(singleSelect);			} catch (Exception e) {			}			if (cellSelect != null && cellSelect.equals("true")) {				CellSelectionModel rm = new CellSelectionModel();				selModel = rm;			} else if (checkboxEnabled != null && checkboxEnabled.equals("true")) {				CheckboxSelectionModel csm = new CheckboxSelectionModel();				csm.singleSelect = bSingleSelect;				columns.add(0, csm);				selModel = csm;			} else if (rowNumbererEnabled != null && rowNumbererEnabled.equals("true")) {				RowSelectionModel rsm = new RowSelectionModel();				rsm.singleSelect = bSingleSelect;				RowNumberer rn = new RowNumberer();				columns.add(0, rn);				selModel = rsm;			} else {				RowSelectionModel rsm = new RowSelectionModel();				rsm.singleSelect = bSingleSelect;				selModel = rsm;			}		}		if (columns != null && columns.size() > 0) {			obj.columns = columns;		}		if (colModel != null) {			obj.colModel = colModel;		}		if (selModel != null) {			obj.selModel = selModel;		}		if (storeId != null && store == null) {			obj.put("store", new JsVariableImpl(storeId));		}	}		@Override	protected void prepareEvents(Observable obj) {		super.prepareEvents(obj);		if (onBodyScroll != null) {			obj.listeners.put("bodyscroll", new JsFunction(onBodyScroll));		}		if (onCellClick != null) {			obj.listeners.put("cellclick", new JsFunction(onCellClick));		}		if (onCellContextMenu != null) {			obj.listeners.put("cellcontextmenu", new JsFunction(onCellContextMenu));		}		if (onCellDblClick != null) {			obj.listeners.put("celldblclick", new JsFunction(onCellDblClick));		}		if (onCellMouseDown != null) {			obj.listeners.put("cellmousedown", new JsFunction(onCellMouseDown));		}		if (onClick != null) {			obj.listeners.put("click", new JsFunction(onClick));		}		if (onColumnMove != null) {			obj.listeners.put("columnmove", new JsFunction(onColumnMove));		}		if (onColumnResize != null) {			obj.listeners.put("columnresize", new JsFunction(onColumnResize));		}		if (onContextMenu != null) {			obj.listeners.put("contextmenu", new JsFunction(onContextMenu));		}		if (onDblClick != null) {			obj.listeners.put("dblClick", new JsFunction(onDblClick));		}		if (onHeaderClick != null) {			obj.listeners.put("headerclick", new JsFunction(onHeaderClick));		}		if (onHeaderContextMenu != null) {			obj.listeners.put("headercontextmenu", new JsFunction(onHeaderContextMenu));		}		if (onHeaderDblClick != null) {			obj.listeners.put("headerdblclick", new JsFunction(onHeaderDblClick));		}		if (onHeaderMouseDown != null) {			obj.listeners.put("headermousedown", new JsFunction(onHeaderMouseDown));		}		if (onKeyDown != null) {			obj.listeners.put("keydown", new JsFunction(onKeyDown));		}		if (onKeyPress != null) {			obj.listeners.put("keypress", new JsFunction(onKeyPress));		}		if (onMouseDown != null) {			obj.listeners.put("mousedown", new JsFunction(onMouseDown));		}		if (onMouseOut != null) {			obj.listeners.put("mouseout", new JsFunction(onMouseOut));		}		if (onMouseOver != null) {			obj.listeners.put("mouseover", new JsFunction(onMouseOver));		}		if (onMouseUp != null) {			obj.listeners.put("mouseup", new JsFunction(onMouseUp));		}		if (onRowClick != null) {			obj.listeners.put("rowclick", new JsFunction(onRowClick));		}		if (onRowContextMenu != null) {			obj.listeners.put("rowcontextmenu", new JsFunction(onRowContextMenu));		}		if (onRowDblClick != null) {			obj.listeners.put("rowdblclick", new JsFunction(onRowDblClick));		}		if (onRowMouseDown != null) {			obj.listeners.put("rowmousedown", new JsFunction(onRowMouseDown));		}		if (onSortChange != null) {			obj.listeners.put("sortchange", new JsFunction(onSortChange));		}	}		/**	 * 	 * The id of a column in this grid that should expand to fill unused space.	 * This id can not	 * 	 * be 0.	 */	public void setAutoExpandColumn(String autoExpandColumn) {		this.autoExpandColumn = autoExpandColumn;	}		/**	 * 	 * The maximum width the autoExpandColumn can have (if enabled). Defaults to	 * 1000.	 */	public void setAutoExpandMax(String autoExpandMax) {		this.autoExpandMax = autoExpandMax;	}		/**	 * 	 * The minimum width the autoExpandColumn can have (if enabled). defaults to	 * 50.	 */	public void setAutoExpandMin(String autoExpandMin) {		this.autoExpandMin = autoExpandMin;	}		/**	 * 	 * True to disable selections in the grid (defaults to false). - ignored a	 * SelectionModel is	 * 	 * specified	 */	public void setDisableSelection(String disableSelection) {		this.disableSelection = disableSelection;	}		/**	 * 	 * True to enable hiding of columns with the header context menu.	 */	public void setEnableColumnHide(String enableColumnHide) {		this.enableColumnHide = enableColumnHide;	}		/**	 * 	 * True to enable drag and drop reorder of columns.	 */	public void setEnableColumnMove(String enableColumnMove) {		this.enableColumnMove = enableColumnMove;	}		/**	 * 	 * False to turn off column resizing for the whole grid (defaults to true).	 */	public void setEnableColumnResize(String enableColumnResize) {		this.enableColumnResize = enableColumnResize;	}		/**	 * 	 * True to enable drag and drop of rows.	 */	public void setEnableDragDrop(String enableDragDrop) {		this.enableDragDrop = enableDragDrop;	}		/**	 * 	 * True to enable the drop down button for menu in the headers.	 */	public void setEnableHdMenu(String enableHdMenu) {		this.enableHdMenu = enableHdMenu;	}		/**	 * 	 * An Ext.LoadMask config or true to mask the grid while loading (defaults	 * to false).	 */	public void setLoadMask(String loadMask) {		this.loadMask = loadMask;	}		/**	 * 	 * Sets the maximum height of the grid - ignored if autoHeight is not on.	 */	public void setMaxHeight(String maxHeight) {		this.maxHeight = maxHeight;	}		/**	 * 	 * The minimum width a column can be resized to. Defaults to 25.	 */	public void setMinColumnWidth(String minColumnWidth) {		this.minColumnWidth = minColumnWidth;	}		/**	 * 	 * True to autoSize the grid when the window resizes. Defaults to true.	 */	public void setMonitorWindowResize(String monitorWindowResize) {		this.monitorWindowResize = monitorWindowResize;	}		/**	 * 	 * True to stripe the rows. Default is false.	 */	public void setStripeRows(String stripeRows) {		this.stripeRows = stripeRows;	}		/**	 * 	 * True to highlight rows when the mouse is over. Default is true.	 */	public void setTrackMouseOver(String trackMouseOver) {		this.trackMouseOver = trackMouseOver;	}		/**	 * 	 * A config object that will be applied to the grid's UI view. Any of the	 * config	 * 	 * options available for Ext.grid.GridView can be specified here.	 */	public void setViewConfig(JsObject viewConfig) {		this.viewConfig = viewConfig;	}		/**	 * 	 * The Ext.grid.GridView used by the grid. This can be set before a call to	 * render().	 */	public void setView(GridView view) {		this.view = view;	}		/**	 * 	 * The Ext.grid.ColumnModel to use when rendering the grid (required).	 */	public void setColModel(ColumnModel colModel) {		this.colModel = colModel;	}		/**	 * 	 * Any subclass of AbstractSelectionModel that will provide the selection	 * 	 * model for the grid (defaults to Ext.grid.RowSelectionModel if not	 * specified).	 */	public void setSelModel(AbstractSelectionModel selModel) {		this.selModel = selModel;	}		/**	 * 	 * <strong>Required</strong>The Ext.data.Store the grid should use as its	 * data source.	 */	public void setStore(Store store) {		this.store = store;	}		/**	 * 	 * <p>	 * Fires when the body element is scrolled	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>scrollLeft</strong> : Number</li>	 * 	 * <li><strong>scrollTop</strong> : Number</li>	 * 	 * </ul>	 * 	 * @param onBodyScroll	 */	public void setOnBodyScroll(String onBodyScroll) {		this.onBodyScroll = onBodyScroll;	}		/**	 * 	 * <p>	 * Fires when a cell is clicked. The data for the cell is drawn from the	 * Record for this row.	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>this</strong> : Grid</li>	 * 	 * <li><strong>rowIndex</strong> : Number</li>	 * 	 * <li><strong>columnIndex</strong> : Number</li>	 * 	 * <li><strong>e</strong> : Ext.EventObject</li>	 * 	 * </ul>	 * 	 * @param onCellClick	 */	public void setOnCellClick(String onCellClick) {		this.onCellClick = onCellClick;	}		/**	 * 	 * <p>	 * Fires when a cell is right clicked	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>this</strong> : Grid</li>	 * 	 * <li><strong>rowIndex</strong> : Number</li>	 * 	 * <li><strong>cellIndex</strong> : Number</li>	 * 	 * <li><strong>e</strong> : Ext.EventObject</li>	 * 	 * </ul>	 * 	 * @param onCellContextMenu	 */	public void setOnCellContextMenu(String onCellContextMenu) {		this.onCellContextMenu = onCellContextMenu;	}		/**	 * 	 * <p>	 * Fires when a cell is double clicked	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>this</strong> : Grid</li>	 * 	 * <li><strong>rowIndex</strong> : Number</li>	 * 	 * <li><strong>columnIndex</strong> : Number</li>	 * 	 * <li><strong>e</strong> : Ext.EventObject</li>	 * 	 * </ul>	 * 	 * @param onCellDblClick	 */	public void setOnCellDblClick(String onCellDblClick) {		this.onCellDblClick = onCellDblClick;	}		/**	 * 	 * <p>	 * Fires before a cell is clicked	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>this</strong> : Grid</li>	 * 	 * <li><strong>rowIndex</strong> : Number</li>	 * 	 * <li><strong>columnIndex</strong> : Number</li>	 * 	 * <li><strong>e</strong> : Ext.EventObject</li>	 * 	 * </ul>	 * 	 * @param onCellMouseDown	 */	public void setOnCellMouseDown(String onCellMouseDown) {		this.onCellMouseDown = onCellMouseDown;	}		/**	 * 	 * <p>	 * The raw click event for the entire grid.	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>e</strong> : Ext.EventObject</li>	 * 	 * </ul>	 * 	 * @param onClick	 */	public void setOnClick(String onClick) {		this.onClick = onClick;	}		/**	 * 	 * <p>	 * Fires when the user moves a column	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>oldIndex</strong> : Number</li>	 * 	 * <li><strong>newIndex</strong> : Number</li>	 * 	 * </ul>	 * 	 * @param onColumnMove	 */	public void setOnColumnMove(String onColumnMove) {		this.onColumnMove = onColumnMove;	}		/**	 * 	 * <p>	 * Fires when the user resizes a column	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>columnIndex</strong> : Number</li>	 * 	 * <li><strong>newSize</strong> : Number</li>	 * 	 * </ul>	 * 	 * @param onColumnResize	 */	public void setOnColumnResize(String onColumnResize) {		this.onColumnResize = onColumnResize;	}		/**	 * 	 * <p>	 * The raw contextmenu event for the entire grid.	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>e</strong> : Ext.EventObject</li>	 * 	 * </ul>	 * 	 * @param onContextMenu	 */	public void setOnContextMenu(String onContextMenu) {		this.onContextMenu = onContextMenu;	}		/**	 * 	 * <p>	 * The raw dblclick event for the entire grid.	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>e</strong> : Ext.EventObject</li>	 * 	 * </ul>	 * 	 * @param onDblClick	 */	public void setOnDblClick(String onDblClick) {		this.onDblClick = onDblClick;	}		/**	 * 	 * <p>	 * Fires when a header is clicked	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>this</strong> : Grid</li>	 * 	 * <li><strong>columnIndex </strong> : Number</li>	 * 	 * <li><strong>e</strong> : Ext.EventObject</li>	 * 	 * </ul>	 * 	 * @param onHeaderClick	 */	public void setOnHeaderClick(String onHeaderClick) {		this.onHeaderClick = onHeaderClick;	}		/**	 * 	 * <p>	 * Fires when a header is right clicked	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>this</strong> : Grid</li>	 * 	 * <li><strong>columnIndex </strong> : Number</li>	 * 	 * <li><strong>e</strong> : Ext.EventObject</li>	 * 	 * </ul>	 * 	 * @param onHeaderContextMenu	 */	public void setOnHeaderContextMenu(String onHeaderContextMenu) {		this.onHeaderContextMenu = onHeaderContextMenu;	}		/**	 * 	 * <p>	 * Fires when a header cell is double clicked	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>this</strong> : Grid</li>	 * 	 * <li><strong>columnIndex </strong> : Number</li>	 * 	 * <li><strong>e</strong> : Ext.EventObject</li>	 * 	 * </ul>	 * 	 * @param onHeaderDblClick	 */	public void setOnHeaderDblClick(String onHeaderDblClick) {		this.onHeaderDblClick = onHeaderDblClick;	}		/**	 * 	 * <p>	 * Fires before a header is clicked	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>this</strong> : Grid</li>	 * 	 * <li><strong>columnIndex </strong> : Number</li>	 * 	 * <li><strong>e</strong> : Ext.EventObject</li>	 * 	 * </ul>	 * 	 * @param onHeaderMouseDown	 */	public void setOnHeaderMouseDown(String onHeaderMouseDown) {		this.onHeaderMouseDown = onHeaderMouseDown;	}		/**	 * 	 * <p>	 * The raw keydown event for the entire grid.	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>e</strong> : Ext.EventObject</li>	 * 	 * </ul>	 * 	 * @param onKeyDown	 */	public void setOnKeyDown(String onKeyDown) {		this.onKeyDown = onKeyDown;	}		/**	 * 	 * <p>	 * The raw keypress event for the entire grid.	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>e</strong> : Ext.EventObject</li>	 * 	 * </ul>	 * 	 * @param onKeyPress	 */	public void setOnKeyPress(String onKeyPress) {		this.onKeyPress = onKeyPress;	}		/**	 * 	 * <p>	 * The raw mousedown event for the entire grid.	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>e</strong> : Ext.EventObject</li>	 * 	 * </ul>	 * 	 * @param onMouseDown	 */	public void setOnMouseDown(String onMouseDown) {		this.onMouseDown = onMouseDown;	}		/**	 * 	 * <p>	 * The raw mouseout event for the entire grid.	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>e</strong> : Ext.EventObject</li>	 * 	 * </ul>	 * 	 * @param onMouseOut	 */	public void setOnMouseOut(String onMouseOut) {		this.onMouseOut = onMouseOut;	}		/**	 * 	 * <p>	 * The raw mouseover event for the entire grid.	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>e</strong> : Ext.EventObject</li>	 * 	 * </ul>	 * 	 * @param onMouseOver	 */	public void setOnMouseOver(String onMouseOver) {		this.onMouseOver = onMouseOver;	}		/**	 * 	 * <p>	 * The raw mouseup event for the entire grid.	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>e</strong> : Ext.EventObject</li>	 * 	 * </ul>	 * 	 * @param onMouseUp	 */	public void setOnMouseUp(String onMouseUp) {		this.onMouseUp = onMouseUp;	}		/**	 * 	 * <p>	 * Fires when a row is clicked	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>this</strong> : Grid</li>	 * 	 * <li><strong>rowIndex</strong> : Number</li>	 * 	 * <li><strong>e</strong> : Ext.EventObject</li>	 * 	 * </ul>	 * 	 * @param onRowClick	 */	public void setOnRowClick(String onRowClick) {		this.onRowClick = onRowClick;	}		/**	 * 	 * <p>	 * Fires when a row is right clicked	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>this</strong> : Grid</li>	 * 	 * <li><strong>rowIndex</strong> : Number</li>	 * 	 * <li><strong>e</strong> : Ext.EventObject</li>	 * 	 * </ul>	 * 	 * @param onRowContextMenu	 */	public void setOnRowContextMenu(String onRowContextMenu) {		this.onRowContextMenu = onRowContextMenu;	}		/**	 * 	 * <p>	 * Fires when a row is double clicked	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>this</strong> : Grid</li>	 * 	 * <li><strong>rowIndex</strong> : Number</li>	 * 	 * <li><strong>e</strong> : Ext.EventObject</li>	 * 	 * </ul>	 * 	 * @param onRowDblClick	 */	public void setOnRowDblClick(String onRowDblClick) {		this.onRowDblClick = onRowDblClick;	}		/**	 * 	 * <p>	 * Fires before a row is clicked	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>this</strong> : Grid</li>	 * 	 * <li><strong>rowIndex</strong> : Number</li>	 * 	 * <li><strong>e</strong> : Ext.EventObject</li>	 * 	 * </ul>	 * 	 * @param onRowMouseDown	 */	public void setOnRowMouseDown(String onRowMouseDown) {		this.onRowMouseDown = onRowMouseDown;	}		/**	 * 	 * <p>	 * Fires when the grid's store sort changes	 * </p>	 * 	 * Listeners will be called with the following arguments:	 * 	 * <ul>	 * 	 * <li><strong>this</strong> : Grid</li>	 * 	 * <li><strong>sortInfo</strong> : (Object) An object with the keys field	 * and direction</li>	 * 	 * </ul>	 * 	 * @param onSortChange	 */	public void setOnSortChange(String onSortChange) {		this.onSortChange = onSortChange;	}		/**	 * 	 * True to auto expand the columns to fit the grid when the grid is created.	 */	public void setAutoFill(String autoFill) {		this.autoFill = autoFill;	}		/**	 * 	 * Default text to display in the grid body when no rows are available	 * (defaults to '').	 */	public void setEmptyText(String emptyText) {		this.emptyText = emptyText;	}		/**	 * 	 * True to add a second TR element per row that can be used to provide a row	 * body that spans beneath	 * 	 * the data row. Use the getRowClass method's rowParams config to customize	 * the row body.	 */	public void setEnableRowBody(String enableRowBody) {		this.enableRowBody = enableRowBody;	}		/**	 * 	 * True to auto expand/contract the size of the columns to fit the grid	 * width and prevent horizontal scrolling.	 */	public void setForceFit(String forceFit) {		this.forceFit = forceFit;	}		public JsArray getColumns() {		if (columns == null) {			columns = new JsArray();		}		return columns;	}		/**	 * 	 * An array of columns to auto create a ColumnModel	 */	public void setColumns(JsArray columns) {		this.columns = columns;	}		/**	 * 	 * Boolean. If set to true, the selection model will be CellSelectionModel	 * and the mouse pointer	 * 	 * will start selecting by cells.	 * 	 * 	 * 	 * @param cellSelect	 */	public void setCellSelect(String cellSelect) {		this.cellSelect = cellSelect;	}		/**	 * 	 * Boolean. If set to true, a column containing checkboxes will be	 * automatically added to the	 * 	 * leftmost side of columns. You can get which items are selected in grid by	 * getSelected method.	 * 	 * 	 * 	 * @param checkboxEnabled	 */	public void setCheckboxEnabled(String checkboxEnabled) {		this.checkboxEnabled = checkboxEnabled;	}		/**	 * 	 * Boolean. If set to true, a column containing auto incrementing numbers	 * will be automatically added	 * 	 * to the leftmost side of columns.	 * 	 * 	 * 	 * @param rowNumbererEnabled	 */	public void setRowNumbererEnabled(String rowNumbererEnabled) {		this.rowNumbererEnabled = rowNumbererEnabled;	}		/**	 * 	 * Boolean. If set to true only one row at a time can be selected.	 * 	 * 	 * 	 * @param singleSelect	 */	public void setSingleSelect(String singleSelect) {		this.singleSelect = singleSelect;	}		public void setStoreId(String storeId) {		this.storeId = storeId;	}}
package isola.tags.base;import isola.model.core.JsObject;import isola.model.ext.container.Panel;import isola.model.ext.form.Button;import isola.model.ext.form.Field;import isola.model.ext.form.Radio;import isola.model.ext.grid.GridPanel;import isola.model.ext.menu.BaseItem;import isola.model.ext.menu.CheckItem;import isola.model.ext.menu.Menu;import isola.model.ext.menu.TextItem;import isola.model.ext.toolbar.Toolbar;import isola.model.ext.toolbar.ToolbarButton;import isola.model.ext.toolbar.ToolbarFill;import isola.model.ext.toolbar.ToolbarItem;import isola.model.ext.toolbar.ToolbarSpacer;import isola.model.ext.toolbar.ToolbarSplitButton;import isola.model.ext.toolbar.ToolbarTextItem;import isola.model.ext.tree.AsyncTreeNode;import isola.model.ext.tree.TreeLoader;import isola.model.ext.tree.TreeNode;import isola.model.ext.window.WindowGroup;import isola.tags.ext.base.ContainerTag;import isola.tags.ext.container.PanelTag;import isola.tags.ext.form.ButtonTag;import isola.tags.ext.form.CycleButtonTag;import isola.tags.ext.form.FieldSetTag;import isola.tags.ext.form.LovFieldTag;import isola.tags.ext.form.RadioGroupTag;import isola.tags.ext.grid.GridColumnTag;import isola.tags.ext.layout.AccordionTag;import isola.tags.ext.layout.TableLayoutTag;import isola.tags.ext.menu.ItemTag;import isola.tags.ext.menu.MenuTag;import isola.tags.ext.toolbar.ToolbarTag;import isola.tags.ext.tree.AsyncTreeNodeTag;import isola.tags.ext.tree.TreePanelTag;import isola.tags.ext.window.WindowTag;import javax.servlet.jsp.tagext.BodyTagSupport;/** *  * All Tags classes extend this Class. This is a Tag Library with BodyContent * support. *  * This class represents for Isola framework what java.lang.Object for any java * class. *  *  *  * @author Umut Gokbayrak */public abstract class BaseTag extends BodyTagSupport {	private static final long serialVersionUID = -2189535351957331136L;	protected static final String templatePath = "/templates";		/**	 * 	 * Abstract method that must be overriden by any Tag Library	 */	protected abstract void clear();		/**	 * 	 * Base output generator and tag appender method. All tags use it to	 * generate the output or	 * 	 * some inner tags use it to append its output to another tag. Should not be	 * used directly,	 * 	 * only needed by Tag Developers.	 * 	 * 	 * 	 * @param obj	 */	protected void printOut(JsObject obj) {		try {			if (obj instanceof TextItem && getParent() instanceof MenuTag) {				MenuTag par = (MenuTag) getParent();				TextItem ci = (TextItem) obj;				ci.setPrintWithNoTags(true);				par.getItems().add(ci);			} else if (obj instanceof BaseItem && getParent() instanceof MenuTag) {				MenuTag par = (MenuTag) getParent();				par.getItems().add(obj);			} else if (obj instanceof Menu && getParent() instanceof MenuTag) {				MenuTag par = (MenuTag) getParent();				par.getItems().add(obj);			} else if (obj instanceof Menu && getParent() instanceof ItemTag) {				ItemTag par = (ItemTag) getParent();				par.setMenu((Menu) obj);			} else if (obj instanceof Menu && getParent() instanceof ButtonTag) {				ButtonTag par = (ButtonTag) getParent();				par.setMenu((Menu) obj);			} else if (obj instanceof CheckItem && getParent() instanceof CycleButtonTag) {				CycleButtonTag par = (CycleButtonTag) getParent();				CheckItem ci = (CheckItem) obj;				ci.setPrintWithNoTags(true);				par.getItems().add(ci);			} else if (obj instanceof Field && getParent() instanceof GridColumnTag) {				GridColumnTag par = (GridColumnTag) getParent();				par.setEditor((Field) obj);			} else if (obj instanceof Button && getParent() instanceof PanelTag) {				PanelTag par = (PanelTag) getParent();				par.getButtons().add(obj);			} else if (obj instanceof ToolbarButton && getParent() instanceof ToolbarTag) {				ToolbarTag par = (ToolbarTag) getParent();				par.getItems().add(obj);			} else if (obj instanceof ToolbarItem && getParent() instanceof ToolbarTag) {				ToolbarTag par = (ToolbarTag) getParent();				par.getItems().add(obj);			} else if (obj instanceof ToolbarSpacer && getParent() instanceof ToolbarTag) {				ToolbarTag par = (ToolbarTag) getParent();				par.getItems().add(obj);			} else if (obj instanceof ToolbarFill && getParent() instanceof ToolbarTag) {				ToolbarTag par = (ToolbarTag) getParent();				par.getItems().add(obj);			} else if (obj instanceof ToolbarSplitButton && getParent() instanceof ToolbarTag) {				ToolbarTag par = (ToolbarTag) getParent();				par.getItems().add(obj);			} else if (obj instanceof ToolbarTextItem && getParent() instanceof ToolbarTag) {				ToolbarTag par = (ToolbarTag) getParent();				par.getItems().add(obj);			} else if (obj instanceof Panel && getParent() instanceof AccordionTag) {				AccordionTag par = (AccordionTag) getParent();				Panel ci = (Panel) obj;				ci.setPrintWithNoTags(true);				par.getItems().add(ci);			} else if (obj instanceof Panel && getParent() instanceof TableLayoutTag) {				TableLayoutTag par = (TableLayoutTag) getParent();				Panel ci = (Panel) obj;				ci.setPrintWithNoTags(true);				par.getItems().add(ci);			} else if (obj instanceof TreeLoader && getParent() instanceof TreePanelTag) {				TreePanelTag par = (TreePanelTag) getParent();				par.setLoader((TreeLoader) obj);			} else if (obj instanceof TreeNode && getParent() instanceof TreePanelTag) {				TreePanelTag par = (TreePanelTag) getParent();				par.setRoot((TreeNode) obj);			} else if (obj instanceof TreeLoader && getParent() instanceof AsyncTreeNodeTag) {				AsyncTreeNodeTag par = (AsyncTreeNodeTag) getParent();				par.setLoader((TreeLoader) obj);			} else if (obj instanceof AsyncTreeNode && getParent() instanceof TreePanelTag) {				TreePanelTag par = (TreePanelTag) getParent();				par.setRoot((AsyncTreeNode) obj);			} else if (obj instanceof WindowGroup && getParent() instanceof WindowTag) {				WindowTag par = (WindowTag) getParent();				par.setManager((WindowGroup) obj);			} else if (obj instanceof Radio && getParent() instanceof RadioGroupTag) {				RadioGroupTag par = (RadioGroupTag) getParent();				par.getRadios().add(obj);			} else if (obj instanceof Field && getParent() instanceof FieldSetTag) {				FieldSetTag par = (FieldSetTag) getParent();				par.getItems().add(obj);			} else if (obj instanceof Toolbar && getParent() instanceof PanelTag) {				PanelTag par = (PanelTag) getParent();				Toolbar tb = (Toolbar) obj;				if (tb.getPosition() != null && tb.getPosition().equals("bottom")) {					par.setBbar(tb);				} else {					par.setTbar(tb);				}			} else if (obj instanceof GridPanel && getParent() instanceof LovFieldTag) {				LovFieldTag par = (LovFieldTag) getParent();				GridPanel gp = (GridPanel) obj;				par.setView(gp);			} else if (getParent() instanceof ContainerTag) {				ContainerTag par = (ContainerTag) getParent();				par.getItems().add(obj);			} else {				pageContext.getOut().write(obj.toString() + ";");			}		} catch (Exception e) {			e.printStackTrace();		} finally {			obj = null;			clear();		}	}}
package isola.tags.js.base;import java.util.HashMap;import java.util.Map;import javax.servlet.jsp.JspException;import javax.servlet.jsp.tagext.BodyContent;import isola.helpers.TemplateHelper;import isola.tags.base.BaseTag;/** * Simple Tag equivalent to a Javascript Function definition. * @author Umut Gokbayrak */public class FunctionTag extends BaseTag {	private static final long serialVersionUID = -6855342638363819816L;	private String name;	private String isLocal = "true";	private String params;	private String isAnonymous = "false";		@Override	protected void clear() {		name = null;		isLocal = null;		params = null;	}		@Override	public int doEndTag() throws JspException {		BodyContent body = getBodyContent();		if (body != null) {			String content = body.getString();			boolean bLocal = true;			try {				bLocal = Boolean.valueOf(isLocal);			} catch (Exception e) {			}			boolean bAnonymous = false;			try {				bAnonymous = Boolean.valueOf(isAnonymous);			} catch (Exception e) {			}			Map<String, Object> dataMap = new HashMap<String, Object>();			dataMap.put("isLocal", bLocal);			dataMap.put("isAnonymous", bAnonymous);			dataMap.put("name", name);			if (params == null) {				params = "";			}			dataMap.put("params", params);			dataMap.put("functionBody", content);			TemplateHelper merger = new TemplateHelper("/templates/js/jsFunction.ftl", dataMap);			try {				String js = merger.merge();				pageContext.getOut().write(js);			} catch (Exception e) {			}		}		return EVAL_PAGE;	}		/**	 * Name of the Javascript function. This is a required field.	 * @param name	 */	public void setName(String name) {		this.name = name;	}		public void setIsLocal(String isLocal) {		this.isLocal = isLocal;	}		public void setParams(String params) {		this.params = params;	}		public void setIsAnonymous(String isAnonymous) {		this.isAnonymous = isAnonymous;	}}
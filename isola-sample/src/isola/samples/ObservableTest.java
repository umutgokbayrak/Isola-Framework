package isola.samples;import junit.framework.TestCase;import isola.model.core.JsFunction;import isola.model.core.JsObject;import isola.model.ext.base.Observable;public class ObservableTest extends TestCase {	public void testGetListeners() {		Observable o = new Observable();		JsObject listeners = new JsObject();		JsObject listener1 = new JsObject();		listener1.put("single", true);		listener1.put("delay", 100);		listener1.put("scope", "this");		listener1.put("fn", new JsFunction(JsFunction.FUNCTION, "this.onClick"));		listeners.put("click", listener1);		JsObject listener2 = new JsObject();		listener2.put("single", true);		listener2.put("delay", 100);		listener2.put("scope", "this");		listener2.put("fn", new JsFunction(JsFunction.FUNCTION, "this.onFocus"));		listeners.put("focus", listener2);		o.setListeners(listeners);		JsObject l = o.getListeners();		assertNotNull(l.get("click"));		assertNotNull(((JsObject) l.get("click")).get("fn"));	}		public void testSetListeners() {		testGetListeners();	}		public void testAddListener() {		Observable o = new Observable();		JsObject listeners = new JsObject();		JsObject listener1 = new JsObject();		listener1.put("single", true);		listener1.put("delay", 100);		listener1.put("scope", "this");		listener1.put("fn", new JsFunction(JsFunction.FUNCTION, "this.onClick"));		listeners.put("click", listener1);		JsObject listener2 = new JsObject();		listener2.put("single", true);		listener2.put("delay", 100);		listener2.put("scope", "this");		listener2.put("fn", new JsFunction(JsFunction.FUNCTION, "this.onFocus"));		listeners.put("focus", listener2);		o.setListeners(listeners);		o.addListener("ondblclick", new JsFunction(JsFunction.FUNCTION, "this.onDblClick"), null, null);		JsObject l = o.getListeners();		assertNotNull(l.get("dblclick"));		assertNotNull(((JsObject) l.get("dblclick")).get("fn"));		assertEquals(((JsObject) l.get("dblclick")).get("fn"), "this.onDblClick");	}		public void testPurgeListeners() {		Observable o = new Observable();		JsObject listeners = new JsObject();		JsObject listener1 = new JsObject();		listener1.put("single", true);		listener1.put("delay", 100);		listener1.put("scope", "this");		listener1.put("fn", new JsFunction(JsFunction.FUNCTION, "this.onClick"));		listeners.put("click", listener1);		JsObject listener2 = new JsObject();		listener2.put("single", true);		listener2.put("delay", 100);		listener2.put("scope", "this");		listener2.put("fn", new JsFunction(JsFunction.FUNCTION, "this.onFocus"));		listeners.put("focus", listener2);		o.setListeners(listeners);		o.purgeListeners();		JsObject l = o.getListeners();		assertNull(l);	}		public void testRemoveListener() {		Observable o = new Observable();		JsObject listeners = new JsObject();		JsObject listener1 = new JsObject();		listener1.put("single", true);		listener1.put("delay", 100);		listener1.put("scope", "this");		listener1.put("fn", new JsFunction(JsFunction.FUNCTION, "this.onClick"));		listeners.put("click", listener1);		JsObject listener2 = new JsObject();		listener2.put("single", true);		listener2.put("delay", 100);		listener2.put("scope", "this");		listener2.put("fn", new JsFunction(JsFunction.FUNCTION, "this.onFocus"));		listeners.put("focus", listener2);		o.setListeners(listeners);		o.removeListener("onfocus");		JsObject l = o.getListeners();		assertNull(l.get("focus"));	}}